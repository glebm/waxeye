var $__runtime_47_core_47_raw_95_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/raw_hashing.js";
  function hash(o) {
    if (o === null)
      return 0;
    switch ((typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o))) {
      case 'number':
        return hashNumber(o);
      case 'string':
        return hashString(o);
      case 'boolean':
        return o ? 1 : -1;
      case 'undefined':
        return 0;
      case 'object':
      case 'function':
        return hashObjectIdentity(o);
      default:
        return hashString(o.toString());
    }
  }
  function hashString(s) {
    var h = 0;
    var n = s.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + s.charCodeAt(i));
    }
    return h;
  }
  var kBuf = new ArrayBuffer(8);
  var kBufAsF64 = new Float64Array(kBuf);
  var kBufAsI32 = new Int32Array(kBuf);
  function hashNumber(n) {
    if (~~n === n) {
      return ~~n;
    }
    kBufAsF64[0] = n;
    return kBufAsI32[0] ^ kBufAsI32[1];
  }
  var objectIds = new WeakMap();
  var currentId = 0;
  function hashObjectIdentity(o) {
    var result = objectIds.get(o);
    if (result === undefined) {
      currentId = ~~(currentId + 1);
      objectIds.set(o, currentId);
      return currentId;
    }
    return result;
  }
  function hashIntArray(a) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + a[i]);
    }
    return h;
  }
  function hashArray(a, valueToIntFn) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + valueToIntFn(a[i]));
    }
    return h;
  }
  return {
    get hash() {
      return hash;
    },
    get hashString() {
      return hashString;
    },
    get hashNumber() {
      return hashNumber;
    },
    get hashObjectIdentity() {
      return hashObjectIdentity;
    },
    get hashIntArray() {
      return hashIntArray;
    },
    get hashArray() {
      return hashArray;
    }
  };
})();
var $__runtime_47_core_47_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/primitive.js";
  var hashString = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashString;
  var Primitive = function() {
    function Primitive() {}
    return ($traceurRuntime.createClass)(Primitive, {hashForEqual: function() {
        return hashString(this.toString());
      }}, {});
  }();
  function check(v) {
    return (v instanceof Primitive);
  }
  return {
    get Primitive() {
      return Primitive;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mini_native_output_string_port.js";
  var MiniNativeOutputStringPort = function() {
    function MiniNativeOutputStringPort() {
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(MiniNativeOutputStringPort, {
      consume: function(nativeString) {
        this._buffer.push(nativeString);
      },
      getOutputString: function() {
        return this._buffer.join('');
      }
    }, {});
  }();
  return {get MiniNativeOutputStringPort() {
      return MiniNativeOutputStringPort;
    }};
})();
var $__runtime_47_core_47_bytes_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/bytes.js";
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextDecoder = (typeof window === 'undefined') ? require('util').TextDecoder : window.TextDecoder;
  function check(bs) {
    return (typeof bs === 'undefined' ? 'undefined' : $traceurRuntime.typeof(bs)) === 'object' && bs !== null && bs.constructor === Uint8Array;
  }
  function eq(a, b) {
    if (a.length !== b.length)
      return false;
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function fromIntArray(ints) {
    return new Uint8Array(ints);
  }
  var utf8Decoder = new TextDecoder('utf-8');
  function toString(bytes) {
    return utf8Decoder.decode(bytes);
  }
  function displayNativeString(out, bytes) {
    out.consume(toString(bytes));
  }
  function hashForEqual(bytes) {
    return hashIntArray(bytes);
  }
  return {
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get fromIntArray() {
      return fromIntArray;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_char_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/char.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Char = function($__super) {
    function Char(codepoint, nativeString) {
      $traceurRuntime.superConstructor(Char).call(this);
      this.codepoint = codepoint;
      this._nativeString = nativeString;
    }
    return ($traceurRuntime.createClass)(Char, {
      equals: function(v) {
        return check(v) && eq(this, v);
      },
      isImmutable: function() {
        return true;
      },
      valueOf: function() {
        return this.codepoint;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = String.fromCodePoint(this.codepoint);
        }
        return this._nativeString;
      },
      hashForEqual: function() {
        return this.codepoint;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      writeNativeString: function(out) {
        var c = this.codepoint;
        switch (c) {
          case 0:
            out.consume('#\\nul');
            break;
          case 8:
            out.consume('#\\backspace');
            break;
          case 9:
            out.consume('#\\tab');
            break;
          case 10:
            out.consume('#\\newline');
            break;
          case 11:
            out.consume('#\\vtab');
            break;
          case 12:
            out.consume('#\\page');
            break;
          case 13:
            out.consume('#\\return');
            break;
          case 32:
            out.consume('#\\space');
            break;
          case 127:
            out.consume('#\\rubout');
            break;
          default:
            if (isGraphicCodepoint(c)) {
              out.consume(("#\\" + this.toString()));
            } else {
              out.consume(c > 0xFFFF ? ("#\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("#\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
            }
        }
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      }
    }, {}, $__super);
  }(Primitive);
  var INTERN_CACHE_SIZE = 256;
  var internedCache = new Array(INTERN_CACHE_SIZE);
  function charFromCodepoint(codepoint) {
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, null);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, null);
  }
  function charFromNativeString(s) {
    var codepoint = s.codePointAt(0);
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, s);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, s);
  }
  function check(char) {
    return (typeof char === 'undefined' ? 'undefined' : $traceurRuntime.typeof(char)) === 'object' && char !== null && char.constructor === Char;
  }
  function eq(a, b) {
    return a.codepoint === b.codepoint;
  }
  function charToInteger(c) {
    return c.codepoint;
  }
  function integerToChar(k) {
    return charFromCodepoint(k);
  }
  function charUtf8Length(c) {
    var cp = c.codepoint;
    if (cp < 0x80) {
      return 1;
    } else if (cp < 0x800) {
      return 2;
    } else if (cp < 0x10000) {
      return 3;
    } else if (cp < 0x200000) {
      return 4;
    } else if (cp < 0x4000000) {
      return 5;
    }
    return 6;
  }
  function isGraphicCodepoint(c) {
    return (c > 32 && c < 127 || (c > 160 && c < 896 && !(c === 173 || c > 887 && c < 890)) || (c > 899 && c < 1480 && !(c === 1328 || c > 1366 && c < 1369 || c === 1376 || c === 1416 || c > 1418 && c < 1421 || c === 1424 || (c > 906 && c < 910 && c !== 908) || c === 930)) || c > 1487 && c < 1515 || c > 1519 && c < 1525 || (c > 1541 && c < 1970 && !(c > 1563 && c < 1566 || c === 1757 || c > 1805 && c < 1808 || c > 1866 && c < 1869)) || c > 1983 && c < 2043);
  }
  function isBlankCodepoint(c) {
    return (c === 9 || c === 32 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c === 8239 || c === 8287 || c === 12288);
  }
  function isWhitespaceCodepoint(c) {
    return (c > 8 && c < 14 || c === 32 || c === 133 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c > 8231 && c < 8234 || c === 8239 || c === 8287 || c === 12288);
  }
  return {
    get Char() {
      return Char;
    },
    get charFromCodepoint() {
      return charFromCodepoint;
    },
    get charFromNativeString() {
      return charFromNativeString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get charToInteger() {
      return charToInteger;
    },
    get integerToChar() {
      return integerToChar;
    },
    get charUtf8Length() {
      return charUtf8Length;
    },
    get isGraphicCodepoint() {
      return isGraphicCodepoint;
    },
    get isBlankCodepoint() {
      return isBlankCodepoint;
    },
    get isWhitespaceCodepoint() {
      return isWhitespaceCodepoint;
    }
  };
})();
var $__runtime_47_third_45_party_47_hamt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/third-party/hamt.js";
  var _typeof = typeof Symbol === "function" && $traceurRuntime.typeof(Symbol.iterator) === "symbol" ? function(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  };
  var hamt = {};
  var SIZE = 5;
  var BUCKET_SIZE = Math.pow(2, SIZE);
  var MASK = BUCKET_SIZE - 1;
  var MAX_INDEX_NODE = BUCKET_SIZE / 2;
  var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
  var nothing = {};
  var constant = function constant(x) {
    return function() {
      return x;
    };
  };
  var hash = hamt.hash = function(str) {
    var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);
    if (type === 'number')
      return str;
    if (type !== 'string')
      str += '';
    var hash = 0;
    for (var i = 0,
        len = str.length; i < len; ++i) {
      var c = str.charCodeAt(i);
      hash = (hash << 5) - hash + c | 0;
    }
    return hash;
  };
  var popcount = function popcount(x) {
    x -= x >> 1 & 0x55555555;
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x += x >> 8;
    x += x >> 16;
    return x & 0x7f;
  };
  var hashFragment = function hashFragment(shift, h) {
    return h >>> shift & MASK;
  };
  var toBitmap = function toBitmap(x) {
    return 1 << x;
  };
  var fromBitmap = function fromBitmap(bitmap, bit) {
    return popcount(bitmap & bit - 1);
  };
  var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {
    var out = arr;
    if (!mutate) {
      var len = arr.length;
      out = new Array(len);
      for (var i = 0; i < len; ++i) {
        out[i] = arr[i];
      }
    }
    out[at] = v;
    return out;
  };
  var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {
    var newLen = arr.length - 1;
    var i = 0;
    var g = 0;
    var out = arr;
    if (mutate) {
      i = g = at;
    } else {
      out = new Array(newLen);
      while (i < at) {
        out[g++] = arr[i++];
      }
    }
    ++i;
    while (i <= newLen) {
      out[g++] = arr[i++];
    }
    if (mutate) {
      out.length = newLen;
    }
    return out;
  };
  var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {
    var len = arr.length;
    if (mutate) {
      var _i = len;
      while (_i >= at) {
        arr[_i--] = arr[_i];
      }
      arr[at] = v;
      return arr;
    }
    var i = 0,
        g = 0;
    var out = new Array(len + 1);
    while (i < at) {
      out[g++] = arr[i++];
    }
    out[at] = v;
    while (i < len) {
      out[++g] = arr[i++];
    }
    return out;
  };
  var LEAF = 1;
  var COLLISION = 2;
  var INDEX = 3;
  var ARRAY = 4;
  var empty = {__hamt_isEmpty: true};
  var isEmptyNode = function isEmptyNode(x) {
    return x === empty || x && x.__hamt_isEmpty;
  };
  var Leaf = function Leaf(edit, hash, key, value) {
    return {
      type: LEAF,
      edit: edit,
      hash: hash,
      key: key,
      value: value,
      _modify: Leaf__modify
    };
  };
  var Collision = function Collision(edit, hash, children) {
    return {
      type: COLLISION,
      edit: edit,
      hash: hash,
      children: children,
      _modify: Collision__modify
    };
  };
  var IndexedNode = function IndexedNode(edit, mask, children) {
    return {
      type: INDEX,
      edit: edit,
      mask: mask,
      children: children,
      _modify: IndexedNode__modify
    };
  };
  var ArrayNode = function ArrayNode(edit, size, children) {
    return {
      type: ARRAY,
      edit: edit,
      size: size,
      children: children,
      _modify: ArrayNode__modify
    };
  };
  var isLeaf = function isLeaf(node) {
    return node === empty || node.type === LEAF || node.type === COLLISION;
  };
  var expand = function expand(edit, frag, child, bitmap, subNodes) {
    var arr = [];
    var bit = bitmap;
    var count = 0;
    for (var i = 0; bit; ++i) {
      if (bit & 1)
        arr[i] = subNodes[count++];
      bit >>>= 1;
    }
    arr[frag] = child;
    return ArrayNode(edit, count + 1, arr);
  };
  var pack = function pack(edit, count, removed, elements) {
    var children = new Array(count - 1);
    var g = 0;
    var bitmap = 0;
    for (var i = 0,
        len = elements.length; i < len; ++i) {
      if (i !== removed) {
        var elem = elements[i];
        if (elem && !isEmptyNode(elem)) {
          children[g++] = elem;
          bitmap |= 1 << i;
        }
      }
    }
    return IndexedNode(edit, bitmap, children);
  };
  var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {
    if (h1 === h2)
      return Collision(edit, h1, [n2, n1]);
    var subH1 = hashFragment(shift, h1);
    var subH2 = hashFragment(shift, h2);
    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
  };
  var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {
    var len = list.length;
    for (var i = 0; i < len; ++i) {
      var child = list[i];
      if (keyEq(k, child.key)) {
        var value = child.value;
        var _newValue = f(value);
        if (_newValue === value)
          return list;
        if (_newValue === nothing) {
          --size.value;
          return arraySpliceOut(mutate, i, list);
        }
        return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);
      }
    }
    var newValue = f();
    if (newValue === nothing)
      return list;
    ++size.value;
    return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);
  };
  var canEditNode = function canEditNode(edit, node) {
    return edit === node.edit;
  };
  var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {
    if (keyEq(k, this.key)) {
      var _v = f(this.value);
      if (_v === this.value)
        return this;
      else if (_v === nothing) {
        --size.value;
        return empty;
      }
      if (canEditNode(edit, this)) {
        this.value = _v;
        return this;
      }
      return Leaf(edit, h, k, _v);
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {
    if (h === this.hash) {
      var canEdit = canEditNode(edit, this);
      var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
      if (list === this.children)
        return this;
      return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {
    var mask = this.mask;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var bit = toBitmap(frag);
    var indx = fromBitmap(mask, bit);
    var exists = mask & bit;
    var current = exists ? children[indx] : empty;
    var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (current === child)
      return this;
    var canEdit = canEditNode(edit, this);
    var bitmap = mask;
    var newChildren = void 0;
    if (exists && isEmptyNode(child)) {
      bitmap &= ~bit;
      if (!bitmap)
        return empty;
      if (children.length <= 2 && isLeaf(children[indx ^ 1]))
        return children[indx ^ 1];
      newChildren = arraySpliceOut(canEdit, indx, children);
    } else if (!exists && !isEmptyNode(child)) {
      if (children.length >= MAX_INDEX_NODE)
        return expand(edit, frag, child, mask, children);
      bitmap |= bit;
      newChildren = arraySpliceIn(canEdit, indx, child, children);
    } else {
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return IndexedNode(edit, bitmap, newChildren);
  };
  var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {
    var count = this.size;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var child = children[frag];
    var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (child === newChild)
      return this;
    var canEdit = canEditNode(edit, this);
    var newChildren = void 0;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      --count;
      if (count <= MIN_ARRAY_NODE)
        return pack(edit, count, frag, children);
      newChildren = arrayUpdate(canEdit, frag, empty, children);
    } else {
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return ArrayNode(edit, count, newChildren);
  };
  empty._modify = function(edit, keyEq, shift, f, h, k, size) {
    var v = f();
    if (v === nothing)
      return empty;
    ++size.value;
    return Leaf(edit, h, k, v);
  };
  function Map(editable, edit, config, root, size) {
    this._editable = editable;
    this._edit = edit;
    this._config = config;
    this._root = root;
    this._size = size;
  }
  ;
  Map.prototype.setTree = function(newRoot, newSize) {
    if (this._editable) {
      this._root = newRoot;
      this._size = newSize;
      return this;
    }
    return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);
  };
  var tryGetHash = hamt.tryGetHash = function(alt, hash, key, map) {
    var node = map._root;
    var shift = 0;
    var keyEq = map._config.keyEq;
    while (true) {
      switch (node.type) {
        case LEAF:
          {
            return keyEq(key, node.key) ? node.value : alt;
          }
        case COLLISION:
          {
            if (hash === node.hash) {
              var children = node.children;
              for (var i = 0,
                  len = children.length; i < len; ++i) {
                var child = children[i];
                if (keyEq(key, child.key))
                  return child.value;
              }
            }
            return alt;
          }
        case INDEX:
          {
            var frag = hashFragment(shift, hash);
            var bit = toBitmap(frag);
            if (node.mask & bit) {
              node = node.children[fromBitmap(node.mask, bit)];
              shift += SIZE;
              break;
            }
            return alt;
          }
        case ARRAY:
          {
            node = node.children[hashFragment(shift, hash)];
            if (node) {
              shift += SIZE;
              break;
            }
            return alt;
          }
        default:
          return alt;
      }
    }
  };
  Map.prototype.tryGetHash = function(alt, hash, key) {
    return tryGetHash(alt, hash, key, this);
  };
  var tryGet = hamt.tryGet = function(alt, key, map) {
    return tryGetHash(alt, map._config.hash(key), key, map);
  };
  Map.prototype.tryGet = function(alt, key) {
    return tryGet(alt, key, this);
  };
  var getHash = hamt.getHash = function(hash, key, map) {
    return tryGetHash(undefined, hash, key, map);
  };
  Map.prototype.getHash = function(hash, key) {
    return getHash(hash, key, this);
  };
  var get = hamt.get = function(key, map) {
    return tryGetHash(undefined, map._config.hash(key), key, map);
  };
  Map.prototype.get = function(key, alt) {
    return tryGet(alt, key, this);
  };
  var hasHash = hamt.has = function(hash, key, map) {
    return tryGetHash(nothing, hash, key, map) !== nothing;
  };
  Map.prototype.hasHash = function(hash, key) {
    return hasHash(hash, key, this);
  };
  var has = hamt.has = function(key, map) {
    return hasHash(map._config.hash(key), key, map);
  };
  Map.prototype.has = function(key) {
    return has(key, this);
  };
  var defKeyCompare = function defKeyCompare(x, y) {
    return x === y;
  };
  hamt.make = function(config) {
    return new Map(0, 0, {
      keyEq: config && config.keyEq || defKeyCompare,
      hash: config && config.hash || hash
    }, empty, 0);
  };
  hamt.empty = hamt.make();
  var isEmpty = hamt.isEmpty = function(map) {
    return map && !!isEmptyNode(map._root);
  };
  Map.prototype.isEmpty = function() {
    return isEmpty(this);
  };
  var modifyHash = hamt.modifyHash = function(f, hash, key, map) {
    var size = {value: map._size};
    var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);
    return map.setTree(newRoot, size.value);
  };
  Map.prototype.modifyHash = function(hash, key, f) {
    return modifyHash(f, hash, key, this);
  };
  var modify = hamt.modify = function(f, key, map) {
    return modifyHash(f, map._config.hash(key), key, map);
  };
  Map.prototype.modify = function(key, f) {
    return modify(f, key, this);
  };
  var setHash = hamt.setHash = function(hash, key, value, map) {
    return modifyHash(constant(value), hash, key, map);
  };
  Map.prototype.setHash = function(hash, key, value) {
    return setHash(hash, key, value, this);
  };
  var set = hamt.set = function(key, value, map) {
    return setHash(map._config.hash(key), key, value, map);
  };
  Map.prototype.set = function(key, value) {
    return set(key, value, this);
  };
  var del = constant(nothing);
  var removeHash = hamt.removeHash = function(hash, key, map) {
    return modifyHash(del, hash, key, map);
  };
  Map.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {
    return removeHash(hash, key, this);
  };
  var remove = hamt.remove = function(key, map) {
    return removeHash(map._config.hash(key), key, map);
  };
  Map.prototype.remove = Map.prototype.delete = function(key) {
    return remove(key, this);
  };
  var beginMutation = hamt.beginMutation = function(map) {
    return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
  };
  Map.prototype.beginMutation = function() {
    return beginMutation(this);
  };
  var endMutation = hamt.endMutation = function(map) {
    map._editable = map._editable && map._editable - 1;
    return map;
  };
  Map.prototype.endMutation = function() {
    return endMutation(this);
  };
  var mutate = hamt.mutate = function(f, map) {
    var transient = beginMutation(map);
    f(transient);
    return endMutation(transient);
  };
  Map.prototype.mutate = function(f) {
    return mutate(f, this);
  };
  var appk = function appk(k) {
    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
  };
  var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {
    while (i < len) {
      var child = children[i++];
      if (child && !isEmptyNode(child))
        return lazyVisit(child, f, [len, children, i, f, k]);
    }
    return appk(k);
  };
  var lazyVisit = function lazyVisit(node, f, k) {
    switch (node.type) {
      case LEAF:
        return {
          value: f(node),
          rest: k
        };
      case COLLISION:
      case ARRAY:
      case INDEX:
        var children = node.children;
        return lazyVisitChildren(children.length, children, 0, f, k);
      default:
        return appk(k);
    }
  };
  var DONE = {done: true};
  function MapIterator(v) {
    this.v = v;
  }
  ;
  MapIterator.prototype.next = function() {
    if (!this.v)
      return DONE;
    var v0 = this.v;
    this.v = appk(v0.rest);
    return v0;
  };
  MapIterator.prototype[Symbol.iterator] = function() {
    return this;
  };
  var visit = function visit(map, f) {
    return new MapIterator(lazyVisit(map._root, f));
  };
  var buildPairs = function buildPairs(x) {
    return [x.key, x.value];
  };
  var entries = hamt.entries = function(map) {
    return visit(map, buildPairs);
  };
  Map.prototype.entries = Map.prototype[Symbol.iterator] = function() {
    return entries(this);
  };
  var buildKeys = function buildKeys(x) {
    return x.key;
  };
  var keys = hamt.keys = function(map) {
    return visit(map, buildKeys);
  };
  Map.prototype.keys = function() {
    return keys(this);
  };
  var buildValues = function buildValues(x) {
    return x.value;
  };
  var values = hamt.values = Map.prototype.values = function(map) {
    return visit(map, buildValues);
  };
  Map.prototype.values = function() {
    return values(this);
  };
  var fold = hamt.fold = function(f, z, m) {
    var root = m._root;
    if (root.type === LEAF)
      return f(z, root.value, root.key);
    var toVisit = [root.children];
    var children = void 0;
    while (children = toVisit.pop()) {
      for (var i = 0,
          len = children.length; i < len; ) {
        var child = children[i++];
        if (child && child.type) {
          if (child.type === LEAF)
            z = f(z, child.value, child.key);
          else
            toVisit.push(child.children);
        }
      }
    }
    return z;
  };
  Map.prototype.fold = function(f, z) {
    return fold(f, z, this);
  };
  var forEach = hamt.forEach = function(f, map) {
    return fold(function(_, value, key) {
      return f(value, key, map);
    }, null, map);
  };
  Map.prototype.forEach = function(f) {
    return forEach(f, this);
  };
  var count = hamt.count = function(map) {
    return map._size;
  };
  Map.prototype.count = function() {
    return count(this);
  };
  Object.defineProperty(Map.prototype, 'size', {get: Map.prototype.count});
  ;
  return {get hamt() {
      return hamt;
    }};
})();
var $__runtime_47_core_47_lib_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/lib.js";
  ;
  function argumentsToArray(args) {
    return Array.prototype.slice.call(args, 0);
  }
  function argumentsSlice(a, i) {
    return [].slice.call(a, i);
  }
  function attachReadOnlyProperty(o, k, v) {
    return Object.defineProperty(o, k, {
      value: v,
      writable: false,
      configurable: false
    });
  }
  function internedMake(f) {
    var cache = new Map();
    return function(v) {
      v = v.toString();
      var result = cache.get(v);
      if (result === undefined) {
        result = f(v);
        cache.set(v, result);
      }
      return result;
    };
  }
  return {
    get hamt() {
      return $__runtime_47_third_45_party_47_hamt_46_js__.hamt;
    },
    get argumentsToArray() {
      return argumentsToArray;
    },
    get argumentsSlice() {
      return argumentsSlice;
    },
    get attachReadOnlyProperty() {
      return attachReadOnlyProperty;
    },
    get internedMake() {
      return internedMake;
    }
  };
})();
var $__runtime_47_core_47_procedure_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/procedure.js";
  function attachProcedureArity(fn, arity) {
    fn.__rjs_arityValue = arity || fn.length;
    return fn;
  }
  function check(v) {
    return typeof v === 'function';
  }
  function toString(f) {
    return f.name ? ("#<procedure:" + f.name + ">") : '#<procedure>';
  }
  function displayNativeString(out, f) {
    out.consume(toString(f));
  }
  return {
    get attachProcedureArity() {
      return attachProcedureArity;
    },
    get check() {
      return check;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    }
  };
})();
var $__runtime_47_core_47_print_95_native_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_native_string.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  function displayNativeString(out, v) {
    if (v === true) {
      out.consume('#t');
    } else if (v === false) {
      out.consume('#f');
    } else if (v === undefined || v === null) {
      out.consume('#<void>');
    } else if (Primitive.check(v)) {
      v.displayNativeString(out);
    } else if (Bytes.check(v)) {
      Bytes.displayNativeString(out, v);
    } else if (Procedure.check(v)) {
      Procedure.displayNativeString(out, v);
    } else {
      out.consume(v.toString());
    }
  }
  function writeNativeString(out, v) {
    if (Primitive.check(v)) {
      v.writeNativeString(out);
    } else {
      displayNativeString(out, v);
    }
  }
  function printNativeString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printNativeString(out);
    } else {
      writeNativeString(out, v);
    }
  }
  return {
    get displayNativeString() {
      return displayNativeString;
    },
    get writeNativeString() {
      return writeNativeString;
    },
    get printNativeString() {
      return printNativeString;
    }
  };
})();
var $__runtime_47_core_47_errors_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/errors.js";
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var printNativeString = ($__runtime_47_core_47_print_95_native_95_string_46_js__).printNativeString;
  function printError(out, msg, args) {
    out.consume(msg);
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (args)[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var arg = $__2.value;
        {
          out.consume(' ');
          if (typeof arg === 'string') {
            out.consume(arg);
          } else {
            printNativeString(out, arg, true, 0);
          }
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
  }
  function makeError(name) {
    var $__0 = this;
    var e = function(msg) {
      for (var args = [],
          $__8 = 1; $__8 < arguments.length; $__8++)
        args[$__8 - 1] = arguments[$__8];
      this.name = name;
      var stringOut = new MiniNativeOutputStringPort();
      printError(stringOut, msg, args);
      this.message = stringOut.getOutputString();
      this.stack = (new Error()).stack;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }
    };
    e.prototype = Object.create(Error.prototype);
    e.prototype.constructor = e;
    return function() {
      for (var args = [],
          $__9 = 0; $__9 < arguments.length; $__9++)
        args[$__9] = arguments[$__9];
      return new (Function.prototype.bind.apply(e, [$__0].concat(args)))();
    };
  }
  var racketCoreError = makeError('RacketCoreError');
  var racketContractError = makeError('RacketContractError');
  return {
    get racketCoreError() {
      return racketCoreError;
    },
    get racketContractError() {
      return racketContractError;
    }
  };
})();
var $__runtime_47_core_47_unicode_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/unicode_string.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextEncoder = (typeof window === 'undefined') ? require('util').TextEncoder : window.TextEncoder;
  var UString = function($__super) {
    function UString(chars, nativeString) {
      $traceurRuntime.superConstructor(UString).call(this);
      this.chars = chars;
      this._nativeString = nativeString;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(UString, {
      get length() {
        return this.chars.length;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = this.chars.join('');
        }
        return this._nativeString;
      },
      charAt: function(i) {
        this.checkIndexLtLength(i);
        return this.chars[i];
      },
      toLowerCase: function() {
        return makeMutable(this.toString().toLowerCase());
      },
      toUpperCase: function() {
        return makeMutable(this.toString().toUpperCase());
      },
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), null);
      },
      split: function(sep) {
        return this.toString().split(sep).map(function(s) {
          return makeMutable(s);
        });
      },
      checkIndexLtLength: function(i) {
        if (i >= this.length) {
          if (this.length > 0) {
            throw racketContractError(("string-ref: index is out of range\n  index: " + i + "\n  valid range: [0, " + (this.length - 1) + "]\n  string: "), this);
          } else {
            throw racketContractError(("string-ref: index is out of range for empty string\n  index: " + i));
          }
        }
      },
      valueOf: function() {
        return this.toString();
      },
      equals: function(v) {
        return check(v) && this.toString() === v.toString();
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = hashIntArray(this.chars);
        }
        return this._cachedHashCode;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      displayUString: function(out) {
        out.consume(this);
      },
      writeNativeString: function(out) {
        out.consume('"');
        var $__7 = true;
        var $__8 = false;
        var $__9 = undefined;
        try {
          for (var $__5 = void 0,
              $__4 = (this.chars)[Symbol.iterator](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
            var char = $__5.value;
            {
              var c = char.codepoint;
              switch (c) {
                case 7:
                  out.consume('\\a');
                  break;
                case 8:
                  out.consume('\\b');
                  break;
                case 9:
                  out.consume('\\t');
                  break;
                case 11:
                  out.consume('\\v');
                  break;
                case 12:
                  out.consume('\\f');
                  break;
                case 10:
                  out.consume('\\n');
                  break;
                case 13:
                  out.consume('\\r');
                  break;
                case 27:
                  out.consume('\\e');
                  break;
                case 34:
                  out.consume('\\"');
                  break;
                case 92:
                  out.consume('\\\\');
                  break;
                default:
                  if (Char.isGraphicCodepoint(c) || Char.isBlankCodepoint(c)) {
                    out.consume(char.toString());
                  } else {
                    out.consume(c > 0xFFFF ? ("\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
                  }
              }
            }
          }
        } catch ($__10) {
          $__8 = true;
          $__9 = $__10;
        } finally {
          try {
            if (!$__7 && $__4.return != null) {
              $__4.return();
            }
          } finally {
            if ($__8) {
              throw $__9;
            }
          }
        }
        out.consume('"');
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      }
    }, {}, $__super);
  }(Primitive);
  var ImmutableUString = function($__super) {
    function ImmutableUString() {
      $traceurRuntime.superConstructor(ImmutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableUString, {isImmutable: function() {
        return true;
      }}, {}, $__super);
  }(UString);
  var ImmutableBMPString = function($__super) {
    function ImmutableBMPString() {
      $traceurRuntime.superConstructor(ImmutableBMPString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableBMPString, {
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), this.toString().substring(start, end));
      },
      writeNativeString: function(out) {
        out.consume(JSON.stringify(this.toString()));
      }
    }, {}, $__super);
  }(ImmutableUString);
  var MutableUString = function($__super) {
    function MutableUString() {
      $traceurRuntime.superConstructor(MutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(MutableUString, {
      isImmutable: function() {
        return false;
      },
      setCharAt: function(i, char) {
        this.checkIndexLtLength(i);
        if (!Char.eq(char, this.chars[i])) {
          this.chars[i] = char;
          this._nativeString = null;
          this._cachedHashCode = null;
        }
      }
    }, {}, $__super);
  }(UString);
  function nativeStringToChars(nativeString) {
    return Array.from(nativeString, Char.charFromNativeString);
  }
  var makeInternedImmutable = internedMake(function(nativeString) {
    return makeImmutable(nativeString);
  });
  function makeImmutable(nativeString) {
    return makeImmutableFromCharsAndNativeString(nativeStringToChars(nativeString), nativeString);
  }
  function makeImmutableFromCharsAndNativeString(chars, nativeString) {
    return chars.length === nativeString.length ? new ImmutableBMPString(chars, nativeString) : new ImmutableUString(chars, nativeString);
  }
  function makeMutable(nativeString) {
    return new MutableUString(nativeStringToChars(nativeString), nativeString);
  }
  function makeMutableFromChars(chars) {
    return new MutableUString(chars, null);
  }
  function copyAsMutable(str) {
    return new MutableUString(str.chars, str._nativeString);
  }
  function makeMutableFromCharsVarArgs() {
    for (var chars = [],
        $__11 = 0; $__11 < arguments.length; $__11++)
      chars[$__11] = arguments[$__11];
    return makeMutableFromChars(chars);
  }
  function stringToImmutableString(v) {
    return v instanceof ImmutableUString ? v : makeImmutableFromCharsAndNativeString(v.chars, v.toString());
  }
  function check(v) {
    return v instanceof UString;
  }
  function eq(a, b) {
    return a.toString() === b.toString();
  }
  function lt(a, b) {
    if (a.length < b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] < b.chars[i];
      }
    }
    return false;
  }
  function gt(a, b) {
    if (a.length > b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] > b.chars[i];
      }
    }
    return false;
  }
  function lte(a, b) {
    return !gt(a, b);
  }
  function gte(a, b) {
    return !lt(a, b);
  }
  function repeatChar(k, c) {
    var chars = new Array(k);
    chars.fill(c.toString());
    return new MutableUString(chars, null);
  }
  var utf8Encoder = new TextEncoder();
  function toBytesUtf8(str) {
    return utf8Encoder.encode(str.toString());
  }
  function fromBytesUtf8(bytes) {
    return makeMutable(Bytes.toString(bytes));
  }
  function stringAppend() {
    var $__13;
    for (var strs = [],
        $__12 = 0; $__12 < arguments.length; $__12++)
      strs[$__12] = arguments[$__12];
    return makeMutableFromChars(($__13 = []).concat.apply($__13, $traceurRuntime.spread(strs.map(function(s) {
      return s.chars;
    }))));
  }
  Char.Char.prototype.displayUString = function(out) {
    out.consume(new MutableUString([this], this._nativeString));
  };
  Char.Char.prototype.writeUString = function(out) {
    var stringOut = new MiniNativeOutputStringPort();
    this.writeNativeString(stringOut);
    out.consume(makeMutable(stringOut.getOutputString()));
  };
  return {
    get UString() {
      return UString;
    },
    get makeInternedImmutable() {
      return makeInternedImmutable;
    },
    get makeImmutable() {
      return makeImmutable;
    },
    get makeMutable() {
      return makeMutable;
    },
    get makeMutableFromChars() {
      return makeMutableFromChars;
    },
    get copyAsMutable() {
      return copyAsMutable;
    },
    get makeMutableFromCharsVarArgs() {
      return makeMutableFromCharsVarArgs;
    },
    get stringToImmutableString() {
      return stringToImmutableString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get lt() {
      return lt;
    },
    get gt() {
      return gt;
    },
    get lte() {
      return lte;
    },
    get gte() {
      return gte;
    },
    get repeatChar() {
      return repeatChar;
    },
    get toBytesUtf8() {
      return toBytesUtf8;
    },
    get fromBytesUtf8() {
      return fromBytesUtf8;
    },
    get stringAppend() {
      return stringAppend;
    }
  };
})();
var $__runtime_47_core_47_printable_95_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printable_primitive.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var PRINT_PREFIX_USTRING = UString.makeInternedImmutable("'");
  var PrintablePrimitive = function($__super) {
    function PrintablePrimitive() {
      $traceurRuntime.superConstructor(PrintablePrimitive).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(PrintablePrimitive, {
      displayUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.displayNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      writeNativeString: function(out) {
        this.displayNativeString(out);
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        out.consume("'");
        this.writeNativeString(out);
      },
      printUString: function(out) {
        out.consume(PRINT_PREFIX_USTRING);
        this.writeUString(out);
      },
      toString: function() {
        var out = new MiniNativeOutputStringPort();
        this.displayNativeString(out);
        return out.getOutputString();
      }
    }, {}, $__super);
  }(Primitive);
  return {get PrintablePrimitive() {
      return PrintablePrimitive;
    }};
})();
var $__runtime_47_core_47_equality_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/equality.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function isEq(v1, v2) {
    return v1 === v2;
  }
  function isEqv(v1, v2) {
    return v1 === v2 || Char.check(v1) && Char.check(v2) && Char.eq(v1, v2);
  }
  function isEqual(v1, v2) {
    if (v1 === v2)
      return true;
    if (Primitive.check(v1))
      return v1.equals(v2);
    if (Bytes.check(v1) && Bytes.check(v2))
      return Bytes.eq(v1, v2);
    return false;
  }
  return {
    get isEq() {
      return isEq;
    },
    get isEqv() {
      return isEqv;
    },
    get isEqual() {
      return isEqual;
    }
  };
})();
var $__runtime_47_core_47_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hashing.js";
  var hash = ($__runtime_47_core_47_raw_95_hashing_46_js__).hash;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function hashForEq(o) {
    return hash(o);
  }
  function hashForEqv(o) {
    if (Char.check(o))
      return o.codepoint;
    return hash(o);
  }
  function hashForEqual(o) {
    if (Primitive.check(o))
      return o.hashForEqual();
    if (Bytes.check(o))
      return Bytes.hashForEqual(o);
    return hash(o);
  }
  return {
    get hashForEq() {
      return hashForEq;
    },
    get hashForEqv() {
      return hashForEqv;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_print_95_ustring_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_ustring.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var TRUE_USTRING = UString.makeInternedImmutable('#t');
  var FALSE_USTRING = UString.makeInternedImmutable('#f');
  var VOID_USTRING = UString.makeInternedImmutable('#<void>');
  function displayUString(out, v) {
    if (v === true) {
      out.consume(TRUE_USTRING);
    } else if (v === false) {
      out.consume(FALSE_USTRING);
    } else if (v === undefined || v === null) {
      out.consume(VOID_USTRING);
    } else if (typeof v === 'number' || typeof v === 'string') {
      out.consume(UString.makeMutable(v.toString()));
    } else if (Primitive.check(v)) {
      v.displayUString(out);
    } else if (Bytes.check(v)) {
      out.consume(UString.makeMutable(Bytes.toString(v)));
    } else if (Procedure.check(v)) {
      out.consume(UString.makeMutable(Procedure.toString(v)));
    } else {
      out.consume(UString.makeMutable(v.toString()));
    }
  }
  function writeUString(out, v) {
    if (Primitive.check(v)) {
      v.writeUString(out);
    } else {
      displayUString(out, v);
    }
  }
  function printUString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printUString(out);
    } else {
      writeUString(out, v);
    }
  }
  return {
    get displayUString() {
      return displayUString;
    },
    get writeUString() {
      return writeUString;
    },
    get printUString() {
      return printUString;
    }
  };
})();
var $__runtime_47_core_47_box_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/box.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var $__5 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__5.displayUString,
      writeUString = $__5.writeUString;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var BOX_PREFIX_USTRING = UString.makeInternedImmutable('#&');
  var Box = function($__super) {
    function Box(v) {
      $traceurRuntime.superConstructor(Box).call(this);
      this.value = v;
    }
    return ($traceurRuntime.createClass)(Box, {
      set: function(v) {
        this.value = v;
      },
      get: function() {
        return this.value;
      },
      equals: function(v) {
        return isEqual(v.value, this.value);
      },
      hashForEqual: function() {
        return hashForEqual(this.value);
      },
      displayNativeString: function(out) {
        out.consume('#&');
        displayNativeString(out, this.value);
      },
      displayUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        displayUString(out, this.value);
      },
      writeNativeString: function(out) {
        out.consume('#&');
        writeNativeString(out, this.value);
      },
      writeUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        writeUString(out, this.value);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(v) {
    return new Box(v);
  }
  function check(v) {
    return (v instanceof Box);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_pair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/pair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var Empty = function($__super) {
    function Empty() {
      $traceurRuntime.superConstructor(Empty).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Empty, {
      equals: function(v) {
        return this === v;
      },
      get length() {
        return 0;
      },
      displayNativeString: function(out) {
        out.consume('()');
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var EMPTY = new Empty();
  function isEmpty(v) {
    return v === EMPTY;
  }
  var Pair = function($__super) {
    function Pair(hd, tl) {
      $traceurRuntime.superConstructor(Pair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Pair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Pair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === Pair;
  }
  function make(hd, tl) {
    return new Pair(hd, tl);
  }
  function makeList() {
    for (var items = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      items[$__2] = arguments[$__2];
    return items.reduceRight(function(result, item) {
      return make(item, result);
    }, EMPTY);
  }
  function listToArray(lst) {
    var r = [];
    listForEach(lst, function(x) {
      return r.push(x);
    });
    return r;
  }
  function listFromArray(lst) {
    return makeList.apply((void 0), $traceurRuntime.spread(lst));
  }
  function listForEach(lst, fn) {
    while (!isEmpty(lst)) {
      fn(lst.hd);
      lst = lst.tl;
    }
  }
  function listFind(lst, fn) {
    while (!isEmpty(lst)) {
      var result = fn(lst.hd);
      if (result !== false) {
        return result;
      }
      lst = lst.tl;
    }
    return false;
  }
  function listMap(lst, fn) {
    var result = [];
    var mapper = function(x) {
      return result.push(result, fn(x));
    };
    listForEach(lst, mapper);
    return listFromArray(result);
  }
  function isList(v) {
    return v === EMPTY || (check(v) && v._listLength !== -1);
  }
  return {
    get EMPTY() {
      return EMPTY;
    },
    get isEmpty() {
      return isEmpty;
    },
    get Pair() {
      return Pair;
    },
    get check() {
      return check;
    },
    get make() {
      return make;
    },
    get makeList() {
      return makeList;
    },
    get listToArray() {
      return listToArray;
    },
    get listFromArray() {
      return listFromArray;
    },
    get listForEach() {
      return listForEach;
    },
    get listFind() {
      return listFind;
    },
    get listMap() {
      return listMap;
    },
    get isList() {
      return isList;
    }
  };
})();
var $__runtime_47_core_47_regexp_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/regexp.js";
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  function check(v) {
    return v instanceof RegExp;
  }
  function fromString(str) {
    return new RegExp(str.toString());
  }
  function match(pattern, input) {
    var isRegexpPattern = check(pattern);
    var isBytesPattern = !isRegexpPattern && Bytes.check(pattern);
    var isStringPattern = !isRegexpPattern && !isBytesPattern && UString.check(pattern);
    var isBytesInput = Bytes.check(input);
    var isStringInput = !isBytesInput && UString.check(input);
    if (!(isRegexpPattern || isBytesPattern || isStringPattern) || !(isBytesInput || isStringInput)) {
      throw racketContractError('expected regexp, string or byte pat, ' + 'and string or byte input, got pattern:', pattern, ', input:', input);
    }
    var stringInput = isBytesInput ? UString.fromBytesUtf8((input)) : input;
    var stringOrRegExpPattern = isBytesPattern ? UString.fromBytesUtf8((pattern)) : pattern;
    var result = stringInput.toString().match(stringOrRegExpPattern);
    if (result === null) {
      return false;
    }
    if ((isStringPattern || isRegexpPattern) && isStringInput) {
      return Pair.listFromArray(result.map(function(x) {
        return (x !== undefined ? UString.makeMutable(x) : false);
      }));
    }
    return Pair.listFromArray(result.map(function(x) {
      return (x !== undefined ? UString.toBytesUtf8(x) : false);
    }));
  }
  return {
    get check() {
      return check;
    },
    get fromString() {
      return fromString;
    },
    get match() {
      return match;
    }
  };
})();
var $__runtime_47_core_47_hash_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hash.js";
  var $ = $__runtime_47_core_47_lib_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__13 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__13.displayNativeString,
      writeNativeString = $__13.writeNativeString;
  var $__14 = $__runtime_47_core_47_equality_46_js__,
      isEqual = $__14.isEqual,
      isEqv = $__14.isEqv,
      isEq = $__14.isEq;
  var $__15 = $__runtime_47_core_47_hashing_46_js__,
      hashForEqual = $__15.hashForEqual,
      hashForEqv = $__15.hashForEqv,
      hashForEq = $__15.hashForEq;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var hashConfigs = {
    eq: {
      hash: hashForEq,
      keyEq: isEq
    },
    eqv: {
      hash: hashForEqv,
      keyEq: isEqv
    },
    equal: {
      hash: hashForEqual,
      keyEq: isEqual
    }
  };
  var Hash = function($__super) {
    function Hash(hash, type, mutable) {
      $traceurRuntime.superConstructor(Hash).call(this);
      this._h = hash;
      this._mutable = mutable;
      this._type = type;
    }
    return ($traceurRuntime.createClass)(Hash, {
      writeToPort: function(out, itemFn) {
        var $__10,
            $__11;
        out.consume('#hash');
        if (this._type === 'eq' || this._type === 'eqv') {
          out.consume(this._type);
        }
        out.consume('(');
        var n = this._h.size;
        var i = 0;
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              out.consume('(');
              itemFn(out, k);
              out.consume(' . ');
              itemFn(out, v);
              out.consume(')');
              if (++i !== n)
                out.consume(' ');
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      toRawString: function() {
        return ("'" + this.toString());
      },
      isImmutable: function() {
        return !this._mutable;
      },
      ref: function(k, fail) {
        var result = this._h.get(k);
        if (result !== undefined) {
          return result;
        } else if (fail !== undefined) {
          return fail;
        }
        throw racketCoreError('hash-ref: no value found for key\n  key:', k);
      },
      set: function(k, v) {
        var newH = this._h.set(k, v);
        if (this._mutable) {
          this._h = newH;
        } else {
          return new Hash(newH, this._type, false);
        }
      },
      size: function() {
        return this._h.size;
      },
      equals: function(v) {
        var $__10,
            $__11;
        if (!check(v)) {
          return false;
        }
        if (this._h.size !== v._h.size || this._type !== v._type || this._mutable !== v._mutable) {
          return false;
        }
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                key = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                val = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              var vv = v._h.get(key);
              if (vv === undefined || !isEqual(val, vv)) {
                return false;
              }
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        return true;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, type, mutable) {
    var h = items.reduce(function(acc, item) {
      var $__10,
          $__11;
      var $__9 = item,
          k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
          v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
      return acc.set(k, v);
    }, $.hamt.make(hashConfigs[type]));
    return new Hash(h, type, mutable);
  }
  function makeEq(items, mutable) {
    return make(items, 'eq', mutable);
  }
  function makeEqv(items, mutable) {
    return make(items, 'eqv', mutable);
  }
  function makeEqual(items, mutable) {
    return make(items, 'equal', mutable);
  }
  function makeFromAssocs(assocs, type, mutable) {
    var items = [];
    Pair.listForEach(assocs, function(item) {
      items.push([item.hd, item.tl]);
    });
    return make(items, type, mutable);
  }
  function makeEqFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eq', mutable);
  }
  function makeEqvFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eqv', mutable);
  }
  function makeEqualFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'equal', mutable);
  }
  function map(hash, proc) {
    var result = Pair.EMPTY;
    hash._h.forEach(function(value, key) {
      result = Pair.make(proc(key, value), result);
    });
    return result;
  }
  function check(v1) {
    return (v1 instanceof Hash);
  }
  function isEqualHash(h) {
    return check(h) && h._type === 'equal';
  }
  function isEqvHash(h) {
    return check(h) && h._type === 'eqv';
  }
  function isEqHash(h) {
    return check(h) && h._type === 'eq';
  }
  return {
    get makeEq() {
      return makeEq;
    },
    get makeEqv() {
      return makeEqv;
    },
    get makeEqual() {
      return makeEqual;
    },
    get makeEqFromAssocs() {
      return makeEqFromAssocs;
    },
    get makeEqvFromAssocs() {
      return makeEqvFromAssocs;
    },
    get makeEqualFromAssocs() {
      return makeEqualFromAssocs;
    },
    get map() {
      return map;
    },
    get check() {
      return check;
    },
    get isEqualHash() {
      return isEqualHash;
    },
    get isEqvHash() {
      return isEqvHash;
    },
    get isEqHash() {
      return isEqHash;
    }
  };
})();
var $__runtime_47_core_47_keyword_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/keyword.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Keyword = function($__super) {
    function Keyword(v) {
      $traceurRuntime.superConstructor(Keyword).call(this);
      this.v = v;
    }
    return ($traceurRuntime.createClass)(Keyword, {
      displayNativeString: function(out) {
        out.consume('#:');
        out.consume(this.v);
      },
      equals: function(v) {
        return check(v) && this.v === v.v;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Keyword(v);
  });
  function check(v) {
    return (v instanceof Keyword);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_numbers_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/numbers.js";
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  function add() {
    for (var operands = [],
        $__0 = 0; $__0 < arguments.length; $__0++)
      operands[$__0] = arguments[$__0];
    return [].reduce.call(operands, function(a, b) {
      return a + b;
    }, 0);
  }
  function sub() {
    for (var operands = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      operands[$__1] = arguments[$__1];
    if (operands.length === 1) {
      return -operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result -= operands[i];
    }
    return result;
  }
  function mul() {
    for (var operands = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      operands[$__2] = arguments[$__2];
    return [].reduce.call(operands, function(a, b) {
      return a * b;
    }, 1);
  }
  function div() {
    for (var operands = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      operands[$__3] = arguments[$__3];
    if (operands.length === 1) {
      return 1 / operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result /= operands[i];
    }
    return result;
  }
  function compare(cmp, operands) {
    if (operands.length < 2) {
      throw racketCoreError.apply((void 0), $traceurRuntime.spread(['compare: at least 2 arguments required, given'], operands));
    }
    for (var i = 1; i < operands.length; i++) {
      if (!cmp(operands[i - 1], operands[i])) {
        return false;
      }
    }
    return true;
  }
  function lt() {
    for (var operands = [],
        $__4 = 0; $__4 < arguments.length; $__4++)
      operands[$__4] = arguments[$__4];
    return compare(function(a, b) {
      return a < b;
    }, operands);
  }
  function lte() {
    for (var operands = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      operands[$__5] = arguments[$__5];
    return compare(function(a, b) {
      return a <= b;
    }, operands);
  }
  function gt() {
    for (var operands = [],
        $__6 = 0; $__6 < arguments.length; $__6++)
      operands[$__6] = arguments[$__6];
    return compare(function(a, b) {
      return a > b;
    }, operands);
  }
  function gte() {
    for (var operands = [],
        $__7 = 0; $__7 < arguments.length; $__7++)
      operands[$__7] = arguments[$__7];
    return compare(function(a, b) {
      return a >= b;
    }, operands);
  }
  function equals() {
    for (var operands = [],
        $__8 = 0; $__8 < arguments.length; $__8++)
      operands[$__8] = arguments[$__8];
    return compare(function(a, b) {
      return a === b;
    }, operands);
  }
  function check(v) {
    return typeof v === 'number';
  }
  return {
    get add() {
      return add;
    },
    get sub() {
      return sub;
    },
    get mul() {
      return mul;
    },
    get div() {
      return div;
    },
    get compare() {
      return compare;
    },
    get lt() {
      return lt;
    },
    get lte() {
      return lte;
    },
    get gt() {
      return gt;
    },
    get gte() {
      return gte;
    },
    get equals() {
      return equals;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_ports_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/ports.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Port = function($__super) {
    function Port() {
      $traceurRuntime.superConstructor(Port).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Port, {
      isOutputPort: function() {
        return false;
      },
      isInputPort: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var OutputPort = function($__super) {
    function OutputPort() {
      $traceurRuntime.superConstructor(OutputPort).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(OutputPort, {
      isOutputPort: function() {
        return true;
      },
      displayNativeString: function(out) {
        out.consume(("#<output-port:" + this.name + ">"));
      }
    }, {}, $__super);
  }(Port);
  function check(v) {
    return v instanceof Port;
  }
  function isInputPort(v) {
    return check(v) && v.isInputPort();
  }
  function isOutputPort(v) {
    return check(v) && v.isOutputPort();
  }
  var NewlineFlushingOutputPort = function($__super) {
    function NewlineFlushingOutputPort(consumeFn, name) {
      $traceurRuntime.superConstructor(NewlineFlushingOutputPort).call(this);
      this._buffer = [];
      this._consumeFn = consumeFn;
      this.name = name;
    }
    return ($traceurRuntime.createClass)(NewlineFlushingOutputPort, {
      consume: function(nativeString) {
        var lastNewlineIndex = nativeString.lastIndexOf('\n');
        if (lastNewlineIndex >= 0) {
          this._buffer.push(nativeString.slice(0, lastNewlineIndex));
          this._consumeFn(this._buffer.join(''));
          var restChars = nativeString.slice(lastNewlineIndex + 1);
          this._buffer = [];
          if (restChars !== '') {
            this._buffer.push(restChars);
          }
        } else {
          this._buffer.push(nativeString);
        }
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var standardOutputPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stdout');
  var standardErrorPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stderr');
  var NativeOutputStringPort = function($__super) {
    function NativeOutputStringPort() {
      $traceurRuntime.superConstructor(NativeOutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(NativeOutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return '';
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = '').concat.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return this._buffer[0];
      },
      get name() {
        return 'js-string';
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var OutputStringPort = function($__super) {
    function OutputStringPort() {
      $traceurRuntime.superConstructor(OutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(OutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return UString.makeMutable('');
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = UString).stringAppend.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return UString.copyAsMutable(this._buffer[0]);
      },
      get name() {
        return 'string';
      },
      isUStringPort: function() {
        return true;
      }
    }, {}, $__super);
  }(OutputPort);
  function openOutputString() {
    return new OutputStringPort();
  }
  function getOutputString(outputStringPort) {
    return outputStringPort.getOutputString();
  }
  return {
    get check() {
      return check;
    },
    get isInputPort() {
      return isInputPort;
    },
    get isOutputPort() {
      return isOutputPort;
    },
    get standardOutputPort() {
      return standardOutputPort;
    },
    get standardErrorPort() {
      return standardErrorPort;
    },
    get NativeOutputStringPort() {
      return NativeOutputStringPort;
    },
    get openOutputString() {
      return openOutputString;
    },
    get getOutputString() {
      return getOutputString;
    }
  };
})();
var $__runtime_47_core_47_check_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/check.js";
  function raise(exp) {
    for (var args = [],
        $__0 = 1; $__0 < arguments.length; $__0++)
      args[$__0 - 1] = arguments[$__0];
    throw exp.apply(this, args);
  }
  function truthy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val !== true) {
      raise(exp, msg);
    }
    return true;
  }
  function falsy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    return truthy(val === false, exp, msg);
  }
  function type(val, type) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val instanceof type) {
      return true;
    }
    raise(TypeError, (msg + "(" + val + " : " + $traceurRuntime.typeof((val)) + " != " + type.name + ")"));
  }
  function eq(val1, val2, exp, msg) {
    if (val1 !== val2) {
      raise(exp, msg);
    }
    return true;
  }
  return {
    get raise() {
      return raise;
    },
    get truthy() {
      return truthy;
    },
    get falsy() {
      return falsy;
    },
    get type() {
      return type;
    },
    get eq() {
      return eq;
    }
  };
})();
var $__runtime_47_core_47_values_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/values.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Values = function($__super) {
    function Values(vals) {
      $traceurRuntime.superConstructor(Values).call(this);
      this.v = vals;
    }
    return ($traceurRuntime.createClass)(Values, {
      getAt: function(i) {
        return this.v[i];
      },
      getAll: function() {
        return this.v;
      }
    }, {}, $__super);
  }(Primitive);
  function make(vals) {
    return new Values(vals);
  }
  function check(v) {
    return (v instanceof Values);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_struct_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/struct.js";
  var C = $__runtime_47_core_47_check_46_js__;
  var $ = $__runtime_47_core_47_lib_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__15 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__15.displayNativeString,
      writeNativeString = $__15.writeNativeString,
      printNativeString = $__15.printNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Struct = function($__super) {
    function Struct(desc, fields) {
      var callerName = arguments[2] !== (void 0) ? arguments[2] : false;
      $traceurRuntime.superConstructor(Struct).call(this);
      this._desc = desc;
      C.eq(fields.length, this._desc._totalInitFields, racketCoreError, 'arity mismatch');
      var guardLambda = this._desc._options.guard;
      var finalCallerName = callerName || this._desc._options.constructorName || this._desc._options.name;
      if (guardLambda) {
        var guardFields = fields.concat(finalCallerName);
        fields = guardLambda.apply((void 0), $traceurRuntime.spread(guardFields)).getAll();
      }
      this._superStructInstance = false;
      var superType = this._desc.getSuperType();
      if (superType !== false) {
        var superInitFields = fields.slice(0, superType._totalInitFields);
        this._fields = fields.slice(superType._totalInitFields);
        this._superStructInstance = superType.getStructConstructor(finalCallerName).apply((void 0), $traceurRuntime.spread(superInitFields));
      } else {
        this._fields = fields;
      }
      var autoV = this._desc._options.autoV;
      for (var i = 0; i < this._desc._options.autoFieldCount; i++) {
        this._fields.push(autoV);
      }
    }
    return ($traceurRuntime.createClass)(Struct, {
      writeToPort: function(out, itemFn) {
        if (this._desc._options.inspector) {
          out.consume('#<');
          out.consume(this._desc.getName());
          out.consume('>');
        } else {
          out.consume('#(struct:');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                itemFn(out, field);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      printNativeString: function(out) {
        if (this._desc._options.inspector) {
          this.writeNativeString(out);
        } else {
          out.consume('(');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                printNativeString(out, field, true, 0);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      equals: function(v) {
        if (!check(v, this._desc)) {
          return false;
        }
        if (this._desc._options.inspector) {
          return this === v;
        }
        for (var i = 0; i < this._fields.length; i++) {
          if (!isEqual(this._fields[i], v._fields[i])) {
            return false;
          }
        }
        return true;
      },
      getField: function(n) {
        if (n >= this._fields.length) {
          throw new Error(("TypeError: invalid field at position " + n));
        }
        return this._fields[n];
      },
      setField: function(n, v) {
        C.truthy(n < this._fields.length, racketCoreError, 'invalid field at position');
        C.falsy(this._desc.isFieldImmutable(n), racketCoreError, 'field is immutable');
        this._fields[n] = v;
      },
      _maybeFindSuperInstance: function(targetDesc) {
        for (var s = this; s !== false; s = s._superStructInstance) {
          if (s._desc === targetDesc) {
            return s;
          }
        }
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var StructTypeDescriptor = function($__super) {
    function StructTypeDescriptor(options) {
      $traceurRuntime.superConstructor(StructTypeDescriptor).call(this);
      this._options = options;
      var props = options.props && Pair.listToArray(options.props);
      this._options.props = new Map();
      if (props) {
        var $__8 = true;
        var $__9 = false;
        var $__10 = undefined;
        try {
          for (var $__6 = void 0,
              $__5 = (props)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
            var prop = $__6.value;
            {
              prop.hd.attachToStructTypeDescriptor(this, prop.tl);
            }
          }
        } catch ($__11) {
          $__9 = true;
          $__10 = $__11;
        } finally {
          try {
            if (!$__8 && $__5.return != null) {
              $__5.return();
            }
          } finally {
            if ($__9) {
              throw $__10;
            }
          }
        }
      }
      this._propProcedure = this._findProperty(propProcedure);
      this._options.autoV = this._options.autoV || false;
      this._totalInitFields = options.initFieldCount;
      if (options.superType) {
        this._totalInitFields += options.superType._totalInitFields;
      }
      var immutables = options.immutables || Pair.EMPTY;
      this._options.immutables = new Set(Pair.listToArray(immutables));
      this._options.immutables.forEach(function(e) {
        if (e < 0 || e >= options.initFieldCount) {
          C.raise('invalid index in immutables provided');
        }
      });
    }
    return ($traceurRuntime.createClass)(StructTypeDescriptor, {
      displayNativeString: function(out) {
        out.consume('#<struct-type:');
        out.consume(this._options.name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getName: function() {
        return this._options.name;
      },
      getSuperType: function() {
        return this._options.superType;
      },
      getApplicableStructObject: function(structObject, procSpec) {
        var structfn = function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var proc;
          if (typeof(procSpec) === 'function') {
            proc = procSpec;
            args.unshift(structObject);
          } else if (Number.isInteger(procSpec)) {
            proc = structObject.getField(procSpec);
          } else {
            throw new Error(("ValueError: invalid field at position " + procSpec));
          }
          return proc.apply((void 0), $traceurRuntime.spread(args));
        };
        structfn.__rjs_struct_object = structObject;
        return structfn;
      },
      maybeStructObject: function(s) {
        var structObject;
        if (s instanceof Struct) {
          return s;
        } else if (s instanceof Function && (s.__rjs_struct_object instanceof Struct)) {
          return s.__rjs_struct_object;
        }
        return false;
      },
      getStructConstructor: function() {
        var subtype = arguments[0] !== (void 0) ? arguments[0] : false;
        var $__4 = this;
        return $.attachReadOnlyProperty(function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var structObject = new Struct($__4, args, subtype);
          var hasPropProc = $__4._propProcedure !== undefined && $__4._propProcedure !== false;
          var hasProcSpec = $__4._options.procSpec !== undefined && $__4._options.procSpec !== false;
          if (!hasPropProc && !hasProcSpec) {
            return structObject;
          } else if (hasPropProc) {
            return $__4.getApplicableStructObject(structObject, $__4._propProcedure);
          }
          return $__4.getApplicableStructObject(structObject, $__4._options.procSpec);
        }, 'racketProcedureType', 'struct-constructor');
      },
      getStructPredicate: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s) {
          var structObject = $__4.maybeStructObject(s);
          return structObject && structObject._maybeFindSuperInstance($__4) && true;
        }, 'racketProcedureType', 'struct-predicate');
      },
      getStructAccessor: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'accessor applied to invalid type');
          }
          return sobj.getField(pos);
        }, 'racketProcedureType', 'struct-accessor');
      },
      getStructMutator: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos, v) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'mutator applied to invalid type');
          }
          return sobj.setField(pos, v);
        }, 'racketProcedureType', 'struct-mutator');
      },
      _findProperty: function(prop) {
        for (var desc = this; desc; desc = desc.getSuperType()) {
          var val = desc._options.props.get(prop);
          if (val !== undefined) {
            return val;
          }
        }
        return undefined;
      },
      isFieldImmutable: function(n) {
        return this._options.immutables.has(n);
      }
    }, {make: function(options) {
        return Object.freeze(new StructTypeDescriptor(options));
      }}, $__super);
  }(PrintablePrimitive);
  var StructTypeProperty = function($__super) {
    function StructTypeProperty(args) {
      $traceurRuntime.superConstructor(StructTypeProperty).call(this);
      this._name = args.name.toString();
      this._guard = args.guard || false;
      this._canImpersonate = args.canImpersonate || false;
      this._supers = (args.supers && Pair.listToArray(args.supers)) || [];
    }
    return ($traceurRuntime.createClass)(StructTypeProperty, {
      displayNativeString: function(out) {
        out.consume('#<struct-type-property:');
        out.consume(this._name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getPropertyPredicate: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            return false;
          }
          return desc._findProperty($__4) !== undefined;
        };
      },
      getPropertyAccessor: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            C.raise(racketCoreError, 'invalid argument to accessor');
          }
          return desc._findProperty($__4) || C.raise(racketCoreError, 'property not in struct');
        };
      },
      attachToStructTypeDescriptor: function(desc, v) {
        var newV = v;
        if (this._guard) {
          newV = this._guard(v, Pair.listFromArray(structTypeInfo(desc)));
        }
        desc._options.props.set(this, newV);
        this._supers.forEach(function(superEntry) {
          var prop = superEntry.hd;
          var proc = superEntry.tl;
          prop.attachToStructTypeDescriptor(desc, proc(newV));
        });
      }
    }, {make: function(args) {
        return Object.freeze(new StructTypeProperty(args));
      }}, $__super);
  }(PrintablePrimitive);
  function makeStructTypeProperty(options) {
    var stProp = StructTypeProperty.make(options);
    return Values.make([stProp, stProp.getPropertyPredicate(), stProp.getPropertyAccessor()]);
  }
  function makeStructType(options) {
    var descriptor = new StructTypeDescriptor(options);
    return Values.make([descriptor, descriptor.getStructConstructor(), descriptor.getStructPredicate(), descriptor.getStructAccessor(), descriptor.getStructMutator()]);
  }
  function isStructType(v) {
    return v instanceof StructTypeDescriptor;
  }
  function structTypeInfo(desc) {
    return [desc._options.name, desc._options.initFieldCount, desc._options.autoFieldCount, desc.getStructAccessor(), desc.getStructMutator(), desc._options.immutables, desc._options.superType || false, false];
  }
  function isStructInstance(v) {
    return (v instanceof Struct) || (v instanceof Function) && (v.__rjs_struct_object instanceof Struct);
  }
  function check(v, desc) {
    return isStructInstance(v) && v._desc == desc;
  }
  var propProcedure = makeStructTypeProperty({name: 'prop:procedure'}).getAt(0);
  return {
    get makeStructTypeProperty() {
      return makeStructTypeProperty;
    },
    get makeStructType() {
      return makeStructType;
    },
    get isStructType() {
      return isStructType;
    },
    get structTypeInfo() {
      return structTypeInfo;
    },
    get isStructInstance() {
      return isStructInstance;
    },
    get check() {
      return check;
    },
    get propProcedure() {
      return propProcedure;
    }
  };
})();
var $__runtime_47_core_47_symbol_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/symbol.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Symbol = function($__super) {
    function Symbol(v) {
      $traceurRuntime.superConstructor(Symbol).call(this);
      this.v = v;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Symbol, {
      displayNativeString: function(out) {
        out.consume(this.v);
      },
      equals: function(v) {
        return v === this;
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Symbol.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Symbol(v.toString());
  });
  var makeUninterned = function(v) {
    return new Symbol(v);
  };
  function check(v) {
    return (v instanceof Symbol);
  }
  return {
    get make() {
      return make;
    },
    get makeUninterned() {
      return makeUninterned;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_vector_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/vector.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Vector = function($__super) {
    function Vector(items, mutable) {
      $traceurRuntime.superConstructor(Vector).call(this);
      this.mutable = mutable;
      this.items = items;
    }
    return ($traceurRuntime.createClass)(Vector, {
      writeToPort: function(out, itemFn) {
        var n = this.items.length;
        out.consume('#(');
        for (var i = 0; i < n; i++) {
          itemFn(out, this.items[i]);
          if (i !== n - 1)
            out.consume(' ');
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      isImmutable: function() {
        return !this.mutable;
      },
      ref: function(n) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-ref: index out of range\n  index: " + n));
        }
        return this.items[n];
      },
      set: function(n, v) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-set: index out of range\n  index: " + n));
        } else if (!this.mutable) {
          throw racketCoreError('vector-set: immutable vector\n ', this);
        }
        this.items[n] = v;
      },
      length: function() {
        return this.items.length;
      },
      equals: function(v) {
        if (!check(v)) {
          return false;
        }
        var items1 = this.items;
        var items2 = v.items;
        if (items1.length != items2.length) {
          return false;
        }
        for (var i = 0; i < items1.length; i++) {
          if (!isEqual(items1[i], items2[i])) {
            return false;
          }
        }
        return true;
      },
      hashForEqual: function() {
        return hashArray(this.items, hashForEqual);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, mutable) {
    return new Vector(items, mutable);
  }
  function copy(vec, mutable) {
    return new Vector(vec.items, mutable);
  }
  function makeInit(size, init) {
    var r = new Array(size);
    r.fill(init);
    return new Vector(r, true);
  }
  function check(v1) {
    return (v1 instanceof Vector);
  }
  return {
    get make() {
      return make;
    },
    get copy() {
      return copy;
    },
    get makeInit() {
      return makeInit;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_marks_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/marks.js";
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var HASH = ($__runtime_47_core_47_hashing_46_js__).hashForEq;
  var __frames;
  var __prompts = new Map();
  var __async_callback_wrappers = [];
  var __defaultContinuationPromptTag = makeContinuationPromptTag(Symbol.make('default'));
  function init() {
    __frames = Pair.EMPTY;
    savePrompt(__defaultContinuationPromptTag);
    enterFrame();
  }
  function registerAsynCallbackWrapper(w) {
    __async_callback_wrappers.push(w);
  }
  function defaultContinuationPromptTag() {
    return __defaultContinuationPromptTag;
  }
  init();
  function ContinuationPromptTag(tag) {
    this.tag = tag;
    return this;
  }
  function AbortCurrentContinuation(promptTag, handlerArgs) {
    this.name = 'abort-current-continuation';
    this.promptTag = promptTag;
    this.handlerArgs = handlerArgs;
    this.stack = (new Error()).stack;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }
  }
  AbortCurrentContinuation.prototype = Object.create(Error.prototype);
  AbortCurrentContinuation.prototype.constructor = AbortCurrentContinuation;
  function savePrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      promptVal = [];
      __prompts.set(promptTag, promptVal);
    }
    promptVal.push(__frames.hd);
  }
  function deleteCurrentPrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    promptVal.pop();
    if (promptVal.length === 0) {
      __prompts.delete(promptTag);
    }
  }
  function getPromptFrame(promptTag) {
    if (promptTag === undefined) {
      return promptTag;
    }
    var result = __prompts.get(promptTag);
    return (result && result[result.length - 1]) || undefined;
  }
  function makeContinuationPromptTag(sym) {
    return new ContinuationPromptTag(sym);
  }
  function isContinuationPromptTag(tag) {
    return tag instanceof ContinuationPromptTag;
  }
  function callWithContinuationPrompt(proc, promptTag, handler) {
    for (var args = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      args[$__1 - 3] = arguments[$__1];
    promptTag = promptTag || __defaultContinuationPromptTag;
    try {
      savePrompt(promptTag);
      return proc.apply((void 0), $traceurRuntime.spread(args));
    } catch (e) {
      if (e instanceof AbortCurrentContinuation && e.promptTag === promptTag) {
        return handler.apply((void 0), $traceurRuntime.spread(e.handlerArgs));
      }
      throw e;
    } finally {
      deleteCurrentPrompt(promptTag);
    }
  }
  function getFrames() {
    return __frames;
  }
  function updateFrame(newFrames, oldFrames) {
    if (__frames !== oldFrames) {
      throw new Error("current frame doesn't match with old frame");
    }
    return __frames = newFrames;
  }
  function enterFrame() {
    __frames = Pair.make({}, __frames);
    return __frames;
  }
  function setMark(key, value) {
    var frame = __frames.hd;
    frame[HASH(key)] = value;
  }
  function getContinuationMarks(promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var frames = __frames;
    var promptFrame = getPromptFrame(promptTag);
    if (promptFrame === undefined && promptTag !== __defaultContinuationPromptTag) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    var result = [];
    while (!Pair.isEmpty(frames)) {
      if (frames.hd === promptFrame) {
        break;
      }
      result.push(frames.hd);
      frames = frames.tl;
    }
    return result;
  }
  function getMarks(framesArr, key, promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var keyHash = HASH(key);
    var promptFrame = getPromptFrame(promptTag);
    var result = [];
    for (var ii = 0; ii < framesArr.length; ++ii) {
      var fr = framesArr[ii];
      if (keyHash in fr) {
        if (fr === promptFrame) {
          break;
        }
        result.push(fr[keyHash]);
      }
    }
    return Pair.listFromArray(result);
  }
  function getFirstMark(frames, key, noneV) {
    var keyHash = HASH(key);
    return Pair.listFind(frames, function(fr) {
      if (keyHash in fr) {
        return fr[keyHash];
      }
    }) || noneV;
  }
  function wrapWithContext(fn) {
    return (function(currentFrames) {
      var state = {};
      __async_callback_wrappers.forEach(function(w) {
        return w.onCreate(state);
      });
      return function() {
        for (var args = [],
            $__2 = 0; $__2 < arguments.length; $__2++)
          args[$__2] = arguments[$__2];
        init();
        __async_callback_wrappers.forEach(function(w) {
          return w.onInvoke(state);
        });
        try {
          return fn.apply((void 0), $traceurRuntime.spread(args));
        } finally {
          __frames = undefined;
        }
      };
    }(__frames));
  }
  return {
    get init() {
      return init;
    },
    get registerAsynCallbackWrapper() {
      return registerAsynCallbackWrapper;
    },
    get defaultContinuationPromptTag() {
      return defaultContinuationPromptTag;
    },
    get AbortCurrentContinuation() {
      return AbortCurrentContinuation;
    },
    get makeContinuationPromptTag() {
      return makeContinuationPromptTag;
    },
    get isContinuationPromptTag() {
      return isContinuationPromptTag;
    },
    get callWithContinuationPrompt() {
      return callWithContinuationPrompt;
    },
    get getFrames() {
      return getFrames;
    },
    get updateFrame() {
      return updateFrame;
    },
    get enterFrame() {
      return enterFrame;
    },
    get setMark() {
      return setMark;
    },
    get getContinuationMarks() {
      return getContinuationMarks;
    },
    get getMarks() {
      return getMarks;
    },
    get getFirstMark() {
      return getFirstMark;
    },
    get wrapWithContext() {
      return wrapWithContext;
    }
  };
})();
var $__runtime_47_core_47_mpair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mpair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var $__4 = $__runtime_47_core_47_pair_46_js__,
      EMPTY = $__4.EMPTY,
      isEmpty = $__4.isEmpty,
      isList = $__4.isList;
  var MPair = function($__super) {
    function MPair(hd, tl) {
      $traceurRuntime.superConstructor(MPair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(MPair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, MPair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      setCar: function(v) {
        if (this.hd !== v) {
          this.hd = v;
          this._cachedHashCode = null;
        }
      },
      setCdr: function(v) {
        if (this.tl !== v) {
          this.tl = v;
          this._listLength = isList(tl) ? tl.length + 1 : -1;
          this._cachedHashCode = null;
        }
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === MPair;
  }
  function make(hd, tl) {
    return new MPair(hd, tl);
  }
  return {
    get check() {
      return check;
    },
    get make() {
      return make;
    }
  };
})();
var $__runtime_47_core_47_printing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printing.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var $__0 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__0.displayNativeString,
      writeNativeString = $__0.writeNativeString,
      printNativeString = $__0.printNativeString;
  var $__1 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__1.displayUString,
      writeUString = $__1.writeUString,
      printUString = $__1.printUString;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  function display(out, v) {
    if (out.isUStringPort()) {
      displayUString(out, v);
    } else {
      displayNativeString(out, v);
    }
  }
  function write(out, v) {
    if (out.isUStringPort()) {
      writeUString(out, v);
    } else {
      writeNativeString(out, v);
    }
  }
  function print(out, v, printAsExpression, quoteDepth) {
    if (out.isUStringPort()) {
      printUString(out, v, printAsExpression, quoteDepth);
    } else {
      printNativeString(out, v, printAsExpression, quoteDepth);
    }
  }
  return {
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    }
  };
})();
var $__runtime_47_core_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core.js";
  var Box = $__runtime_47_core_47_box_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Regexp = $__runtime_47_core_47_regexp_46_js__;
  var Hash = $__runtime_47_core_47_hash_46_js__;
  var Keyword = $__runtime_47_core_47_keyword_46_js__;
  var Number = $__runtime_47_core_47_numbers_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Struct = $__runtime_47_core_47_struct_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Vector = $__runtime_47_core_47_vector_46_js__;
  var Marks = $__runtime_47_core_47_marks_46_js__;
  var MPair = $__runtime_47_core_47_mpair_46_js__;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  function bitwiseNot(a) {
    return ~a;
  }
  return {
    get Bytes() {
      return Bytes;
    },
    get Number() {
      return Number;
    },
    get Char() {
      return Char;
    },
    get Pair() {
      return Pair;
    },
    get Primitive() {
      return Primitive;
    },
    get Struct() {
      return Struct;
    },
    get Symbol() {
      return Symbol;
    },
    get Keyword() {
      return Keyword;
    },
    get Values() {
      return Values;
    },
    get Vector() {
      return Vector;
    },
    get Hash() {
      return Hash;
    },
    get Box() {
      return Box;
    },
    get Marks() {
      return Marks;
    },
    get Ports() {
      return Ports;
    },
    get UString() {
      return UString;
    },
    get Regexp() {
      return Regexp;
    },
    get MPair() {
      return MPair;
    },
    get argumentsToArray() {
      return $__runtime_47_core_47_lib_46_js__.argumentsToArray;
    },
    get argumentsSlice() {
      return $__runtime_47_core_47_lib_46_js__.argumentsSlice;
    },
    get racketCoreError() {
      return $__runtime_47_core_47_errors_46_js__.racketCoreError;
    },
    get racketContractError() {
      return $__runtime_47_core_47_errors_46_js__.racketContractError;
    },
    get attachProcedureArity() {
      return $__runtime_47_core_47_procedure_46_js__.attachProcedureArity;
    },
    get isEq() {
      return $__runtime_47_core_47_equality_46_js__.isEq;
    },
    get isEqv() {
      return $__runtime_47_core_47_equality_46_js__.isEqv;
    },
    get isEqual() {
      return $__runtime_47_core_47_equality_46_js__.isEqual;
    },
    get hashForEq() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEq;
    },
    get hashForEqv() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqv;
    },
    get hashForEqual() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqual;
    },
    get display() {
      return $__runtime_47_core_47_printing_46_js__.display;
    },
    get write() {
      return $__runtime_47_core_47_printing_46_js__.write;
    },
    get print() {
      return $__runtime_47_core_47_printing_46_js__.print;
    },
    get bitwiseNot() {
      return bitwiseNot;
    }
  };
})();
var $__runtime_47_paramz_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.js";
  var Core = $__runtime_47_core_46_js__;
  var hamt = ($__runtime_47_core_47_lib_46_js__).hamt;
  var Marks = Core.Marks;
  var Box = Core.Box;
  var ParameterizationKey = {};
  var ExceptionHandlerKey = {};
  var __top;
  function getCurrentParameterization() {
    return Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false);
  }
  function makeParameter(initValue) {
    var param = function(maybeSetVal) {
      var current = getCurrentParameterization();
      var pv = (current && current.get(param, false)) || __top.get(param, false);
      if (!pv && maybeSetVal !== undefined) {
        pv = Box.make(initValue);
        __top.set(param, pv);
      }
      if (maybeSetVal === undefined) {
        return pv ? pv.get() : initValue;
      }
      pv.set(maybeSetVal);
    };
    return param;
  }
  function extendParameterization(parameterization) {
    for (var args = [],
        $__9 = 1; $__9 < arguments.length; $__9++)
      args[$__9 - 1] = arguments[$__9];
    var result = parameterization;
    for (var i = 0; i < args.length; i += 2) {
      result = result.set(args[i], Box.make(args[i + 1]));
    }
    return result;
  }
  function copyParameterization(parameterization) {
    var $__11,
        $__12;
    var result = hamt.make();
    var $__5 = true;
    var $__6 = false;
    var $__7 = undefined;
    try {
      for (var $__3 = void 0,
          $__2 = (parameterization)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
        var $__10 = $__3.value,
            key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
            val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
        {
          result = result.set(key, Box.make(val.get()));
        }
      }
    } catch ($__8) {
      $__6 = true;
      $__7 = $__8;
    } finally {
      try {
        if (!$__5 && $__2.return != null) {
          $__2.return();
        }
      } finally {
        if ($__6) {
          throw $__7;
        }
      }
    }
    return result;
  }
  (function() {
    var p = getCurrentParameterization();
    if (p !== false) {
      return;
    }
    Marks.setMark(ParameterizationKey, hamt.make());
    __top = new Map();
    Marks.registerAsynCallbackWrapper({
      onCreate: function(state) {
        var $__11,
            $__12;
        var paramz = {};
        paramz.top = new Map();
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (__top)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__10 = $__3.value,
                key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
                val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
            {
              paramz.top.set(key, Box.make(val.get()));
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        paramz.bottom = copyParameterization(Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false));
        state.paramz = paramz;
      },
      onInvoke: function(state) {
        __top = state.paramz.top;
        Marks.setMark(ParameterizationKey, state.paramz.bottom);
      }
    });
  }());
  return {
    get ParameterizationKey() {
      return ParameterizationKey;
    },
    get ExceptionHandlerKey() {
      return ExceptionHandlerKey;
    },
    get getCurrentParameterization() {
      return getCurrentParameterization;
    },
    get makeParameter() {
      return makeParameter;
    },
    get extendParameterization() {
      return extendParameterization;
    },
    get copyParameterization() {
      return copyParameterization;
    }
  };
})();
var $__runtime_47_kernel_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.js";
  var Core = $__runtime_47_core_46_js__;
  function isImmutable(v) {
    if (Core.Primitive.check(v)) {
      return v.isImmutable();
    } else if (Core.Bytes.check(v) || typeof v === 'string') {
      return true;
    } else if (typeof v === 'number' || typeof v === 'boolean' || typeof v === 'undefined' || v === null) {
      return false;
    }
    throw Core.racketCoreError('isImmutable not implemented for', v);
  }
  var NO_ARG_FORM_RE = /^~[\s~n%]/;
  function fprintf(isPrintAsExpression, out, form) {
    var $__4;
    for (var args = [],
        $__0 = 3; $__0 < arguments.length; $__0++)
      args[$__0 - 3] = arguments[$__0];
    var regex = /~(?:[aAsSvVbBoOxX~n%]|\s+)/g;
    var formStr = form.toString();
    var reExecResult;
    var currentMatchIndex = 0;
    var prevIndex = 0;
    var lastMatch = '';
    var matches = formStr.match(regex);
    var numExpected = matches ? matches.filter(function(m) {
      return !NO_ARG_FORM_RE.test(m);
    }).length : 0;
    if (numExpected !== args.length) {
      throw ($__4 = Core).racketContractError.apply($__4, $traceurRuntime.spread([("fprintf: format string requires " + numExpected + " arguments, ") + ("given " + args.length + "; arguments were:"), out, form], args));
    }
    while ((reExecResult = regex.exec(formStr)) !== null) {
      Core.display(out, formStr.slice(prevIndex + lastMatch.length, reExecResult.index));
      prevIndex = reExecResult.index;
      lastMatch = reExecResult[0];
      if (/^~\s/.test(lastMatch))
        continue;
      switch (lastMatch.charAt(1)) {
        case '~':
          Core.display(out, '~');
          continue;
        case 'n':
        case '%':
          Core.display(out, '\n');
          continue;
      }
      var v = args[currentMatchIndex];
      currentMatchIndex += 1;
      switch (lastMatch.charAt(1)) {
        case 'a':
        case 'A':
          Core.display(out, v);
          break;
        case 's':
        case 'S':
          Core.write(out, v);
          break;
        case 'v':
        case 'V':
          Core.print(out, v, isPrintAsExpression, 0);
          break;
        case 'b':
        case 'B':
          Core.display(out, v.toString(2));
          break;
        case 'o':
        case 'O':
          Core.display(out, v.toString(8));
          break;
        case 'x':
        case 'X':
          Core.display(out, v.toString(16));
          break;
        default:
          throw Core.racketContractError('Unsupported format:', lastMatch);
      }
    }
    if (lastMatch.length + prevIndex < form.length) {
      Core.display(out, formStr.slice(lastMatch.length + prevIndex));
    }
  }
  function format(form) {
    for (var args = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args[$__1 - 1] = arguments[$__1];
    var strOut = Core.Ports.openOutputString();
    fprintf.apply((void 0), $traceurRuntime.spread([strOut, form], args));
    return Core.Ports.getOutputString(strOut);
  }
  function listToString(charsList) {
    return Core.UString.makeMutableFromChars(Core.Pair.listToArray(charsList));
  }
  function error(firstArg) {
    var $__4,
        $__5;
    for (var rest = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      rest[$__2 - 1] = arguments[$__2];
    if (Core.Symbol.check(firstArg)) {
      if (rest.length === 0) {
        throw Core.racketCoreError(firstArg.toString());
      } else {
        throw ($__4 = Core).racketCoreError.apply($__4, $traceurRuntime.spread([(firstArg.toString() + ":")], rest));
      }
    } else if (Core.UString.check(firstArg) || typeof firstArg === 'string') {
      throw ($__5 = Core).racketCoreError.apply($__5, $traceurRuntime.spread([firstArg.toString()], rest));
    } else {
      throw Core.racketContractError('error: invalid arguments');
    }
  }
  function random() {
    for (var args = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      args[$__3] = arguments[$__3];
    switch (args.length) {
      case 0:
        return Math.random();
      case 1:
        if (args[0] > 0) {
          return Math.floor(Math.random() * args[0]);
        }
        error('random: argument should be positive');
      case 2:
        if (args[0] > 0 && args[1] > args[0]) {
          return Math.floor(args[0] + Math.random() * (args[1] - args[0]));
        }
        error('random: invalid arguments');
      default:
        error('random: invalid number of arguments');
    }
  }
  function memv(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEqv(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memq(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEq(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function findf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return list.hd;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function sort9(lst, cmp) {
    var arr = Core.Pair.listToArray(lst);
    var x2i = new Map();
    arr.forEach(function(x, i) {
      x2i.set(x, i);
    });
    var srted = arr.sort(function(x, y) {
      if (cmp(x, y)) {
        return -1;
      } else if (cmp(y, x)) {
        return 1;
      }
      return x2i.get(x) - x2i.get(y);
    });
    return Core.Pair.listFromArray(srted);
  }
  function assv(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEqv(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assq(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEq(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assf(f, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (f(lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  return {
    get isImmutable() {
      return isImmutable;
    },
    get fprintf() {
      return fprintf;
    },
    get format() {
      return format;
    },
    get listToString() {
      return listToString;
    },
    get error() {
      return error;
    },
    get random() {
      return random;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    }
  };
})();
var $__runtime_47_lib_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/lib.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var Kernel = $__runtime_47_kernel_46_js__;
  var Values = Core.Values;
  var Pair = Core.Pair;
  var __rjs_quoted__ = {};
  __rjs_quoted__.Core = Core;
  __rjs_quoted__.Pair = Pair;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get Kernel() {
      return Kernel;
    },
    get Core() {
      return Core;
    },
    get Paramz() {
      return Paramz;
    },
    get Values() {
      return Values;
    },
    get Pair() {
      return Pair;
    }
  };
})();
var $__runtime_47_kernel_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M2 = $__runtime_47_lib_46_rkt_46_js__;
  var equal_p = M2.Core.isEqual;
  var eqv_p = M2.Core.isEqv;
  var eq_p = M2.Core.isEq;
  var values = function() {
    var vals73 = M2.Core.argumentsToArray(arguments);
    if ((vals73.length === 1) !== false) {
      var if_res10 = vals73[0];
    } else {
      var if_res10 = M2.Values.make(vals73);
    }
    return if_res10;
  };
  var call_with_values = function(generator74, receiver75) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var vals76 = generator74();
    if (M2.Values.check(vals76) !== false) {
      var if_res12 = receiver75.apply(this, vals76.getAll());
    } else {
      if (not(eq_p(vals76, undefined) || eq_p(vals76, null)) !== false) {
        var if_res11 = receiver75.apply(this, [vals76]);
      } else {
        var if_res11 = rvoid();
      }
      var if_res12 = if_res11;
    }
    return if_res12;
  };
  var immutable_p = function(v77) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.isImmutable(v77);
  };
  var rvoid = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return null;
  };
  var void_p = function(v78) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (v78 === null) || (v78 === undefined);
  };
  var number_p = M2.Core.Number.check;
  var real_p = M2.Core.Number.check;
  var integer_p = Number.isInteger;
  var zero_p = function(v79) {
    if (number_p(v79) !== false) {
      var if_res13 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v79, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res13 = null;
    }
    if_res13;
    return v79 === 0;
  };
  var raise_mismatch_error = function(e80) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return error($rjs_core.Symbol.make("boo"));
  };
  var positive_p = function(v81) {
    if (real_p(v81) !== false) {
      var if_res14 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v81, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res14 = null;
    }
    if_res14;
    return v81 > 0;
  };
  var negative_p = function(v82) {
    if (real_p(v82) !== false) {
      var if_res15 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v82, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res15 = null;
    }
    if_res15;
    return v82 < 0;
  };
  var add1 = function(v83) {
    if (number_p(v83) !== false) {
      var if_res16 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v83, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res16 = null;
    }
    if_res16;
    return v83 + 1;
  };
  var sub1 = function(v84) {
    if (number_p(v84) !== false) {
      var if_res17 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v84, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res17 = null;
    }
    if_res17;
    return v84 - 1;
  };
  var quotient = function(dividend85, divisor86) {
    if (integer_p(dividend85) !== false) {
      var if_res18 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), dividend85, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res18 = null;
    }
    if_res18;
    if (integer_p(divisor86) !== false) {
      var if_res19 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), divisor86, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res19 = null;
    }
    if_res19;
    return (dividend85 / divisor86) | 0;
  };
  var even_p = function(v87) {
    if (integer_p(v87) !== false) {
      var if_res20 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), v87, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res20 = null;
    }
    if_res20;
    return (v87 % 2) === 0;
  };
  var odd_p = function(v88) {
    if (integer_p(v88) !== false) {
      var if_res21 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), v88, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res21 = null;
    }
    if_res21;
    return not((v88 % 2) === 0);
  };
  var exact_nonnegative_integer_p = function(v89) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v89) && (v89 >= 0);
  };
  var exact_integer_p = function(v90) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v90);
  };
  var __times_ = M2.Core.Number.mul;
  var __by_ = M2.Core.Number.div;
  var __plus_ = M2.Core.Number.add;
  var __ = M2.Core.Number.sub;
  var __lt_ = M2.Core.Number.lt;
  var __gt_ = M2.Core.Number.gt;
  var __lt__eq_ = M2.Core.Number.lte;
  var __gt__eq_ = M2.Core.Number.gte;
  var __eq_ = M2.Core.Number.equals;
  var floor = function(v91) {
    if (real_p(v91) !== false) {
      var if_res22 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v91, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res22 = null;
    }
    if_res22;
    return Math.floor(v91);
  };
  var abs = function(v92) {
    if (real_p(v92) !== false) {
      var if_res23 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v92, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res23 = null;
    }
    if_res23;
    return Math.abs(v92);
  };
  var sin = function(v93) {
    if (real_p(v93) !== false) {
      var if_res24 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v93, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res24 = null;
    }
    if_res24;
    return Math.sin(v93);
  };
  var cos = function(v94) {
    if (real_p(v94) !== false) {
      var if_res25 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v94, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res25 = null;
    }
    if_res25;
    return Math.cos(v94);
  };
  var tan = function(v95) {
    if (real_p(v95) !== false) {
      var if_res26 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v95, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res26 = null;
    }
    if_res26;
    return Math.tan(v95);
  };
  var atan = function(v96) {
    if (real_p(v96) !== false) {
      var if_res27 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v96, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res27 = null;
    }
    if_res27;
    return Math.atan(v96);
  };
  var ceiling = function(v97) {
    if (real_p(v97) !== false) {
      var if_res28 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v97, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res28 = null;
    }
    if_res28;
    return Math.ceil(v97);
  };
  var round = function(v98) {
    if (real_p(v98) !== false) {
      var if_res29 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v98, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res29 = null;
    }
    if_res29;
    return Math.round(v98);
  };
  var min = function(a99, b100) {
    if (real_p(a99) !== false) {
      var if_res30 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), a99, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res30 = null;
    }
    if_res30;
    if (real_p(b100) !== false) {
      var if_res31 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), b100, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res31 = null;
    }
    if_res31;
    return Math.min(a99, b100);
  };
  var max = function(a101, b102) {
    if (real_p(a101) !== false) {
      var if_res32 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), a101, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res32 = null;
    }
    if_res32;
    if (real_p(b102) !== false) {
      var if_res33 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), b102, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res33 = null;
    }
    if_res33;
    return Math.max(a101, b102);
  };
  var log = function(v103) {
    if (real_p(v103) !== false) {
      var if_res34 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v103, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res34 = null;
    }
    if_res34;
    return Math.log(v103);
  };
  var expt = function(w104, z105) {
    if (number_p(w104) !== false) {
      var if_res35 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), w104, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res35 = null;
    }
    if_res35;
    if (number_p(z105) !== false) {
      var if_res36 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), z105, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res36 = null;
    }
    if_res36;
    return Math.pow(w104, z105);
  };
  var sqrt = function(v106) {
    if (number_p(v106) !== false) {
      var if_res37 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v106, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res37 = null;
    }
    if_res37;
    return Math.sqrt(v106);
  };
  var sqr = function(v107) {
    if (number_p(v107) !== false) {
      var if_res38 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v107, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res38 = null;
    }
    if_res38;
    return __times_(v107, v107);
  };
  var remainder = function(a108, b109) {
    if (integer_p(a108) !== false) {
      var if_res39 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), a108, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res39 = null;
    }
    if_res39;
    if (integer_p(b109) !== false) {
      var if_res40 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), b109, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res40 = null;
    }
    if_res40;
    return a108 % b109;
  };
  var number__gt_string = function(n110) {
    if (number_p(n110) !== false) {
      var if_res41 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), n110, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res41 = null;
    }
    if_res41;
    return M2.Core.UString.makeMutable(n110.toString());
  };
  var inexact__gt_exact = function(x111) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x111;
  };
  var exact__gt_inexact = function(x112) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x112;
  };
  var not = function(v113) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return equal_p(v113, false) || false;
  };
  var rfalse = false;
  var rtrue = true;
  var false_p = function(v114) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v114 === false;
  };
  var car = function(pair115) {
    if (pair_p(pair115) !== false) {
      var if_res42 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("pair?"), $rjs_core.UString.makeInternedImmutable(", given:"), pair115, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res42 = null;
    }
    if_res42;
    return pair115.hd;
  };
  var cdr = function(pair116) {
    if (pair_p(pair116) !== false) {
      var if_res43 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("pair?"), $rjs_core.UString.makeInternedImmutable(", given:"), pair116, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res43 = null;
    }
    if_res43;
    return pair116.tl;
  };
  var cons = M2.Core.Pair.make;
  var pair_p = M2.Core.Pair.check;
  var caar = function(v117) {
    if ((function(v118) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v118) && pair_p(v118.hd);
    })(v117) !== false) {
      var if_res44 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? pair? #t)"), $rjs_core.UString.makeInternedImmutable(", given:"), v117, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res44 = null;
    }
    if_res44;
    return v117.hd.hd;
  };
  var cadr = function(v119) {
    if ((function(v120) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v120) && pair_p(v120.tl);
    })(v119) !== false) {
      var if_res45 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t pair?)"), $rjs_core.UString.makeInternedImmutable(", given:"), v119, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res45 = null;
    }
    if_res45;
    return v119.tl.hd;
  };
  var cdar = function(v121) {
    if ((function(v122) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v122) && pair_p(v122.hd);
    })(v121) !== false) {
      var if_res46 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? pair? #t)"), $rjs_core.UString.makeInternedImmutable(", given:"), v121, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res46 = null;
    }
    if_res46;
    return v121.hd.tl;
  };
  var cddr = function(v123) {
    if ((function(v124) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v124) && pair_p(v124.tl);
    })(v123) !== false) {
      var if_res47 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t pair?)"), $rjs_core.UString.makeInternedImmutable(", given:"), v123, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res47 = null;
    }
    if_res47;
    return v123.tl.tl;
  };
  var caddr = function(v125) {
    if ((function(v126) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v126) && (function(v127) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.Core.Pair.check(v127) && pair_p(v127.tl);
      })(v126.tl);
    })(v125) !== false) {
      var if_res48 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t (check/pair-of? #t pair?))"), $rjs_core.UString.makeInternedImmutable(", given:"), v125, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res48 = null;
    }
    if_res48;
    return v125.tl.tl.hd;
  };
  var rnull = M2.Core.Pair.EMPTY;
  var list = M2.Core.Pair.makeList;
  var null_p = M2.Core.Pair.isEmpty;
  var list_p = M2.Core.Pair.isList;
  var length = function(v128) {
    if (list_p(v128) !== false) {
      var if_res49 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("list?"), $rjs_core.UString.makeInternedImmutable(", given:"), v128, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res49 = null;
    }
    if_res49;
    return v128.length;
  };
  var reverse = function(lst129) {
    if (list_p(lst129) !== false) {
      var if_res50 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("list?"), $rjs_core.UString.makeInternedImmutable(", given:"), lst129, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res50 = null;
    }
    if_res50;
    var loop130 = function(lst131, result132) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst131) !== false) {
        var if_res51 = result132;
      } else {
        var if_res51 = loop130(lst131.tl, M2.Core.Pair.make(lst131.hd, result132));
      }
      return if_res51;
    };
    return loop130(lst129, $rjs_core.Pair.makeList());
  };
  var list_times_ = $rjs_core.attachProcedureArity(function(a0133) {
    for (var args13452 = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args13452[$__1 - 1] = arguments[$__1];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args134 = $rjs_core.Pair.listFromArray(args13452);
    var lst135 = reverse(cons(a0133, args134));
    var loop136 = function(rst137, result138) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(rst137) !== false) {
        var if_res53 = rst137;
      } else {
        var if_res53 = loop136(cdr(rst137), cons(car(rst137), result138));
      }
      return if_res53;
    };
    return loop136(cdr(lst135), car(lst135));
  });
  var append = function() {
    var let_result54 = values();
    var result139 = $rjs_core.Pair.makeList();
    var lsts140 = arguments;
    var loop141 = function(i142) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i142 < lsts140.length) !== false) {
        var lst143 = lsts140[i142];
        result139 = foldr(M2.Core.Pair.make, lst143, result139);
        var if_res55 = loop141(i142 + 1);
      } else {
        var if_res55 = rvoid();
      }
      return if_res55;
    };
    loop141(0);
    return result139;
  };
  var for_each = function(lam144) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res56 = null;
    } else {
      var if_res56 = rvoid();
    }
    if_res56;
    var let_result57 = values();
    var lsts145 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam144) !== false) {
      var if_res58 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), lam144, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res58 = null;
    }
    if_res58;
    map.apply(null, [lam144].concat(lsts145));
    return null;
  };
  var mcons = function(hd146, tl147) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.make(hd146, tl147);
  };
  var mpair_p = function(v148) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.check(v148);
  };
  var mcar = function(p149) {
    if (mpair_p(p149) !== false) {
      var if_res59 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p149, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res59 = null;
    }
    if_res59;
    return p149.car();
  };
  var mcdr = function(p150) {
    if (mpair_p(p150) !== false) {
      var if_res60 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p150, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res60 = null;
    }
    if_res60;
    return p150.cdr();
  };
  var set_mcar_bang_ = function(p151, v152) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p151) !== false) {
      var if_res61 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p151, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res61 = null;
    }
    if_res61;
    return p151.setCar(v152);
  };
  var set_mcdr_bang_ = function(p153, v154) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p153) !== false) {
      var if_res62 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p153, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res62 = null;
    }
    if_res62;
    return p153.setCdr(v154);
  };
  var make_struct_type = function(name155, super_type156, init_field_count157, auto_field_count158, auto_v159, props160, inspector161, proc_spec162, immutables163, guard164, constructor_name165) {
    return M2.Core.Struct.makeStructType({
      'name': name155.toString(),
      'superType': super_type156,
      'initFieldCount': init_field_count157,
      'autoFieldCount': auto_field_count158,
      'autoV': auto_v159,
      'props': props160,
      'inspector': inspector161,
      'procSpec': proc_spec162,
      'immutables': immutables163,
      'guard': guard164,
      'constructorName': constructor_name165
    });
  };
  var make_struct_field_accessor = function(ref166, index167, field_name168) {
    return function(s169) {
      if ((arguments.length !== 1) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
        var if_res63 = null;
      } else {
        var if_res63 = rvoid();
      }
      if_res63;
      return ref166(s169, index167);
    };
  };
  var make_struct_field_mutator = function(set170, index171, fieldName172) {
    return function(s173, v174) {
      if ((arguments.length !== 2) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
        var if_res64 = null;
      } else {
        var if_res64 = rvoid();
      }
      if_res64;
      return set170(s173, index171, v174);
    };
  };
  var make_struct_type_property = function(name175, guard176, supers177, can_impersonate_p178) {
    return M2.Core.Struct.makeStructTypeProperty({
      'name': name175,
      'guard': guard176,
      'supers': supers177,
      'canImpersonate': can_impersonate_p178
    });
  };
  var check_struct_type = function(name179, what180) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (what180 !== false) {
      if (M2.Core.Struct.isStructType(what180) !== false) {
        var if_res65 = rvoid();
      } else {
        throw M2.Core.racketCoreError($rjs_core.UString.makeInternedImmutable("not a struct type"));
        var if_res65 = null;
      }
      if_res65;
      var if_res66 = what180;
    } else {
      var if_res66 = rvoid();
    }
    return if_res66;
  };
  var struct_type_p = function(v181) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Struct.isStructType(v181);
  };
  var struct_type_info = function(desc182) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Values.make(M2.Core.Struct.structTypeInfo(desc182));
  };
  var vector = function() {
    return M2.Core.Vector.make(M2.Core.argumentsToArray(arguments), true);
  };
  var make_vector = function(size183, v184) {
    if (integer_p(size183) !== false) {
      var if_res67 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), size183, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res67 = null;
    }
    if_res67;
    return M2.Core.Vector.makeInit(size183, v184 || 0);
  };
  var vector_p = M2.Core.Vector.check;
  var vector_length = function(v185) {
    if (vector_p(v185) !== false) {
      var if_res68 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), v185, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res68 = null;
    }
    if_res68;
    return v185.length();
  };
  var vector_ref = function(vec186, i187) {
    if (vector_p(vec186) !== false) {
      var if_res69 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec186, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res69 = null;
    }
    if_res69;
    if (integer_p(i187) !== false) {
      var if_res70 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i187, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res70 = null;
    }
    if_res70;
    return vec186.ref(i187);
  };
  var vector_set_bang_ = function(vec188, i189, v190) {
    if (vector(vec188) !== false) {
      var if_res71 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable(", given:"), vec188, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res71 = null;
    }
    if_res71;
    if (integer_p(i189) !== false) {
      var if_res72 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i189, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res72 = null;
    }
    if_res72;
    return vec188.set(i189, v190);
  };
  var vector__gt_list = function(vec191) {
    if (vector_p(vec191) !== false) {
      var if_res73 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec191, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res73 = null;
    }
    if_res73;
    return M2.Core.Pair.listFromArray(vec191.items);
  };
  var vector__gt_immutable_vector = function(vec192) {
    if (vector_p(vec192) !== false) {
      var if_res74 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec192, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res74 = null;
    }
    if_res74;
    return M2.Core.Vector.copy(vec192, false);
  };
  var hash = function() {
    var let_result75 = values();
    var kv_times_193 = arguments;
    if (((kv_times_193.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res76 = null;
    } else {
      var if_res76 = rvoid();
    }
    if_res76;
    var items194 = [];
    var loop195 = function(i196) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i196 < kv_times_193.length) !== false) {
        items194.push([kv_times_193[i196], kv_times_193[__plus_(i196, 1)]]);
        var if_res77 = loop195(i196 + 2);
      } else {
        var if_res77 = rvoid();
      }
      return if_res77;
    };
    loop195(0);
    return M2.Core.Hash.makeEqual(items194, false);
  };
  var hasheqv = function() {
    var let_result78 = values();
    var kv_times_197 = arguments;
    if (((kv_times_197.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res79 = null;
    } else {
      var if_res79 = rvoid();
    }
    if_res79;
    var items198 = [];
    var loop199 = function(i200) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i200 < kv_times_197.length) !== false) {
        items198.push([kv_times_197[i200], kv_times_197[__plus_(i200, 1)]]);
        var if_res80 = loop199(i200 + 2);
      } else {
        var if_res80 = rvoid();
      }
      return if_res80;
    };
    loop199(0);
    return M2.Core.Hash.makeEqv(items198, false);
  };
  var hasheq = function() {
    var let_result81 = values();
    var kv_times_201 = arguments;
    if (((kv_times_201.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res82 = null;
    } else {
      var if_res82 = rvoid();
    }
    if_res82;
    var items202 = [];
    var loop203 = function(i204) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i204 < kv_times_201.length) !== false) {
        items202.push([kv_times_201[i204], kv_times_201[__plus_(i204, 1)]]);
        var if_res83 = loop203(i204 + 2);
      } else {
        var if_res83 = rvoid();
      }
      return if_res83;
    };
    loop203(0);
    return M2.Core.Hash.makeEq(items202, false);
  };
  var make_hash = function(assocs205) {
    var let_result84 = values();
    var assocs_times_206 = assocs205 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_206, true);
  };
  var make_hasheqv = function(assocs207) {
    var let_result85 = values();
    var assocs_times_208 = assocs207 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_208, true);
  };
  var make_hasheq = function(assocs209) {
    var let_result86 = values();
    var assocs_times_210 = assocs209 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_210, true);
  };
  var make_immutable_hash = function(assocs211) {
    var let_result87 = values();
    var assocs_times_212 = assocs211 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_212, false);
  };
  var make_immutable_hasheqv = function(assocs213) {
    var let_result88 = values();
    var assocs_times_214 = assocs213 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_214, false);
  };
  var make_immutable_hasheq = function(assocs215) {
    var let_result89 = values();
    var assocs_times_216 = assocs215 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_216, false);
  };
  var hash_p = M2.Core.Hash.check;
  var hash_equal_p = M2.Core.Hash.isEqualHash;
  var hash_eqv_p = M2.Core.Hash.isEqvHash;
  var hash_eq_p = M2.Core.Hash.isEqHash;
  var hash_ref = function(h217, k218, fail219) {
    return h217.ref(k218, fail219);
  };
  var hash_set = function(h220, k221, v222) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h220.set(k221, v222);
  };
  var hash_set_bang_ = function(h223, k224, v225) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h223.set(k224, v225);
  };
  var hash_map = function(h226, proc227) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Hash.map(h226, proc227);
  };
  var apply = function(lam228) {
    var let_result90 = values();
    var args229 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam228) !== false) {
      var if_res91 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), lam228, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res91 = null;
    }
    if_res91;
    var let_result92 = values();
    if (zero_p(args229.length) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res96 = null;
    } else {
      if (equal_p(args229.length, 1) !== false) {
        if (null_p(args229[0]) !== false) {
          var if_res94 = rvoid();
        } else {
          if (M2.Core.Pair.check(args229[0]) !== false) {
            var if_res93 = rvoid();
          } else {
            throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("expected a"), M2.Core.Pair, $rjs_core.UString.makeInternedImmutable(", but given"), args229[0]);
            var if_res93 = null;
          }
          var if_res94 = if_res93;
        }
        if_res94;
        var if_res95 = M2.Core.Pair.listToArray(args229[0]);
      } else {
        var if_res95 = args229.concat(M2.Core.Pair.listToArray(args229.pop()));
      }
      var if_res96 = if_res95;
    }
    var final_args230 = if_res96;
    return lam228.apply(null, final_args230);
  };
  var map = function(fn231) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res97 = null;
    } else {
      var if_res97 = rvoid();
    }
    if_res97;
    var let_result98 = values();
    var lists232 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(fn231) !== false) {
      var if_res99 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn231, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res99 = null;
    }
    if_res99;
    var let_result100 = values();
    if (__lt__eq_(lists232.length, 0) !== false) {
      var if_res101 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res101 = rvoid();
    }
    if_res101;
    var let_result102 = values();
    var lst_len233 = length(lists232[0]);
    var loop234 = function(i235) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i235 < lists232.length) !== false) {
        var v236 = lists232[i235];
        if (eq_p(length(v236), lst_len233) !== false) {
          var if_res103 = rvoid();
        } else {
          var if_res103 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res103;
        var if_res104 = loop234(i235 + 1);
      } else {
        var if_res104 = rvoid();
      }
      return if_res104;
    };
    loop234(1);
    var let_result105 = values();
    var result237 = Array(lst_len233);
    var args238 = Array(lists232.length);
    var loop239 = function(result_i240) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i240 < lst_len233) !== false) {
        var loop241 = function(lst_j242) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j242 < lists232.length) !== false) {
            var lst243 = lists232[lst_j242];
            args238[lst_j242] = lst243.hd;
            lists232[lst_j242] = lst243.tl;
            var if_res106 = loop241(lst_j242 + 1);
          } else {
            var if_res106 = rvoid();
          }
          return if_res106;
        };
        loop241(0);
        result237[result_i240] = fn231.apply(null, args238);
        var if_res107 = loop239(result_i240 + 1);
      } else {
        var if_res107 = rvoid();
      }
      return if_res107;
    };
    loop239(0);
    return M2.Core.Pair.listFromArray(result237);
  };
  var foldl = function(fn244, init245) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res108 = null;
    } else {
      var if_res108 = rvoid();
    }
    if_res108;
    var let_result109 = values();
    var lists246 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn244) !== false) {
      var if_res110 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn244, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res110 = null;
    }
    if_res110;
    var let_result111 = values();
    if (__lt__eq_(lists246.length, 0) !== false) {
      var if_res112 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res112 = rvoid();
    }
    if_res112;
    var let_result113 = values();
    var lst_len247 = length(lists246[0]);
    var loop248 = function(i249) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i249 < lists246.length) !== false) {
        var v250 = lists246[i249];
        if (eq_p(length(v250), lst_len247) !== false) {
          var if_res114 = rvoid();
        } else {
          var if_res114 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res114;
        var if_res115 = loop248(i249 + 1);
      } else {
        var if_res115 = rvoid();
      }
      return if_res115;
    };
    loop248(1);
    var let_result116 = values();
    var result251 = init245;
    var args252 = Array(lists246.length + 1);
    var loop253 = function(result_i254) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i254 < lst_len247) !== false) {
        var loop255 = function(lst_j256) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j256 < lists246.length) !== false) {
            var lst257 = lists246[lst_j256];
            args252[lst_j256] = lst257.hd;
            lists246[lst_j256] = lst257.tl;
            var if_res117 = loop255(lst_j256 + 1);
          } else {
            var if_res117 = rvoid();
          }
          return if_res117;
        };
        loop255(0);
        args252[lists246.length] = result251;
        result251 = fn244.apply(null, args252);
        var if_res118 = loop253(result_i254 + 1);
      } else {
        var if_res118 = rvoid();
      }
      return if_res118;
    };
    loop253(0);
    return result251;
  };
  var _foldr = function(fn258, init259, lists260) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lists260[0]) !== false) {
      var if_res120 = init259;
    } else {
      var args261 = Array(add1(lists260.length));
      var loop262 = function(ii263) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((ii263 < lists260.length) !== false) {
          var lst264 = lists260[ii263];
          args261[ii263] = lst264.hd;
          lists260[ii263] = lst264.tl;
          var if_res119 = loop262(ii263 + 1);
        } else {
          var if_res119 = rvoid();
        }
        return if_res119;
      };
      loop262(0);
      args261[lists260.length] = _foldr(fn258, init259, lists260);
      var if_res120 = fn258.apply(null, args261);
    }
    return if_res120;
  };
  var foldr = function(fn265, init266) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res121 = null;
    } else {
      var if_res121 = rvoid();
    }
    if_res121;
    var let_result122 = values();
    var lists267 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn265) !== false) {
      var if_res123 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn265, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res123 = null;
    }
    if_res123;
    var let_result124 = values();
    if (__lt__eq_(lists267.length, 0) !== false) {
      var if_res125 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res125 = rvoid();
    }
    if_res125;
    var let_result126 = values();
    var lst_len268 = length(lists267[0]);
    var loop269 = function(i270) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i270 < lists267.length) !== false) {
        var v271 = lists267[i270];
        if (eq_p(length(v271), lst_len268) !== false) {
          var if_res127 = rvoid();
        } else {
          var if_res127 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res127;
        var if_res128 = loop269(i270 + 1);
      } else {
        var if_res128 = rvoid();
      }
      return if_res128;
    };
    loop269(1);
    return _foldr(fn265, init266, lists267);
  };
  var cl129 = function(end272) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range(0, end272, 1);
  };
  var cl130 = function(start273, end274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (__lt_(start273, end274) !== false) {
      var if_res133 = 1;
    } else {
      var if_res133 = -1;
    }
    return range(start273, end274, if_res133);
  };
  var cl131 = function(start275, end276, step277) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result278 = [];
    if ((__gt__eq_(step277, 0) && __lt_(step277, end276)) !== false) {
      var loop279 = function(i280) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i280 < end276) !== false) {
          result278.push(i280);
          var if_res134 = loop279(i280 + step277);
        } else {
          var if_res134 = rvoid();
        }
        return if_res134;
      };
      var if_res137 = loop279(start275);
    } else {
      if ((__lt__eq_(step277, 0) && __lt_(end276, start275)) !== false) {
        var loop281 = function(i282) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((i282 < __(end276)) !== false) {
            result278.push(__(i282));
            var if_res135 = loop281(i282 + __(step277));
          } else {
            var if_res135 = rvoid();
          }
          return if_res135;
        };
        var if_res136 = loop281(__(start275));
      } else {
        var if_res136 = rvoid();
      }
      var if_res137 = if_res136;
    }
    if_res137;
    return M2.Core.Pair.listFromArray(result278);
  };
  var range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam132 = {
      '1': cl129,
      '2': cl130,
      '3': cl131
    }[arguments.length];
    if (fixed_lam132 !== undefined) {
      return fixed_lam132.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var remove = function(v283, lst284, proc285) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (eq_p(proc285, undefined) !== false) {
      proc285 = M2.Core.isEqual;
      var if_res138 = null;
    } else {
      var if_res138 = rvoid();
    }
    if_res138;
    var loop286 = function(result287, lst288) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst288) !== false) {
        var if_res140 = reverse(result287);
      } else {
        if (proc285(v283, car(lst288)) !== false) {
          var if_res139 = append(reverse(result287), cdr(lst288));
        } else {
          var if_res139 = rvoid();
        }
        if_res139;
        var if_res140 = loop286(cons(car(lst288), result287), cdr(lst288));
      }
      return if_res140;
    };
    return loop286($rjs_core.Pair.makeList(), lst284);
  };
  var filter = function(fn289, lst290) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop291 = function(result292, lst293) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst293) !== false) {
        var if_res142 = reverse(result292);
      } else {
        if (fn289(lst293.hd) !== false) {
          var if_res141 = loop291(M2.Core.Pair.make(lst293.hd, result292), lst293.tl);
        } else {
          var if_res141 = loop291(result292, lst293.tl);
        }
        var if_res142 = if_res141;
      }
      return if_res142;
    };
    return loop291($rjs_core.Pair.makeList(), lst290);
  };
  var ormap = function(fn294) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res143 = null;
    } else {
      var if_res143 = rvoid();
    }
    if_res143;
    var let_result144 = values();
    var lists295 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args296 = M2.Core.argumentsToArray(arguments);
      var final_arg297 = args296.pop();
      return (final_arg297 || fn294.apply(null, args296)) && true;
    }, false].concat(lists295));
  };
  var andmap = function(fn298) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res145 = null;
    } else {
      var if_res145 = rvoid();
    }
    if_res145;
    var let_result146 = values();
    var lists299 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args300 = M2.Core.argumentsToArray(arguments);
      var final_arg301 = args300.pop();
      return (final_arg301 && fn298.apply(null, args300)) && true;
    }, true].concat(lists299));
  };
  var member = function(v302, lst303) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop304 = function(lst305) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst305) !== false) {
        var if_res148 = false;
      } else {
        if (M2.Core.isEqual(v302, lst305.hd) !== false) {
          var if_res147 = lst305;
        } else {
          var if_res147 = loop304(lst305.tl);
        }
        var if_res148 = if_res147;
      }
      return if_res148;
    };
    return loop304(lst303);
  };
  var compose = function() {
    var procs306 = M2.Core.argumentsToArray(arguments);
    return function() {
      var let_result149 = values();
      var result307 = M2.Core.argumentsToArray(arguments);
      var procs_times_308 = procs306.reverse();
      var loop309 = function(i310) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i310 < procs_times_308.length) !== false) {
          var p311 = procs_times_308[i310];
          result307 = p311.apply(null, result307);
          if (M2.Core.Values.check(result307) !== false) {
            result307 = result307.getAll();
            var if_res150 = null;
          } else {
            result307 = [result307];
            var if_res150 = null;
          }
          if_res150;
          var if_res151 = loop309(i310 + 1);
        } else {
          var if_res151 = rvoid();
        }
        return if_res151;
      };
      loop309(0);
      if ((result307.length === 1) !== false) {
        var if_res152 = result307[0];
      } else {
        var if_res152 = M2.Core.Values.make(result307);
      }
      return if_res152;
    };
  };
  var compose1 = function() {
    var procs312 = M2.Core.argumentsToArray(arguments);
    return function(v313) {
      var let_result153 = values();
      var result314 = v313;
      var procs_times_315 = procs312.reverse();
      var loop316 = function(i317) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i317 < procs_times_315.length) !== false) {
          var p318 = procs_times_315[i317];
          result314 = p318(result314);
          var if_res154 = loop316(i317 + 1);
        } else {
          var if_res154 = rvoid();
        }
        return if_res154;
      };
      loop316(0);
      return result314;
    };
  };
  var list_ref = function(lst319, pos320) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop321 = function(i322, lst323) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst323) !== false) {
        var if_res156 = error($rjs_core.Symbol.make("list-ref?"), $rjs_core.UString.makeInternedImmutable("insufficient elements"));
      } else {
        if ((i322 === pos320) !== false) {
          var if_res155 = lst323.hd;
        } else {
          var if_res155 = loop321(i322 + 1, lst323.tl);
        }
        var if_res156 = if_res155;
      }
      return if_res156;
    };
    return loop321(0, lst319);
  };
  var build_list = function(n324, proc325) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arr326 = Array(n324);
    var loop327 = function(i328) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i328 < n324) !== false) {
        arr326[i328] = proc325(i328);
        var if_res157 = loop327(i328 + 1);
      } else {
        var if_res157 = rvoid();
      }
      return if_res157;
    };
    loop327(0);
    return M2.Core.Pair.listFromArray(arr326);
  };
  var make_list = function(n329, v330) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop331 = function(result332, i333) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i333 === n329) !== false) {
        var if_res158 = result332;
      } else {
        var if_res158 = loop331(M2.Core.Pair.make(v330, result332), i333 + 1);
      }
      return if_res158;
    };
    return loop331($rjs_core.Pair.makeList(), 0);
  };
  var flatten = function(lst334) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lst334) !== false) {
      var if_res160 = lst334;
    } else {
      if (pair_p(lst334) !== false) {
        var if_res159 = append(flatten(lst334.hd), flatten(lst334.tl));
      } else {
        var if_res159 = list(lst334);
      }
      var if_res160 = if_res159;
    }
    return if_res160;
  };
  var assoc = function(k335, lst336) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop337 = function(lst338) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst338) !== false) {
        var if_res162 = false;
      } else {
        if (M2.Core.isEqual(k335, lst338.hd.hd) !== false) {
          var if_res161 = lst338.hd;
        } else {
          var if_res161 = loop337(lst338.tl);
        }
        var if_res162 = if_res161;
      }
      return if_res162;
    };
    return loop337(lst336);
  };
  var memv = M2.Kernel.memv;
  var memq = M2.Kernel.memq;
  var memf = M2.Kernel.memf;
  var findf = M2.Kernel.findf;
  var sort9 = M2.Kernel.sort9;
  var assv = M2.Kernel.assv;
  var assq = M2.Kernel.assq;
  var assf = M2.Kernel.assf;
  var alt_reverse = reverse;
  var string = M2.Core.UString.makeMutableFromCharsVarArgs;
  var string_append = M2.Core.UString.stringAppend;
  var string_ref = function(s339, i340) {
    if (string_p(s339) !== false) {
      var if_res163 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s339, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res163 = null;
    }
    if_res163;
    if (exact_nonnegative_integer_p(i340) !== false) {
      var if_res164 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i340, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res164 = null;
    }
    if_res164;
    return s339.charAt(i340);
  };
  var string_eq__p = function(sa341, sb342) {
    if (string_p(sa341) !== false) {
      var if_res165 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa341, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res165 = null;
    }
    if_res165;
    if (string_p(sb342) !== false) {
      var if_res166 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb342, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res166 = null;
    }
    if_res166;
    return M2.Core.UString.eq(sa341, sb342);
  };
  var string_lt__p = function(sa343, sb344) {
    if (string_p(sa343) !== false) {
      var if_res167 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa343, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res167 = null;
    }
    if_res167;
    if (string_p(sb344) !== false) {
      var if_res168 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb344, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res168 = null;
    }
    if_res168;
    return M2.Core.UString.lt(sa343, sb344);
  };
  var string_lt__eq__p = function(sa345, sb346) {
    if (string_p(sa345) !== false) {
      var if_res169 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa345, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res169 = null;
    }
    if_res169;
    if (string_p(sb346) !== false) {
      var if_res170 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb346, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res170 = null;
    }
    if_res170;
    return M2.Core.UString.lte(sa345, sb346);
  };
  var string_gt__p = function(sa347, sb348) {
    if (string_p(sa347) !== false) {
      var if_res171 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa347, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res171 = null;
    }
    if_res171;
    if (string_p(sb348) !== false) {
      var if_res172 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb348, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res172 = null;
    }
    if_res172;
    return M2.Core.UString.gt(sa347, sb348);
  };
  var string_gt__eq__p = function(sa349, sb350) {
    if (string_p(sa349) !== false) {
      var if_res173 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa349, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res173 = null;
    }
    if_res173;
    if (string_p(sb350) !== false) {
      var if_res174 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb350, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res174 = null;
    }
    if_res174;
    return M2.Core.UString.gte(sa349, sb350);
  };
  var string_p = function(v351) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.UString.check(v351);
  };
  var fprintf = $rjs_core.attachProcedureArity(function(out352, form353) {
    for (var args354175 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args354175[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args354 = $rjs_core.Pair.listFromArray(args354175);
    return apply(M2.Kernel.fprintf, print_as_expression(), out352, form353, args354);
  });
  var format = $rjs_core.attachProcedureArity(function(form355) {
    for (var args356176 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      args356176[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args356 = $rjs_core.Pair.listFromArray(args356176);
    var out357 = open_output_string();
    apply(fprintf, out357, form355, args356);
    return get_output_string(out357);
  });
  var symbol_p = M2.Core.Symbol.check;
  var make_string4358 = function(k3359, c1360, c2361) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var k362 = k3359;
    if (c2361 !== false) {
      var if_res177 = c1360;
    } else {
      var if_res177 = $rjs_core.Char.charFromCodepoint(0);
    }
    var c363 = if_res177;
    return M2.Core.UString.repeatChar(k362, c363);
  };
  var cl178 = function(k364) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4358(k364, false, false);
  };
  var cl179 = function(k365, c1366) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4358(k365, c1366, true);
  };
  var make_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam180 = {
      '1': cl178,
      '2': cl179
    }[arguments.length];
    if (fixed_lam180 !== undefined) {
      return fixed_lam180.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var list__gt_string = function(lst367) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.listToString(lst367);
  };
  var string__gt_immutable_string8368 = function(s6369, s7370) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (s7370 !== false) {
      var if_res181 = s6369;
    } else {
      var if_res181 = string_p;
    }
    var s371 = if_res181;
    return M2.Core.UString.stringToImmutableString(s371);
  };
  var cl182 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8368(false, false);
  };
  var cl183 = function(s6372) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8368(s6372, true);
  };
  var string__gt_immutable_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam184 = {
      '0': cl182,
      '1': cl183
    }[arguments.length];
    if (fixed_lam184 !== undefined) {
      return fixed_lam184.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var symbol__gt_string = function(v373) {
    if (symbol_p(v373) !== false) {
      var if_res185 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("symbol?"), $rjs_core.UString.makeInternedImmutable(", given:"), v373, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res185 = null;
    }
    if_res185;
    return M2.Core.UString.makeMutable(v373.toString());
  };
  var string__gt_symbol = function(s374) {
    if (string_p(s374) !== false) {
      var if_res186 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s374, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res186 = null;
    }
    if_res186;
    return M2.Core.Symbol.make(s374);
  };
  var string__gt_uninterned_symbol = function(s375) {
    if (string_p(s375) !== false) {
      var if_res187 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s375, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res187 = null;
    }
    if_res187;
    return M2.Core.Symbol.makeUninterned(s375);
  };
  var symbol_interned_p = function(sym376) {
    if (symbol_p(sym376) !== false) {
      var if_res188 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("symbol?"), $rjs_core.UString.makeInternedImmutable(", given:"), sym376, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res188 = null;
    }
    if_res188;
    return sym376 === M2.Core.Symbol.make(sym376.v);
  };
  var symbol_eq__p = function(s377, v378) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return s377.equals(v378);
  };
  var string_length = function(s379) {
    if (string_p(s379) !== false) {
      var if_res189 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s379, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res189 = null;
    }
    if_res189;
    return s379.length;
  };
  var string_downcase = function(s380) {
    if (string_p(s380) !== false) {
      var if_res190 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s380, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res190 = null;
    }
    if_res190;
    return s380.toLowerCase();
  };
  var string_upcase = function(s381) {
    if (string_p(s381) !== false) {
      var if_res191 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s381, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res191 = null;
    }
    if_res191;
    return s381.toUpperCase();
  };
  var substring14382 = function(str12383, start13384, end10385, end11386) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var str387 = str12383;
    var start388 = start13384;
    if (end11386 !== false) {
      var if_res192 = end10385;
    } else {
      var if_res192 = false;
    }
    var end389 = if_res192;
    if (not(M2.Core.UString.check(str387)) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("expected a string"));
      var if_res196 = null;
    } else {
      if ((start388 < 0) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid start index"));
        var if_res195 = null;
      } else {
        if (((end389 !== false) && (((end389 < 0) || (end389 > str387.length)) || (end389 < start388))) !== false) {
          throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid end index"));
          var if_res194 = null;
        } else {
          if ((end389 === false) !== false) {
            end389 = str387.length;
            var if_res193 = null;
          } else {
            var if_res193 = rvoid();
          }
          var if_res194 = if_res193;
        }
        var if_res195 = if_res194;
      }
      var if_res196 = if_res195;
    }
    if_res196;
    return str387.substring(start388, end389);
  };
  var cl197 = function(str390, start391) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring14382(str390, start391, false, false);
  };
  var cl198 = function(str392, start393, end10394) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring14382(str392, start393, end10394, true);
  };
  var substring = $rjs_core.attachProcedureArity(function() {
    var fixed_lam199 = {
      '2': cl197,
      '3': cl198
    }[arguments.length];
    if (fixed_lam199 !== undefined) {
      return fixed_lam199.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var string_split = function(str395, sep396) {
    if (string_p(str395) !== false) {
      var if_res200 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str395, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res200 = null;
    }
    if_res200;
    if ((function(v397) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v397) || regexp_p(v397);
    })(sep396) !== false) {
      var if_res201 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/or string? regexp?)"), $rjs_core.UString.makeInternedImmutable(", given:"), sep396, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res201 = null;
    }
    if_res201;
    return M2.Core.Pair.listFromArray(str395.split(sep396));
  };
  var string_set_bang_ = function(str398, k399, char400) {
    if ((function(v401) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v401) && (function(v402) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return not(immutable_p(v402));
      })(v401);
    })(str398) !== false) {
      var if_res202 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/and string? (check/not immutable?))"), $rjs_core.UString.makeInternedImmutable(", given:"), str398, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res202 = null;
    }
    if_res202;
    if (exact_nonnegative_integer_p(k399) !== false) {
      var if_res203 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), k399, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res203 = null;
    }
    if_res203;
    if (char_p(char400) !== false) {
      var if_res204 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), char400, $rjs_core.UString.makeInternedImmutable(", at:"), 2);
      var if_res204 = null;
    }
    if_res204;
    return str398.setCharAt(k399, char400);
  };
  var char_p = function(c403) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Char.check(c403);
  };
  var char__gt_integer = function(c404) {
    if (char_p(c404) !== false) {
      var if_res205 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), c404, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res205 = null;
    }
    if_res205;
    return M2.Core.Char.charToInteger(c404);
  };
  var integer__gt_char = function(k405) {
    if (exact_nonnegative_integer_p(k405) !== false) {
      var if_res206 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), k405, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res206 = null;
    }
    if_res206;
    return M2.Core.Char.integerToChar(k405);
  };
  var char_utf_8_length = function(c406) {
    if (char_p(c406) !== false) {
      var if_res207 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), c406, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res207 = null;
    }
    if_res207;
    return M2.Core.Char.charUtf8Length(c406);
  };
  var char_lt__p = function(a407, b408) {
    if (char_p(a407) !== false) {
      var if_res208 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a407, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res208 = null;
    }
    if_res208;
    if (char_p(b408) !== false) {
      var if_res209 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b408, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res209 = null;
    }
    if_res209;
    return a407 < b408;
  };
  var char_lt__eq__p = function(a409, b410) {
    if (char_p(a409) !== false) {
      var if_res210 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a409, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res210 = null;
    }
    if_res210;
    if (char_p(b410) !== false) {
      var if_res211 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b410, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res211 = null;
    }
    if_res211;
    return a409 <= b410;
  };
  var char_gt__p = function(a411, b412) {
    if (char_p(a411) !== false) {
      var if_res212 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a411, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res212 = null;
    }
    if_res212;
    if (char_p(b412) !== false) {
      var if_res213 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b412, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res213 = null;
    }
    if_res213;
    return a411 > b412;
  };
  var char_gt__eq__p = function(a413, b414) {
    if (char_p(a413) !== false) {
      var if_res214 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a413, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res214 = null;
    }
    if_res214;
    if (char_p(b414) !== false) {
      var if_res215 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b414, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res215 = null;
    }
    if_res215;
    return a413 >= b414;
  };
  var char_eq__p = function(a415, b416) {
    if (char_p(a415) !== false) {
      var if_res216 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a415, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res216 = null;
    }
    if_res216;
    if (char_p(b416) !== false) {
      var if_res217 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b416, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res217 = null;
    }
    if_res217;
    return M2.Core.Char.eq(a415, b416);
  };
  var box = M2.Core.Box.make;
  var unbox = function(v417) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v417.get();
  };
  var set_box_bang_ = function(b418, v419) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return b418.set(v419);
  };
  var let_result218 = M2.Core.Struct.makeStructTypeProperty({'name': $rjs_core.UString.makeInternedImmutable("prop:evt")});
  var prop_evt = let_result218.getAt(0);
  var evt_p = let_result218.getAt(1);
  var prop_checked_procedure = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:checked-procedure")).getAt(0);
  var prop_impersonator_of = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:impersonator-of")).getAt(0);
  var prop_arity_string = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:arity-string")).getAt(0);
  var prop_incomplete_arity = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:incomplete-arity")).getAt(0);
  var prop_method_arity_error = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:method-arity-error")).getAt(0);
  var prop_exn_srclocs = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:exn:srclocs")).getAt(0);
  var prop_procedure = M2.Core.Struct.propProcedure;
  var error = M2.Kernel.error;
  var bytes_p = function(bs420) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Bytes.check(bs420);
  };
  var bytes__gt_string_by_utf_8 = function(bs421) {
    if (bytes_p(bs421) !== false) {
      var if_res219 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bs421, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res219 = null;
    }
    if_res219;
    return M2.Core.UString.fromBytesUtf8(bs421);
  };
  var string__gt_bytes_by_utf_8 = function(str422) {
    if (string_p(str422) !== false) {
      var if_res220 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str422, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res220 = null;
    }
    if_res220;
    return M2.Core.UString.toBytesUtf8(str422);
  };
  var bytes_eq__p = function(bstr1423, bstr2424) {
    if (bytes_p(bstr1423) !== false) {
      var if_res221 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bstr1423, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res221 = null;
    }
    if_res221;
    if (bytes_p(bstr2424) !== false) {
      var if_res222 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bstr2424, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res222 = null;
    }
    if_res222;
    return M2.Core.Bytes.eq(bstr1423, bstr2424);
  };
  var current_continuation_marks = M2.Core.Marks.getContinuationMarks;
  var continuation_mark_set__gt_list = M2.Core.Marks.getMarks;
  var continuation_mark_set_first = function(mark_set425, key_v426, none_v427, prompt_tag428) {
    var let_result223 = values();
    var mark_set429 = mark_set429 || M2.Core.Marks.getContinuationMarks(prompt_tag428);
    var marks430 = M2.Core.Marks.getMarks(mark_set429, key_v426, prompt_tag428);
    if (null_p(marks430) !== false) {
      var if_res224 = none_v427;
    } else {
      var if_res224 = marks430.hd;
    }
    return if_res224;
  };
  var make_parameter = M2.Paramz.makeParameter;
  var call_with_continuation_prompt = M2.Core.Marks.callWithContinuationPrompt;
  var abort_current_continuation = function(prompt_tag431) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res225 = null;
    } else {
      var if_res225 = rvoid();
    }
    if_res225;
    var let_result226 = values();
    var args432 = Array.prototype.slice.call(arguments, 1);
    throw new M2.Core.Marks.AbortCurrentContinuation(prompt_tag431, args432);
    return null;
  };
  var make_continuation_prompt_tag = M2.Core.Marks.makeContinuationPromptTag;
  var default_continuation_prompt_tag = M2.Core.Marks.defaultContinuationPromptTag;
  var raise = function(e433) {
    var abort_ccp434 = continuation_mark_set_first(current_continuation_marks(), M2.Paramz.ExceptionHandlerKey);
    return abort_ccp434(e433);
  };
  var current_output_port = make_parameter(M2.Core.Ports.standardOutputPort);
  var current_error_port = make_parameter(M2.Core.Ports.standardErrorPort);
  var current_print = make_parameter(function(p435) {
    if (void_p(p435) !== false) {
      var if_res227 = rvoid();
    } else {
      print(p435);
      var if_res227 = newline();
    }
    return if_res227;
  });
  var port_p = function(p436) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.check(p436);
  };
  var input_port_p = function(p437) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isInputPort(p437);
  };
  var output_port_p = function(p438) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isOutputPort(p438);
  };
  var string_port_p = function(p439) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isStringPort(p439);
  };
  var open_output_string = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.openOutputString();
  };
  var get_output_string = function(p440) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.getOutputString(p440);
  };
  var print_as_expression = make_parameter(true);
  var display19441 = function(datum18442, out16443, out17444) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum445 = datum18442;
    if (out17444 !== false) {
      var if_res228 = out16443;
    } else {
      var if_res228 = current_output_port();
    }
    var out446 = if_res228;
    return M2.Core.display(out446, datum445);
  };
  var cl229 = function(datum447) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display19441(datum447, false, false);
  };
  var cl230 = function(datum448, out16449) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display19441(datum448, out16449, true);
  };
  var display = $rjs_core.attachProcedureArity(function() {
    var fixed_lam231 = {
      '1': cl229,
      '2': cl230
    }[arguments.length];
    if (fixed_lam231 !== undefined) {
      return fixed_lam231.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var write24450 = function(datum23451, out21452, out22453) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum454 = datum23451;
    if (out22453 !== false) {
      var if_res232 = out21452;
    } else {
      var if_res232 = current_output_port();
    }
    var out455 = if_res232;
    return M2.Core.write(out455, datum454);
  };
  var cl233 = function(datum456) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write24450(datum456, false, false);
  };
  var cl234 = function(datum457, out21458) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write24450(datum457, out21458, true);
  };
  var write = $rjs_core.attachProcedureArity(function() {
    var fixed_lam235 = {
      '1': cl233,
      '2': cl234
    }[arguments.length];
    if (fixed_lam235 !== undefined) {
      return fixed_lam235.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var print31459 = function(datum30460, out26461, quote_depth27462, out28463, quote_depth29464) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum465 = datum30460;
    if (out28463 !== false) {
      var if_res236 = out26461;
    } else {
      var if_res236 = current_output_port();
    }
    var out466 = if_res236;
    if (quote_depth29464 !== false) {
      var if_res237 = quote_depth27462;
    } else {
      var if_res237 = 0;
    }
    var quote_depth467 = if_res237;
    return M2.Core.print(out466, datum465, print_as_expression(), quote_depth467);
  };
  var cl238 = function(datum468) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum468, false, false, false, false);
  };
  var cl239 = function(datum469, out470, quote_depth27471) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum469, out470, quote_depth27471, true, true);
  };
  var cl240 = function(datum472, out26473) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum472, out26473, false, true, false);
  };
  var print = $rjs_core.attachProcedureArity(function() {
    var fixed_lam241 = {
      '1': cl238,
      '3': cl239,
      '2': cl240
    }[arguments.length];
    if (fixed_lam241 !== undefined) {
      return fixed_lam241.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var newline35474 = function(out33475, out34476) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (out34476 !== false) {
      var if_res242 = out33475;
    } else {
      var if_res242 = current_output_port();
    }
    var out477 = if_res242;
    return display($rjs_core.UString.makeInternedImmutable("\n"), out477);
  };
  var cl243 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline35474(false, false);
  };
  var cl244 = function(out33478) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline35474(out33478, true);
  };
  var newline = $rjs_core.attachProcedureArity(function() {
    var fixed_lam245 = {
      '0': cl243,
      '1': cl244
    }[arguments.length];
    if (fixed_lam245 !== undefined) {
      return fixed_lam245.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var current_inspector = function() {
    return true;
  };
  var raise_argument_error = error;
  var check_method = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var random = M2.Kernel.random;
  var current_seconds = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.floor(Date.now() / 1000);
  };
  var regexp_p = function(v479) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.check(v479);
  };
  var pregexp_p = regexp_p;
  var byte_regexp_p = regexp_p;
  var byte_pregexp_p = regexp_p;
  var regexp = function(str480) {
    if (string_p(str480) !== false) {
      var if_res246 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str480, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res246 = null;
    }
    if_res246;
    return M2.Core.Regexp.fromString(str480);
  };
  var pregexp = regexp;
  var byte_regexp = function(bs481) {
    if (bytes_p(bs481) !== false) {
      var if_res247 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bs481, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res247 = null;
    }
    if_res247;
    return M2.Core.Regexp.fromString(bytes__gt_string_by_utf_8(bs481));
  };
  var byte_pregexp = byte_regexp;
  var regexp_match = function(pattern482, input483) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.match(pattern482, input483);
  };
  var let_result248 = make_struct_type($rjs_core.Symbol.make("kernel:arity-at-least"), false, 1, 0, false, rnull, false, false, $rjs_core.Pair.makeList(0), false, $rjs_core.Symbol.make("kernel:arity-at-least"));
  var struct_484 = let_result248.getAt(0);
  var make_485 = let_result248.getAt(1);
  var __p486 = let_result248.getAt(2);
  var __ref487 = let_result248.getAt(3);
  var __set_bang_488 = let_result248.getAt(4);
  var let_result249 = values(struct_484, make_485, __p486, make_struct_field_accessor(__ref487, 0, $rjs_core.Symbol.make("value")));
  var struct_kernel_arity_at_least = let_result249.getAt(0);
  var make_arity_at_least = let_result249.getAt(1);
  var kernel_arity_at_least_p = let_result249.getAt(2);
  var kernel_arity_at_least_value = let_result249.getAt(3);
  var procedure_p = function(f489) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return typeof(f489) === "function";
  };
  var arity_at_least = make_arity_at_least;
  var arity_at_least_p = function(p490) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_p(p490);
  };
  var arity_at_least_value = function(p491) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_value(p491);
  };
  var procedure_arity_includes_p = function(f492) {
    return true;
  };
  var procedure_arity = function(fn493) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (Array.isArray(fn493.__rjs_arityValue) !== false) {
      if ((fn493.__rjs_arityValue.length === 1) !== false) {
        var if_res250 = fn493.__rjs_arityValue[0];
      } else {
        var if_res250 = M2.Core.Pair.listFromArray(fn493.__rjs_arityValue);
      }
      var if_res252 = if_res250;
    } else {
      if ((fn493.__rjs_arityValue === undefined) !== false) {
        var if_res251 = fn493.length;
      } else {
        var if_res251 = make_arity_at_least(fn493.__rjs_arityValue || fn493.length);
      }
      var if_res252 = if_res251;
    }
    return if_res252;
  };
  var procedure_arity_p = function(v494) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (exact_nonnegative_integer_p(v494) || kernel_arity_at_least_p(v494)) || ormap(function(v495) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return exact_nonnegative_integer_p(v495) || kernel_arity_at_least_p(v495);
    }, v494);
  };
  var checked_procedure_check_and_extract = function(type496, v497, proc498, v1499, v2500) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((M2.Core.Struct.check(v497, type496) && type496._findProperty(prop_checked_procedure)) !== false) {
      var fn501 = v497.getField(0);
      var r1502 = fn501(v1499, v2500);
      if (r1502 !== false) {
        var if_res253 = v497.getField(1);
      } else {
        var if_res253 = proc498(v497, v1499, v2500);
      }
      var if_res254 = if_res253;
    } else {
      var if_res254 = proc498(v497, v1499, v2500);
    }
    return if_res254;
  };
  var gensym = function(sym503) {
    var s504 = (sym503 && sym503.v) || $rjs_core.UString.makeInternedImmutable("");
    __count = __count + 1;
    return M2.Core.Symbol.makeUninterned(s504 + __count);
  };
  var eval_jit_enabled = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var variable_reference_constant_p = function(x505) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var inspector_p = function(p506) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  };
  var make_thread_cell = function(p507) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p507;
  };
  var __count = 1000;
  var system_type = function(system_type508, mod509) {
    return $rjs_core.Symbol.make("javascript");
  };
  var make_weak_hash = make_hash;
  var make_weak_hasheqv = make_hasheqv;
  var make_weak_hasheq = make_hasheq;
  var __rjs_quoted__ = {};
  __rjs_quoted__.make_struct_type_property = make_struct_type_property;
  __rjs_quoted__.__plus_ = __plus_;
  __rjs_quoted__.struct_kernel_arity_at_least = struct_kernel_arity_at_least;
  __rjs_quoted__.length = length;
  __rjs_quoted__.kernel_arity_at_least_value = kernel_arity_at_least_value;
  __rjs_quoted__.make_arity_at_least = make_arity_at_least;
  __rjs_quoted__.kernel_arity_at_least_p = kernel_arity_at_least_p;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get equal_p() {
      return equal_p;
    },
    get eqv_p() {
      return eqv_p;
    },
    get eq_p() {
      return eq_p;
    },
    get values() {
      return values;
    },
    get call_with_values() {
      return call_with_values;
    },
    get immutable_p() {
      return immutable_p;
    },
    get rvoid() {
      return rvoid;
    },
    get void_p() {
      return void_p;
    },
    get number_p() {
      return number_p;
    },
    get real_p() {
      return real_p;
    },
    get integer_p() {
      return integer_p;
    },
    get zero_p() {
      return zero_p;
    },
    get raise_mismatch_error() {
      return raise_mismatch_error;
    },
    get positive_p() {
      return positive_p;
    },
    get negative_p() {
      return negative_p;
    },
    get add1() {
      return add1;
    },
    get sub1() {
      return sub1;
    },
    get quotient() {
      return quotient;
    },
    get even_p() {
      return even_p;
    },
    get odd_p() {
      return odd_p;
    },
    get exact_nonnegative_integer_p() {
      return exact_nonnegative_integer_p;
    },
    get exact_integer_p() {
      return exact_integer_p;
    },
    get __times_() {
      return __times_;
    },
    get __by_() {
      return __by_;
    },
    get __plus_() {
      return __plus_;
    },
    get __() {
      return __;
    },
    get __lt_() {
      return __lt_;
    },
    get __gt_() {
      return __gt_;
    },
    get __lt__eq_() {
      return __lt__eq_;
    },
    get __gt__eq_() {
      return __gt__eq_;
    },
    get __eq_() {
      return __eq_;
    },
    get floor() {
      return floor;
    },
    get abs() {
      return abs;
    },
    get sin() {
      return sin;
    },
    get cos() {
      return cos;
    },
    get tan() {
      return tan;
    },
    get atan() {
      return atan;
    },
    get ceiling() {
      return ceiling;
    },
    get round() {
      return round;
    },
    get min() {
      return min;
    },
    get max() {
      return max;
    },
    get log() {
      return log;
    },
    get expt() {
      return expt;
    },
    get sqrt() {
      return sqrt;
    },
    get sqr() {
      return sqr;
    },
    get remainder() {
      return remainder;
    },
    get number__gt_string() {
      return number__gt_string;
    },
    get inexact__gt_exact() {
      return inexact__gt_exact;
    },
    get exact__gt_inexact() {
      return exact__gt_inexact;
    },
    get not() {
      return not;
    },
    get rfalse() {
      return rfalse;
    },
    get rtrue() {
      return rtrue;
    },
    get false_p() {
      return false_p;
    },
    get car() {
      return car;
    },
    get cdr() {
      return cdr;
    },
    get cons() {
      return cons;
    },
    get pair_p() {
      return pair_p;
    },
    get caar() {
      return caar;
    },
    get cadr() {
      return cadr;
    },
    get cdar() {
      return cdar;
    },
    get cddr() {
      return cddr;
    },
    get caddr() {
      return caddr;
    },
    get rnull() {
      return rnull;
    },
    get list() {
      return list;
    },
    get null_p() {
      return null_p;
    },
    get list_p() {
      return list_p;
    },
    get length() {
      return length;
    },
    get reverse() {
      return reverse;
    },
    get list_times_() {
      return list_times_;
    },
    get append() {
      return append;
    },
    get for_each() {
      return for_each;
    },
    get mcons() {
      return mcons;
    },
    get mpair_p() {
      return mpair_p;
    },
    get mcar() {
      return mcar;
    },
    get mcdr() {
      return mcdr;
    },
    get set_mcar_bang_() {
      return set_mcar_bang_;
    },
    get set_mcdr_bang_() {
      return set_mcdr_bang_;
    },
    get make_struct_type() {
      return make_struct_type;
    },
    get make_struct_field_accessor() {
      return make_struct_field_accessor;
    },
    get make_struct_field_mutator() {
      return make_struct_field_mutator;
    },
    get make_struct_type_property() {
      return make_struct_type_property;
    },
    get check_struct_type() {
      return check_struct_type;
    },
    get struct_type_p() {
      return struct_type_p;
    },
    get struct_type_info() {
      return struct_type_info;
    },
    get vector() {
      return vector;
    },
    get make_vector() {
      return make_vector;
    },
    get vector_p() {
      return vector_p;
    },
    get vector_length() {
      return vector_length;
    },
    get vector_ref() {
      return vector_ref;
    },
    get vector_set_bang_() {
      return vector_set_bang_;
    },
    get vector__gt_list() {
      return vector__gt_list;
    },
    get vector__gt_immutable_vector() {
      return vector__gt_immutable_vector;
    },
    get hash() {
      return hash;
    },
    get hasheqv() {
      return hasheqv;
    },
    get hasheq() {
      return hasheq;
    },
    get make_hash() {
      return make_hash;
    },
    get make_hasheqv() {
      return make_hasheqv;
    },
    get make_hasheq() {
      return make_hasheq;
    },
    get make_immutable_hash() {
      return make_immutable_hash;
    },
    get make_immutable_hasheqv() {
      return make_immutable_hasheqv;
    },
    get make_immutable_hasheq() {
      return make_immutable_hasheq;
    },
    get hash_p() {
      return hash_p;
    },
    get hash_equal_p() {
      return hash_equal_p;
    },
    get hash_eqv_p() {
      return hash_eqv_p;
    },
    get hash_eq_p() {
      return hash_eq_p;
    },
    get hash_ref() {
      return hash_ref;
    },
    get hash_set() {
      return hash_set;
    },
    get hash_set_bang_() {
      return hash_set_bang_;
    },
    get hash_map() {
      return hash_map;
    },
    get apply() {
      return apply;
    },
    get map() {
      return map;
    },
    get foldl() {
      return foldl;
    },
    get _foldr() {
      return _foldr;
    },
    get foldr() {
      return foldr;
    },
    get range() {
      return range;
    },
    get remove() {
      return remove;
    },
    get filter() {
      return filter;
    },
    get ormap() {
      return ormap;
    },
    get andmap() {
      return andmap;
    },
    get member() {
      return member;
    },
    get compose() {
      return compose;
    },
    get compose1() {
      return compose1;
    },
    get list_ref() {
      return list_ref;
    },
    get build_list() {
      return build_list;
    },
    get make_list() {
      return make_list;
    },
    get flatten() {
      return flatten;
    },
    get assoc() {
      return assoc;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    },
    get alt_reverse() {
      return alt_reverse;
    },
    get string() {
      return string;
    },
    get string_append() {
      return string_append;
    },
    get string_ref() {
      return string_ref;
    },
    get string_eq__p() {
      return string_eq__p;
    },
    get string_lt__p() {
      return string_lt__p;
    },
    get string_lt__eq__p() {
      return string_lt__eq__p;
    },
    get string_gt__p() {
      return string_gt__p;
    },
    get string_gt__eq__p() {
      return string_gt__eq__p;
    },
    get string_p() {
      return string_p;
    },
    get fprintf() {
      return fprintf;
    },
    get format() {
      return format;
    },
    get symbol_p() {
      return symbol_p;
    },
    get make_string() {
      return make_string;
    },
    get list__gt_string() {
      return list__gt_string;
    },
    get string__gt_immutable_string() {
      return string__gt_immutable_string;
    },
    get symbol__gt_string() {
      return symbol__gt_string;
    },
    get string__gt_symbol() {
      return string__gt_symbol;
    },
    get string__gt_uninterned_symbol() {
      return string__gt_uninterned_symbol;
    },
    get symbol_interned_p() {
      return symbol_interned_p;
    },
    get symbol_eq__p() {
      return symbol_eq__p;
    },
    get string_length() {
      return string_length;
    },
    get string_downcase() {
      return string_downcase;
    },
    get string_upcase() {
      return string_upcase;
    },
    get substring() {
      return substring;
    },
    get string_split() {
      return string_split;
    },
    get string_set_bang_() {
      return string_set_bang_;
    },
    get char_p() {
      return char_p;
    },
    get char__gt_integer() {
      return char__gt_integer;
    },
    get integer__gt_char() {
      return integer__gt_char;
    },
    get char_utf_8_length() {
      return char_utf_8_length;
    },
    get char_lt__p() {
      return char_lt__p;
    },
    get char_lt__eq__p() {
      return char_lt__eq__p;
    },
    get char_gt__p() {
      return char_gt__p;
    },
    get char_gt__eq__p() {
      return char_gt__eq__p;
    },
    get char_eq__p() {
      return char_eq__p;
    },
    get box() {
      return box;
    },
    get unbox() {
      return unbox;
    },
    get set_box_bang_() {
      return set_box_bang_;
    },
    get evt_p() {
      return evt_p;
    },
    get prop_evt() {
      return prop_evt;
    },
    get prop_checked_procedure() {
      return prop_checked_procedure;
    },
    get prop_impersonator_of() {
      return prop_impersonator_of;
    },
    get prop_arity_string() {
      return prop_arity_string;
    },
    get prop_incomplete_arity() {
      return prop_incomplete_arity;
    },
    get prop_method_arity_error() {
      return prop_method_arity_error;
    },
    get prop_exn_srclocs() {
      return prop_exn_srclocs;
    },
    get prop_procedure() {
      return prop_procedure;
    },
    get error() {
      return error;
    },
    get bytes_p() {
      return bytes_p;
    },
    get bytes__gt_string_by_utf_8() {
      return bytes__gt_string_by_utf_8;
    },
    get string__gt_bytes_by_utf_8() {
      return string__gt_bytes_by_utf_8;
    },
    get bytes_eq__p() {
      return bytes_eq__p;
    },
    get current_continuation_marks() {
      return current_continuation_marks;
    },
    get continuation_mark_set__gt_list() {
      return continuation_mark_set__gt_list;
    },
    get continuation_mark_set_first() {
      return continuation_mark_set_first;
    },
    get make_parameter() {
      return make_parameter;
    },
    get call_with_continuation_prompt() {
      return call_with_continuation_prompt;
    },
    get abort_current_continuation() {
      return abort_current_continuation;
    },
    get make_continuation_prompt_tag() {
      return make_continuation_prompt_tag;
    },
    get default_continuation_prompt_tag() {
      return default_continuation_prompt_tag;
    },
    get raise() {
      return raise;
    },
    get current_output_port() {
      return current_output_port;
    },
    get current_error_port() {
      return current_error_port;
    },
    get current_print() {
      return current_print;
    },
    get port_p() {
      return port_p;
    },
    get input_port_p() {
      return input_port_p;
    },
    get output_port_p() {
      return output_port_p;
    },
    get string_port_p() {
      return string_port_p;
    },
    get open_output_string() {
      return open_output_string;
    },
    get get_output_string() {
      return get_output_string;
    },
    get print_as_expression() {
      return print_as_expression;
    },
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    },
    get newline() {
      return newline;
    },
    get current_inspector() {
      return current_inspector;
    },
    get raise_argument_error() {
      return raise_argument_error;
    },
    get check_method() {
      return check_method;
    },
    get random() {
      return random;
    },
    get current_seconds() {
      return current_seconds;
    },
    get regexp_p() {
      return regexp_p;
    },
    get pregexp_p() {
      return pregexp_p;
    },
    get byte_regexp_p() {
      return byte_regexp_p;
    },
    get byte_pregexp_p() {
      return byte_pregexp_p;
    },
    get regexp() {
      return regexp;
    },
    get pregexp() {
      return pregexp;
    },
    get byte_regexp() {
      return byte_regexp;
    },
    get byte_pregexp() {
      return byte_pregexp;
    },
    get regexp_match() {
      return regexp_match;
    },
    get kernel_arity_at_least_value() {
      return kernel_arity_at_least_value;
    },
    get kernel_arity_at_least_p() {
      return kernel_arity_at_least_p;
    },
    get make_arity_at_least() {
      return make_arity_at_least;
    },
    get struct_kernel_arity_at_least() {
      return struct_kernel_arity_at_least;
    },
    get procedure_p() {
      return procedure_p;
    },
    get arity_at_least() {
      return arity_at_least;
    },
    get arity_at_least_p() {
      return arity_at_least_p;
    },
    get arity_at_least_value() {
      return arity_at_least_value;
    },
    get procedure_arity_includes_p() {
      return procedure_arity_includes_p;
    },
    get procedure_arity() {
      return procedure_arity;
    },
    get procedure_arity_p() {
      return procedure_arity_p;
    },
    get checked_procedure_check_and_extract() {
      return checked_procedure_check_and_extract;
    },
    get gensym() {
      return gensym;
    },
    get eval_jit_enabled() {
      return eval_jit_enabled;
    },
    get variable_reference_constant_p() {
      return variable_reference_constant_p;
    },
    get inspector_p() {
      return inspector_p;
    },
    get make_thread_cell() {
      return make_thread_cell;
    },
    get system_type() {
      return system_type;
    },
    get make_weak_hash() {
      return make_weak_hash;
    },
    get make_weak_hasheqv() {
      return make_weak_hasheqv;
    },
    get make_weak_hasheq() {
      return make_weak_hasheq;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/private/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var ___js_ffi = $rjs_core.attachProcedureArity(function() {
    for (var _620345 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      _620345[$__1] = arguments[$__1];
    var _620 = $rjs_core.Pair.listFromArray(_620345);
    return M0.error($rjs_core.Symbol.make("racketscript"), $rjs_core.UString.makeInternedImmutable("can't make JS ffi calls in Racket"));
  });
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ___js_ffi() {
      return ___js_ffi;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var __eq__gt_$ = function(lam_expr643) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.Marks.wrapWithContext(lam_expr643);
  };
  var js_string = function(e644) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return e644.toString();
  };
  var racket_string = function(e645) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.UString.makeImmutable(e645);
  };
  var assoc__gt_object = function(pairs646) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result647 = {};
    var loop648 = function(pairs649) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(pairs649) !== false) {
        var if_res352 = result647;
      } else {
        var p650 = M0.car(pairs649);
        var k652 = M0.car(p650);
        if (M0.string_p(k652) !== false) {
          var if_res351 = k652;
        } else {
          if (M0.symbol_p(k652) !== false) {
            var if_res350 = M0.symbol__gt_string(k652);
          } else {
            var if_res350 = M0.error($rjs_core.Symbol.make("assoc->object"), $rjs_core.UString.makeInternedImmutable("invalid key value"));
          }
          var if_res351 = if_res350;
        }
        var key651 = if_res351;
        result647[key651] = M0.car(M0.cdr(p650));
        var if_res352 = loop648(M0.cdr(pairs649));
      }
      return if_res352;
    };
    return loop648(pairs646);
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.js_string = js_string;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get assoc__gt_object() {
      return assoc__gt_object;
    },
    get racket_string() {
      return racket_string;
    },
    get js_string() {
      return js_string;
    },
    get __eq__gt_$() {
      return __eq__gt_$;
    }
  };
})();
var $__collects_47_racket_47_private_47_member_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/member.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var bad_list = function(who3081, orig_l3082) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who3081, $rjs_core.UString.makeInternedImmutable("not a proper list: "), orig_l3082);
  };
  var memq3083 = function(v3084, orig_l3085) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3086 = function(ls3087) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3087) !== false) {
        var if_res2075 = false;
      } else {
        if (M0.not(M0.pair_p(ls3087)) !== false) {
          var if_res2074 = bad_list($rjs_core.Symbol.make("memq"), orig_l3085);
        } else {
          if (M0.eq_p(v3084, M0.car(ls3087)) !== false) {
            var if_res2073 = ls3087;
          } else {
            var if_res2073 = loop3086(M0.cdr(ls3087));
          }
          var if_res2074 = if_res2073;
        }
        var if_res2075 = if_res2074;
      }
      return if_res2075;
    };
    return loop3086(orig_l3085);
  };
  var memv3088 = function(v3089, orig_l3090) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3091 = function(ls3092) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3092) !== false) {
        var if_res2072 = false;
      } else {
        if (M0.not(M0.pair_p(ls3092)) !== false) {
          var if_res2071 = bad_list($rjs_core.Symbol.make("memv"), orig_l3090);
        } else {
          if (M0.eqv_p(v3089, M0.car(ls3092)) !== false) {
            var if_res2070 = ls3092;
          } else {
            var if_res2070 = loop3091(M0.cdr(ls3092));
          }
          var if_res2071 = if_res2070;
        }
        var if_res2072 = if_res2071;
      }
      return if_res2072;
    };
    return loop3091(orig_l3090);
  };
  var member3094 = function(v3095, orig_l3096) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3097 = function(ls3098) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3098) !== false) {
        var if_res2061 = false;
      } else {
        if (M0.not(M0.pair_p(ls3098)) !== false) {
          var if_res2060 = bad_list($rjs_core.Symbol.make("member"), orig_l3096);
        } else {
          if (M0.equal_p(v3095, M0.car(ls3098)) !== false) {
            var if_res2059 = ls3098;
          } else {
            var if_res2059 = loop3097(M0.cdr(ls3098));
          }
          var if_res2060 = if_res2059;
        }
        var if_res2061 = if_res2060;
      }
      return if_res2061;
    };
    return loop3097(orig_l3096);
  };
  var default3093 = member3094;
  var cl2062 = function(v3100, orig_l3101) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return default3093(v3100, orig_l3101);
  };
  var cl2063 = function(v3102, orig_l3103, eq_p3104) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(eq_p3104) !== false) {
      var if_res2065 = M0.procedure_arity_includes_p(eq_p3104, 2);
    } else {
      var if_res2065 = false;
    }
    if (if_res2065 !== false) {
      var if_res2066 = M0.rvoid();
    } else {
      var if_res2066 = M0.raise_argument_error($rjs_core.Symbol.make("member"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 2)"), eq_p3104);
    }
    if_res2066;
    var member3105 = function(v3106, orig_l3107) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop3108 = function(ls3109) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls3109) !== false) {
          var if_res2069 = false;
        } else {
          if (M0.not(M0.pair_p(ls3109)) !== false) {
            var if_res2068 = bad_list($rjs_core.Symbol.make("member"), orig_l3107);
          } else {
            if (eq_p3104(v3106, M0.car(ls3109)) !== false) {
              var if_res2067 = ls3109;
            } else {
              var if_res2067 = loop3108(M0.cdr(ls3109));
            }
            var if_res2068 = if_res2067;
          }
          var if_res2069 = if_res2068;
        }
        return if_res2069;
      };
      return loop3108(orig_l3107);
    };
    return member3105(v3102, orig_l3103);
  };
  var member3099 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2064 = {
      '2': cl2062,
      '3': cl2063
    }[arguments.length];
    if (fixed_lam2064 !== undefined) {
      return fixed_lam2064.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var let_result2076 = M0.values(memq3083, memv3088, member3099);
  var memq = let_result2076.getAt(0);
  var memv = let_result2076.getAt(1);
  var member = let_result2076.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get member() {
      return member;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    }
  };
})();
var $__runtime_47_paramz_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var parameterization_key = Paramz.ParameterizationKey;
  var extend_parameterization = Paramz.extendParameterization;
  var exception_handler_key = Paramz.ExceptionHandlerKey;
  var check_for_break = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return undefined;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get parameterization_key() {
      return parameterization_key;
    },
    get extend_parameterization() {
      return extend_parameterization;
    },
    get exception_handler_key() {
      return exception_handler_key;
    },
    get check_for_break() {
      return check_for_break;
    }
  };
})();
var $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/more-scheme.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_paramz_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var current_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.extend_parameterization(M1.continuation_mark_set_first(false, M0.parameterization_key));
  };
  var call_with_parameterization = function(paramz3019, thunk3020) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.parameterization_p(paramz3019) !== false) {
      var if_res1985 = M1.rvoid();
    } else {
      var if_res1985 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("parameterization?"), 0, paramz3019, thunk3020);
    }
    if_res1985;
    if (M1.procedure_p(thunk3020) !== false) {
      var if_res1986 = M1.procedure_arity_includes_p(thunk3020, 0);
    } else {
      var if_res1986 = false;
    }
    if (if_res1986 !== false) {
      var if_res1987 = M1.rvoid();
    } else {
      var if_res1987 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("(-> any)"), 1, paramz3019, thunk3020);
    }
    if_res1987;
    var __context1988 = $rjs_core.Marks.getFrames();
    var __context1989;
    try {
      __context1989 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.parameterization_key, paramz3019);
      var __wcm_result1990 = thunk3020();
    } finally {
      $rjs_core.Marks.updateFrame(__context1988, __context1989);
    }
    return __wcm_result1990;
  };
  var let_result1992 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false);
  var struct_break_paramz = let_result1992.getAt(0);
  var make_break_paramz = let_result1992.getAt(1);
  var break_paramz_p = let_result1992.getAt(2);
  var break_paramz_ref = let_result1992.getAt(3);
  var break_paramz_set_bang_ = let_result1992.getAt(4);
  var inspector3021 = M1.current_inspector();
  if (inspector3021 !== false) {
    var if_res1993 = M1.not(M1.inspector_p(inspector3021));
  } else {
    var if_res1993 = false;
  }
  if (if_res1993 !== false) {
    var if_res1994 = M1.raise_argument_error($rjs_core.Symbol.make("define-struct"), $rjs_core.UString.makeInternedImmutable("(or/c inspector? #f)"), inspector3021);
  } else {
    var if_res1994 = M1.rvoid();
  }
  if_res1994;
  var let_result1995 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false, M1.rnull, inspector3021);
  var type3022 = let_result1995.getAt(0);
  var maker3023 = let_result1995.getAt(1);
  var pred3024 = let_result1995.getAt(2);
  var access3025 = let_result1995.getAt(3);
  var mutate3026 = let_result1995.getAt(4);
  var let_result1996 = M1.values(type3022, maker3023, pred3024, M1.make_struct_field_accessor(access3025, 0, $rjs_core.Symbol.make("cell")), M1.make_struct_field_mutator(mutate3026, 0, $rjs_core.Symbol.make("cell")));
  var struct_break_parameterization = let_result1996.getAt(0);
  var make_break_parameterization = let_result1996.getAt(1);
  var break_parameterization_p = let_result1996.getAt(2);
  var break_parameterization_cell = let_result1996.getAt(3);
  var set_break_parameterization_cell_bang_ = let_result1996.getAt(4);
  var current_break_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_break_paramz(M1.continuation_mark_set_first(false, M0.__rjs_quoted__.break_enabled_key));
  };
  var call_with_break_parameterization = function(paramz3027, thunk3028) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (break_paramz_p(paramz3027) !== false) {
      var if_res1997 = M1.rvoid();
    } else {
      var if_res1997 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-break-parameterization"), $rjs_core.UString.makeInternedImmutable("break-parameterization?"), 0, paramz3027, thunk3028);
    }
    if_res1997;
    if (M1.procedure_p(thunk3028) !== false) {
      var if_res1998 = M1.procedure_arity_includes_p(thunk3028, 0);
    } else {
      var if_res1998 = false;
    }
    if (if_res1998 !== false) {
      var if_res1999 = M1.rvoid();
    } else {
      var if_res1999 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("(-> any)"), 1, paramz3027, thunk3028);
    }
    if_res1999;
    var __context2001 = $rjs_core.Marks.getFrames();
    var __context2002;
    try {
      __context2002 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, break_paramz_ref(paramz3027, 0));
      M0.check_for_break();
      var __wcm_result2003 = thunk3028();
    } finally {
      $rjs_core.Marks.updateFrame(__context2001, __context2002);
    }
    var begin_res2000 = __wcm_result2003;
    M0.check_for_break();
    return begin_res2000;
  };
  var select_handler_by_no_breaks = function(e3029, bpz3030, l3031) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2012 = $rjs_core.Marks.getFrames();
    var __context2013;
    try {
      __context2013 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, M1.make_thread_cell(false));
      var loop3032 = function(l3033) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(l3033) !== false) {
          var if_res2011 = M1.raise(e3029);
        } else {
          if (M1.caar(l3033)(e3029) !== false) {
            var begin_res2005 = M1.cdar(l3033)(e3029);
            var __context2006 = $rjs_core.Marks.getFrames();
            var __context2007;
            try {
              __context2007 = $rjs_core.Marks.enterFrame();
              $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3030);
              var __wcm_result2008 = M0.check_for_break();
            } finally {
              $rjs_core.Marks.updateFrame(__context2006, __context2007);
            }
            __wcm_result2008;
            var if_res2010 = begin_res2005;
          } else {
            var if_res2010 = loop3032(M1.cdr(l3033));
          }
          var if_res2011 = if_res2010;
        }
        return if_res2011;
      };
      var __wcm_result2014 = loop3032(l3031);
    } finally {
      $rjs_core.Marks.updateFrame(__context2012, __context2013);
    }
    return __wcm_result2014;
  };
  var select_handler_by_breaks_as_is = function(e3034, bpz3035, l3036) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(l3036) !== false) {
      var if_res2021 = M1.raise(e3034);
    } else {
      if (M1.caar(l3036)(e3034) !== false) {
        var __context2016 = $rjs_core.Marks.getFrames();
        var __context2017;
        try {
          __context2017 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3035);
          M0.check_for_break();
          var __wcm_result2018 = M1.cdar(l3036)(e3034);
        } finally {
          $rjs_core.Marks.updateFrame(__context2016, __context2017);
        }
        var if_res2020 = __wcm_result2018;
      } else {
        var if_res2020 = select_handler_by_breaks_as_is(e3034, bpz3035, M1.cdr(l3036));
      }
      var if_res2021 = if_res2020;
    }
    return if_res2021;
  };
  var false_thread_cell = M1.make_thread_cell(false);
  var check_with_handlers_in_context = function(handler_prompt_key3037) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.continuation_prompt_available_p(handler_prompt_key3037) !== false) {
      var if_res2022 = M1.rvoid();
    } else {
      var if_res2022 = M1.error($rjs_core.Symbol.make("with-handlers"), $rjs_core.UString.makeInternedImmutable("exception handler used out of context"));
    }
    return if_res2022;
  };
  var handler_prompt_key = M1.make_continuation_prompt_tag();
  var call_handled_body = function(bpz3038, handle_proc3039, body_thunk3040) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2031 = $rjs_core.Marks.getFrames();
    var __context2032;
    try {
      __context2032 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, false_thread_cell);
      var __wcm_result2033 = M1.call_with_continuation_prompt(function(bpz3041, body_thunk3042) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var __context2027 = $rjs_core.Marks.getFrames();
        var __context2028;
        try {
          __context2028 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3041);
          var __context2023 = $rjs_core.Marks.getFrames();
          var __context2024;
          try {
            __context2024 = __context2023;
            $rjs_core.Marks.setMark(M0.exception_handler_key, function(e3043) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M1.abort_current_continuation(handler_prompt_key, e3043);
            });
            var __wcm_result2025 = body_thunk3042();
          } finally {
            $rjs_core.Marks.updateFrame(__context2023, __context2024);
          }
          var __wcm_result2029 = __wcm_result2025;
        } finally {
          $rjs_core.Marks.updateFrame(__context2027, __context2028);
        }
        return __wcm_result2029;
      }, handler_prompt_key, handle_proc3039, bpz3038, body_thunk3040);
    } finally {
      $rjs_core.Marks.updateFrame(__context2031, __context2032);
    }
    return __wcm_result2033;
  };
  var call_with_exception_handler = function(exnh3044, thunk3045) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2036 = $rjs_core.Marks.getFrames();
    var __context2037;
    try {
      __context2037 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.exception_handler_key, exnh3044);
      var __wcm_result2038 = thunk3045();
    } finally {
      $rjs_core.Marks.updateFrame(__context2036, __context2037);
    }
    var begin_res2035 = __wcm_result2038;
    M1.rvoid();
    return begin_res2035;
  };
  var call_by_cc = M1.__rjs_quoted__.call_with_current_continuation;
  var not_there3046 = M1.gensym();
  var up3047 = function(who3048, mut_p3049, set3050, ht3051, key3052, xform3053, default3054) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3051) !== false) {
      if (mut_p3049 !== false) {
        var if_res2040 = M1.not(M1.immutable_p(ht3051));
      } else {
        var if_res2040 = M1.immutable_p(ht3051);
      }
      var if_res2041 = if_res2040;
    } else {
      var if_res2041 = false;
    }
    if (if_res2041 !== false) {
      var if_res2043 = M1.rvoid();
    } else {
      if (mut_p3049 !== false) {
        var if_res2042 = $rjs_core.UString.makeInternedImmutable("(and/c hash? (not/c immutable?))");
      } else {
        var if_res2042 = $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)");
      }
      var if_res2043 = M1.raise_argument_error(who3048, if_res2042, ht3051);
    }
    if_res2043;
    if (M1.procedure_p(xform3053) !== false) {
      var if_res2044 = M1.procedure_arity_includes_p(xform3053, 1);
    } else {
      var if_res2044 = false;
    }
    if (if_res2044 !== false) {
      var if_res2045 = M1.rvoid();
    } else {
      var if_res2045 = M1.raise_argument_error(who3048, $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), xform3053);
    }
    if_res2045;
    var v3055 = M1.hash_ref(ht3051, key3052, default3054);
    if (M1.eq_p(v3055, not_there3046) !== false) {
      var if_res2046 = M1.raise_mismatch_error(who3048, $rjs_core.UString.makeInternedImmutable("no value found for key: "), key3052);
    } else {
      var if_res2046 = set3050(ht3051, key3052, xform3053(v3055));
    }
    return if_res2046;
  };
  var cl2047 = function(ht3060, key3061, xform3062, default3063) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3047($rjs_core.Symbol.make("hash-update"), false, M1.hash_set, ht3060, key3061, xform3062, default3063);
  };
  var cl2048 = function(ht3064, key3065, xform3066) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update(ht3064, key3065, xform3066, not_there3046);
  };
  var hash_update3056 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2049 = {
      '4': cl2047,
      '3': cl2048
    }[arguments.length];
    if (fixed_lam2049 !== undefined) {
      return fixed_lam2049.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var cl2050 = function(ht3067, key3068, xform3069, default3070) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3047($rjs_core.Symbol.make("hash-update!"), true, M1.hash_set_bang_, ht3067, key3068, xform3069, default3070);
  };
  var cl2051 = function(ht3071, key3072, xform3073) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update_bang_(ht3071, key3072, xform3073, not_there3046);
  };
  var hash_update_bang_3057 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2052 = {
      '4': cl2050,
      '3': cl2051
    }[arguments.length];
    if (fixed_lam2052 !== undefined) {
      return fixed_lam2052.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var hash_has_key_p3058 = function(ht3074, key3075) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3074) !== false) {
      var if_res2053 = M1.rvoid();
    } else {
      var if_res2053 = M1.raise_argument_error($rjs_core.Symbol.make("hash-has-key?"), $rjs_core.UString.makeInternedImmutable("hash?"), 0, ht3074, key3075);
    }
    if_res2053;
    return M1.not(M1.eq_p(not_there3046, M1.hash_ref(ht3074, key3075, not_there3046)));
  };
  var hash_ref_bang_3059 = function(ht3076, key3077, new3078) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3076) !== false) {
      var if_res2054 = M1.not(M1.immutable_p(ht3076));
    } else {
      var if_res2054 = false;
    }
    if (if_res2054 !== false) {
      var if_res2055 = M1.rvoid();
    } else {
      var if_res2055 = M1.raise_argument_error($rjs_core.Symbol.make("hash-ref!"), $rjs_core.UString.makeInternedImmutable("(and/c hash? (not/c immutable?))"), 0, ht3076, key3077, new3078);
    }
    if_res2055;
    var v3079 = M1.hash_ref(ht3076, key3077, not_there3046);
    if (M1.eq_p(not_there3046, v3079) !== false) {
      if (M1.procedure_p(new3078) !== false) {
        var if_res2056 = new3078();
      } else {
        var if_res2056 = new3078;
      }
      var n3080 = if_res2056;
      M1.hash_set_bang_(ht3076, key3077, n3080);
      var if_res2057 = n3080;
    } else {
      var if_res2057 = v3079;
    }
    return if_res2057;
  };
  var let_result2058 = M1.values(hash_update3056, hash_update_bang_3057, hash_has_key_p3058, hash_ref_bang_3059);
  var hash_update = let_result2058.getAt(0);
  var hash_update_bang_ = let_result2058.getAt(1);
  var hash_has_key_p = let_result2058.getAt(2);
  var hash_ref_bang_ = let_result2058.getAt(3);
  var __rjs_quoted__ = {};
  __rjs_quoted__.select_handler_by_breaks_as_is = select_handler_by_breaks_as_is;
  __rjs_quoted__.call_by_cc = call_by_cc;
  __rjs_quoted__.select_handler_by_no_breaks = select_handler_by_no_breaks;
  __rjs_quoted__.call_handled_body = call_handled_body;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get hash_update_bang_() {
      return hash_update_bang_;
    },
    get hash_update() {
      return hash_update;
    },
    get hash_has_key_p() {
      return hash_has_key_p;
    },
    get hash_ref_bang_() {
      return hash_ref_bang_;
    },
    get call_by_cc() {
      return call_by_cc;
    },
    get call_with_exception_handler() {
      return call_with_exception_handler;
    },
    get break_parameterization_p() {
      return break_paramz_p;
    },
    get call_with_break_parameterization() {
      return call_with_break_parameterization;
    },
    get current_break_parameterization() {
      return current_break_parameterization;
    },
    get call_with_parameterization() {
      return call_with_parameterization;
    },
    get current_parameterization() {
      return current_parameterization;
    }
  };
})();
var $__runtime_47_flfxnum_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/flfxnum.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__runtime_47_unsafe_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/unsafe.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var unsafe_fx_plus_ = function(a17, b18) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a17 + b18) | 0;
  };
  var unsafe_fx_ = function(a19, b20) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a19 - b20) | 0;
  };
  var unsafe_fx_times_ = function(a21, b22) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a21 * b22) | 0;
  };
  var unsafe_fxquotient = function(a23, b24) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a23 / b24) | 0;
  };
  var unsafe_fxremainder = function(a25, b26) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a25 % b26) | 0;
  };
  var unsafe_fxmodulo = function(a27, b28) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var remainder29 = a27 % b28;
    if ((remainder29 >= 0) !== false) {
      var if_res7 = remainder29;
    } else {
      var if_res7 = remainder29 + b28;
    }
    return Math.floor(if_res7);
  };
  var unsafe_fxabs = function(a30) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.abs(a30);
  };
  var unsafe_fx_eq_ = function(a31, b32) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a31 === b32;
  };
  var unsafe_fx_lt_ = function(a33, b34) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a33 < b34;
  };
  var unsafe_fx_lt__eq_ = function(a35, b36) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a35 <= b36;
  };
  var unsafe_fx_gt_ = function(a37, b38) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a37 > b38;
  };
  var unsafe_fx_gt__eq_ = function(a39, b40) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a39 >= b40;
  };
  var unsafe_fxmin = function(a41, b42) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a41 < b42) !== false) {
      var if_res8 = a41;
    } else {
      var if_res8 = b42;
    }
    return if_res8;
  };
  var unsafe_fxmax = function(a43, b44) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a43 > b44) !== false) {
      var if_res9 = b44;
    } else {
      var if_res9 = a43;
    }
    return if_res9;
  };
  var unsafe_fxrshift = function(a45, b46) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a45 >> b46) | 0;
  };
  var unsafe_fxlshift = function(a47, b48) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a47 << b48) | 0;
  };
  var unsafe_fxand = function(a49, b50) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a49 && b50) | 0;
  };
  var unsafe_fxior = function(a51, b52) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a51 || b52) | 0;
  };
  var unsafe_fxxor = function(a53, b54) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a53 ^ b54) | 0;
  };
  var unsafe_fxnot = Core.bitwiseNot;
  var unsafe_car = function(v55) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v55.hd;
  };
  var unsafe_cdr = function(v56) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v56.tl;
  };
  var unsafe_mcar = function(v57) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v57.hd;
  };
  var unsafe_mcdr = function(v58) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v58.tl;
  };
  var unsafe_set_mcar_bang_ = function(p59, v60) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p59.setCar(v60);
  };
  var unsafe_set_mcdr_bang_ = function(p61, v62) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p61.setCdr(v62);
  };
  var unsafe_cons_list = function(v63, rest64) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Core.Pair.make(v63, rest64);
  };
  var unsafe_struct_ref = function(v65, k66) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v65._fields[k66];
  };
  var unsafe_vector_ref = function(v67, k68) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v67.ref(k68);
  };
  var unsafe_vector_set_bang_ = function(v69, k70, val71) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v69.set(k70, val71);
  };
  var unsafe_vector_length = function(v72) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v72.length();
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get unsafe_fx_plus_() {
      return unsafe_fx_plus_;
    },
    get unsafe_fx_() {
      return unsafe_fx_;
    },
    get unsafe_fx_times_() {
      return unsafe_fx_times_;
    },
    get unsafe_fxquotient() {
      return unsafe_fxquotient;
    },
    get unsafe_fxremainder() {
      return unsafe_fxremainder;
    },
    get unsafe_fxmodulo() {
      return unsafe_fxmodulo;
    },
    get unsafe_fxabs() {
      return unsafe_fxabs;
    },
    get unsafe_fx_eq_() {
      return unsafe_fx_eq_;
    },
    get unsafe_fx_lt_() {
      return unsafe_fx_lt_;
    },
    get unsafe_fx_lt__eq_() {
      return unsafe_fx_lt__eq_;
    },
    get unsafe_fx_gt_() {
      return unsafe_fx_gt_;
    },
    get unsafe_fx_gt__eq_() {
      return unsafe_fx_gt__eq_;
    },
    get unsafe_fxmin() {
      return unsafe_fxmin;
    },
    get unsafe_fxmax() {
      return unsafe_fxmax;
    },
    get unsafe_fxrshift() {
      return unsafe_fxrshift;
    },
    get unsafe_fxlshift() {
      return unsafe_fxlshift;
    },
    get unsafe_fxand() {
      return unsafe_fxand;
    },
    get unsafe_fxior() {
      return unsafe_fxior;
    },
    get unsafe_fxxor() {
      return unsafe_fxxor;
    },
    get unsafe_fxnot() {
      return unsafe_fxnot;
    },
    get unsafe_car() {
      return unsafe_car;
    },
    get unsafe_cdr() {
      return unsafe_cdr;
    },
    get unsafe_mcar() {
      return unsafe_mcar;
    },
    get unsafe_mcdr() {
      return unsafe_mcdr;
    },
    get unsafe_set_mcar_bang_() {
      return unsafe_set_mcar_bang_;
    },
    get unsafe_set_mcdr_bang_() {
      return unsafe_set_mcdr_bang_;
    },
    get unsafe_cons_list() {
      return unsafe_cons_list;
    },
    get unsafe_struct_ref() {
      return unsafe_struct_ref;
    },
    get unsafe_vector_ref() {
      return unsafe_vector_ref;
    },
    get unsafe_vector_set_bang_() {
      return unsafe_vector_set_bang_;
    },
    get unsafe_vector_length() {
      return unsafe_vector_length;
    }
  };
})();
var $__collects_47_racket_47_private_47_sort_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/sort.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sorts3450 = M0.make_hasheq();
  var sort_proc3451 = function(A3452, n3453) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3454 = M1.unsafe_fxrshift(n3453, 1);
    var n_by_2_plus_3455 = M1.unsafe_fx_(n3453, n_by_2_3454);
    var copying_mergesort3456 = function(Alo3457, Blo3458, n3459) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3459, 1) !== false) {
        var if_res2347 = M1.unsafe_vector_set_bang_(A3452, Blo3458, M1.unsafe_vector_ref(A3452, Alo3457));
      } else {
        if (M1.unsafe_fx_eq_(n3459, 2) !== false) {
          var x3460 = M1.unsafe_vector_ref(A3452, Alo3457);
          var y3461 = M1.unsafe_vector_ref(A3452, M1.unsafe_fx_plus_(Alo3457, 1));
          if (false !== false) {
            var if_res2332 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3461), false(x3460));
          } else {
            var if_res2332 = M1.__rjs_quoted__.unsafe_fl_lt_(y3461, x3460);
          }
          if (if_res2332 !== false) {
            M1.unsafe_vector_set_bang_(A3452, Blo3458, y3461);
            var if_res2333 = M1.unsafe_vector_set_bang_(A3452, M1.unsafe_fx_plus_(Blo3458, 1), x3460);
          } else {
            M1.unsafe_vector_set_bang_(A3452, Blo3458, x3460);
            var if_res2333 = M1.unsafe_vector_set_bang_(A3452, M1.unsafe_fx_plus_(Blo3458, 1), y3461);
          }
          var if_res2346 = if_res2333;
        } else {
          if (M1.unsafe_fx_lt_(n3459, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3452, Blo3458, M1.unsafe_vector_ref(A3452, Alo3457));
            var iloop3462 = function(i3463) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3463, n3459) !== false) {
                var ref_i3464 = M1.unsafe_vector_ref(A3452, M1.unsafe_fx_plus_(Alo3457, i3463));
                var jloop3465 = function(j3466) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13467 = M1.unsafe_vector_ref(A3452, M1.unsafe_fx_(j3466, 1));
                  if (M1.unsafe_fx_lt_(Blo3458, j3466) !== false) {
                    if (false !== false) {
                      var if_res2334 = M1.__rjs_quoted__.unsafe_fl_lt_(false(ref_i3464), false(ref_j_13467));
                    } else {
                      var if_res2334 = M1.__rjs_quoted__.unsafe_fl_lt_(ref_i3464, ref_j_13467);
                    }
                    var if_res2335 = if_res2334;
                  } else {
                    var if_res2335 = false;
                  }
                  if (if_res2335 !== false) {
                    M1.unsafe_vector_set_bang_(A3452, j3466, ref_j_13467);
                    var if_res2336 = jloop3465(M1.unsafe_fx_(j3466, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3452, j3466, ref_i3464);
                    var if_res2336 = iloop3462(M1.unsafe_fx_plus_(i3463, 1));
                  }
                  return if_res2336;
                };
                var if_res2337 = jloop3465(M1.unsafe_fx_plus_(Blo3458, i3463));
              } else {
                var if_res2337 = M0.rvoid();
              }
              return if_res2337;
            };
            var if_res2345 = iloop3462(1);
          } else {
            var n_by_2_3468 = M1.unsafe_fxrshift(n3459, 1);
            var n_by_2_plus_3469 = M1.unsafe_fx_(n3459, n_by_2_3468);
            var Amid13470 = M1.unsafe_fx_plus_(Alo3457, n_by_2_3468);
            var Amid23471 = M1.unsafe_fx_plus_(Alo3457, n_by_2_plus_3469);
            var Bmid13472 = M1.unsafe_fx_plus_(Blo3458, n_by_2_3468);
            copying_mergesort3456(Amid13470, Bmid13472, n_by_2_plus_3469);
            copying_mergesort3456(Alo3457, Amid23471, n_by_2_3468);
            var b23473 = M1.unsafe_fx_plus_(Blo3458, n3459);
            var loop3474 = function(a13475, b13476, c13477) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3478 = M1.unsafe_vector_ref(A3452, a13475);
              var y3479 = M1.unsafe_vector_ref(A3452, b13476);
              if (true !== false) {
                if (false !== false) {
                  var if_res2338 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3479), false(x3478));
                } else {
                  var if_res2338 = M1.__rjs_quoted__.unsafe_fl_lt_(y3479, x3478);
                }
                var if_res2340 = M0.not(if_res2338);
              } else {
                if (false !== false) {
                  var if_res2339 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3478), false(y3479));
                } else {
                  var if_res2339 = M1.__rjs_quoted__.unsafe_fl_lt_(x3478, y3479);
                }
                var if_res2340 = if_res2339;
              }
              if (if_res2340 !== false) {
                M1.unsafe_vector_set_bang_(A3452, c13477, x3478);
                var a13480 = M1.unsafe_fx_plus_(a13475, 1);
                var c13481 = M1.unsafe_fx_plus_(c13477, 1);
                if (M1.unsafe_fx_lt_(c13481, b13476) !== false) {
                  var if_res2341 = loop3474(a13480, b13476, c13481);
                } else {
                  var if_res2341 = M0.rvoid();
                }
                var if_res2344 = if_res2341;
              } else {
                M1.unsafe_vector_set_bang_(A3452, c13477, y3479);
                var b13482 = M1.unsafe_fx_plus_(b13476, 1);
                var c13483 = M1.unsafe_fx_plus_(c13477, 1);
                if (M1.unsafe_fx_lt__eq_(b23473, b13482) !== false) {
                  var loop3484 = function(a13485, c13486) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13486, b13482) !== false) {
                      M1.unsafe_vector_set_bang_(A3452, c13486, M1.unsafe_vector_ref(A3452, a13485));
                      var if_res2342 = loop3484(M1.unsafe_fx_plus_(a13485, 1), M1.unsafe_fx_plus_(c13486, 1));
                    } else {
                      var if_res2342 = M0.rvoid();
                    }
                    return if_res2342;
                  };
                  var if_res2343 = loop3484(a13475, c13483);
                } else {
                  var if_res2343 = loop3474(a13475, b13482, c13483);
                }
                var if_res2344 = if_res2343;
              }
              return if_res2344;
            };
            var if_res2345 = loop3474(Amid23471, Bmid13472, Blo3458);
          }
          var if_res2346 = if_res2345;
        }
        var if_res2347 = if_res2346;
      }
      return if_res2347;
    };
    var Alo3487 = 0;
    var Amid13488 = n_by_2_3454;
    var Amid23489 = n_by_2_plus_3455;
    var Ahi3490 = n3453;
    var B1lo3491 = n3453;
    copying_mergesort3456(Amid13488, B1lo3491, n_by_2_plus_3455);
    if (M0.zero_p(n_by_2_3454) !== false) {
      var if_res2348 = M0.rvoid();
    } else {
      var if_res2348 = copying_mergesort3456(Alo3487, Amid23489, n_by_2_3454);
    }
    if_res2348;
    var b23492 = Ahi3490;
    var loop3493 = function(a13494, b13495, c13496) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3497 = M1.unsafe_vector_ref(A3452, a13494);
      var y3498 = M1.unsafe_vector_ref(A3452, b13495);
      if (false !== false) {
        if (false !== false) {
          var if_res2349 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3498), false(x3497));
        } else {
          var if_res2349 = M1.__rjs_quoted__.unsafe_fl_lt_(y3498, x3497);
        }
        var if_res2351 = M0.not(if_res2349);
      } else {
        if (false !== false) {
          var if_res2350 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3497), false(y3498));
        } else {
          var if_res2350 = M1.__rjs_quoted__.unsafe_fl_lt_(x3497, y3498);
        }
        var if_res2351 = if_res2350;
      }
      if (if_res2351 !== false) {
        M1.unsafe_vector_set_bang_(A3452, c13496, x3497);
        var a13499 = M1.unsafe_fx_plus_(a13494, 1);
        var c13500 = M1.unsafe_fx_plus_(c13496, 1);
        if (M1.unsafe_fx_lt_(c13500, b13495) !== false) {
          var if_res2352 = loop3493(a13499, b13495, c13500);
        } else {
          var if_res2352 = M0.rvoid();
        }
        var if_res2355 = if_res2352;
      } else {
        M1.unsafe_vector_set_bang_(A3452, c13496, y3498);
        var b13501 = M1.unsafe_fx_plus_(b13495, 1);
        var c13502 = M1.unsafe_fx_plus_(c13496, 1);
        if (M1.unsafe_fx_lt__eq_(b23492, b13501) !== false) {
          var loop3503 = function(a13504, c13505) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13505, b13501) !== false) {
              M1.unsafe_vector_set_bang_(A3452, c13505, M1.unsafe_vector_ref(A3452, a13504));
              var if_res2353 = loop3503(M1.unsafe_fx_plus_(a13504, 1), M1.unsafe_fx_plus_(c13505, 1));
            } else {
              var if_res2353 = M0.rvoid();
            }
            return if_res2353;
          };
          var if_res2354 = loop3503(a13494, c13502);
        } else {
          var if_res2354 = loop3493(a13494, b13501, c13502);
        }
        var if_res2355 = if_res2354;
      }
      return if_res2355;
    };
    return loop3493(B1lo3491, Amid23489, Alo3487);
  };
  M0.hash_set_bang_(sorts3450, M1.__rjs_quoted__.unsafe_fl_lt_, sort_proc3451);
  M0.hash_set_bang_(sorts3450, M1.__rjs_quoted__.unsafe_fl_lt__eq_, sort_proc3451);
  var sort_proc3506 = function(A3507, n3508) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3509 = M1.unsafe_fxrshift(n3508, 1);
    var n_by_2_plus_3510 = M1.unsafe_fx_(n3508, n_by_2_3509);
    var copying_mergesort3511 = function(Alo3512, Blo3513, n3514) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3514, 1) !== false) {
        var if_res2371 = M1.unsafe_vector_set_bang_(A3507, Blo3513, M1.unsafe_vector_ref(A3507, Alo3512));
      } else {
        if (M1.unsafe_fx_eq_(n3514, 2) !== false) {
          var x3515 = M1.unsafe_vector_ref(A3507, Alo3512);
          var y3516 = M1.unsafe_vector_ref(A3507, M1.unsafe_fx_plus_(Alo3512, 1));
          if (false !== false) {
            var if_res2356 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3516), false(x3515));
          } else {
            var if_res2356 = M1.__rjs_quoted__.unsafe_fl_gt_(y3516, x3515);
          }
          if (if_res2356 !== false) {
            M1.unsafe_vector_set_bang_(A3507, Blo3513, y3516);
            var if_res2357 = M1.unsafe_vector_set_bang_(A3507, M1.unsafe_fx_plus_(Blo3513, 1), x3515);
          } else {
            M1.unsafe_vector_set_bang_(A3507, Blo3513, x3515);
            var if_res2357 = M1.unsafe_vector_set_bang_(A3507, M1.unsafe_fx_plus_(Blo3513, 1), y3516);
          }
          var if_res2370 = if_res2357;
        } else {
          if (M1.unsafe_fx_lt_(n3514, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3507, Blo3513, M1.unsafe_vector_ref(A3507, Alo3512));
            var iloop3517 = function(i3518) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3518, n3514) !== false) {
                var ref_i3519 = M1.unsafe_vector_ref(A3507, M1.unsafe_fx_plus_(Alo3512, i3518));
                var jloop3520 = function(j3521) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13522 = M1.unsafe_vector_ref(A3507, M1.unsafe_fx_(j3521, 1));
                  if (M1.unsafe_fx_lt_(Blo3513, j3521) !== false) {
                    if (false !== false) {
                      var if_res2358 = M1.__rjs_quoted__.unsafe_fl_gt_(false(ref_i3519), false(ref_j_13522));
                    } else {
                      var if_res2358 = M1.__rjs_quoted__.unsafe_fl_gt_(ref_i3519, ref_j_13522);
                    }
                    var if_res2359 = if_res2358;
                  } else {
                    var if_res2359 = false;
                  }
                  if (if_res2359 !== false) {
                    M1.unsafe_vector_set_bang_(A3507, j3521, ref_j_13522);
                    var if_res2360 = jloop3520(M1.unsafe_fx_(j3521, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3507, j3521, ref_i3519);
                    var if_res2360 = iloop3517(M1.unsafe_fx_plus_(i3518, 1));
                  }
                  return if_res2360;
                };
                var if_res2361 = jloop3520(M1.unsafe_fx_plus_(Blo3513, i3518));
              } else {
                var if_res2361 = M0.rvoid();
              }
              return if_res2361;
            };
            var if_res2369 = iloop3517(1);
          } else {
            var n_by_2_3523 = M1.unsafe_fxrshift(n3514, 1);
            var n_by_2_plus_3524 = M1.unsafe_fx_(n3514, n_by_2_3523);
            var Amid13525 = M1.unsafe_fx_plus_(Alo3512, n_by_2_3523);
            var Amid23526 = M1.unsafe_fx_plus_(Alo3512, n_by_2_plus_3524);
            var Bmid13527 = M1.unsafe_fx_plus_(Blo3513, n_by_2_3523);
            copying_mergesort3511(Amid13525, Bmid13527, n_by_2_plus_3524);
            copying_mergesort3511(Alo3512, Amid23526, n_by_2_3523);
            var b23528 = M1.unsafe_fx_plus_(Blo3513, n3514);
            var loop3529 = function(a13530, b13531, c13532) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3533 = M1.unsafe_vector_ref(A3507, a13530);
              var y3534 = M1.unsafe_vector_ref(A3507, b13531);
              if (true !== false) {
                if (false !== false) {
                  var if_res2362 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3534), false(x3533));
                } else {
                  var if_res2362 = M1.__rjs_quoted__.unsafe_fl_gt_(y3534, x3533);
                }
                var if_res2364 = M0.not(if_res2362);
              } else {
                if (false !== false) {
                  var if_res2363 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3533), false(y3534));
                } else {
                  var if_res2363 = M1.__rjs_quoted__.unsafe_fl_gt_(x3533, y3534);
                }
                var if_res2364 = if_res2363;
              }
              if (if_res2364 !== false) {
                M1.unsafe_vector_set_bang_(A3507, c13532, x3533);
                var a13535 = M1.unsafe_fx_plus_(a13530, 1);
                var c13536 = M1.unsafe_fx_plus_(c13532, 1);
                if (M1.unsafe_fx_lt_(c13536, b13531) !== false) {
                  var if_res2365 = loop3529(a13535, b13531, c13536);
                } else {
                  var if_res2365 = M0.rvoid();
                }
                var if_res2368 = if_res2365;
              } else {
                M1.unsafe_vector_set_bang_(A3507, c13532, y3534);
                var b13537 = M1.unsafe_fx_plus_(b13531, 1);
                var c13538 = M1.unsafe_fx_plus_(c13532, 1);
                if (M1.unsafe_fx_lt__eq_(b23528, b13537) !== false) {
                  var loop3539 = function(a13540, c13541) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13541, b13537) !== false) {
                      M1.unsafe_vector_set_bang_(A3507, c13541, M1.unsafe_vector_ref(A3507, a13540));
                      var if_res2366 = loop3539(M1.unsafe_fx_plus_(a13540, 1), M1.unsafe_fx_plus_(c13541, 1));
                    } else {
                      var if_res2366 = M0.rvoid();
                    }
                    return if_res2366;
                  };
                  var if_res2367 = loop3539(a13530, c13538);
                } else {
                  var if_res2367 = loop3529(a13530, b13537, c13538);
                }
                var if_res2368 = if_res2367;
              }
              return if_res2368;
            };
            var if_res2369 = loop3529(Amid23526, Bmid13527, Blo3513);
          }
          var if_res2370 = if_res2369;
        }
        var if_res2371 = if_res2370;
      }
      return if_res2371;
    };
    var Alo3542 = 0;
    var Amid13543 = n_by_2_3509;
    var Amid23544 = n_by_2_plus_3510;
    var Ahi3545 = n3508;
    var B1lo3546 = n3508;
    copying_mergesort3511(Amid13543, B1lo3546, n_by_2_plus_3510);
    if (M0.zero_p(n_by_2_3509) !== false) {
      var if_res2372 = M0.rvoid();
    } else {
      var if_res2372 = copying_mergesort3511(Alo3542, Amid23544, n_by_2_3509);
    }
    if_res2372;
    var b23547 = Ahi3545;
    var loop3548 = function(a13549, b13550, c13551) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3552 = M1.unsafe_vector_ref(A3507, a13549);
      var y3553 = M1.unsafe_vector_ref(A3507, b13550);
      if (false !== false) {
        if (false !== false) {
          var if_res2373 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3553), false(x3552));
        } else {
          var if_res2373 = M1.__rjs_quoted__.unsafe_fl_gt_(y3553, x3552);
        }
        var if_res2375 = M0.not(if_res2373);
      } else {
        if (false !== false) {
          var if_res2374 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3552), false(y3553));
        } else {
          var if_res2374 = M1.__rjs_quoted__.unsafe_fl_gt_(x3552, y3553);
        }
        var if_res2375 = if_res2374;
      }
      if (if_res2375 !== false) {
        M1.unsafe_vector_set_bang_(A3507, c13551, x3552);
        var a13554 = M1.unsafe_fx_plus_(a13549, 1);
        var c13555 = M1.unsafe_fx_plus_(c13551, 1);
        if (M1.unsafe_fx_lt_(c13555, b13550) !== false) {
          var if_res2376 = loop3548(a13554, b13550, c13555);
        } else {
          var if_res2376 = M0.rvoid();
        }
        var if_res2379 = if_res2376;
      } else {
        M1.unsafe_vector_set_bang_(A3507, c13551, y3553);
        var b13556 = M1.unsafe_fx_plus_(b13550, 1);
        var c13557 = M1.unsafe_fx_plus_(c13551, 1);
        if (M1.unsafe_fx_lt__eq_(b23547, b13556) !== false) {
          var loop3558 = function(a13559, c13560) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13560, b13556) !== false) {
              M1.unsafe_vector_set_bang_(A3507, c13560, M1.unsafe_vector_ref(A3507, a13559));
              var if_res2377 = loop3558(M1.unsafe_fx_plus_(a13559, 1), M1.unsafe_fx_plus_(c13560, 1));
            } else {
              var if_res2377 = M0.rvoid();
            }
            return if_res2377;
          };
          var if_res2378 = loop3558(a13549, c13557);
        } else {
          var if_res2378 = loop3548(a13549, b13556, c13557);
        }
        var if_res2379 = if_res2378;
      }
      return if_res2379;
    };
    return loop3548(B1lo3546, Amid23544, Alo3542);
  };
  M0.hash_set_bang_(sorts3450, M1.__rjs_quoted__.unsafe_fl_gt_, sort_proc3506);
  M0.hash_set_bang_(sorts3450, M1.__rjs_quoted__.unsafe_fl_gt__eq_, sort_proc3506);
  var sort_proc3561 = function(A3562, n3563) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3564 = M1.unsafe_fxrshift(n3563, 1);
    var n_by_2_plus_3565 = M1.unsafe_fx_(n3563, n_by_2_3564);
    var copying_mergesort3566 = function(Alo3567, Blo3568, n3569) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3569, 1) !== false) {
        var if_res2395 = M1.unsafe_vector_set_bang_(A3562, Blo3568, M1.unsafe_vector_ref(A3562, Alo3567));
      } else {
        if (M1.unsafe_fx_eq_(n3569, 2) !== false) {
          var x3570 = M1.unsafe_vector_ref(A3562, Alo3567);
          var y3571 = M1.unsafe_vector_ref(A3562, M1.unsafe_fx_plus_(Alo3567, 1));
          if (false !== false) {
            var if_res2380 = M1.unsafe_fx_lt_(false(y3571), false(x3570));
          } else {
            var if_res2380 = M1.unsafe_fx_lt_(y3571, x3570);
          }
          if (if_res2380 !== false) {
            M1.unsafe_vector_set_bang_(A3562, Blo3568, y3571);
            var if_res2381 = M1.unsafe_vector_set_bang_(A3562, M1.unsafe_fx_plus_(Blo3568, 1), x3570);
          } else {
            M1.unsafe_vector_set_bang_(A3562, Blo3568, x3570);
            var if_res2381 = M1.unsafe_vector_set_bang_(A3562, M1.unsafe_fx_plus_(Blo3568, 1), y3571);
          }
          var if_res2394 = if_res2381;
        } else {
          if (M1.unsafe_fx_lt_(n3569, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3562, Blo3568, M1.unsafe_vector_ref(A3562, Alo3567));
            var iloop3572 = function(i3573) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3573, n3569) !== false) {
                var ref_i3574 = M1.unsafe_vector_ref(A3562, M1.unsafe_fx_plus_(Alo3567, i3573));
                var jloop3575 = function(j3576) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13577 = M1.unsafe_vector_ref(A3562, M1.unsafe_fx_(j3576, 1));
                  if (M1.unsafe_fx_lt_(Blo3568, j3576) !== false) {
                    if (false !== false) {
                      var if_res2382 = M1.unsafe_fx_lt_(false(ref_i3574), false(ref_j_13577));
                    } else {
                      var if_res2382 = M1.unsafe_fx_lt_(ref_i3574, ref_j_13577);
                    }
                    var if_res2383 = if_res2382;
                  } else {
                    var if_res2383 = false;
                  }
                  if (if_res2383 !== false) {
                    M1.unsafe_vector_set_bang_(A3562, j3576, ref_j_13577);
                    var if_res2384 = jloop3575(M1.unsafe_fx_(j3576, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3562, j3576, ref_i3574);
                    var if_res2384 = iloop3572(M1.unsafe_fx_plus_(i3573, 1));
                  }
                  return if_res2384;
                };
                var if_res2385 = jloop3575(M1.unsafe_fx_plus_(Blo3568, i3573));
              } else {
                var if_res2385 = M0.rvoid();
              }
              return if_res2385;
            };
            var if_res2393 = iloop3572(1);
          } else {
            var n_by_2_3578 = M1.unsafe_fxrshift(n3569, 1);
            var n_by_2_plus_3579 = M1.unsafe_fx_(n3569, n_by_2_3578);
            var Amid13580 = M1.unsafe_fx_plus_(Alo3567, n_by_2_3578);
            var Amid23581 = M1.unsafe_fx_plus_(Alo3567, n_by_2_plus_3579);
            var Bmid13582 = M1.unsafe_fx_plus_(Blo3568, n_by_2_3578);
            copying_mergesort3566(Amid13580, Bmid13582, n_by_2_plus_3579);
            copying_mergesort3566(Alo3567, Amid23581, n_by_2_3578);
            var b23583 = M1.unsafe_fx_plus_(Blo3568, n3569);
            var loop3584 = function(a13585, b13586, c13587) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3588 = M1.unsafe_vector_ref(A3562, a13585);
              var y3589 = M1.unsafe_vector_ref(A3562, b13586);
              if (true !== false) {
                if (false !== false) {
                  var if_res2386 = M1.unsafe_fx_lt_(false(y3589), false(x3588));
                } else {
                  var if_res2386 = M1.unsafe_fx_lt_(y3589, x3588);
                }
                var if_res2388 = M0.not(if_res2386);
              } else {
                if (false !== false) {
                  var if_res2387 = M1.unsafe_fx_lt_(false(x3588), false(y3589));
                } else {
                  var if_res2387 = M1.unsafe_fx_lt_(x3588, y3589);
                }
                var if_res2388 = if_res2387;
              }
              if (if_res2388 !== false) {
                M1.unsafe_vector_set_bang_(A3562, c13587, x3588);
                var a13590 = M1.unsafe_fx_plus_(a13585, 1);
                var c13591 = M1.unsafe_fx_plus_(c13587, 1);
                if (M1.unsafe_fx_lt_(c13591, b13586) !== false) {
                  var if_res2389 = loop3584(a13590, b13586, c13591);
                } else {
                  var if_res2389 = M0.rvoid();
                }
                var if_res2392 = if_res2389;
              } else {
                M1.unsafe_vector_set_bang_(A3562, c13587, y3589);
                var b13592 = M1.unsafe_fx_plus_(b13586, 1);
                var c13593 = M1.unsafe_fx_plus_(c13587, 1);
                if (M1.unsafe_fx_lt__eq_(b23583, b13592) !== false) {
                  var loop3594 = function(a13595, c13596) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13596, b13592) !== false) {
                      M1.unsafe_vector_set_bang_(A3562, c13596, M1.unsafe_vector_ref(A3562, a13595));
                      var if_res2390 = loop3594(M1.unsafe_fx_plus_(a13595, 1), M1.unsafe_fx_plus_(c13596, 1));
                    } else {
                      var if_res2390 = M0.rvoid();
                    }
                    return if_res2390;
                  };
                  var if_res2391 = loop3594(a13585, c13593);
                } else {
                  var if_res2391 = loop3584(a13585, b13592, c13593);
                }
                var if_res2392 = if_res2391;
              }
              return if_res2392;
            };
            var if_res2393 = loop3584(Amid23581, Bmid13582, Blo3568);
          }
          var if_res2394 = if_res2393;
        }
        var if_res2395 = if_res2394;
      }
      return if_res2395;
    };
    var Alo3597 = 0;
    var Amid13598 = n_by_2_3564;
    var Amid23599 = n_by_2_plus_3565;
    var Ahi3600 = n3563;
    var B1lo3601 = n3563;
    copying_mergesort3566(Amid13598, B1lo3601, n_by_2_plus_3565);
    if (M0.zero_p(n_by_2_3564) !== false) {
      var if_res2396 = M0.rvoid();
    } else {
      var if_res2396 = copying_mergesort3566(Alo3597, Amid23599, n_by_2_3564);
    }
    if_res2396;
    var b23602 = Ahi3600;
    var loop3603 = function(a13604, b13605, c13606) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3607 = M1.unsafe_vector_ref(A3562, a13604);
      var y3608 = M1.unsafe_vector_ref(A3562, b13605);
      if (false !== false) {
        if (false !== false) {
          var if_res2397 = M1.unsafe_fx_lt_(false(y3608), false(x3607));
        } else {
          var if_res2397 = M1.unsafe_fx_lt_(y3608, x3607);
        }
        var if_res2399 = M0.not(if_res2397);
      } else {
        if (false !== false) {
          var if_res2398 = M1.unsafe_fx_lt_(false(x3607), false(y3608));
        } else {
          var if_res2398 = M1.unsafe_fx_lt_(x3607, y3608);
        }
        var if_res2399 = if_res2398;
      }
      if (if_res2399 !== false) {
        M1.unsafe_vector_set_bang_(A3562, c13606, x3607);
        var a13609 = M1.unsafe_fx_plus_(a13604, 1);
        var c13610 = M1.unsafe_fx_plus_(c13606, 1);
        if (M1.unsafe_fx_lt_(c13610, b13605) !== false) {
          var if_res2400 = loop3603(a13609, b13605, c13610);
        } else {
          var if_res2400 = M0.rvoid();
        }
        var if_res2403 = if_res2400;
      } else {
        M1.unsafe_vector_set_bang_(A3562, c13606, y3608);
        var b13611 = M1.unsafe_fx_plus_(b13605, 1);
        var c13612 = M1.unsafe_fx_plus_(c13606, 1);
        if (M1.unsafe_fx_lt__eq_(b23602, b13611) !== false) {
          var loop3613 = function(a13614, c13615) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13615, b13611) !== false) {
              M1.unsafe_vector_set_bang_(A3562, c13615, M1.unsafe_vector_ref(A3562, a13614));
              var if_res2401 = loop3613(M1.unsafe_fx_plus_(a13614, 1), M1.unsafe_fx_plus_(c13615, 1));
            } else {
              var if_res2401 = M0.rvoid();
            }
            return if_res2401;
          };
          var if_res2402 = loop3613(a13604, c13612);
        } else {
          var if_res2402 = loop3603(a13604, b13611, c13612);
        }
        var if_res2403 = if_res2402;
      }
      return if_res2403;
    };
    return loop3603(B1lo3601, Amid23599, Alo3597);
  };
  M0.hash_set_bang_(sorts3450, M1.unsafe_fx_lt_, sort_proc3561);
  M0.hash_set_bang_(sorts3450, M1.unsafe_fx_lt__eq_, sort_proc3561);
  var sort_proc3616 = function(A3617, n3618) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3619 = M1.unsafe_fxrshift(n3618, 1);
    var n_by_2_plus_3620 = M1.unsafe_fx_(n3618, n_by_2_3619);
    var copying_mergesort3621 = function(Alo3622, Blo3623, n3624) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3624, 1) !== false) {
        var if_res2419 = M1.unsafe_vector_set_bang_(A3617, Blo3623, M1.unsafe_vector_ref(A3617, Alo3622));
      } else {
        if (M1.unsafe_fx_eq_(n3624, 2) !== false) {
          var x3625 = M1.unsafe_vector_ref(A3617, Alo3622);
          var y3626 = M1.unsafe_vector_ref(A3617, M1.unsafe_fx_plus_(Alo3622, 1));
          if (false !== false) {
            var if_res2404 = M1.unsafe_fx_gt_(false(y3626), false(x3625));
          } else {
            var if_res2404 = M1.unsafe_fx_gt_(y3626, x3625);
          }
          if (if_res2404 !== false) {
            M1.unsafe_vector_set_bang_(A3617, Blo3623, y3626);
            var if_res2405 = M1.unsafe_vector_set_bang_(A3617, M1.unsafe_fx_plus_(Blo3623, 1), x3625);
          } else {
            M1.unsafe_vector_set_bang_(A3617, Blo3623, x3625);
            var if_res2405 = M1.unsafe_vector_set_bang_(A3617, M1.unsafe_fx_plus_(Blo3623, 1), y3626);
          }
          var if_res2418 = if_res2405;
        } else {
          if (M1.unsafe_fx_lt_(n3624, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3617, Blo3623, M1.unsafe_vector_ref(A3617, Alo3622));
            var iloop3627 = function(i3628) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3628, n3624) !== false) {
                var ref_i3629 = M1.unsafe_vector_ref(A3617, M1.unsafe_fx_plus_(Alo3622, i3628));
                var jloop3630 = function(j3631) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13632 = M1.unsafe_vector_ref(A3617, M1.unsafe_fx_(j3631, 1));
                  if (M1.unsafe_fx_lt_(Blo3623, j3631) !== false) {
                    if (false !== false) {
                      var if_res2406 = M1.unsafe_fx_gt_(false(ref_i3629), false(ref_j_13632));
                    } else {
                      var if_res2406 = M1.unsafe_fx_gt_(ref_i3629, ref_j_13632);
                    }
                    var if_res2407 = if_res2406;
                  } else {
                    var if_res2407 = false;
                  }
                  if (if_res2407 !== false) {
                    M1.unsafe_vector_set_bang_(A3617, j3631, ref_j_13632);
                    var if_res2408 = jloop3630(M1.unsafe_fx_(j3631, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3617, j3631, ref_i3629);
                    var if_res2408 = iloop3627(M1.unsafe_fx_plus_(i3628, 1));
                  }
                  return if_res2408;
                };
                var if_res2409 = jloop3630(M1.unsafe_fx_plus_(Blo3623, i3628));
              } else {
                var if_res2409 = M0.rvoid();
              }
              return if_res2409;
            };
            var if_res2417 = iloop3627(1);
          } else {
            var n_by_2_3633 = M1.unsafe_fxrshift(n3624, 1);
            var n_by_2_plus_3634 = M1.unsafe_fx_(n3624, n_by_2_3633);
            var Amid13635 = M1.unsafe_fx_plus_(Alo3622, n_by_2_3633);
            var Amid23636 = M1.unsafe_fx_plus_(Alo3622, n_by_2_plus_3634);
            var Bmid13637 = M1.unsafe_fx_plus_(Blo3623, n_by_2_3633);
            copying_mergesort3621(Amid13635, Bmid13637, n_by_2_plus_3634);
            copying_mergesort3621(Alo3622, Amid23636, n_by_2_3633);
            var b23638 = M1.unsafe_fx_plus_(Blo3623, n3624);
            var loop3639 = function(a13640, b13641, c13642) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3643 = M1.unsafe_vector_ref(A3617, a13640);
              var y3644 = M1.unsafe_vector_ref(A3617, b13641);
              if (true !== false) {
                if (false !== false) {
                  var if_res2410 = M1.unsafe_fx_gt_(false(y3644), false(x3643));
                } else {
                  var if_res2410 = M1.unsafe_fx_gt_(y3644, x3643);
                }
                var if_res2412 = M0.not(if_res2410);
              } else {
                if (false !== false) {
                  var if_res2411 = M1.unsafe_fx_gt_(false(x3643), false(y3644));
                } else {
                  var if_res2411 = M1.unsafe_fx_gt_(x3643, y3644);
                }
                var if_res2412 = if_res2411;
              }
              if (if_res2412 !== false) {
                M1.unsafe_vector_set_bang_(A3617, c13642, x3643);
                var a13645 = M1.unsafe_fx_plus_(a13640, 1);
                var c13646 = M1.unsafe_fx_plus_(c13642, 1);
                if (M1.unsafe_fx_lt_(c13646, b13641) !== false) {
                  var if_res2413 = loop3639(a13645, b13641, c13646);
                } else {
                  var if_res2413 = M0.rvoid();
                }
                var if_res2416 = if_res2413;
              } else {
                M1.unsafe_vector_set_bang_(A3617, c13642, y3644);
                var b13647 = M1.unsafe_fx_plus_(b13641, 1);
                var c13648 = M1.unsafe_fx_plus_(c13642, 1);
                if (M1.unsafe_fx_lt__eq_(b23638, b13647) !== false) {
                  var loop3649 = function(a13650, c13651) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13651, b13647) !== false) {
                      M1.unsafe_vector_set_bang_(A3617, c13651, M1.unsafe_vector_ref(A3617, a13650));
                      var if_res2414 = loop3649(M1.unsafe_fx_plus_(a13650, 1), M1.unsafe_fx_plus_(c13651, 1));
                    } else {
                      var if_res2414 = M0.rvoid();
                    }
                    return if_res2414;
                  };
                  var if_res2415 = loop3649(a13640, c13648);
                } else {
                  var if_res2415 = loop3639(a13640, b13647, c13648);
                }
                var if_res2416 = if_res2415;
              }
              return if_res2416;
            };
            var if_res2417 = loop3639(Amid23636, Bmid13637, Blo3623);
          }
          var if_res2418 = if_res2417;
        }
        var if_res2419 = if_res2418;
      }
      return if_res2419;
    };
    var Alo3652 = 0;
    var Amid13653 = n_by_2_3619;
    var Amid23654 = n_by_2_plus_3620;
    var Ahi3655 = n3618;
    var B1lo3656 = n3618;
    copying_mergesort3621(Amid13653, B1lo3656, n_by_2_plus_3620);
    if (M0.zero_p(n_by_2_3619) !== false) {
      var if_res2420 = M0.rvoid();
    } else {
      var if_res2420 = copying_mergesort3621(Alo3652, Amid23654, n_by_2_3619);
    }
    if_res2420;
    var b23657 = Ahi3655;
    var loop3658 = function(a13659, b13660, c13661) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3662 = M1.unsafe_vector_ref(A3617, a13659);
      var y3663 = M1.unsafe_vector_ref(A3617, b13660);
      if (false !== false) {
        if (false !== false) {
          var if_res2421 = M1.unsafe_fx_gt_(false(y3663), false(x3662));
        } else {
          var if_res2421 = M1.unsafe_fx_gt_(y3663, x3662);
        }
        var if_res2423 = M0.not(if_res2421);
      } else {
        if (false !== false) {
          var if_res2422 = M1.unsafe_fx_gt_(false(x3662), false(y3663));
        } else {
          var if_res2422 = M1.unsafe_fx_gt_(x3662, y3663);
        }
        var if_res2423 = if_res2422;
      }
      if (if_res2423 !== false) {
        M1.unsafe_vector_set_bang_(A3617, c13661, x3662);
        var a13664 = M1.unsafe_fx_plus_(a13659, 1);
        var c13665 = M1.unsafe_fx_plus_(c13661, 1);
        if (M1.unsafe_fx_lt_(c13665, b13660) !== false) {
          var if_res2424 = loop3658(a13664, b13660, c13665);
        } else {
          var if_res2424 = M0.rvoid();
        }
        var if_res2427 = if_res2424;
      } else {
        M1.unsafe_vector_set_bang_(A3617, c13661, y3663);
        var b13666 = M1.unsafe_fx_plus_(b13660, 1);
        var c13667 = M1.unsafe_fx_plus_(c13661, 1);
        if (M1.unsafe_fx_lt__eq_(b23657, b13666) !== false) {
          var loop3668 = function(a13669, c13670) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13670, b13666) !== false) {
              M1.unsafe_vector_set_bang_(A3617, c13670, M1.unsafe_vector_ref(A3617, a13669));
              var if_res2425 = loop3668(M1.unsafe_fx_plus_(a13669, 1), M1.unsafe_fx_plus_(c13670, 1));
            } else {
              var if_res2425 = M0.rvoid();
            }
            return if_res2425;
          };
          var if_res2426 = loop3668(a13659, c13667);
        } else {
          var if_res2426 = loop3658(a13659, b13666, c13667);
        }
        var if_res2427 = if_res2426;
      }
      return if_res2427;
    };
    return loop3658(B1lo3656, Amid23654, Alo3652);
  };
  M0.hash_set_bang_(sorts3450, M1.unsafe_fx_gt_, sort_proc3616);
  M0.hash_set_bang_(sorts3450, M1.unsafe_fx_gt__eq_, sort_proc3616);
  var sort_proc3671 = function(A3672, n3673) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3674 = M1.unsafe_fxrshift(n3673, 1);
    var n_by_2_plus_3675 = M1.unsafe_fx_(n3673, n_by_2_3674);
    var copying_mergesort3676 = function(Alo3677, Blo3678, n3679) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3679, 1) !== false) {
        var if_res2443 = M1.unsafe_vector_set_bang_(A3672, Blo3678, M1.unsafe_vector_ref(A3672, Alo3677));
      } else {
        if (M1.unsafe_fx_eq_(n3679, 2) !== false) {
          var x3680 = M1.unsafe_vector_ref(A3672, Alo3677);
          var y3681 = M1.unsafe_vector_ref(A3672, M1.unsafe_fx_plus_(Alo3677, 1));
          if (false !== false) {
            var if_res2428 = M0.__lt_(false(y3681), false(x3680));
          } else {
            var if_res2428 = M0.__lt_(y3681, x3680);
          }
          if (if_res2428 !== false) {
            M1.unsafe_vector_set_bang_(A3672, Blo3678, y3681);
            var if_res2429 = M1.unsafe_vector_set_bang_(A3672, M1.unsafe_fx_plus_(Blo3678, 1), x3680);
          } else {
            M1.unsafe_vector_set_bang_(A3672, Blo3678, x3680);
            var if_res2429 = M1.unsafe_vector_set_bang_(A3672, M1.unsafe_fx_plus_(Blo3678, 1), y3681);
          }
          var if_res2442 = if_res2429;
        } else {
          if (M1.unsafe_fx_lt_(n3679, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3672, Blo3678, M1.unsafe_vector_ref(A3672, Alo3677));
            var iloop3682 = function(i3683) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3683, n3679) !== false) {
                var ref_i3684 = M1.unsafe_vector_ref(A3672, M1.unsafe_fx_plus_(Alo3677, i3683));
                var jloop3685 = function(j3686) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13687 = M1.unsafe_vector_ref(A3672, M1.unsafe_fx_(j3686, 1));
                  if (M1.unsafe_fx_lt_(Blo3678, j3686) !== false) {
                    if (false !== false) {
                      var if_res2430 = M0.__lt_(false(ref_i3684), false(ref_j_13687));
                    } else {
                      var if_res2430 = M0.__lt_(ref_i3684, ref_j_13687);
                    }
                    var if_res2431 = if_res2430;
                  } else {
                    var if_res2431 = false;
                  }
                  if (if_res2431 !== false) {
                    M1.unsafe_vector_set_bang_(A3672, j3686, ref_j_13687);
                    var if_res2432 = jloop3685(M1.unsafe_fx_(j3686, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3672, j3686, ref_i3684);
                    var if_res2432 = iloop3682(M1.unsafe_fx_plus_(i3683, 1));
                  }
                  return if_res2432;
                };
                var if_res2433 = jloop3685(M1.unsafe_fx_plus_(Blo3678, i3683));
              } else {
                var if_res2433 = M0.rvoid();
              }
              return if_res2433;
            };
            var if_res2441 = iloop3682(1);
          } else {
            var n_by_2_3688 = M1.unsafe_fxrshift(n3679, 1);
            var n_by_2_plus_3689 = M1.unsafe_fx_(n3679, n_by_2_3688);
            var Amid13690 = M1.unsafe_fx_plus_(Alo3677, n_by_2_3688);
            var Amid23691 = M1.unsafe_fx_plus_(Alo3677, n_by_2_plus_3689);
            var Bmid13692 = M1.unsafe_fx_plus_(Blo3678, n_by_2_3688);
            copying_mergesort3676(Amid13690, Bmid13692, n_by_2_plus_3689);
            copying_mergesort3676(Alo3677, Amid23691, n_by_2_3688);
            var b23693 = M1.unsafe_fx_plus_(Blo3678, n3679);
            var loop3694 = function(a13695, b13696, c13697) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3698 = M1.unsafe_vector_ref(A3672, a13695);
              var y3699 = M1.unsafe_vector_ref(A3672, b13696);
              if (true !== false) {
                if (false !== false) {
                  var if_res2434 = M0.__lt_(false(y3699), false(x3698));
                } else {
                  var if_res2434 = M0.__lt_(y3699, x3698);
                }
                var if_res2436 = M0.not(if_res2434);
              } else {
                if (false !== false) {
                  var if_res2435 = M0.__lt_(false(x3698), false(y3699));
                } else {
                  var if_res2435 = M0.__lt_(x3698, y3699);
                }
                var if_res2436 = if_res2435;
              }
              if (if_res2436 !== false) {
                M1.unsafe_vector_set_bang_(A3672, c13697, x3698);
                var a13700 = M1.unsafe_fx_plus_(a13695, 1);
                var c13701 = M1.unsafe_fx_plus_(c13697, 1);
                if (M1.unsafe_fx_lt_(c13701, b13696) !== false) {
                  var if_res2437 = loop3694(a13700, b13696, c13701);
                } else {
                  var if_res2437 = M0.rvoid();
                }
                var if_res2440 = if_res2437;
              } else {
                M1.unsafe_vector_set_bang_(A3672, c13697, y3699);
                var b13702 = M1.unsafe_fx_plus_(b13696, 1);
                var c13703 = M1.unsafe_fx_plus_(c13697, 1);
                if (M1.unsafe_fx_lt__eq_(b23693, b13702) !== false) {
                  var loop3704 = function(a13705, c13706) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13706, b13702) !== false) {
                      M1.unsafe_vector_set_bang_(A3672, c13706, M1.unsafe_vector_ref(A3672, a13705));
                      var if_res2438 = loop3704(M1.unsafe_fx_plus_(a13705, 1), M1.unsafe_fx_plus_(c13706, 1));
                    } else {
                      var if_res2438 = M0.rvoid();
                    }
                    return if_res2438;
                  };
                  var if_res2439 = loop3704(a13695, c13703);
                } else {
                  var if_res2439 = loop3694(a13695, b13702, c13703);
                }
                var if_res2440 = if_res2439;
              }
              return if_res2440;
            };
            var if_res2441 = loop3694(Amid23691, Bmid13692, Blo3678);
          }
          var if_res2442 = if_res2441;
        }
        var if_res2443 = if_res2442;
      }
      return if_res2443;
    };
    var Alo3707 = 0;
    var Amid13708 = n_by_2_3674;
    var Amid23709 = n_by_2_plus_3675;
    var Ahi3710 = n3673;
    var B1lo3711 = n3673;
    copying_mergesort3676(Amid13708, B1lo3711, n_by_2_plus_3675);
    if (M0.zero_p(n_by_2_3674) !== false) {
      var if_res2444 = M0.rvoid();
    } else {
      var if_res2444 = copying_mergesort3676(Alo3707, Amid23709, n_by_2_3674);
    }
    if_res2444;
    var b23712 = Ahi3710;
    var loop3713 = function(a13714, b13715, c13716) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3717 = M1.unsafe_vector_ref(A3672, a13714);
      var y3718 = M1.unsafe_vector_ref(A3672, b13715);
      if (false !== false) {
        if (false !== false) {
          var if_res2445 = M0.__lt_(false(y3718), false(x3717));
        } else {
          var if_res2445 = M0.__lt_(y3718, x3717);
        }
        var if_res2447 = M0.not(if_res2445);
      } else {
        if (false !== false) {
          var if_res2446 = M0.__lt_(false(x3717), false(y3718));
        } else {
          var if_res2446 = M0.__lt_(x3717, y3718);
        }
        var if_res2447 = if_res2446;
      }
      if (if_res2447 !== false) {
        M1.unsafe_vector_set_bang_(A3672, c13716, x3717);
        var a13719 = M1.unsafe_fx_plus_(a13714, 1);
        var c13720 = M1.unsafe_fx_plus_(c13716, 1);
        if (M1.unsafe_fx_lt_(c13720, b13715) !== false) {
          var if_res2448 = loop3713(a13719, b13715, c13720);
        } else {
          var if_res2448 = M0.rvoid();
        }
        var if_res2451 = if_res2448;
      } else {
        M1.unsafe_vector_set_bang_(A3672, c13716, y3718);
        var b13721 = M1.unsafe_fx_plus_(b13715, 1);
        var c13722 = M1.unsafe_fx_plus_(c13716, 1);
        if (M1.unsafe_fx_lt__eq_(b23712, b13721) !== false) {
          var loop3723 = function(a13724, c13725) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13725, b13721) !== false) {
              M1.unsafe_vector_set_bang_(A3672, c13725, M1.unsafe_vector_ref(A3672, a13724));
              var if_res2449 = loop3723(M1.unsafe_fx_plus_(a13724, 1), M1.unsafe_fx_plus_(c13725, 1));
            } else {
              var if_res2449 = M0.rvoid();
            }
            return if_res2449;
          };
          var if_res2450 = loop3723(a13714, c13722);
        } else {
          var if_res2450 = loop3713(a13714, b13721, c13722);
        }
        var if_res2451 = if_res2450;
      }
      return if_res2451;
    };
    return loop3713(B1lo3711, Amid23709, Alo3707);
  };
  M0.hash_set_bang_(sorts3450, M0.__lt_, sort_proc3671);
  M0.hash_set_bang_(sorts3450, M0.__lt__eq_, sort_proc3671);
  var sort_proc3726 = function(A3727, n3728) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3729 = M1.unsafe_fxrshift(n3728, 1);
    var n_by_2_plus_3730 = M1.unsafe_fx_(n3728, n_by_2_3729);
    var copying_mergesort3731 = function(Alo3732, Blo3733, n3734) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3734, 1) !== false) {
        var if_res2467 = M1.unsafe_vector_set_bang_(A3727, Blo3733, M1.unsafe_vector_ref(A3727, Alo3732));
      } else {
        if (M1.unsafe_fx_eq_(n3734, 2) !== false) {
          var x3735 = M1.unsafe_vector_ref(A3727, Alo3732);
          var y3736 = M1.unsafe_vector_ref(A3727, M1.unsafe_fx_plus_(Alo3732, 1));
          if (false !== false) {
            var if_res2452 = M0.__gt_(false(y3736), false(x3735));
          } else {
            var if_res2452 = M0.__gt_(y3736, x3735);
          }
          if (if_res2452 !== false) {
            M1.unsafe_vector_set_bang_(A3727, Blo3733, y3736);
            var if_res2453 = M1.unsafe_vector_set_bang_(A3727, M1.unsafe_fx_plus_(Blo3733, 1), x3735);
          } else {
            M1.unsafe_vector_set_bang_(A3727, Blo3733, x3735);
            var if_res2453 = M1.unsafe_vector_set_bang_(A3727, M1.unsafe_fx_plus_(Blo3733, 1), y3736);
          }
          var if_res2466 = if_res2453;
        } else {
          if (M1.unsafe_fx_lt_(n3734, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3727, Blo3733, M1.unsafe_vector_ref(A3727, Alo3732));
            var iloop3737 = function(i3738) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3738, n3734) !== false) {
                var ref_i3739 = M1.unsafe_vector_ref(A3727, M1.unsafe_fx_plus_(Alo3732, i3738));
                var jloop3740 = function(j3741) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13742 = M1.unsafe_vector_ref(A3727, M1.unsafe_fx_(j3741, 1));
                  if (M1.unsafe_fx_lt_(Blo3733, j3741) !== false) {
                    if (false !== false) {
                      var if_res2454 = M0.__gt_(false(ref_i3739), false(ref_j_13742));
                    } else {
                      var if_res2454 = M0.__gt_(ref_i3739, ref_j_13742);
                    }
                    var if_res2455 = if_res2454;
                  } else {
                    var if_res2455 = false;
                  }
                  if (if_res2455 !== false) {
                    M1.unsafe_vector_set_bang_(A3727, j3741, ref_j_13742);
                    var if_res2456 = jloop3740(M1.unsafe_fx_(j3741, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3727, j3741, ref_i3739);
                    var if_res2456 = iloop3737(M1.unsafe_fx_plus_(i3738, 1));
                  }
                  return if_res2456;
                };
                var if_res2457 = jloop3740(M1.unsafe_fx_plus_(Blo3733, i3738));
              } else {
                var if_res2457 = M0.rvoid();
              }
              return if_res2457;
            };
            var if_res2465 = iloop3737(1);
          } else {
            var n_by_2_3743 = M1.unsafe_fxrshift(n3734, 1);
            var n_by_2_plus_3744 = M1.unsafe_fx_(n3734, n_by_2_3743);
            var Amid13745 = M1.unsafe_fx_plus_(Alo3732, n_by_2_3743);
            var Amid23746 = M1.unsafe_fx_plus_(Alo3732, n_by_2_plus_3744);
            var Bmid13747 = M1.unsafe_fx_plus_(Blo3733, n_by_2_3743);
            copying_mergesort3731(Amid13745, Bmid13747, n_by_2_plus_3744);
            copying_mergesort3731(Alo3732, Amid23746, n_by_2_3743);
            var b23748 = M1.unsafe_fx_plus_(Blo3733, n3734);
            var loop3749 = function(a13750, b13751, c13752) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3753 = M1.unsafe_vector_ref(A3727, a13750);
              var y3754 = M1.unsafe_vector_ref(A3727, b13751);
              if (true !== false) {
                if (false !== false) {
                  var if_res2458 = M0.__gt_(false(y3754), false(x3753));
                } else {
                  var if_res2458 = M0.__gt_(y3754, x3753);
                }
                var if_res2460 = M0.not(if_res2458);
              } else {
                if (false !== false) {
                  var if_res2459 = M0.__gt_(false(x3753), false(y3754));
                } else {
                  var if_res2459 = M0.__gt_(x3753, y3754);
                }
                var if_res2460 = if_res2459;
              }
              if (if_res2460 !== false) {
                M1.unsafe_vector_set_bang_(A3727, c13752, x3753);
                var a13755 = M1.unsafe_fx_plus_(a13750, 1);
                var c13756 = M1.unsafe_fx_plus_(c13752, 1);
                if (M1.unsafe_fx_lt_(c13756, b13751) !== false) {
                  var if_res2461 = loop3749(a13755, b13751, c13756);
                } else {
                  var if_res2461 = M0.rvoid();
                }
                var if_res2464 = if_res2461;
              } else {
                M1.unsafe_vector_set_bang_(A3727, c13752, y3754);
                var b13757 = M1.unsafe_fx_plus_(b13751, 1);
                var c13758 = M1.unsafe_fx_plus_(c13752, 1);
                if (M1.unsafe_fx_lt__eq_(b23748, b13757) !== false) {
                  var loop3759 = function(a13760, c13761) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13761, b13757) !== false) {
                      M1.unsafe_vector_set_bang_(A3727, c13761, M1.unsafe_vector_ref(A3727, a13760));
                      var if_res2462 = loop3759(M1.unsafe_fx_plus_(a13760, 1), M1.unsafe_fx_plus_(c13761, 1));
                    } else {
                      var if_res2462 = M0.rvoid();
                    }
                    return if_res2462;
                  };
                  var if_res2463 = loop3759(a13750, c13758);
                } else {
                  var if_res2463 = loop3749(a13750, b13757, c13758);
                }
                var if_res2464 = if_res2463;
              }
              return if_res2464;
            };
            var if_res2465 = loop3749(Amid23746, Bmid13747, Blo3733);
          }
          var if_res2466 = if_res2465;
        }
        var if_res2467 = if_res2466;
      }
      return if_res2467;
    };
    var Alo3762 = 0;
    var Amid13763 = n_by_2_3729;
    var Amid23764 = n_by_2_plus_3730;
    var Ahi3765 = n3728;
    var B1lo3766 = n3728;
    copying_mergesort3731(Amid13763, B1lo3766, n_by_2_plus_3730);
    if (M0.zero_p(n_by_2_3729) !== false) {
      var if_res2468 = M0.rvoid();
    } else {
      var if_res2468 = copying_mergesort3731(Alo3762, Amid23764, n_by_2_3729);
    }
    if_res2468;
    var b23767 = Ahi3765;
    var loop3768 = function(a13769, b13770, c13771) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3772 = M1.unsafe_vector_ref(A3727, a13769);
      var y3773 = M1.unsafe_vector_ref(A3727, b13770);
      if (false !== false) {
        if (false !== false) {
          var if_res2469 = M0.__gt_(false(y3773), false(x3772));
        } else {
          var if_res2469 = M0.__gt_(y3773, x3772);
        }
        var if_res2471 = M0.not(if_res2469);
      } else {
        if (false !== false) {
          var if_res2470 = M0.__gt_(false(x3772), false(y3773));
        } else {
          var if_res2470 = M0.__gt_(x3772, y3773);
        }
        var if_res2471 = if_res2470;
      }
      if (if_res2471 !== false) {
        M1.unsafe_vector_set_bang_(A3727, c13771, x3772);
        var a13774 = M1.unsafe_fx_plus_(a13769, 1);
        var c13775 = M1.unsafe_fx_plus_(c13771, 1);
        if (M1.unsafe_fx_lt_(c13775, b13770) !== false) {
          var if_res2472 = loop3768(a13774, b13770, c13775);
        } else {
          var if_res2472 = M0.rvoid();
        }
        var if_res2475 = if_res2472;
      } else {
        M1.unsafe_vector_set_bang_(A3727, c13771, y3773);
        var b13776 = M1.unsafe_fx_plus_(b13770, 1);
        var c13777 = M1.unsafe_fx_plus_(c13771, 1);
        if (M1.unsafe_fx_lt__eq_(b23767, b13776) !== false) {
          var loop3778 = function(a13779, c13780) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13780, b13776) !== false) {
              M1.unsafe_vector_set_bang_(A3727, c13780, M1.unsafe_vector_ref(A3727, a13779));
              var if_res2473 = loop3778(M1.unsafe_fx_plus_(a13779, 1), M1.unsafe_fx_plus_(c13780, 1));
            } else {
              var if_res2473 = M0.rvoid();
            }
            return if_res2473;
          };
          var if_res2474 = loop3778(a13769, c13777);
        } else {
          var if_res2474 = loop3768(a13769, b13776, c13777);
        }
        var if_res2475 = if_res2474;
      }
      return if_res2475;
    };
    return loop3768(B1lo3766, Amid23764, Alo3762);
  };
  M0.hash_set_bang_(sorts3450, M0.__gt_, sort_proc3726);
  M0.hash_set_bang_(sorts3450, M0.__gt__eq_, sort_proc3726);
  var sort_proc3781 = function(A3782, n3783) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3784 = M1.unsafe_fxrshift(n3783, 1);
    var n_by_2_plus_3785 = M1.unsafe_fx_(n3783, n_by_2_3784);
    var copying_mergesort3786 = function(Alo3787, Blo3788, n3789) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3789, 1) !== false) {
        var if_res2491 = M1.unsafe_vector_set_bang_(A3782, Blo3788, M1.unsafe_vector_ref(A3782, Alo3787));
      } else {
        if (M1.unsafe_fx_eq_(n3789, 2) !== false) {
          var x3790 = M1.unsafe_vector_ref(A3782, Alo3787);
          var y3791 = M1.unsafe_vector_ref(A3782, M1.unsafe_fx_plus_(Alo3787, 1));
          if (false !== false) {
            var if_res2476 = M0.string_lt__p(false(y3791), false(x3790));
          } else {
            var if_res2476 = M0.string_lt__p(y3791, x3790);
          }
          if (if_res2476 !== false) {
            M1.unsafe_vector_set_bang_(A3782, Blo3788, y3791);
            var if_res2477 = M1.unsafe_vector_set_bang_(A3782, M1.unsafe_fx_plus_(Blo3788, 1), x3790);
          } else {
            M1.unsafe_vector_set_bang_(A3782, Blo3788, x3790);
            var if_res2477 = M1.unsafe_vector_set_bang_(A3782, M1.unsafe_fx_plus_(Blo3788, 1), y3791);
          }
          var if_res2490 = if_res2477;
        } else {
          if (M1.unsafe_fx_lt_(n3789, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3782, Blo3788, M1.unsafe_vector_ref(A3782, Alo3787));
            var iloop3792 = function(i3793) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3793, n3789) !== false) {
                var ref_i3794 = M1.unsafe_vector_ref(A3782, M1.unsafe_fx_plus_(Alo3787, i3793));
                var jloop3795 = function(j3796) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13797 = M1.unsafe_vector_ref(A3782, M1.unsafe_fx_(j3796, 1));
                  if (M1.unsafe_fx_lt_(Blo3788, j3796) !== false) {
                    if (false !== false) {
                      var if_res2478 = M0.string_lt__p(false(ref_i3794), false(ref_j_13797));
                    } else {
                      var if_res2478 = M0.string_lt__p(ref_i3794, ref_j_13797);
                    }
                    var if_res2479 = if_res2478;
                  } else {
                    var if_res2479 = false;
                  }
                  if (if_res2479 !== false) {
                    M1.unsafe_vector_set_bang_(A3782, j3796, ref_j_13797);
                    var if_res2480 = jloop3795(M1.unsafe_fx_(j3796, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3782, j3796, ref_i3794);
                    var if_res2480 = iloop3792(M1.unsafe_fx_plus_(i3793, 1));
                  }
                  return if_res2480;
                };
                var if_res2481 = jloop3795(M1.unsafe_fx_plus_(Blo3788, i3793));
              } else {
                var if_res2481 = M0.rvoid();
              }
              return if_res2481;
            };
            var if_res2489 = iloop3792(1);
          } else {
            var n_by_2_3798 = M1.unsafe_fxrshift(n3789, 1);
            var n_by_2_plus_3799 = M1.unsafe_fx_(n3789, n_by_2_3798);
            var Amid13800 = M1.unsafe_fx_plus_(Alo3787, n_by_2_3798);
            var Amid23801 = M1.unsafe_fx_plus_(Alo3787, n_by_2_plus_3799);
            var Bmid13802 = M1.unsafe_fx_plus_(Blo3788, n_by_2_3798);
            copying_mergesort3786(Amid13800, Bmid13802, n_by_2_plus_3799);
            copying_mergesort3786(Alo3787, Amid23801, n_by_2_3798);
            var b23803 = M1.unsafe_fx_plus_(Blo3788, n3789);
            var loop3804 = function(a13805, b13806, c13807) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3808 = M1.unsafe_vector_ref(A3782, a13805);
              var y3809 = M1.unsafe_vector_ref(A3782, b13806);
              if (true !== false) {
                if (false !== false) {
                  var if_res2482 = M0.string_lt__p(false(y3809), false(x3808));
                } else {
                  var if_res2482 = M0.string_lt__p(y3809, x3808);
                }
                var if_res2484 = M0.not(if_res2482);
              } else {
                if (false !== false) {
                  var if_res2483 = M0.string_lt__p(false(x3808), false(y3809));
                } else {
                  var if_res2483 = M0.string_lt__p(x3808, y3809);
                }
                var if_res2484 = if_res2483;
              }
              if (if_res2484 !== false) {
                M1.unsafe_vector_set_bang_(A3782, c13807, x3808);
                var a13810 = M1.unsafe_fx_plus_(a13805, 1);
                var c13811 = M1.unsafe_fx_plus_(c13807, 1);
                if (M1.unsafe_fx_lt_(c13811, b13806) !== false) {
                  var if_res2485 = loop3804(a13810, b13806, c13811);
                } else {
                  var if_res2485 = M0.rvoid();
                }
                var if_res2488 = if_res2485;
              } else {
                M1.unsafe_vector_set_bang_(A3782, c13807, y3809);
                var b13812 = M1.unsafe_fx_plus_(b13806, 1);
                var c13813 = M1.unsafe_fx_plus_(c13807, 1);
                if (M1.unsafe_fx_lt__eq_(b23803, b13812) !== false) {
                  var loop3814 = function(a13815, c13816) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13816, b13812) !== false) {
                      M1.unsafe_vector_set_bang_(A3782, c13816, M1.unsafe_vector_ref(A3782, a13815));
                      var if_res2486 = loop3814(M1.unsafe_fx_plus_(a13815, 1), M1.unsafe_fx_plus_(c13816, 1));
                    } else {
                      var if_res2486 = M0.rvoid();
                    }
                    return if_res2486;
                  };
                  var if_res2487 = loop3814(a13805, c13813);
                } else {
                  var if_res2487 = loop3804(a13805, b13812, c13813);
                }
                var if_res2488 = if_res2487;
              }
              return if_res2488;
            };
            var if_res2489 = loop3804(Amid23801, Bmid13802, Blo3788);
          }
          var if_res2490 = if_res2489;
        }
        var if_res2491 = if_res2490;
      }
      return if_res2491;
    };
    var Alo3817 = 0;
    var Amid13818 = n_by_2_3784;
    var Amid23819 = n_by_2_plus_3785;
    var Ahi3820 = n3783;
    var B1lo3821 = n3783;
    copying_mergesort3786(Amid13818, B1lo3821, n_by_2_plus_3785);
    if (M0.zero_p(n_by_2_3784) !== false) {
      var if_res2492 = M0.rvoid();
    } else {
      var if_res2492 = copying_mergesort3786(Alo3817, Amid23819, n_by_2_3784);
    }
    if_res2492;
    var b23822 = Ahi3820;
    var loop3823 = function(a13824, b13825, c13826) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3827 = M1.unsafe_vector_ref(A3782, a13824);
      var y3828 = M1.unsafe_vector_ref(A3782, b13825);
      if (false !== false) {
        if (false !== false) {
          var if_res2493 = M0.string_lt__p(false(y3828), false(x3827));
        } else {
          var if_res2493 = M0.string_lt__p(y3828, x3827);
        }
        var if_res2495 = M0.not(if_res2493);
      } else {
        if (false !== false) {
          var if_res2494 = M0.string_lt__p(false(x3827), false(y3828));
        } else {
          var if_res2494 = M0.string_lt__p(x3827, y3828);
        }
        var if_res2495 = if_res2494;
      }
      if (if_res2495 !== false) {
        M1.unsafe_vector_set_bang_(A3782, c13826, x3827);
        var a13829 = M1.unsafe_fx_plus_(a13824, 1);
        var c13830 = M1.unsafe_fx_plus_(c13826, 1);
        if (M1.unsafe_fx_lt_(c13830, b13825) !== false) {
          var if_res2496 = loop3823(a13829, b13825, c13830);
        } else {
          var if_res2496 = M0.rvoid();
        }
        var if_res2499 = if_res2496;
      } else {
        M1.unsafe_vector_set_bang_(A3782, c13826, y3828);
        var b13831 = M1.unsafe_fx_plus_(b13825, 1);
        var c13832 = M1.unsafe_fx_plus_(c13826, 1);
        if (M1.unsafe_fx_lt__eq_(b23822, b13831) !== false) {
          var loop3833 = function(a13834, c13835) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13835, b13831) !== false) {
              M1.unsafe_vector_set_bang_(A3782, c13835, M1.unsafe_vector_ref(A3782, a13834));
              var if_res2497 = loop3833(M1.unsafe_fx_plus_(a13834, 1), M1.unsafe_fx_plus_(c13835, 1));
            } else {
              var if_res2497 = M0.rvoid();
            }
            return if_res2497;
          };
          var if_res2498 = loop3833(a13824, c13832);
        } else {
          var if_res2498 = loop3823(a13824, b13831, c13832);
        }
        var if_res2499 = if_res2498;
      }
      return if_res2499;
    };
    return loop3823(B1lo3821, Amid23819, Alo3817);
  };
  M0.hash_set_bang_(sorts3450, M0.string_lt__p, sort_proc3781);
  M0.hash_set_bang_(sorts3450, M0.string_lt__eq__p, sort_proc3781);
  var sort_proc3836 = function(A3837, n3838) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3839 = M1.unsafe_fxrshift(n3838, 1);
    var n_by_2_plus_3840 = M1.unsafe_fx_(n3838, n_by_2_3839);
    var copying_mergesort3841 = function(Alo3842, Blo3843, n3844) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3844, 1) !== false) {
        var if_res2515 = M1.unsafe_vector_set_bang_(A3837, Blo3843, M1.unsafe_vector_ref(A3837, Alo3842));
      } else {
        if (M1.unsafe_fx_eq_(n3844, 2) !== false) {
          var x3845 = M1.unsafe_vector_ref(A3837, Alo3842);
          var y3846 = M1.unsafe_vector_ref(A3837, M1.unsafe_fx_plus_(Alo3842, 1));
          if (false !== false) {
            var if_res2500 = M0.string_gt__p(false(y3846), false(x3845));
          } else {
            var if_res2500 = M0.string_gt__p(y3846, x3845);
          }
          if (if_res2500 !== false) {
            M1.unsafe_vector_set_bang_(A3837, Blo3843, y3846);
            var if_res2501 = M1.unsafe_vector_set_bang_(A3837, M1.unsafe_fx_plus_(Blo3843, 1), x3845);
          } else {
            M1.unsafe_vector_set_bang_(A3837, Blo3843, x3845);
            var if_res2501 = M1.unsafe_vector_set_bang_(A3837, M1.unsafe_fx_plus_(Blo3843, 1), y3846);
          }
          var if_res2514 = if_res2501;
        } else {
          if (M1.unsafe_fx_lt_(n3844, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3837, Blo3843, M1.unsafe_vector_ref(A3837, Alo3842));
            var iloop3847 = function(i3848) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3848, n3844) !== false) {
                var ref_i3849 = M1.unsafe_vector_ref(A3837, M1.unsafe_fx_plus_(Alo3842, i3848));
                var jloop3850 = function(j3851) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13852 = M1.unsafe_vector_ref(A3837, M1.unsafe_fx_(j3851, 1));
                  if (M1.unsafe_fx_lt_(Blo3843, j3851) !== false) {
                    if (false !== false) {
                      var if_res2502 = M0.string_gt__p(false(ref_i3849), false(ref_j_13852));
                    } else {
                      var if_res2502 = M0.string_gt__p(ref_i3849, ref_j_13852);
                    }
                    var if_res2503 = if_res2502;
                  } else {
                    var if_res2503 = false;
                  }
                  if (if_res2503 !== false) {
                    M1.unsafe_vector_set_bang_(A3837, j3851, ref_j_13852);
                    var if_res2504 = jloop3850(M1.unsafe_fx_(j3851, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3837, j3851, ref_i3849);
                    var if_res2504 = iloop3847(M1.unsafe_fx_plus_(i3848, 1));
                  }
                  return if_res2504;
                };
                var if_res2505 = jloop3850(M1.unsafe_fx_plus_(Blo3843, i3848));
              } else {
                var if_res2505 = M0.rvoid();
              }
              return if_res2505;
            };
            var if_res2513 = iloop3847(1);
          } else {
            var n_by_2_3853 = M1.unsafe_fxrshift(n3844, 1);
            var n_by_2_plus_3854 = M1.unsafe_fx_(n3844, n_by_2_3853);
            var Amid13855 = M1.unsafe_fx_plus_(Alo3842, n_by_2_3853);
            var Amid23856 = M1.unsafe_fx_plus_(Alo3842, n_by_2_plus_3854);
            var Bmid13857 = M1.unsafe_fx_plus_(Blo3843, n_by_2_3853);
            copying_mergesort3841(Amid13855, Bmid13857, n_by_2_plus_3854);
            copying_mergesort3841(Alo3842, Amid23856, n_by_2_3853);
            var b23858 = M1.unsafe_fx_plus_(Blo3843, n3844);
            var loop3859 = function(a13860, b13861, c13862) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3863 = M1.unsafe_vector_ref(A3837, a13860);
              var y3864 = M1.unsafe_vector_ref(A3837, b13861);
              if (true !== false) {
                if (false !== false) {
                  var if_res2506 = M0.string_gt__p(false(y3864), false(x3863));
                } else {
                  var if_res2506 = M0.string_gt__p(y3864, x3863);
                }
                var if_res2508 = M0.not(if_res2506);
              } else {
                if (false !== false) {
                  var if_res2507 = M0.string_gt__p(false(x3863), false(y3864));
                } else {
                  var if_res2507 = M0.string_gt__p(x3863, y3864);
                }
                var if_res2508 = if_res2507;
              }
              if (if_res2508 !== false) {
                M1.unsafe_vector_set_bang_(A3837, c13862, x3863);
                var a13865 = M1.unsafe_fx_plus_(a13860, 1);
                var c13866 = M1.unsafe_fx_plus_(c13862, 1);
                if (M1.unsafe_fx_lt_(c13866, b13861) !== false) {
                  var if_res2509 = loop3859(a13865, b13861, c13866);
                } else {
                  var if_res2509 = M0.rvoid();
                }
                var if_res2512 = if_res2509;
              } else {
                M1.unsafe_vector_set_bang_(A3837, c13862, y3864);
                var b13867 = M1.unsafe_fx_plus_(b13861, 1);
                var c13868 = M1.unsafe_fx_plus_(c13862, 1);
                if (M1.unsafe_fx_lt__eq_(b23858, b13867) !== false) {
                  var loop3869 = function(a13870, c13871) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13871, b13867) !== false) {
                      M1.unsafe_vector_set_bang_(A3837, c13871, M1.unsafe_vector_ref(A3837, a13870));
                      var if_res2510 = loop3869(M1.unsafe_fx_plus_(a13870, 1), M1.unsafe_fx_plus_(c13871, 1));
                    } else {
                      var if_res2510 = M0.rvoid();
                    }
                    return if_res2510;
                  };
                  var if_res2511 = loop3869(a13860, c13868);
                } else {
                  var if_res2511 = loop3859(a13860, b13867, c13868);
                }
                var if_res2512 = if_res2511;
              }
              return if_res2512;
            };
            var if_res2513 = loop3859(Amid23856, Bmid13857, Blo3843);
          }
          var if_res2514 = if_res2513;
        }
        var if_res2515 = if_res2514;
      }
      return if_res2515;
    };
    var Alo3872 = 0;
    var Amid13873 = n_by_2_3839;
    var Amid23874 = n_by_2_plus_3840;
    var Ahi3875 = n3838;
    var B1lo3876 = n3838;
    copying_mergesort3841(Amid13873, B1lo3876, n_by_2_plus_3840);
    if (M0.zero_p(n_by_2_3839) !== false) {
      var if_res2516 = M0.rvoid();
    } else {
      var if_res2516 = copying_mergesort3841(Alo3872, Amid23874, n_by_2_3839);
    }
    if_res2516;
    var b23877 = Ahi3875;
    var loop3878 = function(a13879, b13880, c13881) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3882 = M1.unsafe_vector_ref(A3837, a13879);
      var y3883 = M1.unsafe_vector_ref(A3837, b13880);
      if (false !== false) {
        if (false !== false) {
          var if_res2517 = M0.string_gt__p(false(y3883), false(x3882));
        } else {
          var if_res2517 = M0.string_gt__p(y3883, x3882);
        }
        var if_res2519 = M0.not(if_res2517);
      } else {
        if (false !== false) {
          var if_res2518 = M0.string_gt__p(false(x3882), false(y3883));
        } else {
          var if_res2518 = M0.string_gt__p(x3882, y3883);
        }
        var if_res2519 = if_res2518;
      }
      if (if_res2519 !== false) {
        M1.unsafe_vector_set_bang_(A3837, c13881, x3882);
        var a13884 = M1.unsafe_fx_plus_(a13879, 1);
        var c13885 = M1.unsafe_fx_plus_(c13881, 1);
        if (M1.unsafe_fx_lt_(c13885, b13880) !== false) {
          var if_res2520 = loop3878(a13884, b13880, c13885);
        } else {
          var if_res2520 = M0.rvoid();
        }
        var if_res2523 = if_res2520;
      } else {
        M1.unsafe_vector_set_bang_(A3837, c13881, y3883);
        var b13886 = M1.unsafe_fx_plus_(b13880, 1);
        var c13887 = M1.unsafe_fx_plus_(c13881, 1);
        if (M1.unsafe_fx_lt__eq_(b23877, b13886) !== false) {
          var loop3888 = function(a13889, c13890) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13890, b13886) !== false) {
              M1.unsafe_vector_set_bang_(A3837, c13890, M1.unsafe_vector_ref(A3837, a13889));
              var if_res2521 = loop3888(M1.unsafe_fx_plus_(a13889, 1), M1.unsafe_fx_plus_(c13890, 1));
            } else {
              var if_res2521 = M0.rvoid();
            }
            return if_res2521;
          };
          var if_res2522 = loop3888(a13879, c13887);
        } else {
          var if_res2522 = loop3878(a13879, b13886, c13887);
        }
        var if_res2523 = if_res2522;
      }
      return if_res2523;
    };
    return loop3878(B1lo3876, Amid23874, Alo3872);
  };
  M0.hash_set_bang_(sorts3450, M0.string_gt__p, sort_proc3836);
  M0.hash_set_bang_(sorts3450, M0.string_gt__eq__p, sort_proc3836);
  var sort_proc3891 = function(A3892, n3893) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3894 = M1.unsafe_fxrshift(n3893, 1);
    var n_by_2_plus_3895 = M1.unsafe_fx_(n3893, n_by_2_3894);
    var copying_mergesort3896 = function(Alo3897, Blo3898, n3899) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3899, 1) !== false) {
        var if_res2539 = M1.unsafe_vector_set_bang_(A3892, Blo3898, M1.unsafe_vector_ref(A3892, Alo3897));
      } else {
        if (M1.unsafe_fx_eq_(n3899, 2) !== false) {
          var x3900 = M1.unsafe_vector_ref(A3892, Alo3897);
          var y3901 = M1.unsafe_vector_ref(A3892, M1.unsafe_fx_plus_(Alo3897, 1));
          if (false !== false) {
            var if_res2524 = M0.__rjs_quoted__.string_ci_lt__p(false(y3901), false(x3900));
          } else {
            var if_res2524 = M0.__rjs_quoted__.string_ci_lt__p(y3901, x3900);
          }
          if (if_res2524 !== false) {
            M1.unsafe_vector_set_bang_(A3892, Blo3898, y3901);
            var if_res2525 = M1.unsafe_vector_set_bang_(A3892, M1.unsafe_fx_plus_(Blo3898, 1), x3900);
          } else {
            M1.unsafe_vector_set_bang_(A3892, Blo3898, x3900);
            var if_res2525 = M1.unsafe_vector_set_bang_(A3892, M1.unsafe_fx_plus_(Blo3898, 1), y3901);
          }
          var if_res2538 = if_res2525;
        } else {
          if (M1.unsafe_fx_lt_(n3899, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3892, Blo3898, M1.unsafe_vector_ref(A3892, Alo3897));
            var iloop3902 = function(i3903) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3903, n3899) !== false) {
                var ref_i3904 = M1.unsafe_vector_ref(A3892, M1.unsafe_fx_plus_(Alo3897, i3903));
                var jloop3905 = function(j3906) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13907 = M1.unsafe_vector_ref(A3892, M1.unsafe_fx_(j3906, 1));
                  if (M1.unsafe_fx_lt_(Blo3898, j3906) !== false) {
                    if (false !== false) {
                      var if_res2526 = M0.__rjs_quoted__.string_ci_lt__p(false(ref_i3904), false(ref_j_13907));
                    } else {
                      var if_res2526 = M0.__rjs_quoted__.string_ci_lt__p(ref_i3904, ref_j_13907);
                    }
                    var if_res2527 = if_res2526;
                  } else {
                    var if_res2527 = false;
                  }
                  if (if_res2527 !== false) {
                    M1.unsafe_vector_set_bang_(A3892, j3906, ref_j_13907);
                    var if_res2528 = jloop3905(M1.unsafe_fx_(j3906, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3892, j3906, ref_i3904);
                    var if_res2528 = iloop3902(M1.unsafe_fx_plus_(i3903, 1));
                  }
                  return if_res2528;
                };
                var if_res2529 = jloop3905(M1.unsafe_fx_plus_(Blo3898, i3903));
              } else {
                var if_res2529 = M0.rvoid();
              }
              return if_res2529;
            };
            var if_res2537 = iloop3902(1);
          } else {
            var n_by_2_3908 = M1.unsafe_fxrshift(n3899, 1);
            var n_by_2_plus_3909 = M1.unsafe_fx_(n3899, n_by_2_3908);
            var Amid13910 = M1.unsafe_fx_plus_(Alo3897, n_by_2_3908);
            var Amid23911 = M1.unsafe_fx_plus_(Alo3897, n_by_2_plus_3909);
            var Bmid13912 = M1.unsafe_fx_plus_(Blo3898, n_by_2_3908);
            copying_mergesort3896(Amid13910, Bmid13912, n_by_2_plus_3909);
            copying_mergesort3896(Alo3897, Amid23911, n_by_2_3908);
            var b23913 = M1.unsafe_fx_plus_(Blo3898, n3899);
            var loop3914 = function(a13915, b13916, c13917) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3918 = M1.unsafe_vector_ref(A3892, a13915);
              var y3919 = M1.unsafe_vector_ref(A3892, b13916);
              if (true !== false) {
                if (false !== false) {
                  var if_res2530 = M0.__rjs_quoted__.string_ci_lt__p(false(y3919), false(x3918));
                } else {
                  var if_res2530 = M0.__rjs_quoted__.string_ci_lt__p(y3919, x3918);
                }
                var if_res2532 = M0.not(if_res2530);
              } else {
                if (false !== false) {
                  var if_res2531 = M0.__rjs_quoted__.string_ci_lt__p(false(x3918), false(y3919));
                } else {
                  var if_res2531 = M0.__rjs_quoted__.string_ci_lt__p(x3918, y3919);
                }
                var if_res2532 = if_res2531;
              }
              if (if_res2532 !== false) {
                M1.unsafe_vector_set_bang_(A3892, c13917, x3918);
                var a13920 = M1.unsafe_fx_plus_(a13915, 1);
                var c13921 = M1.unsafe_fx_plus_(c13917, 1);
                if (M1.unsafe_fx_lt_(c13921, b13916) !== false) {
                  var if_res2533 = loop3914(a13920, b13916, c13921);
                } else {
                  var if_res2533 = M0.rvoid();
                }
                var if_res2536 = if_res2533;
              } else {
                M1.unsafe_vector_set_bang_(A3892, c13917, y3919);
                var b13922 = M1.unsafe_fx_plus_(b13916, 1);
                var c13923 = M1.unsafe_fx_plus_(c13917, 1);
                if (M1.unsafe_fx_lt__eq_(b23913, b13922) !== false) {
                  var loop3924 = function(a13925, c13926) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13926, b13922) !== false) {
                      M1.unsafe_vector_set_bang_(A3892, c13926, M1.unsafe_vector_ref(A3892, a13925));
                      var if_res2534 = loop3924(M1.unsafe_fx_plus_(a13925, 1), M1.unsafe_fx_plus_(c13926, 1));
                    } else {
                      var if_res2534 = M0.rvoid();
                    }
                    return if_res2534;
                  };
                  var if_res2535 = loop3924(a13915, c13923);
                } else {
                  var if_res2535 = loop3914(a13915, b13922, c13923);
                }
                var if_res2536 = if_res2535;
              }
              return if_res2536;
            };
            var if_res2537 = loop3914(Amid23911, Bmid13912, Blo3898);
          }
          var if_res2538 = if_res2537;
        }
        var if_res2539 = if_res2538;
      }
      return if_res2539;
    };
    var Alo3927 = 0;
    var Amid13928 = n_by_2_3894;
    var Amid23929 = n_by_2_plus_3895;
    var Ahi3930 = n3893;
    var B1lo3931 = n3893;
    copying_mergesort3896(Amid13928, B1lo3931, n_by_2_plus_3895);
    if (M0.zero_p(n_by_2_3894) !== false) {
      var if_res2540 = M0.rvoid();
    } else {
      var if_res2540 = copying_mergesort3896(Alo3927, Amid23929, n_by_2_3894);
    }
    if_res2540;
    var b23932 = Ahi3930;
    var loop3933 = function(a13934, b13935, c13936) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3937 = M1.unsafe_vector_ref(A3892, a13934);
      var y3938 = M1.unsafe_vector_ref(A3892, b13935);
      if (false !== false) {
        if (false !== false) {
          var if_res2541 = M0.__rjs_quoted__.string_ci_lt__p(false(y3938), false(x3937));
        } else {
          var if_res2541 = M0.__rjs_quoted__.string_ci_lt__p(y3938, x3937);
        }
        var if_res2543 = M0.not(if_res2541);
      } else {
        if (false !== false) {
          var if_res2542 = M0.__rjs_quoted__.string_ci_lt__p(false(x3937), false(y3938));
        } else {
          var if_res2542 = M0.__rjs_quoted__.string_ci_lt__p(x3937, y3938);
        }
        var if_res2543 = if_res2542;
      }
      if (if_res2543 !== false) {
        M1.unsafe_vector_set_bang_(A3892, c13936, x3937);
        var a13939 = M1.unsafe_fx_plus_(a13934, 1);
        var c13940 = M1.unsafe_fx_plus_(c13936, 1);
        if (M1.unsafe_fx_lt_(c13940, b13935) !== false) {
          var if_res2544 = loop3933(a13939, b13935, c13940);
        } else {
          var if_res2544 = M0.rvoid();
        }
        var if_res2547 = if_res2544;
      } else {
        M1.unsafe_vector_set_bang_(A3892, c13936, y3938);
        var b13941 = M1.unsafe_fx_plus_(b13935, 1);
        var c13942 = M1.unsafe_fx_plus_(c13936, 1);
        if (M1.unsafe_fx_lt__eq_(b23932, b13941) !== false) {
          var loop3943 = function(a13944, c13945) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13945, b13941) !== false) {
              M1.unsafe_vector_set_bang_(A3892, c13945, M1.unsafe_vector_ref(A3892, a13944));
              var if_res2545 = loop3943(M1.unsafe_fx_plus_(a13944, 1), M1.unsafe_fx_plus_(c13945, 1));
            } else {
              var if_res2545 = M0.rvoid();
            }
            return if_res2545;
          };
          var if_res2546 = loop3943(a13934, c13942);
        } else {
          var if_res2546 = loop3933(a13934, b13941, c13942);
        }
        var if_res2547 = if_res2546;
      }
      return if_res2547;
    };
    return loop3933(B1lo3931, Amid23929, Alo3927);
  };
  M0.hash_set_bang_(sorts3450, M0.__rjs_quoted__.string_ci_lt__p, sort_proc3891);
  M0.hash_set_bang_(sorts3450, M0.__rjs_quoted__.string_ci_lt__eq__p, sort_proc3891);
  var sort_proc3946 = function(A3947, n3948) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3949 = M1.unsafe_fxrshift(n3948, 1);
    var n_by_2_plus_3950 = M1.unsafe_fx_(n3948, n_by_2_3949);
    var copying_mergesort3951 = function(Alo3952, Blo3953, n3954) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3954, 1) !== false) {
        var if_res2563 = M1.unsafe_vector_set_bang_(A3947, Blo3953, M1.unsafe_vector_ref(A3947, Alo3952));
      } else {
        if (M1.unsafe_fx_eq_(n3954, 2) !== false) {
          var x3955 = M1.unsafe_vector_ref(A3947, Alo3952);
          var y3956 = M1.unsafe_vector_ref(A3947, M1.unsafe_fx_plus_(Alo3952, 1));
          if (false !== false) {
            var if_res2548 = M0.__rjs_quoted__.string_ci_gt__p(false(y3956), false(x3955));
          } else {
            var if_res2548 = M0.__rjs_quoted__.string_ci_gt__p(y3956, x3955);
          }
          if (if_res2548 !== false) {
            M1.unsafe_vector_set_bang_(A3947, Blo3953, y3956);
            var if_res2549 = M1.unsafe_vector_set_bang_(A3947, M1.unsafe_fx_plus_(Blo3953, 1), x3955);
          } else {
            M1.unsafe_vector_set_bang_(A3947, Blo3953, x3955);
            var if_res2549 = M1.unsafe_vector_set_bang_(A3947, M1.unsafe_fx_plus_(Blo3953, 1), y3956);
          }
          var if_res2562 = if_res2549;
        } else {
          if (M1.unsafe_fx_lt_(n3954, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3947, Blo3953, M1.unsafe_vector_ref(A3947, Alo3952));
            var iloop3957 = function(i3958) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3958, n3954) !== false) {
                var ref_i3959 = M1.unsafe_vector_ref(A3947, M1.unsafe_fx_plus_(Alo3952, i3958));
                var jloop3960 = function(j3961) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13962 = M1.unsafe_vector_ref(A3947, M1.unsafe_fx_(j3961, 1));
                  if (M1.unsafe_fx_lt_(Blo3953, j3961) !== false) {
                    if (false !== false) {
                      var if_res2550 = M0.__rjs_quoted__.string_ci_gt__p(false(ref_i3959), false(ref_j_13962));
                    } else {
                      var if_res2550 = M0.__rjs_quoted__.string_ci_gt__p(ref_i3959, ref_j_13962);
                    }
                    var if_res2551 = if_res2550;
                  } else {
                    var if_res2551 = false;
                  }
                  if (if_res2551 !== false) {
                    M1.unsafe_vector_set_bang_(A3947, j3961, ref_j_13962);
                    var if_res2552 = jloop3960(M1.unsafe_fx_(j3961, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3947, j3961, ref_i3959);
                    var if_res2552 = iloop3957(M1.unsafe_fx_plus_(i3958, 1));
                  }
                  return if_res2552;
                };
                var if_res2553 = jloop3960(M1.unsafe_fx_plus_(Blo3953, i3958));
              } else {
                var if_res2553 = M0.rvoid();
              }
              return if_res2553;
            };
            var if_res2561 = iloop3957(1);
          } else {
            var n_by_2_3963 = M1.unsafe_fxrshift(n3954, 1);
            var n_by_2_plus_3964 = M1.unsafe_fx_(n3954, n_by_2_3963);
            var Amid13965 = M1.unsafe_fx_plus_(Alo3952, n_by_2_3963);
            var Amid23966 = M1.unsafe_fx_plus_(Alo3952, n_by_2_plus_3964);
            var Bmid13967 = M1.unsafe_fx_plus_(Blo3953, n_by_2_3963);
            copying_mergesort3951(Amid13965, Bmid13967, n_by_2_plus_3964);
            copying_mergesort3951(Alo3952, Amid23966, n_by_2_3963);
            var b23968 = M1.unsafe_fx_plus_(Blo3953, n3954);
            var loop3969 = function(a13970, b13971, c13972) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3973 = M1.unsafe_vector_ref(A3947, a13970);
              var y3974 = M1.unsafe_vector_ref(A3947, b13971);
              if (true !== false) {
                if (false !== false) {
                  var if_res2554 = M0.__rjs_quoted__.string_ci_gt__p(false(y3974), false(x3973));
                } else {
                  var if_res2554 = M0.__rjs_quoted__.string_ci_gt__p(y3974, x3973);
                }
                var if_res2556 = M0.not(if_res2554);
              } else {
                if (false !== false) {
                  var if_res2555 = M0.__rjs_quoted__.string_ci_gt__p(false(x3973), false(y3974));
                } else {
                  var if_res2555 = M0.__rjs_quoted__.string_ci_gt__p(x3973, y3974);
                }
                var if_res2556 = if_res2555;
              }
              if (if_res2556 !== false) {
                M1.unsafe_vector_set_bang_(A3947, c13972, x3973);
                var a13975 = M1.unsafe_fx_plus_(a13970, 1);
                var c13976 = M1.unsafe_fx_plus_(c13972, 1);
                if (M1.unsafe_fx_lt_(c13976, b13971) !== false) {
                  var if_res2557 = loop3969(a13975, b13971, c13976);
                } else {
                  var if_res2557 = M0.rvoid();
                }
                var if_res2560 = if_res2557;
              } else {
                M1.unsafe_vector_set_bang_(A3947, c13972, y3974);
                var b13977 = M1.unsafe_fx_plus_(b13971, 1);
                var c13978 = M1.unsafe_fx_plus_(c13972, 1);
                if (M1.unsafe_fx_lt__eq_(b23968, b13977) !== false) {
                  var loop3979 = function(a13980, c13981) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13981, b13977) !== false) {
                      M1.unsafe_vector_set_bang_(A3947, c13981, M1.unsafe_vector_ref(A3947, a13980));
                      var if_res2558 = loop3979(M1.unsafe_fx_plus_(a13980, 1), M1.unsafe_fx_plus_(c13981, 1));
                    } else {
                      var if_res2558 = M0.rvoid();
                    }
                    return if_res2558;
                  };
                  var if_res2559 = loop3979(a13970, c13978);
                } else {
                  var if_res2559 = loop3969(a13970, b13977, c13978);
                }
                var if_res2560 = if_res2559;
              }
              return if_res2560;
            };
            var if_res2561 = loop3969(Amid23966, Bmid13967, Blo3953);
          }
          var if_res2562 = if_res2561;
        }
        var if_res2563 = if_res2562;
      }
      return if_res2563;
    };
    var Alo3982 = 0;
    var Amid13983 = n_by_2_3949;
    var Amid23984 = n_by_2_plus_3950;
    var Ahi3985 = n3948;
    var B1lo3986 = n3948;
    copying_mergesort3951(Amid13983, B1lo3986, n_by_2_plus_3950);
    if (M0.zero_p(n_by_2_3949) !== false) {
      var if_res2564 = M0.rvoid();
    } else {
      var if_res2564 = copying_mergesort3951(Alo3982, Amid23984, n_by_2_3949);
    }
    if_res2564;
    var b23987 = Ahi3985;
    var loop3988 = function(a13989, b13990, c13991) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3992 = M1.unsafe_vector_ref(A3947, a13989);
      var y3993 = M1.unsafe_vector_ref(A3947, b13990);
      if (false !== false) {
        if (false !== false) {
          var if_res2565 = M0.__rjs_quoted__.string_ci_gt__p(false(y3993), false(x3992));
        } else {
          var if_res2565 = M0.__rjs_quoted__.string_ci_gt__p(y3993, x3992);
        }
        var if_res2567 = M0.not(if_res2565);
      } else {
        if (false !== false) {
          var if_res2566 = M0.__rjs_quoted__.string_ci_gt__p(false(x3992), false(y3993));
        } else {
          var if_res2566 = M0.__rjs_quoted__.string_ci_gt__p(x3992, y3993);
        }
        var if_res2567 = if_res2566;
      }
      if (if_res2567 !== false) {
        M1.unsafe_vector_set_bang_(A3947, c13991, x3992);
        var a13994 = M1.unsafe_fx_plus_(a13989, 1);
        var c13995 = M1.unsafe_fx_plus_(c13991, 1);
        if (M1.unsafe_fx_lt_(c13995, b13990) !== false) {
          var if_res2568 = loop3988(a13994, b13990, c13995);
        } else {
          var if_res2568 = M0.rvoid();
        }
        var if_res2571 = if_res2568;
      } else {
        M1.unsafe_vector_set_bang_(A3947, c13991, y3993);
        var b13996 = M1.unsafe_fx_plus_(b13990, 1);
        var c13997 = M1.unsafe_fx_plus_(c13991, 1);
        if (M1.unsafe_fx_lt__eq_(b23987, b13996) !== false) {
          var loop3998 = function(a13999, c14000) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14000, b13996) !== false) {
              M1.unsafe_vector_set_bang_(A3947, c14000, M1.unsafe_vector_ref(A3947, a13999));
              var if_res2569 = loop3998(M1.unsafe_fx_plus_(a13999, 1), M1.unsafe_fx_plus_(c14000, 1));
            } else {
              var if_res2569 = M0.rvoid();
            }
            return if_res2569;
          };
          var if_res2570 = loop3998(a13989, c13997);
        } else {
          var if_res2570 = loop3988(a13989, b13996, c13997);
        }
        var if_res2571 = if_res2570;
      }
      return if_res2571;
    };
    return loop3988(B1lo3986, Amid23984, Alo3982);
  };
  M0.hash_set_bang_(sorts3450, M0.__rjs_quoted__.string_ci_gt__p, sort_proc3946);
  M0.hash_set_bang_(sorts3450, M0.__rjs_quoted__.string_ci_gt__eq__p, sort_proc3946);
  var sort_proc4001 = function(A4002, n4003) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4004 = M1.unsafe_fxrshift(n4003, 1);
    var n_by_2_plus_4005 = M1.unsafe_fx_(n4003, n_by_2_4004);
    var copying_mergesort4006 = function(Alo4007, Blo4008, n4009) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4009, 1) !== false) {
        var if_res2587 = M1.unsafe_vector_set_bang_(A4002, Blo4008, M1.unsafe_vector_ref(A4002, Alo4007));
      } else {
        if (M1.unsafe_fx_eq_(n4009, 2) !== false) {
          var x4010 = M1.unsafe_vector_ref(A4002, Alo4007);
          var y4011 = M1.unsafe_vector_ref(A4002, M1.unsafe_fx_plus_(Alo4007, 1));
          if (false !== false) {
            var if_res2572 = M0.char_lt__p(false(y4011), false(x4010));
          } else {
            var if_res2572 = M0.char_lt__p(y4011, x4010);
          }
          if (if_res2572 !== false) {
            M1.unsafe_vector_set_bang_(A4002, Blo4008, y4011);
            var if_res2573 = M1.unsafe_vector_set_bang_(A4002, M1.unsafe_fx_plus_(Blo4008, 1), x4010);
          } else {
            M1.unsafe_vector_set_bang_(A4002, Blo4008, x4010);
            var if_res2573 = M1.unsafe_vector_set_bang_(A4002, M1.unsafe_fx_plus_(Blo4008, 1), y4011);
          }
          var if_res2586 = if_res2573;
        } else {
          if (M1.unsafe_fx_lt_(n4009, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4002, Blo4008, M1.unsafe_vector_ref(A4002, Alo4007));
            var iloop4012 = function(i4013) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4013, n4009) !== false) {
                var ref_i4014 = M1.unsafe_vector_ref(A4002, M1.unsafe_fx_plus_(Alo4007, i4013));
                var jloop4015 = function(j4016) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14017 = M1.unsafe_vector_ref(A4002, M1.unsafe_fx_(j4016, 1));
                  if (M1.unsafe_fx_lt_(Blo4008, j4016) !== false) {
                    if (false !== false) {
                      var if_res2574 = M0.char_lt__p(false(ref_i4014), false(ref_j_14017));
                    } else {
                      var if_res2574 = M0.char_lt__p(ref_i4014, ref_j_14017);
                    }
                    var if_res2575 = if_res2574;
                  } else {
                    var if_res2575 = false;
                  }
                  if (if_res2575 !== false) {
                    M1.unsafe_vector_set_bang_(A4002, j4016, ref_j_14017);
                    var if_res2576 = jloop4015(M1.unsafe_fx_(j4016, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4002, j4016, ref_i4014);
                    var if_res2576 = iloop4012(M1.unsafe_fx_plus_(i4013, 1));
                  }
                  return if_res2576;
                };
                var if_res2577 = jloop4015(M1.unsafe_fx_plus_(Blo4008, i4013));
              } else {
                var if_res2577 = M0.rvoid();
              }
              return if_res2577;
            };
            var if_res2585 = iloop4012(1);
          } else {
            var n_by_2_4018 = M1.unsafe_fxrshift(n4009, 1);
            var n_by_2_plus_4019 = M1.unsafe_fx_(n4009, n_by_2_4018);
            var Amid14020 = M1.unsafe_fx_plus_(Alo4007, n_by_2_4018);
            var Amid24021 = M1.unsafe_fx_plus_(Alo4007, n_by_2_plus_4019);
            var Bmid14022 = M1.unsafe_fx_plus_(Blo4008, n_by_2_4018);
            copying_mergesort4006(Amid14020, Bmid14022, n_by_2_plus_4019);
            copying_mergesort4006(Alo4007, Amid24021, n_by_2_4018);
            var b24023 = M1.unsafe_fx_plus_(Blo4008, n4009);
            var loop4024 = function(a14025, b14026, c14027) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4028 = M1.unsafe_vector_ref(A4002, a14025);
              var y4029 = M1.unsafe_vector_ref(A4002, b14026);
              if (true !== false) {
                if (false !== false) {
                  var if_res2578 = M0.char_lt__p(false(y4029), false(x4028));
                } else {
                  var if_res2578 = M0.char_lt__p(y4029, x4028);
                }
                var if_res2580 = M0.not(if_res2578);
              } else {
                if (false !== false) {
                  var if_res2579 = M0.char_lt__p(false(x4028), false(y4029));
                } else {
                  var if_res2579 = M0.char_lt__p(x4028, y4029);
                }
                var if_res2580 = if_res2579;
              }
              if (if_res2580 !== false) {
                M1.unsafe_vector_set_bang_(A4002, c14027, x4028);
                var a14030 = M1.unsafe_fx_plus_(a14025, 1);
                var c14031 = M1.unsafe_fx_plus_(c14027, 1);
                if (M1.unsafe_fx_lt_(c14031, b14026) !== false) {
                  var if_res2581 = loop4024(a14030, b14026, c14031);
                } else {
                  var if_res2581 = M0.rvoid();
                }
                var if_res2584 = if_res2581;
              } else {
                M1.unsafe_vector_set_bang_(A4002, c14027, y4029);
                var b14032 = M1.unsafe_fx_plus_(b14026, 1);
                var c14033 = M1.unsafe_fx_plus_(c14027, 1);
                if (M1.unsafe_fx_lt__eq_(b24023, b14032) !== false) {
                  var loop4034 = function(a14035, c14036) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14036, b14032) !== false) {
                      M1.unsafe_vector_set_bang_(A4002, c14036, M1.unsafe_vector_ref(A4002, a14035));
                      var if_res2582 = loop4034(M1.unsafe_fx_plus_(a14035, 1), M1.unsafe_fx_plus_(c14036, 1));
                    } else {
                      var if_res2582 = M0.rvoid();
                    }
                    return if_res2582;
                  };
                  var if_res2583 = loop4034(a14025, c14033);
                } else {
                  var if_res2583 = loop4024(a14025, b14032, c14033);
                }
                var if_res2584 = if_res2583;
              }
              return if_res2584;
            };
            var if_res2585 = loop4024(Amid24021, Bmid14022, Blo4008);
          }
          var if_res2586 = if_res2585;
        }
        var if_res2587 = if_res2586;
      }
      return if_res2587;
    };
    var Alo4037 = 0;
    var Amid14038 = n_by_2_4004;
    var Amid24039 = n_by_2_plus_4005;
    var Ahi4040 = n4003;
    var B1lo4041 = n4003;
    copying_mergesort4006(Amid14038, B1lo4041, n_by_2_plus_4005);
    if (M0.zero_p(n_by_2_4004) !== false) {
      var if_res2588 = M0.rvoid();
    } else {
      var if_res2588 = copying_mergesort4006(Alo4037, Amid24039, n_by_2_4004);
    }
    if_res2588;
    var b24042 = Ahi4040;
    var loop4043 = function(a14044, b14045, c14046) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4047 = M1.unsafe_vector_ref(A4002, a14044);
      var y4048 = M1.unsafe_vector_ref(A4002, b14045);
      if (false !== false) {
        if (false !== false) {
          var if_res2589 = M0.char_lt__p(false(y4048), false(x4047));
        } else {
          var if_res2589 = M0.char_lt__p(y4048, x4047);
        }
        var if_res2591 = M0.not(if_res2589);
      } else {
        if (false !== false) {
          var if_res2590 = M0.char_lt__p(false(x4047), false(y4048));
        } else {
          var if_res2590 = M0.char_lt__p(x4047, y4048);
        }
        var if_res2591 = if_res2590;
      }
      if (if_res2591 !== false) {
        M1.unsafe_vector_set_bang_(A4002, c14046, x4047);
        var a14049 = M1.unsafe_fx_plus_(a14044, 1);
        var c14050 = M1.unsafe_fx_plus_(c14046, 1);
        if (M1.unsafe_fx_lt_(c14050, b14045) !== false) {
          var if_res2592 = loop4043(a14049, b14045, c14050);
        } else {
          var if_res2592 = M0.rvoid();
        }
        var if_res2595 = if_res2592;
      } else {
        M1.unsafe_vector_set_bang_(A4002, c14046, y4048);
        var b14051 = M1.unsafe_fx_plus_(b14045, 1);
        var c14052 = M1.unsafe_fx_plus_(c14046, 1);
        if (M1.unsafe_fx_lt__eq_(b24042, b14051) !== false) {
          var loop4053 = function(a14054, c14055) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14055, b14051) !== false) {
              M1.unsafe_vector_set_bang_(A4002, c14055, M1.unsafe_vector_ref(A4002, a14054));
              var if_res2593 = loop4053(M1.unsafe_fx_plus_(a14054, 1), M1.unsafe_fx_plus_(c14055, 1));
            } else {
              var if_res2593 = M0.rvoid();
            }
            return if_res2593;
          };
          var if_res2594 = loop4053(a14044, c14052);
        } else {
          var if_res2594 = loop4043(a14044, b14051, c14052);
        }
        var if_res2595 = if_res2594;
      }
      return if_res2595;
    };
    return loop4043(B1lo4041, Amid24039, Alo4037);
  };
  M0.hash_set_bang_(sorts3450, M0.char_lt__p, sort_proc4001);
  M0.hash_set_bang_(sorts3450, M0.char_lt__eq__p, sort_proc4001);
  var sort_proc4056 = function(A4057, n4058) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4059 = M1.unsafe_fxrshift(n4058, 1);
    var n_by_2_plus_4060 = M1.unsafe_fx_(n4058, n_by_2_4059);
    var copying_mergesort4061 = function(Alo4062, Blo4063, n4064) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4064, 1) !== false) {
        var if_res2611 = M1.unsafe_vector_set_bang_(A4057, Blo4063, M1.unsafe_vector_ref(A4057, Alo4062));
      } else {
        if (M1.unsafe_fx_eq_(n4064, 2) !== false) {
          var x4065 = M1.unsafe_vector_ref(A4057, Alo4062);
          var y4066 = M1.unsafe_vector_ref(A4057, M1.unsafe_fx_plus_(Alo4062, 1));
          if (false !== false) {
            var if_res2596 = M0.char_gt__p(false(y4066), false(x4065));
          } else {
            var if_res2596 = M0.char_gt__p(y4066, x4065);
          }
          if (if_res2596 !== false) {
            M1.unsafe_vector_set_bang_(A4057, Blo4063, y4066);
            var if_res2597 = M1.unsafe_vector_set_bang_(A4057, M1.unsafe_fx_plus_(Blo4063, 1), x4065);
          } else {
            M1.unsafe_vector_set_bang_(A4057, Blo4063, x4065);
            var if_res2597 = M1.unsafe_vector_set_bang_(A4057, M1.unsafe_fx_plus_(Blo4063, 1), y4066);
          }
          var if_res2610 = if_res2597;
        } else {
          if (M1.unsafe_fx_lt_(n4064, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4057, Blo4063, M1.unsafe_vector_ref(A4057, Alo4062));
            var iloop4067 = function(i4068) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4068, n4064) !== false) {
                var ref_i4069 = M1.unsafe_vector_ref(A4057, M1.unsafe_fx_plus_(Alo4062, i4068));
                var jloop4070 = function(j4071) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14072 = M1.unsafe_vector_ref(A4057, M1.unsafe_fx_(j4071, 1));
                  if (M1.unsafe_fx_lt_(Blo4063, j4071) !== false) {
                    if (false !== false) {
                      var if_res2598 = M0.char_gt__p(false(ref_i4069), false(ref_j_14072));
                    } else {
                      var if_res2598 = M0.char_gt__p(ref_i4069, ref_j_14072);
                    }
                    var if_res2599 = if_res2598;
                  } else {
                    var if_res2599 = false;
                  }
                  if (if_res2599 !== false) {
                    M1.unsafe_vector_set_bang_(A4057, j4071, ref_j_14072);
                    var if_res2600 = jloop4070(M1.unsafe_fx_(j4071, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4057, j4071, ref_i4069);
                    var if_res2600 = iloop4067(M1.unsafe_fx_plus_(i4068, 1));
                  }
                  return if_res2600;
                };
                var if_res2601 = jloop4070(M1.unsafe_fx_plus_(Blo4063, i4068));
              } else {
                var if_res2601 = M0.rvoid();
              }
              return if_res2601;
            };
            var if_res2609 = iloop4067(1);
          } else {
            var n_by_2_4073 = M1.unsafe_fxrshift(n4064, 1);
            var n_by_2_plus_4074 = M1.unsafe_fx_(n4064, n_by_2_4073);
            var Amid14075 = M1.unsafe_fx_plus_(Alo4062, n_by_2_4073);
            var Amid24076 = M1.unsafe_fx_plus_(Alo4062, n_by_2_plus_4074);
            var Bmid14077 = M1.unsafe_fx_plus_(Blo4063, n_by_2_4073);
            copying_mergesort4061(Amid14075, Bmid14077, n_by_2_plus_4074);
            copying_mergesort4061(Alo4062, Amid24076, n_by_2_4073);
            var b24078 = M1.unsafe_fx_plus_(Blo4063, n4064);
            var loop4079 = function(a14080, b14081, c14082) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4083 = M1.unsafe_vector_ref(A4057, a14080);
              var y4084 = M1.unsafe_vector_ref(A4057, b14081);
              if (true !== false) {
                if (false !== false) {
                  var if_res2602 = M0.char_gt__p(false(y4084), false(x4083));
                } else {
                  var if_res2602 = M0.char_gt__p(y4084, x4083);
                }
                var if_res2604 = M0.not(if_res2602);
              } else {
                if (false !== false) {
                  var if_res2603 = M0.char_gt__p(false(x4083), false(y4084));
                } else {
                  var if_res2603 = M0.char_gt__p(x4083, y4084);
                }
                var if_res2604 = if_res2603;
              }
              if (if_res2604 !== false) {
                M1.unsafe_vector_set_bang_(A4057, c14082, x4083);
                var a14085 = M1.unsafe_fx_plus_(a14080, 1);
                var c14086 = M1.unsafe_fx_plus_(c14082, 1);
                if (M1.unsafe_fx_lt_(c14086, b14081) !== false) {
                  var if_res2605 = loop4079(a14085, b14081, c14086);
                } else {
                  var if_res2605 = M0.rvoid();
                }
                var if_res2608 = if_res2605;
              } else {
                M1.unsafe_vector_set_bang_(A4057, c14082, y4084);
                var b14087 = M1.unsafe_fx_plus_(b14081, 1);
                var c14088 = M1.unsafe_fx_plus_(c14082, 1);
                if (M1.unsafe_fx_lt__eq_(b24078, b14087) !== false) {
                  var loop4089 = function(a14090, c14091) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14091, b14087) !== false) {
                      M1.unsafe_vector_set_bang_(A4057, c14091, M1.unsafe_vector_ref(A4057, a14090));
                      var if_res2606 = loop4089(M1.unsafe_fx_plus_(a14090, 1), M1.unsafe_fx_plus_(c14091, 1));
                    } else {
                      var if_res2606 = M0.rvoid();
                    }
                    return if_res2606;
                  };
                  var if_res2607 = loop4089(a14080, c14088);
                } else {
                  var if_res2607 = loop4079(a14080, b14087, c14088);
                }
                var if_res2608 = if_res2607;
              }
              return if_res2608;
            };
            var if_res2609 = loop4079(Amid24076, Bmid14077, Blo4063);
          }
          var if_res2610 = if_res2609;
        }
        var if_res2611 = if_res2610;
      }
      return if_res2611;
    };
    var Alo4092 = 0;
    var Amid14093 = n_by_2_4059;
    var Amid24094 = n_by_2_plus_4060;
    var Ahi4095 = n4058;
    var B1lo4096 = n4058;
    copying_mergesort4061(Amid14093, B1lo4096, n_by_2_plus_4060);
    if (M0.zero_p(n_by_2_4059) !== false) {
      var if_res2612 = M0.rvoid();
    } else {
      var if_res2612 = copying_mergesort4061(Alo4092, Amid24094, n_by_2_4059);
    }
    if_res2612;
    var b24097 = Ahi4095;
    var loop4098 = function(a14099, b14100, c14101) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4102 = M1.unsafe_vector_ref(A4057, a14099);
      var y4103 = M1.unsafe_vector_ref(A4057, b14100);
      if (false !== false) {
        if (false !== false) {
          var if_res2613 = M0.char_gt__p(false(y4103), false(x4102));
        } else {
          var if_res2613 = M0.char_gt__p(y4103, x4102);
        }
        var if_res2615 = M0.not(if_res2613);
      } else {
        if (false !== false) {
          var if_res2614 = M0.char_gt__p(false(x4102), false(y4103));
        } else {
          var if_res2614 = M0.char_gt__p(x4102, y4103);
        }
        var if_res2615 = if_res2614;
      }
      if (if_res2615 !== false) {
        M1.unsafe_vector_set_bang_(A4057, c14101, x4102);
        var a14104 = M1.unsafe_fx_plus_(a14099, 1);
        var c14105 = M1.unsafe_fx_plus_(c14101, 1);
        if (M1.unsafe_fx_lt_(c14105, b14100) !== false) {
          var if_res2616 = loop4098(a14104, b14100, c14105);
        } else {
          var if_res2616 = M0.rvoid();
        }
        var if_res2619 = if_res2616;
      } else {
        M1.unsafe_vector_set_bang_(A4057, c14101, y4103);
        var b14106 = M1.unsafe_fx_plus_(b14100, 1);
        var c14107 = M1.unsafe_fx_plus_(c14101, 1);
        if (M1.unsafe_fx_lt__eq_(b24097, b14106) !== false) {
          var loop4108 = function(a14109, c14110) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14110, b14106) !== false) {
              M1.unsafe_vector_set_bang_(A4057, c14110, M1.unsafe_vector_ref(A4057, a14109));
              var if_res2617 = loop4108(M1.unsafe_fx_plus_(a14109, 1), M1.unsafe_fx_plus_(c14110, 1));
            } else {
              var if_res2617 = M0.rvoid();
            }
            return if_res2617;
          };
          var if_res2618 = loop4108(a14099, c14107);
        } else {
          var if_res2618 = loop4098(a14099, b14106, c14107);
        }
        var if_res2619 = if_res2618;
      }
      return if_res2619;
    };
    return loop4098(B1lo4096, Amid24094, Alo4092);
  };
  M0.hash_set_bang_(sorts3450, M0.char_gt__p, sort_proc4056);
  M0.hash_set_bang_(sorts3450, M0.char_gt__eq__p, sort_proc4056);
  var sort_proc4111 = function(A4112, n4113) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4114 = M1.unsafe_fxrshift(n4113, 1);
    var n_by_2_plus_4115 = M1.unsafe_fx_(n4113, n_by_2_4114);
    var copying_mergesort4116 = function(Alo4117, Blo4118, n4119) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4119, 1) !== false) {
        var if_res2635 = M1.unsafe_vector_set_bang_(A4112, Blo4118, M1.unsafe_vector_ref(A4112, Alo4117));
      } else {
        if (M1.unsafe_fx_eq_(n4119, 2) !== false) {
          var x4120 = M1.unsafe_vector_ref(A4112, Alo4117);
          var y4121 = M1.unsafe_vector_ref(A4112, M1.unsafe_fx_plus_(Alo4117, 1));
          if (false !== false) {
            var if_res2620 = M0.__rjs_quoted__.keyword_lt__p(false(y4121), false(x4120));
          } else {
            var if_res2620 = M0.__rjs_quoted__.keyword_lt__p(y4121, x4120);
          }
          if (if_res2620 !== false) {
            M1.unsafe_vector_set_bang_(A4112, Blo4118, y4121);
            var if_res2621 = M1.unsafe_vector_set_bang_(A4112, M1.unsafe_fx_plus_(Blo4118, 1), x4120);
          } else {
            M1.unsafe_vector_set_bang_(A4112, Blo4118, x4120);
            var if_res2621 = M1.unsafe_vector_set_bang_(A4112, M1.unsafe_fx_plus_(Blo4118, 1), y4121);
          }
          var if_res2634 = if_res2621;
        } else {
          if (M1.unsafe_fx_lt_(n4119, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4112, Blo4118, M1.unsafe_vector_ref(A4112, Alo4117));
            var iloop4122 = function(i4123) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4123, n4119) !== false) {
                var ref_i4124 = M1.unsafe_vector_ref(A4112, M1.unsafe_fx_plus_(Alo4117, i4123));
                var jloop4125 = function(j4126) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14127 = M1.unsafe_vector_ref(A4112, M1.unsafe_fx_(j4126, 1));
                  if (M1.unsafe_fx_lt_(Blo4118, j4126) !== false) {
                    if (false !== false) {
                      var if_res2622 = M0.__rjs_quoted__.keyword_lt__p(false(ref_i4124), false(ref_j_14127));
                    } else {
                      var if_res2622 = M0.__rjs_quoted__.keyword_lt__p(ref_i4124, ref_j_14127);
                    }
                    var if_res2623 = if_res2622;
                  } else {
                    var if_res2623 = false;
                  }
                  if (if_res2623 !== false) {
                    M1.unsafe_vector_set_bang_(A4112, j4126, ref_j_14127);
                    var if_res2624 = jloop4125(M1.unsafe_fx_(j4126, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4112, j4126, ref_i4124);
                    var if_res2624 = iloop4122(M1.unsafe_fx_plus_(i4123, 1));
                  }
                  return if_res2624;
                };
                var if_res2625 = jloop4125(M1.unsafe_fx_plus_(Blo4118, i4123));
              } else {
                var if_res2625 = M0.rvoid();
              }
              return if_res2625;
            };
            var if_res2633 = iloop4122(1);
          } else {
            var n_by_2_4128 = M1.unsafe_fxrshift(n4119, 1);
            var n_by_2_plus_4129 = M1.unsafe_fx_(n4119, n_by_2_4128);
            var Amid14130 = M1.unsafe_fx_plus_(Alo4117, n_by_2_4128);
            var Amid24131 = M1.unsafe_fx_plus_(Alo4117, n_by_2_plus_4129);
            var Bmid14132 = M1.unsafe_fx_plus_(Blo4118, n_by_2_4128);
            copying_mergesort4116(Amid14130, Bmid14132, n_by_2_plus_4129);
            copying_mergesort4116(Alo4117, Amid24131, n_by_2_4128);
            var b24133 = M1.unsafe_fx_plus_(Blo4118, n4119);
            var loop4134 = function(a14135, b14136, c14137) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4138 = M1.unsafe_vector_ref(A4112, a14135);
              var y4139 = M1.unsafe_vector_ref(A4112, b14136);
              if (true !== false) {
                if (false !== false) {
                  var if_res2626 = M0.__rjs_quoted__.keyword_lt__p(false(y4139), false(x4138));
                } else {
                  var if_res2626 = M0.__rjs_quoted__.keyword_lt__p(y4139, x4138);
                }
                var if_res2628 = M0.not(if_res2626);
              } else {
                if (false !== false) {
                  var if_res2627 = M0.__rjs_quoted__.keyword_lt__p(false(x4138), false(y4139));
                } else {
                  var if_res2627 = M0.__rjs_quoted__.keyword_lt__p(x4138, y4139);
                }
                var if_res2628 = if_res2627;
              }
              if (if_res2628 !== false) {
                M1.unsafe_vector_set_bang_(A4112, c14137, x4138);
                var a14140 = M1.unsafe_fx_plus_(a14135, 1);
                var c14141 = M1.unsafe_fx_plus_(c14137, 1);
                if (M1.unsafe_fx_lt_(c14141, b14136) !== false) {
                  var if_res2629 = loop4134(a14140, b14136, c14141);
                } else {
                  var if_res2629 = M0.rvoid();
                }
                var if_res2632 = if_res2629;
              } else {
                M1.unsafe_vector_set_bang_(A4112, c14137, y4139);
                var b14142 = M1.unsafe_fx_plus_(b14136, 1);
                var c14143 = M1.unsafe_fx_plus_(c14137, 1);
                if (M1.unsafe_fx_lt__eq_(b24133, b14142) !== false) {
                  var loop4144 = function(a14145, c14146) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14146, b14142) !== false) {
                      M1.unsafe_vector_set_bang_(A4112, c14146, M1.unsafe_vector_ref(A4112, a14145));
                      var if_res2630 = loop4144(M1.unsafe_fx_plus_(a14145, 1), M1.unsafe_fx_plus_(c14146, 1));
                    } else {
                      var if_res2630 = M0.rvoid();
                    }
                    return if_res2630;
                  };
                  var if_res2631 = loop4144(a14135, c14143);
                } else {
                  var if_res2631 = loop4134(a14135, b14142, c14143);
                }
                var if_res2632 = if_res2631;
              }
              return if_res2632;
            };
            var if_res2633 = loop4134(Amid24131, Bmid14132, Blo4118);
          }
          var if_res2634 = if_res2633;
        }
        var if_res2635 = if_res2634;
      }
      return if_res2635;
    };
    var Alo4147 = 0;
    var Amid14148 = n_by_2_4114;
    var Amid24149 = n_by_2_plus_4115;
    var Ahi4150 = n4113;
    var B1lo4151 = n4113;
    copying_mergesort4116(Amid14148, B1lo4151, n_by_2_plus_4115);
    if (M0.zero_p(n_by_2_4114) !== false) {
      var if_res2636 = M0.rvoid();
    } else {
      var if_res2636 = copying_mergesort4116(Alo4147, Amid24149, n_by_2_4114);
    }
    if_res2636;
    var b24152 = Ahi4150;
    var loop4153 = function(a14154, b14155, c14156) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4157 = M1.unsafe_vector_ref(A4112, a14154);
      var y4158 = M1.unsafe_vector_ref(A4112, b14155);
      if (false !== false) {
        if (false !== false) {
          var if_res2637 = M0.__rjs_quoted__.keyword_lt__p(false(y4158), false(x4157));
        } else {
          var if_res2637 = M0.__rjs_quoted__.keyword_lt__p(y4158, x4157);
        }
        var if_res2639 = M0.not(if_res2637);
      } else {
        if (false !== false) {
          var if_res2638 = M0.__rjs_quoted__.keyword_lt__p(false(x4157), false(y4158));
        } else {
          var if_res2638 = M0.__rjs_quoted__.keyword_lt__p(x4157, y4158);
        }
        var if_res2639 = if_res2638;
      }
      if (if_res2639 !== false) {
        M1.unsafe_vector_set_bang_(A4112, c14156, x4157);
        var a14159 = M1.unsafe_fx_plus_(a14154, 1);
        var c14160 = M1.unsafe_fx_plus_(c14156, 1);
        if (M1.unsafe_fx_lt_(c14160, b14155) !== false) {
          var if_res2640 = loop4153(a14159, b14155, c14160);
        } else {
          var if_res2640 = M0.rvoid();
        }
        var if_res2643 = if_res2640;
      } else {
        M1.unsafe_vector_set_bang_(A4112, c14156, y4158);
        var b14161 = M1.unsafe_fx_plus_(b14155, 1);
        var c14162 = M1.unsafe_fx_plus_(c14156, 1);
        if (M1.unsafe_fx_lt__eq_(b24152, b14161) !== false) {
          var loop4163 = function(a14164, c14165) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14165, b14161) !== false) {
              M1.unsafe_vector_set_bang_(A4112, c14165, M1.unsafe_vector_ref(A4112, a14164));
              var if_res2641 = loop4163(M1.unsafe_fx_plus_(a14164, 1), M1.unsafe_fx_plus_(c14165, 1));
            } else {
              var if_res2641 = M0.rvoid();
            }
            return if_res2641;
          };
          var if_res2642 = loop4163(a14154, c14162);
        } else {
          var if_res2642 = loop4153(a14154, b14161, c14162);
        }
        var if_res2643 = if_res2642;
      }
      return if_res2643;
    };
    return loop4153(B1lo4151, Amid24149, Alo4147);
  };
  M0.hash_set_bang_(sorts3450, M0.__rjs_quoted__.keyword_lt__p, sort_proc4111);
  var precompiled_sorts3449 = M0.make_immutable_hasheq(M0.hash_map(sorts3450, M0.cons));
  var generic_sort4166 = function(A4167, less_than_p4168, n4169) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4170 = M1.unsafe_fxrshift(n4169, 1);
    var n_by_2_plus_4171 = M1.unsafe_fx_(n4169, n_by_2_4170);
    var copying_mergesort4172 = function(Alo4173, Blo4174, n4175) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4175, 1) !== false) {
        var if_res2659 = M1.unsafe_vector_set_bang_(A4167, Blo4174, M1.unsafe_vector_ref(A4167, Alo4173));
      } else {
        if (M1.unsafe_fx_eq_(n4175, 2) !== false) {
          var x4176 = M1.unsafe_vector_ref(A4167, Alo4173);
          var y4177 = M1.unsafe_vector_ref(A4167, M1.unsafe_fx_plus_(Alo4173, 1));
          if (false !== false) {
            var if_res2644 = less_than_p4168(false(y4177), false(x4176));
          } else {
            var if_res2644 = less_than_p4168(y4177, x4176);
          }
          if (if_res2644 !== false) {
            M1.unsafe_vector_set_bang_(A4167, Blo4174, y4177);
            var if_res2645 = M1.unsafe_vector_set_bang_(A4167, M1.unsafe_fx_plus_(Blo4174, 1), x4176);
          } else {
            M1.unsafe_vector_set_bang_(A4167, Blo4174, x4176);
            var if_res2645 = M1.unsafe_vector_set_bang_(A4167, M1.unsafe_fx_plus_(Blo4174, 1), y4177);
          }
          var if_res2658 = if_res2645;
        } else {
          if (M1.unsafe_fx_lt_(n4175, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4167, Blo4174, M1.unsafe_vector_ref(A4167, Alo4173));
            var iloop4178 = function(i4179) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4179, n4175) !== false) {
                var ref_i4180 = M1.unsafe_vector_ref(A4167, M1.unsafe_fx_plus_(Alo4173, i4179));
                var jloop4181 = function(j4182) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14183 = M1.unsafe_vector_ref(A4167, M1.unsafe_fx_(j4182, 1));
                  if (M1.unsafe_fx_lt_(Blo4174, j4182) !== false) {
                    if (false !== false) {
                      var if_res2646 = less_than_p4168(false(ref_i4180), false(ref_j_14183));
                    } else {
                      var if_res2646 = less_than_p4168(ref_i4180, ref_j_14183);
                    }
                    var if_res2647 = if_res2646;
                  } else {
                    var if_res2647 = false;
                  }
                  if (if_res2647 !== false) {
                    M1.unsafe_vector_set_bang_(A4167, j4182, ref_j_14183);
                    var if_res2648 = jloop4181(M1.unsafe_fx_(j4182, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4167, j4182, ref_i4180);
                    var if_res2648 = iloop4178(M1.unsafe_fx_plus_(i4179, 1));
                  }
                  return if_res2648;
                };
                var if_res2649 = jloop4181(M1.unsafe_fx_plus_(Blo4174, i4179));
              } else {
                var if_res2649 = M0.rvoid();
              }
              return if_res2649;
            };
            var if_res2657 = iloop4178(1);
          } else {
            var n_by_2_4184 = M1.unsafe_fxrshift(n4175, 1);
            var n_by_2_plus_4185 = M1.unsafe_fx_(n4175, n_by_2_4184);
            var Amid14186 = M1.unsafe_fx_plus_(Alo4173, n_by_2_4184);
            var Amid24187 = M1.unsafe_fx_plus_(Alo4173, n_by_2_plus_4185);
            var Bmid14188 = M1.unsafe_fx_plus_(Blo4174, n_by_2_4184);
            copying_mergesort4172(Amid14186, Bmid14188, n_by_2_plus_4185);
            copying_mergesort4172(Alo4173, Amid24187, n_by_2_4184);
            var b24189 = M1.unsafe_fx_plus_(Blo4174, n4175);
            var loop4190 = function(a14191, b14192, c14193) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4194 = M1.unsafe_vector_ref(A4167, a14191);
              var y4195 = M1.unsafe_vector_ref(A4167, b14192);
              if (true !== false) {
                if (false !== false) {
                  var if_res2650 = less_than_p4168(false(y4195), false(x4194));
                } else {
                  var if_res2650 = less_than_p4168(y4195, x4194);
                }
                var if_res2652 = M0.not(if_res2650);
              } else {
                if (false !== false) {
                  var if_res2651 = less_than_p4168(false(x4194), false(y4195));
                } else {
                  var if_res2651 = less_than_p4168(x4194, y4195);
                }
                var if_res2652 = if_res2651;
              }
              if (if_res2652 !== false) {
                M1.unsafe_vector_set_bang_(A4167, c14193, x4194);
                var a14196 = M1.unsafe_fx_plus_(a14191, 1);
                var c14197 = M1.unsafe_fx_plus_(c14193, 1);
                if (M1.unsafe_fx_lt_(c14197, b14192) !== false) {
                  var if_res2653 = loop4190(a14196, b14192, c14197);
                } else {
                  var if_res2653 = M0.rvoid();
                }
                var if_res2656 = if_res2653;
              } else {
                M1.unsafe_vector_set_bang_(A4167, c14193, y4195);
                var b14198 = M1.unsafe_fx_plus_(b14192, 1);
                var c14199 = M1.unsafe_fx_plus_(c14193, 1);
                if (M1.unsafe_fx_lt__eq_(b24189, b14198) !== false) {
                  var loop4200 = function(a14201, c14202) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14202, b14198) !== false) {
                      M1.unsafe_vector_set_bang_(A4167, c14202, M1.unsafe_vector_ref(A4167, a14201));
                      var if_res2654 = loop4200(M1.unsafe_fx_plus_(a14201, 1), M1.unsafe_fx_plus_(c14202, 1));
                    } else {
                      var if_res2654 = M0.rvoid();
                    }
                    return if_res2654;
                  };
                  var if_res2655 = loop4200(a14191, c14199);
                } else {
                  var if_res2655 = loop4190(a14191, b14198, c14199);
                }
                var if_res2656 = if_res2655;
              }
              return if_res2656;
            };
            var if_res2657 = loop4190(Amid24187, Bmid14188, Blo4174);
          }
          var if_res2658 = if_res2657;
        }
        var if_res2659 = if_res2658;
      }
      return if_res2659;
    };
    var Alo4203 = 0;
    var Amid14204 = n_by_2_4170;
    var Amid24205 = n_by_2_plus_4171;
    var Ahi4206 = n4169;
    var B1lo4207 = n4169;
    copying_mergesort4172(Amid14204, B1lo4207, n_by_2_plus_4171);
    if (M0.zero_p(n_by_2_4170) !== false) {
      var if_res2660 = M0.rvoid();
    } else {
      var if_res2660 = copying_mergesort4172(Alo4203, Amid24205, n_by_2_4170);
    }
    if_res2660;
    var b24208 = Ahi4206;
    var loop4209 = function(a14210, b14211, c14212) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4213 = M1.unsafe_vector_ref(A4167, a14210);
      var y4214 = M1.unsafe_vector_ref(A4167, b14211);
      if (false !== false) {
        if (false !== false) {
          var if_res2661 = less_than_p4168(false(y4214), false(x4213));
        } else {
          var if_res2661 = less_than_p4168(y4214, x4213);
        }
        var if_res2663 = M0.not(if_res2661);
      } else {
        if (false !== false) {
          var if_res2662 = less_than_p4168(false(x4213), false(y4214));
        } else {
          var if_res2662 = less_than_p4168(x4213, y4214);
        }
        var if_res2663 = if_res2662;
      }
      if (if_res2663 !== false) {
        M1.unsafe_vector_set_bang_(A4167, c14212, x4213);
        var a14215 = M1.unsafe_fx_plus_(a14210, 1);
        var c14216 = M1.unsafe_fx_plus_(c14212, 1);
        if (M1.unsafe_fx_lt_(c14216, b14211) !== false) {
          var if_res2664 = loop4209(a14215, b14211, c14216);
        } else {
          var if_res2664 = M0.rvoid();
        }
        var if_res2667 = if_res2664;
      } else {
        M1.unsafe_vector_set_bang_(A4167, c14212, y4214);
        var b14217 = M1.unsafe_fx_plus_(b14211, 1);
        var c14218 = M1.unsafe_fx_plus_(c14212, 1);
        if (M1.unsafe_fx_lt__eq_(b24208, b14217) !== false) {
          var loop4219 = function(a14220, c14221) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14221, b14217) !== false) {
              M1.unsafe_vector_set_bang_(A4167, c14221, M1.unsafe_vector_ref(A4167, a14220));
              var if_res2665 = loop4219(M1.unsafe_fx_plus_(a14220, 1), M1.unsafe_fx_plus_(c14221, 1));
            } else {
              var if_res2665 = M0.rvoid();
            }
            return if_res2665;
          };
          var if_res2666 = loop4219(a14210, c14218);
        } else {
          var if_res2666 = loop4209(a14210, b14217, c14218);
        }
        var if_res2667 = if_res2666;
      }
      return if_res2667;
    };
    return loop4209(B1lo4207, Amid24205, Alo4203);
  };
  var generic_sort_by_key4222 = function(A4223, less_than_p4224, n4225, key4226) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4227 = M1.unsafe_fxrshift(n4225, 1);
    var n_by_2_plus_4228 = M1.unsafe_fx_(n4225, n_by_2_4227);
    var copying_mergesort4229 = function(Alo4230, Blo4231, n4232) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4232, 1) !== false) {
        var if_res2683 = M1.unsafe_vector_set_bang_(A4223, Blo4231, M1.unsafe_vector_ref(A4223, Alo4230));
      } else {
        if (M1.unsafe_fx_eq_(n4232, 2) !== false) {
          var x4233 = M1.unsafe_vector_ref(A4223, Alo4230);
          var y4234 = M1.unsafe_vector_ref(A4223, M1.unsafe_fx_plus_(Alo4230, 1));
          if (key4226 !== false) {
            var if_res2668 = less_than_p4224(key4226(y4234), key4226(x4233));
          } else {
            var if_res2668 = less_than_p4224(y4234, x4233);
          }
          if (if_res2668 !== false) {
            M1.unsafe_vector_set_bang_(A4223, Blo4231, y4234);
            var if_res2669 = M1.unsafe_vector_set_bang_(A4223, M1.unsafe_fx_plus_(Blo4231, 1), x4233);
          } else {
            M1.unsafe_vector_set_bang_(A4223, Blo4231, x4233);
            var if_res2669 = M1.unsafe_vector_set_bang_(A4223, M1.unsafe_fx_plus_(Blo4231, 1), y4234);
          }
          var if_res2682 = if_res2669;
        } else {
          if (M1.unsafe_fx_lt_(n4232, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4223, Blo4231, M1.unsafe_vector_ref(A4223, Alo4230));
            var iloop4235 = function(i4236) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4236, n4232) !== false) {
                var ref_i4237 = M1.unsafe_vector_ref(A4223, M1.unsafe_fx_plus_(Alo4230, i4236));
                var jloop4238 = function(j4239) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14240 = M1.unsafe_vector_ref(A4223, M1.unsafe_fx_(j4239, 1));
                  if (M1.unsafe_fx_lt_(Blo4231, j4239) !== false) {
                    if (key4226 !== false) {
                      var if_res2670 = less_than_p4224(key4226(ref_i4237), key4226(ref_j_14240));
                    } else {
                      var if_res2670 = less_than_p4224(ref_i4237, ref_j_14240);
                    }
                    var if_res2671 = if_res2670;
                  } else {
                    var if_res2671 = false;
                  }
                  if (if_res2671 !== false) {
                    M1.unsafe_vector_set_bang_(A4223, j4239, ref_j_14240);
                    var if_res2672 = jloop4238(M1.unsafe_fx_(j4239, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4223, j4239, ref_i4237);
                    var if_res2672 = iloop4235(M1.unsafe_fx_plus_(i4236, 1));
                  }
                  return if_res2672;
                };
                var if_res2673 = jloop4238(M1.unsafe_fx_plus_(Blo4231, i4236));
              } else {
                var if_res2673 = M0.rvoid();
              }
              return if_res2673;
            };
            var if_res2681 = iloop4235(1);
          } else {
            var n_by_2_4241 = M1.unsafe_fxrshift(n4232, 1);
            var n_by_2_plus_4242 = M1.unsafe_fx_(n4232, n_by_2_4241);
            var Amid14243 = M1.unsafe_fx_plus_(Alo4230, n_by_2_4241);
            var Amid24244 = M1.unsafe_fx_plus_(Alo4230, n_by_2_plus_4242);
            var Bmid14245 = M1.unsafe_fx_plus_(Blo4231, n_by_2_4241);
            copying_mergesort4229(Amid14243, Bmid14245, n_by_2_plus_4242);
            copying_mergesort4229(Alo4230, Amid24244, n_by_2_4241);
            var b24246 = M1.unsafe_fx_plus_(Blo4231, n4232);
            var loop4247 = function(a14248, b14249, c14250) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4251 = M1.unsafe_vector_ref(A4223, a14248);
              var y4252 = M1.unsafe_vector_ref(A4223, b14249);
              if (true !== false) {
                if (key4226 !== false) {
                  var if_res2674 = less_than_p4224(key4226(y4252), key4226(x4251));
                } else {
                  var if_res2674 = less_than_p4224(y4252, x4251);
                }
                var if_res2676 = M0.not(if_res2674);
              } else {
                if (key4226 !== false) {
                  var if_res2675 = less_than_p4224(key4226(x4251), key4226(y4252));
                } else {
                  var if_res2675 = less_than_p4224(x4251, y4252);
                }
                var if_res2676 = if_res2675;
              }
              if (if_res2676 !== false) {
                M1.unsafe_vector_set_bang_(A4223, c14250, x4251);
                var a14253 = M1.unsafe_fx_plus_(a14248, 1);
                var c14254 = M1.unsafe_fx_plus_(c14250, 1);
                if (M1.unsafe_fx_lt_(c14254, b14249) !== false) {
                  var if_res2677 = loop4247(a14253, b14249, c14254);
                } else {
                  var if_res2677 = M0.rvoid();
                }
                var if_res2680 = if_res2677;
              } else {
                M1.unsafe_vector_set_bang_(A4223, c14250, y4252);
                var b14255 = M1.unsafe_fx_plus_(b14249, 1);
                var c14256 = M1.unsafe_fx_plus_(c14250, 1);
                if (M1.unsafe_fx_lt__eq_(b24246, b14255) !== false) {
                  var loop4257 = function(a14258, c14259) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14259, b14255) !== false) {
                      M1.unsafe_vector_set_bang_(A4223, c14259, M1.unsafe_vector_ref(A4223, a14258));
                      var if_res2678 = loop4257(M1.unsafe_fx_plus_(a14258, 1), M1.unsafe_fx_plus_(c14259, 1));
                    } else {
                      var if_res2678 = M0.rvoid();
                    }
                    return if_res2678;
                  };
                  var if_res2679 = loop4257(a14248, c14256);
                } else {
                  var if_res2679 = loop4247(a14248, b14255, c14256);
                }
                var if_res2680 = if_res2679;
              }
              return if_res2680;
            };
            var if_res2681 = loop4247(Amid24244, Bmid14245, Blo4231);
          }
          var if_res2682 = if_res2681;
        }
        var if_res2683 = if_res2682;
      }
      return if_res2683;
    };
    var Alo4260 = 0;
    var Amid14261 = n_by_2_4227;
    var Amid24262 = n_by_2_plus_4228;
    var Ahi4263 = n4225;
    var B1lo4264 = n4225;
    copying_mergesort4229(Amid14261, B1lo4264, n_by_2_plus_4228);
    if (M0.zero_p(n_by_2_4227) !== false) {
      var if_res2684 = M0.rvoid();
    } else {
      var if_res2684 = copying_mergesort4229(Alo4260, Amid24262, n_by_2_4227);
    }
    if_res2684;
    var b24265 = Ahi4263;
    var loop4266 = function(a14267, b14268, c14269) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4270 = M1.unsafe_vector_ref(A4223, a14267);
      var y4271 = M1.unsafe_vector_ref(A4223, b14268);
      if (false !== false) {
        if (key4226 !== false) {
          var if_res2685 = less_than_p4224(key4226(y4271), key4226(x4270));
        } else {
          var if_res2685 = less_than_p4224(y4271, x4270);
        }
        var if_res2687 = M0.not(if_res2685);
      } else {
        if (key4226 !== false) {
          var if_res2686 = less_than_p4224(key4226(x4270), key4226(y4271));
        } else {
          var if_res2686 = less_than_p4224(x4270, y4271);
        }
        var if_res2687 = if_res2686;
      }
      if (if_res2687 !== false) {
        M1.unsafe_vector_set_bang_(A4223, c14269, x4270);
        var a14272 = M1.unsafe_fx_plus_(a14267, 1);
        var c14273 = M1.unsafe_fx_plus_(c14269, 1);
        if (M1.unsafe_fx_lt_(c14273, b14268) !== false) {
          var if_res2688 = loop4266(a14272, b14268, c14273);
        } else {
          var if_res2688 = M0.rvoid();
        }
        var if_res2691 = if_res2688;
      } else {
        M1.unsafe_vector_set_bang_(A4223, c14269, y4271);
        var b14274 = M1.unsafe_fx_plus_(b14268, 1);
        var c14275 = M1.unsafe_fx_plus_(c14269, 1);
        if (M1.unsafe_fx_lt__eq_(b24265, b14274) !== false) {
          var loop4276 = function(a14277, c14278) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14278, b14274) !== false) {
              M1.unsafe_vector_set_bang_(A4223, c14278, M1.unsafe_vector_ref(A4223, a14277));
              var if_res2689 = loop4276(M1.unsafe_fx_plus_(a14277, 1), M1.unsafe_fx_plus_(c14278, 1));
            } else {
              var if_res2689 = M0.rvoid();
            }
            return if_res2689;
          };
          var if_res2690 = loop4276(a14267, c14275);
        } else {
          var if_res2690 = loop4266(a14267, b14274, c14275);
        }
        var if_res2691 = if_res2690;
      }
      return if_res2691;
    };
    return loop4266(B1lo4264, Amid24262, Alo4260);
  };
  var cl2801 = function(lst4279, less_than_p4280) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4281 = M0.length(lst4279);
    if (M1.unsafe_fx_eq_(n4281, 0) !== false) {
      var if_res2826 = lst4279;
    } else {
      if (false !== false) {
        var vec4282 = M0.make_vector(n4281 + M0.ceiling(n4281 / 2));
        var loop4283 = function(i4284, lst4285) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.pair_p(lst4285) !== false) {
            var x4286 = M0.car(lst4285);
            M1.unsafe_vector_set_bang_(vec4282, i4284, M0.cons(false(x4286), x4286));
            var if_res2805 = loop4283(M1.unsafe_fx_plus_(i4284, 1), M0.cdr(lst4285));
          } else {
            var if_res2805 = M0.rvoid();
          }
          return if_res2805;
        };
        loop4283(0, lst4279);
        generic_sort_by_key4222(vec4282, less_than_p4280, n4281, M1.unsafe_car);
        var loop4287 = function(i4288, r4289) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var i4290 = M1.unsafe_fx_(i4288, 1);
          if (M1.unsafe_fx_lt_(i4290, 0) !== false) {
            var if_res2806 = r4289;
          } else {
            var if_res2806 = loop4287(i4290, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4282, i4290)), r4289));
          }
          return if_res2806;
        };
        var if_res2825 = loop4287(n4281, $rjs_core.Pair.makeList());
      } else {
        var loop4291 = function(last4292, next4293) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4294 = M0.null_p(next4293);
          if (or_part4294 !== false) {
            var if_res2809 = or_part4294;
          } else {
            if (false !== false) {
              var if_res2807 = less_than_p4280(false(M1.unsafe_car(next4293)), false(last4292));
            } else {
              var if_res2807 = less_than_p4280(M1.unsafe_car(next4293), last4292);
            }
            if (M0.not(if_res2807) !== false) {
              var if_res2808 = loop4291(M1.unsafe_car(next4293), M1.unsafe_cdr(next4293));
            } else {
              var if_res2808 = false;
            }
            var if_res2809 = if_res2808;
          }
          return if_res2809;
        };
        if (loop4291(M0.car(lst4279), M0.cdr(lst4279)) !== false) {
          var if_res2824 = lst4279;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4281, 3) !== false) {
            if (M1.unsafe_fx_eq_(n4281, 1) !== false) {
              var if_res2819 = lst4279;
            } else {
              if (M1.unsafe_fx_eq_(n4281, 2) !== false) {
                var if_res2818 = M0.list(M0.cadr(lst4279), M0.car(lst4279));
              } else {
                var a4295 = M0.car(lst4279);
                var b4296 = M0.cadr(lst4279);
                var c4297 = M0.caddr(lst4279);
                if (false !== false) {
                  var if_res2810 = less_than_p4280(false(b4296), false(a4295));
                } else {
                  var if_res2810 = less_than_p4280(b4296, a4295);
                }
                if (if_res2810 !== false) {
                  if (false !== false) {
                    var if_res2811 = less_than_p4280(false(c4297), false(b4296));
                  } else {
                    var if_res2811 = less_than_p4280(c4297, b4296);
                  }
                  if (if_res2811 !== false) {
                    var if_res2814 = M0.list(c4297, b4296, a4295);
                  } else {
                    if (false !== false) {
                      var if_res2812 = less_than_p4280(false(c4297), false(a4295));
                    } else {
                      var if_res2812 = less_than_p4280(c4297, a4295);
                    }
                    if (if_res2812 !== false) {
                      var if_res2813 = M0.list(b4296, c4297, a4295);
                    } else {
                      var if_res2813 = M0.list(b4296, a4295, c4297);
                    }
                    var if_res2814 = if_res2813;
                  }
                  var if_res2817 = if_res2814;
                } else {
                  if (false !== false) {
                    var if_res2815 = less_than_p4280(false(c4297), false(a4295));
                  } else {
                    var if_res2815 = less_than_p4280(c4297, a4295);
                  }
                  if (if_res2815 !== false) {
                    var if_res2816 = M0.list(c4297, a4295, b4296);
                  } else {
                    var if_res2816 = M0.list(a4295, c4297, b4296);
                  }
                  var if_res2817 = if_res2816;
                }
                var if_res2818 = if_res2817;
              }
              var if_res2819 = if_res2818;
            }
            var if_res2823 = if_res2819;
          } else {
            var vec4298 = M0.make_vector(n4281 + M0.ceiling(n4281 / 2));
            var loop4299 = function(i4300, lst4301) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.pair_p(lst4301) !== false) {
                M0.vector_set_bang_(vec4298, i4300, M0.car(lst4301));
                var if_res2820 = loop4299(M0.add1(i4300), M0.cdr(lst4301));
              } else {
                var if_res2820 = M0.rvoid();
              }
              return if_res2820;
            };
            loop4299(0, lst4279);
            var precomp4302 = M0.hash_ref(precompiled_sorts3449, less_than_p4280, false);
            if (precomp4302 !== false) {
              var if_res2821 = precomp4302(vec4298, n4281);
            } else {
              var if_res2821 = generic_sort4166(vec4298, less_than_p4280, n4281);
            }
            if_res2821;
            var loop4303 = function(i4304, r4305) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var i4306 = M0.sub1(i4304);
              if (M0.__lt_(i4306, 0) !== false) {
                var if_res2822 = r4305;
              } else {
                var if_res2822 = loop4303(i4306, M0.cons(M0.vector_ref(vec4298, i4306), r4305));
              }
              return if_res2822;
            };
            var if_res2823 = loop4303(n4281, $rjs_core.Pair.makeList());
          }
          var if_res2824 = if_res2823;
        }
        var if_res2825 = if_res2824;
      }
      var if_res2826 = if_res2825;
    }
    return if_res2826;
  };
  var cl2802 = function(lst4307, less_than_p4308, getkey4309) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4309 !== false) {
      var if_res2827 = M0.not(M0.eq_p(M0.values, getkey4309));
    } else {
      var if_res2827 = false;
    }
    if (if_res2827 !== false) {
      var if_res2828 = sort(lst4307, less_than_p4308, getkey4309, false);
    } else {
      var if_res2828 = sort(lst4307, less_than_p4308);
    }
    return if_res2828;
  };
  var cl2803 = function(lst4310, less_than_p4311, getkey4312, cache_keys_p4313) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4312 !== false) {
      var if_res2829 = M0.not(M0.eq_p(M0.values, getkey4312));
    } else {
      var if_res2829 = false;
    }
    if (if_res2829 !== false) {
      var n4314 = M0.length(lst4310);
      if (M1.unsafe_fx_eq_(n4314, 0) !== false) {
        var if_res2850 = lst4310;
      } else {
        if (cache_keys_p4313 !== false) {
          var vec4315 = M0.make_vector(n4314 + M0.ceiling(n4314 / 2));
          var loop4316 = function(i4317, lst4318) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.pair_p(lst4318) !== false) {
              var x4319 = M0.car(lst4318);
              M1.unsafe_vector_set_bang_(vec4315, i4317, M0.cons(getkey4312(x4319), x4319));
              var if_res2830 = loop4316(M1.unsafe_fx_plus_(i4317, 1), M0.cdr(lst4318));
            } else {
              var if_res2830 = M0.rvoid();
            }
            return if_res2830;
          };
          loop4316(0, lst4310);
          generic_sort_by_key4222(vec4315, less_than_p4311, n4314, M1.unsafe_car);
          var loop4320 = function(i4321, r4322) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var i4323 = M1.unsafe_fx_(i4321, 1);
            if (M1.unsafe_fx_lt_(i4323, 0) !== false) {
              var if_res2831 = r4322;
            } else {
              var if_res2831 = loop4320(i4323, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4315, i4323)), r4322));
            }
            return if_res2831;
          };
          var if_res2849 = loop4320(n4314, $rjs_core.Pair.makeList());
        } else {
          var loop4324 = function(last4325, next4326) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4327 = M0.null_p(next4326);
            if (or_part4327 !== false) {
              var if_res2834 = or_part4327;
            } else {
              if (getkey4312 !== false) {
                var if_res2832 = less_than_p4311(getkey4312(M1.unsafe_car(next4326)), getkey4312(last4325));
              } else {
                var if_res2832 = less_than_p4311(M1.unsafe_car(next4326), last4325);
              }
              if (M0.not(if_res2832) !== false) {
                var if_res2833 = loop4324(M1.unsafe_car(next4326), M1.unsafe_cdr(next4326));
              } else {
                var if_res2833 = false;
              }
              var if_res2834 = if_res2833;
            }
            return if_res2834;
          };
          if (loop4324(M0.car(lst4310), M0.cdr(lst4310)) !== false) {
            var if_res2848 = lst4310;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4314, 3) !== false) {
              if (M1.unsafe_fx_eq_(n4314, 1) !== false) {
                var if_res2844 = lst4310;
              } else {
                if (M1.unsafe_fx_eq_(n4314, 2) !== false) {
                  var if_res2843 = M0.list(M0.cadr(lst4310), M0.car(lst4310));
                } else {
                  var a4328 = M0.car(lst4310);
                  var b4329 = M0.cadr(lst4310);
                  var c4330 = M0.caddr(lst4310);
                  if (getkey4312 !== false) {
                    var if_res2835 = less_than_p4311(getkey4312(b4329), getkey4312(a4328));
                  } else {
                    var if_res2835 = less_than_p4311(b4329, a4328);
                  }
                  if (if_res2835 !== false) {
                    if (getkey4312 !== false) {
                      var if_res2836 = less_than_p4311(getkey4312(c4330), getkey4312(b4329));
                    } else {
                      var if_res2836 = less_than_p4311(c4330, b4329);
                    }
                    if (if_res2836 !== false) {
                      var if_res2839 = M0.list(c4330, b4329, a4328);
                    } else {
                      if (getkey4312 !== false) {
                        var if_res2837 = less_than_p4311(getkey4312(c4330), getkey4312(a4328));
                      } else {
                        var if_res2837 = less_than_p4311(c4330, a4328);
                      }
                      if (if_res2837 !== false) {
                        var if_res2838 = M0.list(b4329, c4330, a4328);
                      } else {
                        var if_res2838 = M0.list(b4329, a4328, c4330);
                      }
                      var if_res2839 = if_res2838;
                    }
                    var if_res2842 = if_res2839;
                  } else {
                    if (getkey4312 !== false) {
                      var if_res2840 = less_than_p4311(getkey4312(c4330), getkey4312(a4328));
                    } else {
                      var if_res2840 = less_than_p4311(c4330, a4328);
                    }
                    if (if_res2840 !== false) {
                      var if_res2841 = M0.list(c4330, a4328, b4329);
                    } else {
                      var if_res2841 = M0.list(a4328, c4330, b4329);
                    }
                    var if_res2842 = if_res2841;
                  }
                  var if_res2843 = if_res2842;
                }
                var if_res2844 = if_res2843;
              }
              var if_res2847 = if_res2844;
            } else {
              var vec4331 = M0.make_vector(n4314 + M0.ceiling(n4314 / 2));
              var loop4332 = function(i4333, lst4334) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M0.pair_p(lst4334) !== false) {
                  M0.vector_set_bang_(vec4331, i4333, M0.car(lst4334));
                  var if_res2845 = loop4332(M0.add1(i4333), M0.cdr(lst4334));
                } else {
                  var if_res2845 = M0.rvoid();
                }
                return if_res2845;
              };
              loop4332(0, lst4310);
              generic_sort_by_key4222(vec4331, less_than_p4311, n4314, getkey4312);
              var loop4335 = function(i4336, r4337) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var i4338 = M0.sub1(i4336);
                if (M0.__lt_(i4338, 0) !== false) {
                  var if_res2846 = r4337;
                } else {
                  var if_res2846 = loop4335(i4338, M0.cons(M0.vector_ref(vec4331, i4338), r4337));
                }
                return if_res2846;
              };
              var if_res2847 = loop4335(n4314, $rjs_core.Pair.makeList());
            }
            var if_res2848 = if_res2847;
          }
          var if_res2849 = if_res2848;
        }
        var if_res2850 = if_res2849;
      }
      var if_res2851 = if_res2850;
    } else {
      var if_res2851 = sort(lst4310, less_than_p4311);
    }
    return if_res2851;
  };
  var temp2852 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2804 = {
      '2': cl2801,
      '3': cl2802,
      '4': cl2803
    }[arguments.length];
    if (fixed_lam2804 !== undefined) {
      return fixed_lam2804.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3, 4]);
  var cl2746 = function(vec4339, less_than_p4340, start4341, end4342) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4343 = end4342 - start4341;
    if (true !== false) {
      var if_res2749 = M0.make_vector(n4343);
    } else {
      var if_res2749 = vec4339;
    }
    var dst_vec4344 = if_res2749;
    if (true !== false) {
      var if_res2750 = 0;
    } else {
      var if_res2750 = start4341;
    }
    var dst_start4345 = if_res2750;
    if (M1.unsafe_fx_eq_(n4343, 0) !== false) {
      var if_res2772 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4346 = M0.make_vector(n4343 + M0.ceiling(n4343 / 2), true);
        var loop4347 = function(i4348) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4348, n4343) !== false) {
            var x4349 = M1.unsafe_vector_ref(vec4339, M1.unsafe_fx_plus_(i4348, start4341));
            M1.unsafe_vector_set_bang_(work_vec4346, i4348, M0.cons(false(x4349), x4349));
            var if_res2751 = loop4347(M1.unsafe_fx_plus_(i4348, 1));
          } else {
            var if_res2751 = M0.rvoid();
          }
          return if_res2751;
        };
        loop4347(0);
        generic_sort_by_key4222(work_vec4346, less_than_p4340, n4343, M1.unsafe_car);
        var loop4350 = function(i4351) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4351, n4343) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(i4351, dst_start4345), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4346, i4351)));
            var if_res2752 = loop4350(M1.unsafe_fx_plus_(i4351, 1));
          } else {
            var if_res2752 = M0.rvoid();
          }
          return if_res2752;
        };
        var if_res2771 = loop4350(0);
      } else {
        var loop4352 = function(prev_val4353, next_index4354) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4355 = M1.unsafe_fx_eq_(next_index4354, end4342);
          if (or_part4355 !== false) {
            var if_res2755 = or_part4355;
          } else {
            var next_val4356 = M1.unsafe_vector_ref(vec4339, next_index4354);
            if (false !== false) {
              var if_res2753 = less_than_p4340(false(next_val4356), false(prev_val4353));
            } else {
              var if_res2753 = less_than_p4340(next_val4356, prev_val4353);
            }
            if (M0.not(if_res2753) !== false) {
              var if_res2754 = loop4352(next_val4356, M1.unsafe_fx_plus_(next_index4354, 1));
            } else {
              var if_res2754 = false;
            }
            var if_res2755 = if_res2754;
          }
          return if_res2755;
        };
        if (loop4352(M1.unsafe_vector_ref(vec4339, start4341), M1.unsafe_fx_plus_(start4341, 1)) !== false) {
          if (true !== false) {
            var if_res2756 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4344, dst_start4345, vec4339, start4341, end4342);
          } else {
            var if_res2756 = M0.rvoid();
          }
          var if_res2770 = if_res2756;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4343, 3) !== false) {
            if (true !== false) {
              var if_res2757 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4344, dst_start4345, vec4339, start4341, end4342);
            } else {
              var if_res2757 = M0.rvoid();
            }
            if_res2757;
            if (M1.unsafe_fx_eq_(n4343, 1) !== false) {
              var if_res2767 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4343, 2) !== false) {
                var tmp4357 = M1.unsafe_vector_ref(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0));
                M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0), M1.unsafe_vector_ref(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1)));
                var if_res2766 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1), tmp4357);
              } else {
                var a4358 = M1.unsafe_vector_ref(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0));
                var b4359 = M1.unsafe_vector_ref(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1));
                var c4360 = M1.unsafe_vector_ref(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 2));
                if (false !== false) {
                  var if_res2758 = less_than_p4340(false(b4359), false(a4358));
                } else {
                  var if_res2758 = less_than_p4340(b4359, a4358);
                }
                if (if_res2758 !== false) {
                  if (false !== false) {
                    var if_res2759 = less_than_p4340(false(c4360), false(b4359));
                  } else {
                    var if_res2759 = less_than_p4340(c4360, b4359);
                  }
                  if (if_res2759 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0), c4360);
                    var if_res2762 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 2), a4358);
                  } else {
                    if (false !== false) {
                      var if_res2760 = less_than_p4340(false(c4360), false(a4358));
                    } else {
                      var if_res2760 = less_than_p4340(c4360, a4358);
                    }
                    if (if_res2760 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0), b4359);
                      M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1), c4360);
                      var if_res2761 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 2), a4358);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0), b4359);
                      var if_res2761 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1), a4358);
                    }
                    var if_res2762 = if_res2761;
                  }
                  var if_res2765 = if_res2762;
                } else {
                  if (false !== false) {
                    var if_res2763 = less_than_p4340(false(c4360), false(a4358));
                  } else {
                    var if_res2763 = less_than_p4340(c4360, a4358);
                  }
                  if (if_res2763 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 0), c4360);
                    M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1), a4358);
                    var if_res2764 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 2), b4359);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 1), c4360);
                    var if_res2764 = M1.unsafe_vector_set_bang_(dst_vec4344, M1.unsafe_fx_plus_(dst_start4345, 2), b4359);
                  }
                  var if_res2765 = if_res2764;
                }
                var if_res2766 = if_res2765;
              }
              var if_res2767 = if_res2766;
            }
            var if_res2769 = if_res2767;
          } else {
            var work_vec4361 = M0.make_vector(n4343 + M0.ceiling(n4343 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4361, 0, vec4339, start4341, end4342);
            var precomp4362 = M0.hash_ref(precompiled_sorts3449, less_than_p4340, false);
            if (precomp4362 !== false) {
              var if_res2768 = precomp4362(work_vec4361, n4343);
            } else {
              var if_res2768 = generic_sort4166(work_vec4361, less_than_p4340, n4343);
            }
            if_res2768;
            var if_res2769 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4344, dst_start4345, work_vec4361, 0, n4343);
          }
          var if_res2770 = if_res2769;
        }
        var if_res2771 = if_res2770;
      }
      var if_res2772 = if_res2771;
    }
    if_res2772;
    if (true !== false) {
      var if_res2773 = dst_vec4344;
    } else {
      var if_res2773 = M0.rvoid();
    }
    return if_res2773;
  };
  var cl2747 = function(vec4363, less_than_p4364, start4365, end4366, getkey4367, cache_keys_p4368) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4367 !== false) {
      var if_res2774 = M0.not(M0.eq_p(M0.values, getkey4367));
    } else {
      var if_res2774 = false;
    }
    if (if_res2774 !== false) {
      var n4369 = end4366 - start4365;
      if (true !== false) {
        var if_res2775 = M0.make_vector(n4369);
      } else {
        var if_res2775 = vec4363;
      }
      var dst_vec4370 = if_res2775;
      if (true !== false) {
        var if_res2776 = 0;
      } else {
        var if_res2776 = start4365;
      }
      var dst_start4371 = if_res2776;
      if (M1.unsafe_fx_eq_(n4369, 0) !== false) {
        var if_res2797 = M0.rvoid();
      } else {
        if (cache_keys_p4368 !== false) {
          var work_vec4372 = M0.make_vector(n4369 + M0.ceiling(n4369 / 2), true);
          var loop4373 = function(i4374) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4374, n4369) !== false) {
              var x4375 = M1.unsafe_vector_ref(vec4363, M1.unsafe_fx_plus_(i4374, start4365));
              M1.unsafe_vector_set_bang_(work_vec4372, i4374, M0.cons(getkey4367(x4375), x4375));
              var if_res2777 = loop4373(M1.unsafe_fx_plus_(i4374, 1));
            } else {
              var if_res2777 = M0.rvoid();
            }
            return if_res2777;
          };
          loop4373(0);
          generic_sort_by_key4222(work_vec4372, less_than_p4364, n4369, M1.unsafe_car);
          var loop4376 = function(i4377) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4377, n4369) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(i4377, dst_start4371), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4372, i4377)));
              var if_res2778 = loop4376(M1.unsafe_fx_plus_(i4377, 1));
            } else {
              var if_res2778 = M0.rvoid();
            }
            return if_res2778;
          };
          var if_res2796 = loop4376(0);
        } else {
          var loop4378 = function(prev_val4379, next_index4380) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4381 = M1.unsafe_fx_eq_(next_index4380, end4366);
            if (or_part4381 !== false) {
              var if_res2781 = or_part4381;
            } else {
              var next_val4382 = M1.unsafe_vector_ref(vec4363, next_index4380);
              if (getkey4367 !== false) {
                var if_res2779 = less_than_p4364(getkey4367(next_val4382), getkey4367(prev_val4379));
              } else {
                var if_res2779 = less_than_p4364(next_val4382, prev_val4379);
              }
              if (M0.not(if_res2779) !== false) {
                var if_res2780 = loop4378(next_val4382, M1.unsafe_fx_plus_(next_index4380, 1));
              } else {
                var if_res2780 = false;
              }
              var if_res2781 = if_res2780;
            }
            return if_res2781;
          };
          if (loop4378(M1.unsafe_vector_ref(vec4363, start4365), M1.unsafe_fx_plus_(start4365, 1)) !== false) {
            if (true !== false) {
              var if_res2782 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4370, dst_start4371, vec4363, start4365, end4366);
            } else {
              var if_res2782 = M0.rvoid();
            }
            var if_res2795 = if_res2782;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4369, 3) !== false) {
              if (true !== false) {
                var if_res2783 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4370, dst_start4371, vec4363, start4365, end4366);
              } else {
                var if_res2783 = M0.rvoid();
              }
              if_res2783;
              if (M1.unsafe_fx_eq_(n4369, 1) !== false) {
                var if_res2793 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4369, 2) !== false) {
                  var tmp4383 = M1.unsafe_vector_ref(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0), M1.unsafe_vector_ref(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1)));
                  var if_res2792 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1), tmp4383);
                } else {
                  var a4384 = M1.unsafe_vector_ref(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0));
                  var b4385 = M1.unsafe_vector_ref(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1));
                  var c4386 = M1.unsafe_vector_ref(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 2));
                  if (getkey4367 !== false) {
                    var if_res2784 = less_than_p4364(getkey4367(b4385), getkey4367(a4384));
                  } else {
                    var if_res2784 = less_than_p4364(b4385, a4384);
                  }
                  if (if_res2784 !== false) {
                    if (getkey4367 !== false) {
                      var if_res2785 = less_than_p4364(getkey4367(c4386), getkey4367(b4385));
                    } else {
                      var if_res2785 = less_than_p4364(c4386, b4385);
                    }
                    if (if_res2785 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0), c4386);
                      var if_res2788 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 2), a4384);
                    } else {
                      if (getkey4367 !== false) {
                        var if_res2786 = less_than_p4364(getkey4367(c4386), getkey4367(a4384));
                      } else {
                        var if_res2786 = less_than_p4364(c4386, a4384);
                      }
                      if (if_res2786 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0), b4385);
                        M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1), c4386);
                        var if_res2787 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 2), a4384);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0), b4385);
                        var if_res2787 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1), a4384);
                      }
                      var if_res2788 = if_res2787;
                    }
                    var if_res2791 = if_res2788;
                  } else {
                    if (getkey4367 !== false) {
                      var if_res2789 = less_than_p4364(getkey4367(c4386), getkey4367(a4384));
                    } else {
                      var if_res2789 = less_than_p4364(c4386, a4384);
                    }
                    if (if_res2789 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 0), c4386);
                      M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1), a4384);
                      var if_res2790 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 2), b4385);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 1), c4386);
                      var if_res2790 = M1.unsafe_vector_set_bang_(dst_vec4370, M1.unsafe_fx_plus_(dst_start4371, 2), b4385);
                    }
                    var if_res2791 = if_res2790;
                  }
                  var if_res2792 = if_res2791;
                }
                var if_res2793 = if_res2792;
              }
              var if_res2794 = if_res2793;
            } else {
              var work_vec4387 = M0.make_vector(n4369 + M0.ceiling(n4369 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4387, 0, vec4363, start4365, end4366);
              generic_sort_by_key4222(work_vec4387, less_than_p4364, n4369, getkey4367);
              var if_res2794 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4370, dst_start4371, work_vec4387, 0, n4369);
            }
            var if_res2795 = if_res2794;
          }
          var if_res2796 = if_res2795;
        }
        var if_res2797 = if_res2796;
      }
      if_res2797;
      if (true !== false) {
        var if_res2798 = dst_vec4370;
      } else {
        var if_res2798 = M0.rvoid();
      }
      var if_res2799 = if_res2798;
    } else {
      var if_res2799 = vector_sort(vec4363, less_than_p4364, start4365, end4366);
    }
    return if_res2799;
  };
  var temp2800 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2748 = {
      '4': cl2746,
      '6': cl2747
    }[arguments.length];
    if (fixed_lam2748 !== undefined) {
      return fixed_lam2748.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4, 6]);
  var cl2692 = function(vec4388, less_than_p4389, start4390, end4391) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4392 = end4391 - start4390;
    if (false !== false) {
      var if_res2695 = M0.make_vector(n4392);
    } else {
      var if_res2695 = vec4388;
    }
    var dst_vec4393 = if_res2695;
    if (false !== false) {
      var if_res2696 = 0;
    } else {
      var if_res2696 = start4390;
    }
    var dst_start4394 = if_res2696;
    if (M1.unsafe_fx_eq_(n4392, 0) !== false) {
      var if_res2718 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4395 = M0.make_vector(n4392 + M0.ceiling(n4392 / 2), true);
        var loop4396 = function(i4397) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4397, n4392) !== false) {
            var x4398 = M1.unsafe_vector_ref(vec4388, M1.unsafe_fx_plus_(i4397, start4390));
            M1.unsafe_vector_set_bang_(work_vec4395, i4397, M0.cons(false(x4398), x4398));
            var if_res2697 = loop4396(M1.unsafe_fx_plus_(i4397, 1));
          } else {
            var if_res2697 = M0.rvoid();
          }
          return if_res2697;
        };
        loop4396(0);
        generic_sort_by_key4222(work_vec4395, less_than_p4389, n4392, M1.unsafe_car);
        var loop4399 = function(i4400) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4400, n4392) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(i4400, dst_start4394), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4395, i4400)));
            var if_res2698 = loop4399(M1.unsafe_fx_plus_(i4400, 1));
          } else {
            var if_res2698 = M0.rvoid();
          }
          return if_res2698;
        };
        var if_res2717 = loop4399(0);
      } else {
        var loop4401 = function(prev_val4402, next_index4403) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4404 = M1.unsafe_fx_eq_(next_index4403, end4391);
          if (or_part4404 !== false) {
            var if_res2701 = or_part4404;
          } else {
            var next_val4405 = M1.unsafe_vector_ref(vec4388, next_index4403);
            if (false !== false) {
              var if_res2699 = less_than_p4389(false(next_val4405), false(prev_val4402));
            } else {
              var if_res2699 = less_than_p4389(next_val4405, prev_val4402);
            }
            if (M0.not(if_res2699) !== false) {
              var if_res2700 = loop4401(next_val4405, M1.unsafe_fx_plus_(next_index4403, 1));
            } else {
              var if_res2700 = false;
            }
            var if_res2701 = if_res2700;
          }
          return if_res2701;
        };
        if (loop4401(M1.unsafe_vector_ref(vec4388, start4390), M1.unsafe_fx_plus_(start4390, 1)) !== false) {
          if (false !== false) {
            var if_res2702 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4393, dst_start4394, vec4388, start4390, end4391);
          } else {
            var if_res2702 = M0.rvoid();
          }
          var if_res2716 = if_res2702;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4392, 3) !== false) {
            if (false !== false) {
              var if_res2703 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4393, dst_start4394, vec4388, start4390, end4391);
            } else {
              var if_res2703 = M0.rvoid();
            }
            if_res2703;
            if (M1.unsafe_fx_eq_(n4392, 1) !== false) {
              var if_res2713 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4392, 2) !== false) {
                var tmp4406 = M1.unsafe_vector_ref(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0));
                M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0), M1.unsafe_vector_ref(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1)));
                var if_res2712 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1), tmp4406);
              } else {
                var a4407 = M1.unsafe_vector_ref(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0));
                var b4408 = M1.unsafe_vector_ref(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1));
                var c4409 = M1.unsafe_vector_ref(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 2));
                if (false !== false) {
                  var if_res2704 = less_than_p4389(false(b4408), false(a4407));
                } else {
                  var if_res2704 = less_than_p4389(b4408, a4407);
                }
                if (if_res2704 !== false) {
                  if (false !== false) {
                    var if_res2705 = less_than_p4389(false(c4409), false(b4408));
                  } else {
                    var if_res2705 = less_than_p4389(c4409, b4408);
                  }
                  if (if_res2705 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0), c4409);
                    var if_res2708 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 2), a4407);
                  } else {
                    if (false !== false) {
                      var if_res2706 = less_than_p4389(false(c4409), false(a4407));
                    } else {
                      var if_res2706 = less_than_p4389(c4409, a4407);
                    }
                    if (if_res2706 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0), b4408);
                      M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1), c4409);
                      var if_res2707 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 2), a4407);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0), b4408);
                      var if_res2707 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1), a4407);
                    }
                    var if_res2708 = if_res2707;
                  }
                  var if_res2711 = if_res2708;
                } else {
                  if (false !== false) {
                    var if_res2709 = less_than_p4389(false(c4409), false(a4407));
                  } else {
                    var if_res2709 = less_than_p4389(c4409, a4407);
                  }
                  if (if_res2709 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 0), c4409);
                    M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1), a4407);
                    var if_res2710 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 2), b4408);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 1), c4409);
                    var if_res2710 = M1.unsafe_vector_set_bang_(dst_vec4393, M1.unsafe_fx_plus_(dst_start4394, 2), b4408);
                  }
                  var if_res2711 = if_res2710;
                }
                var if_res2712 = if_res2711;
              }
              var if_res2713 = if_res2712;
            }
            var if_res2715 = if_res2713;
          } else {
            var work_vec4410 = M0.make_vector(n4392 + M0.ceiling(n4392 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4410, 0, vec4388, start4390, end4391);
            var precomp4411 = M0.hash_ref(precompiled_sorts3449, less_than_p4389, false);
            if (precomp4411 !== false) {
              var if_res2714 = precomp4411(work_vec4410, n4392);
            } else {
              var if_res2714 = generic_sort4166(work_vec4410, less_than_p4389, n4392);
            }
            if_res2714;
            var if_res2715 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4393, dst_start4394, work_vec4410, 0, n4392);
          }
          var if_res2716 = if_res2715;
        }
        var if_res2717 = if_res2716;
      }
      var if_res2718 = if_res2717;
    }
    if_res2718;
    if (false !== false) {
      var if_res2719 = dst_vec4393;
    } else {
      var if_res2719 = M0.rvoid();
    }
    return if_res2719;
  };
  var cl2693 = function(vec4412, less_than_p4413, start4414, end4415, getkey4416, cache_keys_p4417) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4416 !== false) {
      var if_res2720 = M0.not(M0.eq_p(M0.values, getkey4416));
    } else {
      var if_res2720 = false;
    }
    if (if_res2720 !== false) {
      var n4418 = end4415 - start4414;
      if (false !== false) {
        var if_res2721 = M0.make_vector(n4418);
      } else {
        var if_res2721 = vec4412;
      }
      var dst_vec4419 = if_res2721;
      if (false !== false) {
        var if_res2722 = 0;
      } else {
        var if_res2722 = start4414;
      }
      var dst_start4420 = if_res2722;
      if (M1.unsafe_fx_eq_(n4418, 0) !== false) {
        var if_res2743 = M0.rvoid();
      } else {
        if (cache_keys_p4417 !== false) {
          var work_vec4421 = M0.make_vector(n4418 + M0.ceiling(n4418 / 2), true);
          var loop4422 = function(i4423) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4423, n4418) !== false) {
              var x4424 = M1.unsafe_vector_ref(vec4412, M1.unsafe_fx_plus_(i4423, start4414));
              M1.unsafe_vector_set_bang_(work_vec4421, i4423, M0.cons(getkey4416(x4424), x4424));
              var if_res2723 = loop4422(M1.unsafe_fx_plus_(i4423, 1));
            } else {
              var if_res2723 = M0.rvoid();
            }
            return if_res2723;
          };
          loop4422(0);
          generic_sort_by_key4222(work_vec4421, less_than_p4413, n4418, M1.unsafe_car);
          var loop4425 = function(i4426) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4426, n4418) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(i4426, dst_start4420), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4421, i4426)));
              var if_res2724 = loop4425(M1.unsafe_fx_plus_(i4426, 1));
            } else {
              var if_res2724 = M0.rvoid();
            }
            return if_res2724;
          };
          var if_res2742 = loop4425(0);
        } else {
          var loop4427 = function(prev_val4428, next_index4429) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4430 = M1.unsafe_fx_eq_(next_index4429, end4415);
            if (or_part4430 !== false) {
              var if_res2727 = or_part4430;
            } else {
              var next_val4431 = M1.unsafe_vector_ref(vec4412, next_index4429);
              if (getkey4416 !== false) {
                var if_res2725 = less_than_p4413(getkey4416(next_val4431), getkey4416(prev_val4428));
              } else {
                var if_res2725 = less_than_p4413(next_val4431, prev_val4428);
              }
              if (M0.not(if_res2725) !== false) {
                var if_res2726 = loop4427(next_val4431, M1.unsafe_fx_plus_(next_index4429, 1));
              } else {
                var if_res2726 = false;
              }
              var if_res2727 = if_res2726;
            }
            return if_res2727;
          };
          if (loop4427(M1.unsafe_vector_ref(vec4412, start4414), M1.unsafe_fx_plus_(start4414, 1)) !== false) {
            if (false !== false) {
              var if_res2728 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4419, dst_start4420, vec4412, start4414, end4415);
            } else {
              var if_res2728 = M0.rvoid();
            }
            var if_res2741 = if_res2728;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4418, 3) !== false) {
              if (false !== false) {
                var if_res2729 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4419, dst_start4420, vec4412, start4414, end4415);
              } else {
                var if_res2729 = M0.rvoid();
              }
              if_res2729;
              if (M1.unsafe_fx_eq_(n4418, 1) !== false) {
                var if_res2739 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4418, 2) !== false) {
                  var tmp4432 = M1.unsafe_vector_ref(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0), M1.unsafe_vector_ref(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1)));
                  var if_res2738 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1), tmp4432);
                } else {
                  var a4433 = M1.unsafe_vector_ref(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0));
                  var b4434 = M1.unsafe_vector_ref(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1));
                  var c4435 = M1.unsafe_vector_ref(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 2));
                  if (getkey4416 !== false) {
                    var if_res2730 = less_than_p4413(getkey4416(b4434), getkey4416(a4433));
                  } else {
                    var if_res2730 = less_than_p4413(b4434, a4433);
                  }
                  if (if_res2730 !== false) {
                    if (getkey4416 !== false) {
                      var if_res2731 = less_than_p4413(getkey4416(c4435), getkey4416(b4434));
                    } else {
                      var if_res2731 = less_than_p4413(c4435, b4434);
                    }
                    if (if_res2731 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0), c4435);
                      var if_res2734 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 2), a4433);
                    } else {
                      if (getkey4416 !== false) {
                        var if_res2732 = less_than_p4413(getkey4416(c4435), getkey4416(a4433));
                      } else {
                        var if_res2732 = less_than_p4413(c4435, a4433);
                      }
                      if (if_res2732 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0), b4434);
                        M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1), c4435);
                        var if_res2733 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 2), a4433);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0), b4434);
                        var if_res2733 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1), a4433);
                      }
                      var if_res2734 = if_res2733;
                    }
                    var if_res2737 = if_res2734;
                  } else {
                    if (getkey4416 !== false) {
                      var if_res2735 = less_than_p4413(getkey4416(c4435), getkey4416(a4433));
                    } else {
                      var if_res2735 = less_than_p4413(c4435, a4433);
                    }
                    if (if_res2735 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 0), c4435);
                      M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1), a4433);
                      var if_res2736 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 2), b4434);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 1), c4435);
                      var if_res2736 = M1.unsafe_vector_set_bang_(dst_vec4419, M1.unsafe_fx_plus_(dst_start4420, 2), b4434);
                    }
                    var if_res2737 = if_res2736;
                  }
                  var if_res2738 = if_res2737;
                }
                var if_res2739 = if_res2738;
              }
              var if_res2740 = if_res2739;
            } else {
              var work_vec4436 = M0.make_vector(n4418 + M0.ceiling(n4418 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4436, 0, vec4412, start4414, end4415);
              generic_sort_by_key4222(work_vec4436, less_than_p4413, n4418, getkey4416);
              var if_res2740 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4419, dst_start4420, work_vec4436, 0, n4418);
            }
            var if_res2741 = if_res2740;
          }
          var if_res2742 = if_res2741;
        }
        var if_res2743 = if_res2742;
      }
      if_res2743;
      if (false !== false) {
        var if_res2744 = dst_vec4419;
      } else {
        var if_res2744 = M0.rvoid();
      }
      var if_res2745 = if_res2744;
    } else {
      var if_res2745 = vector_sort_bang_(vec4412, less_than_p4413, start4414, end4415);
    }
    return if_res2745;
  };
  var let_result2853 = M0.values(temp2852, temp2800, $rjs_core.attachProcedureArity(function() {
    var fixed_lam2694 = {
      '4': cl2692,
      '6': cl2693
    }[arguments.length];
    if (fixed_lam2694 !== undefined) {
      return fixed_lam2694.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4, 6]));
  var sort = let_result2853.getAt(0);
  var vector_sort = let_result2853.getAt(1);
  var vector_sort_bang_ = let_result2853.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get vector_sort_bang_() {
      return vector_sort_bang_;
    },
    get vector_sort() {
      return vector_sort;
    },
    get sort() {
      return sort;
    }
  };
})();
var $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/reverse.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  if (M0.eval_jit_enabled() !== false) {
    var reverse2107 = function(l2108) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.list_p(l2108) !== false) {
        var if_res1366 = M0.rvoid();
      } else {
        var if_res1366 = M0.raise_argument_error($rjs_core.Symbol.make("reverse"), $rjs_core.UString.makeInternedImmutable("list?"), l2108);
      }
      if_res1366;
      var loop2109 = function(a2110, l2111) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l2111) !== false) {
          var if_res1367 = a2110;
        } else {
          var if_res1367 = loop2109(M0.cons(M0.car(l2111), a2110), M0.cdr(l2111));
        }
        return if_res1367;
      };
      return loop2109(M0.rnull, l2108);
    };
    var if_res1368 = reverse2107;
  } else {
    var if_res1368 = M0.reverse;
  }
  var alt_reverse = if_res1368;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get alt_reverse() {
      return alt_reverse;
    }
  };
})();
var $__collects_47_racket_47_private_47_for_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/for.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_flfxnum_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1657 = M2.make_struct_type($rjs_core.Symbol.make("sequence"), false, 1, 0, false);
  var struct_do_sequence = let_result1657.getAt(0);
  var make_do_sequence = let_result1657.getAt(1);
  var do_sequence_p = let_result1657.getAt(2);
  var do_sequence_ref = let_result1657.getAt(3);
  var do_sequence_set_bang_ = let_result1657.getAt(4);
  var let_result1666 = M2.make_struct_type_property($rjs_core.Symbol.make("stream"), function(v2512, si2513) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.vector_p(v2512) !== false) {
      if (M2.__eq_(3, M2.vector_length(v2512)) !== false) {
        if (M2.procedure_p(M2.vector_ref(v2512, 0)) !== false) {
          if (M2.procedure_arity_includes_p(M2.vector_ref(v2512, 0), 1) !== false) {
            if (M2.procedure_p(M2.vector_ref(v2512, 1)) !== false) {
              if (M2.procedure_arity_includes_p(M2.vector_ref(v2512, 1), 1) !== false) {
                if (M2.procedure_p(M2.vector_ref(v2512, 2)) !== false) {
                  var if_res1658 = M2.procedure_arity_includes_p(M2.vector_ref(v2512, 2), 1);
                } else {
                  var if_res1658 = false;
                }
                var if_res1659 = if_res1658;
              } else {
                var if_res1659 = false;
              }
              var if_res1660 = if_res1659;
            } else {
              var if_res1660 = false;
            }
            var if_res1661 = if_res1660;
          } else {
            var if_res1661 = false;
          }
          var if_res1662 = if_res1661;
        } else {
          var if_res1662 = false;
        }
        var if_res1663 = if_res1662;
      } else {
        var if_res1663 = false;
      }
      var if_res1664 = if_res1663;
    } else {
      var if_res1664 = false;
    }
    if (if_res1664 !== false) {
      var if_res1665 = M2.rvoid();
    } else {
      var if_res1665 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:stream"), M2.string_append($rjs_core.UString.makeInternedImmutable("(vector/c (procedure-arity-includes/c 1)\n"), $rjs_core.UString.makeInternedImmutable("          (procedure-arity-includes/c 1)\n"), $rjs_core.UString.makeInternedImmutable("          (procedure-arity-includes/c 1))")), v2512);
    }
    if_res1665;
    return M2.vector__gt_immutable_vector(v2512);
  });
  var prop_stream = let_result1666.getAt(0);
  var stream_via_prop_p = let_result1666.getAt(1);
  var stream_ref = let_result1666.getAt(2);
  var let_result1669 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2514, si2515) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2514) !== false) {
      var if_res1667 = M2.procedure_arity_includes_p(v2514, 1);
    } else {
      var if_res1667 = false;
    }
    if (if_res1667 !== false) {
      var if_res1668 = M2.rvoid();
    } else {
      var if_res1668 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:sequence"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), v2514);
    }
    if_res1668;
    return v2514;
  });
  var prop_gen_sequence = let_result1669.getAt(0);
  var sequence_via_prop_p = let_result1669.getAt(1);
  var sequence_ref = let_result1669.getAt(2);
  var let_result1673 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2516, sinfo2517) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2516) !== false) {
      var if_res1670 = M2.procedure_arity_includes_p(v2516, 1);
    } else {
      var if_res1670 = false;
    }
    if (if_res1670 !== false) {
      var if_res1671 = M2.rvoid();
    } else {
      var if_res1671 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-property-guard"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), v2516);
    }
    if_res1671;
    return function(self2518) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var s2519 = v2516(self2518);
      if (sequence_p(s2519) !== false) {
        var if_res1672 = M2.rvoid();
      } else {
        var if_res1672 = M2.raise_mismatch_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("procedure (value of prop:sequence) produced a non-sequence: "), s2519);
      }
      if_res1672;
      return s2519;
    };
  });
  var prop_sequence = let_result1673.getAt(0);
  var __sequence_p = let_result1673.getAt(1);
  var __sequence_ref = let_result1673.getAt(2);
  var stream_p = function(v2520) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2521 = M2.list_p(v2520);
    if (or_part2521 !== false) {
      var if_res1674 = or_part2521;
    } else {
      var if_res1674 = stream_via_prop_p(v2520);
    }
    return if_res1674;
  };
  var unsafe_stream_not_empty_p = function(v2522) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.null_p(v2522) !== false) {
      var if_res1676 = false;
    } else {
      var or_part2523 = M2.pair_p(v2522);
      if (or_part2523 !== false) {
        var if_res1675 = or_part2523;
      } else {
        var if_res1675 = M2.not(M5.unsafe_vector_ref(stream_ref(v2522), 0)(v2522));
      }
      var if_res1676 = if_res1675;
    }
    return if_res1676;
  };
  var stream_empty_p = function(v2524) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2525 = M2.null_p(v2524);
    if (or_part2525 !== false) {
      var if_res1679 = or_part2525;
    } else {
      if (stream_p(v2524) !== false) {
        if (M2.pair_p(v2524) !== false) {
          var if_res1677 = false;
        } else {
          var if_res1677 = M5.unsafe_vector_ref(stream_ref(v2524), 0)(v2524);
        }
        var if_res1678 = if_res1677;
      } else {
        var if_res1678 = M2.raise_argument_error($rjs_core.Symbol.make("stream-empty?"), $rjs_core.UString.makeInternedImmutable("stream?"), v2524);
      }
      var if_res1679 = if_res1678;
    }
    return if_res1679;
  };
  var unsafe_stream_first = function(v2526) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2526) !== false) {
      var if_res1680 = M2.car(v2526);
    } else {
      var if_res1680 = M5.unsafe_vector_ref(stream_ref(v2526), 1)(v2526);
    }
    return if_res1680;
  };
  var stream_first = function(v2527) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2527) !== false) {
      var if_res1681 = M2.not(stream_empty_p(v2527));
    } else {
      var if_res1681 = false;
    }
    if (if_res1681 !== false) {
      var if_res1682 = unsafe_stream_first(v2527);
    } else {
      var if_res1682 = M2.raise_argument_error($rjs_core.Symbol.make("stream-first"), $rjs_core.UString.makeInternedImmutable("(and/c stream? (not/c stream-empty?))"), v2527);
    }
    return if_res1682;
  };
  var unsafe_stream_rest = function(v2528) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2528) !== false) {
      var if_res1684 = M2.cdr(v2528);
    } else {
      var r2529 = M5.unsafe_vector_ref(stream_ref(v2528), 2)(v2528);
      if (stream_p(r2529) !== false) {
        var if_res1683 = M2.rvoid();
      } else {
        var if_res1683 = M2.raise_mismatch_error($rjs_core.Symbol.make("stream-rest-guard"), $rjs_core.UString.makeInternedImmutable("result is not a stream: "), r2529);
      }
      if_res1683;
      var if_res1684 = r2529;
    }
    return if_res1684;
  };
  var stream_rest = function(v2530) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2530) !== false) {
      var if_res1685 = M2.not(stream_empty_p(v2530));
    } else {
      var if_res1685 = false;
    }
    if (if_res1685 !== false) {
      var if_res1686 = unsafe_stream_rest(v2530);
    } else {
      var if_res1686 = M2.raise_argument_error($rjs_core.Symbol.make("stream-rest"), $rjs_core.UString.makeInternedImmutable("(and/c stream? (not/c stream-empty?))"), v2530);
    }
    return if_res1686;
  };
  var sequence_p = function(v2531) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2532 = M2.exact_nonnegative_integer_p(v2531);
    if (or_part2532 !== false) {
      var if_res1699 = or_part2532;
    } else {
      var or_part2533 = do_sequence_p(v2531);
      if (or_part2533 !== false) {
        var if_res1698 = or_part2533;
      } else {
        var or_part2534 = sequence_via_prop_p(v2531);
        if (or_part2534 !== false) {
          var if_res1697 = or_part2534;
        } else {
          var or_part2535 = stream_p(v2531);
          if (or_part2535 !== false) {
            var if_res1696 = or_part2535;
          } else {
            var or_part2536 = M2.mpair_p(v2531);
            if (or_part2536 !== false) {
              var if_res1695 = or_part2536;
            } else {
              var or_part2537 = M2.vector_p(v2531);
              if (or_part2537 !== false) {
                var if_res1694 = or_part2537;
              } else {
                var or_part2538 = M1.__rjs_quoted__.flvector_p(v2531);
                if (or_part2538 !== false) {
                  var if_res1693 = or_part2538;
                } else {
                  var or_part2539 = M1.__rjs_quoted__.fxvector_p(v2531);
                  if (or_part2539 !== false) {
                    var if_res1692 = or_part2539;
                  } else {
                    var or_part2540 = M2.string_p(v2531);
                    if (or_part2540 !== false) {
                      var if_res1691 = or_part2540;
                    } else {
                      var or_part2541 = M2.bytes_p(v2531);
                      if (or_part2541 !== false) {
                        var if_res1690 = or_part2541;
                      } else {
                        var or_part2542 = M2.input_port_p(v2531);
                        if (or_part2542 !== false) {
                          var if_res1689 = or_part2542;
                        } else {
                          var or_part2543 = M2.hash_p(v2531);
                          if (or_part2543 !== false) {
                            var if_res1688 = or_part2543;
                          } else {
                            if (__sequence_p(v2531) !== false) {
                              var if_res1687 = M2.not(M2.struct_type_p(v2531));
                            } else {
                              var if_res1687 = false;
                            }
                            var if_res1688 = if_res1687;
                          }
                          var if_res1689 = if_res1688;
                        }
                        var if_res1690 = if_res1689;
                      }
                      var if_res1691 = if_res1690;
                    }
                    var if_res1692 = if_res1691;
                  }
                  var if_res1693 = if_res1692;
                }
                var if_res1694 = if_res1693;
              }
              var if_res1695 = if_res1694;
            }
            var if_res1696 = if_res1695;
          }
          var if_res1697 = if_res1696;
        }
        var if_res1698 = if_res1697;
      }
      var if_res1699 = if_res1698;
    }
    return if_res1699;
  };
  var make_sequence = function(who2544, v2545) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(v2545) !== false) {
      var if_res1718 = __integer_gen(v2545);
    } else {
      if (do_sequence_p(v2545) !== false) {
        var cl1700 = function(pos__gt_vals2546, pos_next2547, init2548, pos_cont_p2549, val_cont_p2550, all_cont_p2551) {
          if (arguments.length !== 6) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2546, false, pos_next2547, init2548, pos_cont_p2549, val_cont_p2550, all_cont_p2551);
        };
        var cl1701 = function(pos__gt_vals2552, pre_pos_next2553, pos_next2554, init2555, pos_cont_p2556, val_cont_p2557, all_cont_p2558) {
          if (arguments.length !== 7) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2552, pre_pos_next2553, pos_next2554, init2555, pos_cont_p2556, val_cont_p2557, all_cont_p2558);
        };
        var if_res1717 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return do_sequence_ref(v2545, 0)();
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1702 = {
            '6': cl1700,
            '7': cl1701
          }[arguments.length];
          if (fixed_lam1702 !== undefined) {
            return fixed_lam1702.apply(null, arguments);
          } else {
            return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
        }, [6, 7]));
      } else {
        if (M2.mpair_p(v2545) !== false) {
          var if_res1716 = __mlist_gen(v2545);
        } else {
          if (M2.list_p(v2545) !== false) {
            var if_res1715 = __list_gen(v2545);
          } else {
            if (M2.vector_p(v2545) !== false) {
              var if_res1714 = __vector_gen(v2545, 0, M2.vector_length(v2545), 1);
            } else {
              if (M1.__rjs_quoted__.flvector_p(v2545) !== false) {
                var if_res1713 = __flvector_gen(v2545, 0, M1.__rjs_quoted__.flvector_length(v2545), 1);
              } else {
                if (M1.__rjs_quoted__.fxvector_p(v2545) !== false) {
                  var if_res1712 = __fxvector_gen(v2545, 0, M1.__rjs_quoted__.fxvector_length(v2545), 1);
                } else {
                  if (M2.string_p(v2545) !== false) {
                    var if_res1711 = __string_gen(v2545, 0, M2.string_length(v2545), 1);
                  } else {
                    if (M2.bytes_p(v2545) !== false) {
                      var if_res1710 = __bytes_gen(v2545, 0, M2.__rjs_quoted__.bytes_length(v2545), 1);
                    } else {
                      if (M2.input_port_p(v2545) !== false) {
                        var if_res1709 = __input_port_gen(v2545);
                      } else {
                        if (M2.hash_p(v2545) !== false) {
                          var if_res1708 = __hash_gen(v2545, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
                        } else {
                          if (sequence_via_prop_p(v2545) !== false) {
                            var if_res1707 = sequence_ref(v2545)(v2545);
                          } else {
                            if (__sequence_p(v2545) !== false) {
                              var if_res1706 = make_sequence(who2544, __sequence_ref(v2545)(v2545));
                            } else {
                              if (stream_p(v2545) !== false) {
                                var if_res1705 = __stream_gen(v2545);
                              } else {
                                var temp1704 = $rjs_core.UString.makeInternedImmutable("for: expected a sequence for ~a, got something else: ~v");
                                if (M2.__eq_(1, M2.length(who2544)) !== false) {
                                  var if_res1703 = M2.car(who2544);
                                } else {
                                  var if_res1703 = who2544;
                                }
                                var if_res1705 = M2.raise(M2.__rjs_quoted__.exn_fail_contract(M2.format(temp1704, if_res1703, v2545), M2.current_continuation_marks()));
                              }
                              var if_res1706 = if_res1705;
                            }
                            var if_res1707 = if_res1706;
                          }
                          var if_res1708 = if_res1707;
                        }
                        var if_res1709 = if_res1708;
                      }
                      var if_res1710 = if_res1709;
                    }
                    var if_res1711 = if_res1710;
                  }
                  var if_res1712 = if_res1711;
                }
                var if_res1713 = if_res1712;
              }
              var if_res1714 = if_res1713;
            }
            var if_res1715 = if_res1714;
          }
          var if_res1716 = if_res1715;
        }
        var if_res1717 = if_res1716;
      }
      var if_res1718 = if_res1717;
    }
    return if_res1718;
  };
  var let_result1720 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2559) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cont_p2560 = range_ref(v2559, 2);
    if (cont_p2560 !== false) {
      var if_res1719 = M2.not(cont_p2560(range_ref(v2559, 0)));
    } else {
      var if_res1719 = false;
    }
    return if_res1719;
  }, function(v2561) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range_ref(v2561, 0);
  }, function(v2562) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_range(range_ref(v2562, 1)(range_ref(v2562, 0)), range_ref(v2562, 1), range_ref(v2562, 2));
  })), M2.cons(prop_gen_sequence, function(v2563) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, range_ref(v2563, 1), range_ref(v2563, 0), range_ref(v2563, 2), false, false);
  })));
  var struct_range = let_result1720.getAt(0);
  var make_range = let_result1720.getAt(1);
  var range_p = let_result1720.getAt(2);
  var range_ref = let_result1720.getAt(3);
  var range_set_bang_ = let_result1720.getAt(4);
  var cl1721 = function(b2564) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(0, b2564, 1);
  };
  var cl1722 = function(a2565, b2566) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(a2565, b2566, 1);
  };
  var cl1723 = function(a2567, b2568, step2569) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.real_p(a2567) !== false) {
      var if_res1725 = M2.rvoid();
    } else {
      var if_res1725 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), a2567);
    }
    if_res1725;
    if (M2.real_p(b2568) !== false) {
      var if_res1726 = M2.rvoid();
    } else {
      var if_res1726 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), b2568);
    }
    if_res1726;
    if (M2.real_p(step2569) !== false) {
      var if_res1727 = M2.rvoid();
    } else {
      var if_res1727 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), step2569);
    }
    if_res1727;
    if (M2.__gt__eq_(step2569, 0) !== false) {
      var if_res1728 = function(x2571) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(x2571, b2568);
      };
    } else {
      var if_res1728 = function(x2572) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(x2572, b2568);
      };
    }
    var cont_p2570 = if_res1728;
    var inc2573 = function(x2574) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return x2574 + step2569;
    };
    return make_range(a2567, inc2573, cont_p2570);
  };
  var in_range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1724 = {
      '1': cl1721,
      '2': cl1722,
      '3': cl1723
    }[arguments.length];
    if (fixed_lam1724 !== undefined) {
      return fixed_lam1724.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var __integer_gen = function(v2575) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, M2.add1, 0, function(i2576) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__lt_(i2576, v2575);
    }, false, false);
  };
  var cl1729 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_naturals(0);
  };
  var cl1730 = function(n2577) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.integer_p(n2577) !== false) {
      if (M2.__rjs_quoted__.exact_p(n2577) !== false) {
        var if_res1732 = M2.__gt__eq_(n2577, 0);
      } else {
        var if_res1732 = false;
      }
      var if_res1733 = if_res1732;
    } else {
      var if_res1733 = false;
    }
    if (if_res1733 !== false) {
      var if_res1734 = M2.rvoid();
    } else {
      var if_res1734 = M2.raise_argument_error($rjs_core.Symbol.make("in-naturals"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2577);
    }
    if_res1734;
    return make_range(n2577, M2.add1, false);
  };
  var in_naturals = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1731 = {
      '0': cl1729,
      '1': cl1730
    }[arguments.length];
    if (fixed_lam1731 !== undefined) {
      return fixed_lam1731.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var let_result1735 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 1, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2578) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.pair_p(list_stream_ref(v2578, 0)));
  }, function(v2579) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.car(list_stream_ref(v2579, 0));
  }, function(v2580) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_list_stream(M2.cdr(list_stream_ref(v2580, 0)));
  })), M2.cons(prop_gen_sequence, function(v2581) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, list_stream_ref(v2581, 0), M2.pair_p, false, false);
  })));
  var struct_list_stream = let_result1735.getAt(0);
  var make_list_stream = let_result1735.getAt(1);
  var list_stream_p = let_result1735.getAt(2);
  var list_stream_ref = let_result1735.getAt(3);
  var list_stream_set_bang_ = let_result1735.getAt(4);
  var in_list = function(l2582) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l2582) !== false) {
      var if_res1736 = M2.rvoid();
    } else {
      var if_res1736 = M2.raise_argument_error($rjs_core.Symbol.make("in-list"), $rjs_core.UString.makeInternedImmutable("list?"), l2582);
    }
    if_res1736;
    return make_list_stream(l2582);
  };
  var __list_gen = function(l2583) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, l2583, M2.pair_p, false, false);
  };
  var in_mlist = function(l2584) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.mpair_p(l2584) !== false) {
      var if_res1737 = M2.rvoid();
    } else {
      var if_res1737 = M2.raise_argument_error($rjs_core.Symbol.make("in-mlist"), $rjs_core.UString.makeInternedImmutable("mpair?"), l2584);
    }
    if_res1737;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __mlist_gen(l2584);
    });
  };
  var __mlist_gen = function(l2585) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.mcar, false, M2.mcdr, l2585, M2.mpair_p, false, false);
  };
  var in_input_port_bytes = function(p2586) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2586) !== false) {
      var if_res1738 = M2.rvoid();
    } else {
      var if_res1738 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-bytes"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2586);
    }
    if_res1738;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __input_port_gen(p2586);
    });
  };
  var __input_port_gen = function(p2587) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.__rjs_quoted__.read_byte, false, M2.values, p2587, false, function(x2588) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.not(M2.__rjs_quoted__.eof_object_p(x2588));
    }, false);
  };
  var in_input_port_chars = function(p2589) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2589) !== false) {
      var if_res1739 = M2.rvoid();
    } else {
      var if_res1739 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-chars"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2589);
    }
    if_res1739;
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_char(p2589);
    }, M2.__rjs_quoted__.eof);
  };
  var check_in_port = function(r2590, p2591) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(r2590) !== false) {
      var if_res1740 = M2.procedure_arity_includes_p(r2590, 1);
    } else {
      var if_res1740 = false;
    }
    if (if_res1740 !== false) {
      var if_res1741 = M2.rvoid();
    } else {
      var if_res1741 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), r2590);
    }
    if_res1741;
    if (M2.input_port_p(p2591) !== false) {
      var if_res1742 = M2.rvoid();
    } else {
      var if_res1742 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2591);
    }
    return if_res1742;
  };
  var cl1743 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(M2.__rjs_quoted__.read, M2.__rjs_quoted__.current_input_port());
  };
  var cl1744 = function(r2592) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(r2592, M2.__rjs_quoted__.current_input_port());
  };
  var cl1745 = function(r2593, p2594) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_port(r2593, p2594);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return r2593(p2594);
    }, M2.__rjs_quoted__.eof);
  };
  var in_port = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1746 = {
      '0': cl1743,
      '1': cl1744,
      '2': cl1745
    }[arguments.length];
    if (fixed_lam1746 !== undefined) {
      return fixed_lam1746.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_lines = function(p2595, mode2596) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2595) !== false) {
      var if_res1747 = M2.rvoid();
    } else {
      var if_res1747 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2595);
    }
    if_res1747;
    if (M0.memq(mode2596, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1748 = M2.rvoid();
    } else {
      var if_res1748 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.makeInternedImmutable("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2596);
    }
    return if_res1748;
  };
  var cl1749 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1750 = function(p2597) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(p2597, $rjs_core.Symbol.make("any"));
  };
  var cl1751 = function(p2598, mode2599) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_lines(p2598, mode2599);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_line(p2598, mode2599);
    }, M2.__rjs_quoted__.eof);
  };
  var in_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1752 = {
      '0': cl1749,
      '1': cl1750,
      '2': cl1751
    }[arguments.length];
    if (fixed_lam1752 !== undefined) {
      return fixed_lam1752.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_bytes_lines = function(p2600, mode2601) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2600) !== false) {
      var if_res1753 = M2.rvoid();
    } else {
      var if_res1753 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.makeInternedImmutable("input-port"), p2600);
    }
    if_res1753;
    if (M0.memq(mode2601, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1754 = M2.rvoid();
    } else {
      var if_res1754 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.makeInternedImmutable("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2601);
    }
    return if_res1754;
  };
  var cl1755 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1756 = function(p2602) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(p2602, $rjs_core.Symbol.make("any"));
  };
  var cl1757 = function(p2603, mode2604) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_bytes_lines(p2603, mode2604);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_bytes_line(p2603, mode2604);
    }, M2.__rjs_quoted__.eof);
  };
  var in_bytes_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1758 = {
      '0': cl1755,
      '1': cl1756,
      '2': cl1757
    }[arguments.length];
    if (fixed_lam1758 !== undefined) {
      return fixed_lam1758.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var in_stream = function(l2605) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(l2605) !== false) {
      var if_res1759 = M2.rvoid();
    } else {
      var if_res1759 = M2.raise_argument_error($rjs_core.Symbol.make("in-stream"), $rjs_core.UString.makeInternedImmutable("stream?"), l2605);
    }
    if_res1759;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __stream_gen(l2605);
    });
  };
  var __stream_gen = function(l2606) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(unsafe_stream_first, unsafe_stream_rest, M2.values, l2606, unsafe_stream_not_empty_p, false, false);
  };
  var __hash_gen = function(ht2607, __get2608, __first2609, __next2610) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(function(pos2611) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __get2608(ht2607, pos2611);
    }, false, function(pos2612) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __next2610(ht2607, pos2612);
    }, __first2609(ht2607), function(pos2613) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return pos2613;
    }, false, false);
  };
  var mutable_p = function(ht2614) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.immutable_p(ht2614));
  };
  var not_weak_p = function(ht2615) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.__rjs_quoted__.hash_weak_p(ht2615));
  };
  var default_in_hash = function(ht2616) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2617) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2617);
    })(ht2616) !== false) {
      var if_res1760 = M2.rvoid();
    } else {
      var if_res1760 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2616);
    }
    if_res1760;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2616, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash = function(ht2618) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2619) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2619) !== false) {
        if (mutable_p(ht2619) !== false) {
          var if_res1761 = not_weak_p(ht2619);
        } else {
          var if_res1761 = false;
        }
        var if_res1762 = if_res1761;
      } else {
        var if_res1762 = false;
      }
      return if_res1762;
    })(ht2618) !== false) {
      var if_res1763 = M2.rvoid();
    } else {
      var if_res1763 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2618);
    }
    if_res1763;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2618, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash = function(ht2620) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2621) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2621) !== false) {
        var if_res1764 = M2.immutable_p(ht2621);
      } else {
        var if_res1764 = false;
      }
      return if_res1764;
    })(ht2620) !== false) {
      var if_res1765 = M2.rvoid();
    } else {
      var if_res1765 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2620);
    }
    if_res1765;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2620, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash = function(ht2622) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2623) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2623) !== false) {
        var if_res1766 = M2.__rjs_quoted__.hash_weak_p(ht2623);
      } else {
        var if_res1766 = false;
      }
      return if_res1766;
    })(ht2622) !== false) {
      var if_res1767 = M2.rvoid();
    } else {
      var if_res1767 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2622);
    }
    if_res1767;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2622, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_keys = function(ht2624) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2625) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2625);
    })(ht2624) !== false) {
      var if_res1768 = M2.rvoid();
    } else {
      var if_res1768 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-keys"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2624);
    }
    if_res1768;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2624, M2.__rjs_quoted__.hash_iterate_key, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_keys = function(ht2626) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2627) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2627) !== false) {
        if (mutable_p(ht2627) !== false) {
          var if_res1769 = not_weak_p(ht2627);
        } else {
          var if_res1769 = false;
        }
        var if_res1770 = if_res1769;
      } else {
        var if_res1770 = false;
      }
      return if_res1770;
    })(ht2626) !== false) {
      var if_res1771 = M2.rvoid();
    } else {
      var if_res1771 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2626);
    }
    if_res1771;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2626, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_keys = function(ht2628) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2629) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2629) !== false) {
        var if_res1772 = M2.immutable_p(ht2629);
      } else {
        var if_res1772 = false;
      }
      return if_res1772;
    })(ht2628) !== false) {
      var if_res1773 = M2.rvoid();
    } else {
      var if_res1773 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2628);
    }
    if_res1773;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2628, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_keys = function(ht2630) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2631) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2631) !== false) {
        var if_res1774 = M2.__rjs_quoted__.hash_weak_p(ht2631);
      } else {
        var if_res1774 = false;
      }
      return if_res1774;
    })(ht2630) !== false) {
      var if_res1775 = M2.rvoid();
    } else {
      var if_res1775 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2630);
    }
    if_res1775;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2630, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_values = function(ht2632) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2633) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2633);
    })(ht2632) !== false) {
      var if_res1776 = M2.rvoid();
    } else {
      var if_res1776 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-values"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2632);
    }
    if_res1776;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2632, M2.__rjs_quoted__.hash_iterate_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_values = function(ht2634) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2635) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2635) !== false) {
        if (mutable_p(ht2635) !== false) {
          var if_res1777 = not_weak_p(ht2635);
        } else {
          var if_res1777 = false;
        }
        var if_res1778 = if_res1777;
      } else {
        var if_res1778 = false;
      }
      return if_res1778;
    })(ht2634) !== false) {
      var if_res1779 = M2.rvoid();
    } else {
      var if_res1779 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2634);
    }
    if_res1779;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2634, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_values = function(ht2636) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2637) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2637) !== false) {
        var if_res1780 = M2.immutable_p(ht2637);
      } else {
        var if_res1780 = false;
      }
      return if_res1780;
    })(ht2636) !== false) {
      var if_res1781 = M2.rvoid();
    } else {
      var if_res1781 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2636);
    }
    if_res1781;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2636, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_values = function(ht2638) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2639) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2639) !== false) {
        var if_res1782 = M2.__rjs_quoted__.hash_weak_p(ht2639);
      } else {
        var if_res1782 = false;
      }
      return if_res1782;
    })(ht2638) !== false) {
      var if_res1783 = M2.rvoid();
    } else {
      var if_res1783 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2638);
    }
    if_res1783;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2638, M5.__rjs_quoted__.unsafe_weak_hash_iterate_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_pairs = function(ht2640) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2641) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2641);
    })(ht2640) !== false) {
      var if_res1784 = M2.rvoid();
    } else {
      var if_res1784 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-pairs"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2640);
    }
    if_res1784;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2640, M2.__rjs_quoted__.hash_iterate_pair, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_pairs = function(ht2642) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2643) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2643) !== false) {
        if (mutable_p(ht2643) !== false) {
          var if_res1785 = not_weak_p(ht2643);
        } else {
          var if_res1785 = false;
        }
        var if_res1786 = if_res1785;
      } else {
        var if_res1786 = false;
      }
      return if_res1786;
    })(ht2642) !== false) {
      var if_res1787 = M2.rvoid();
    } else {
      var if_res1787 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2642);
    }
    if_res1787;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2642, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_pairs = function(ht2644) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2645) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2645) !== false) {
        var if_res1788 = M2.immutable_p(ht2645);
      } else {
        var if_res1788 = false;
      }
      return if_res1788;
    })(ht2644) !== false) {
      var if_res1789 = M2.rvoid();
    } else {
      var if_res1789 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2644);
    }
    if_res1789;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2644, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_pairs = function(ht2646) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2647) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2647) !== false) {
        var if_res1790 = M2.__rjs_quoted__.hash_weak_p(ht2647);
      } else {
        var if_res1790 = false;
      }
      return if_res1790;
    })(ht2646) !== false) {
      var if_res1791 = M2.rvoid();
    } else {
      var if_res1791 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2646);
    }
    if_res1791;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2646, M5.__rjs_quoted__.unsafe_weak_hash_iterate_pair, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var check_ranges = function(who2648, vec2649, start2650, stop2651, step2652, len2653) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(start2650) !== false) {
      var or_part2654 = M2.__lt_(start2650, len2653);
      if (or_part2654 !== false) {
        var if_res1792 = or_part2654;
      } else {
        var if_res1792 = M2.__eq_(len2653, start2650, stop2651);
      }
      var if_res1793 = if_res1792;
    } else {
      var if_res1793 = false;
    }
    if (if_res1793 !== false) {
      var if_res1794 = M2.rvoid();
    } else {
      var if_res1794 = M2.__rjs_quoted__.raise_range_error(who2648, $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable("starting "), start2650, vec2649, 0, M2.sub1(len2653));
    }
    if_res1794;
    if (M2.exact_integer_p(stop2651) !== false) {
      if (M2.__lt__eq_(-1, stop2651) !== false) {
        var if_res1795 = M2.__lt__eq_(stop2651, len2653);
      } else {
        var if_res1795 = false;
      }
      var if_res1796 = if_res1795;
    } else {
      var if_res1796 = false;
    }
    if (if_res1796 !== false) {
      var if_res1797 = M2.rvoid();
    } else {
      var if_res1797 = M2.__rjs_quoted__.raise_range_error(who2648, $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable("stopping "), stop2651, vec2649, -1, len2653);
    }
    if_res1797;
    if (M2.exact_integer_p(step2652) !== false) {
      var if_res1798 = M2.not(M2.zero_p(step2652));
    } else {
      var if_res1798 = false;
    }
    if (if_res1798 !== false) {
      var if_res1799 = M2.rvoid();
    } else {
      var if_res1799 = M2.raise_argument_error(who2648, $rjs_core.UString.makeInternedImmutable("(and/c exact-integer? (not/c zero?))"), step2652);
    }
    if_res1799;
    if (M2.__lt_(start2650, stop2651) !== false) {
      var if_res1800 = M2.__lt_(step2652, 0);
    } else {
      var if_res1800 = false;
    }
    if (if_res1800 !== false) {
      var if_res1801 = M2.__rjs_quoted__.raise_arguments_error(who2648, $rjs_core.UString.makeInternedImmutable("starting index less than stopping index, but given a negative step"), $rjs_core.UString.makeInternedImmutable("starting index"), start2650, $rjs_core.UString.makeInternedImmutable("stopping index"), stop2651, $rjs_core.UString.makeInternedImmutable("step"), step2652);
    } else {
      var if_res1801 = M2.rvoid();
    }
    if_res1801;
    if (M2.__lt_(stop2651, start2650) !== false) {
      var if_res1802 = M2.__gt_(step2652, 0);
    } else {
      var if_res1802 = false;
    }
    if (if_res1802 !== false) {
      var if_res1803 = M2.__rjs_quoted__.raise_arguments_error(who2648, $rjs_core.UString.makeInternedImmutable("starting index more than stopping index, but given a positive step"), $rjs_core.UString.makeInternedImmutable("starting index"), start2650, $rjs_core.UString.makeInternedImmutable("stopping index"), stop2651, $rjs_core.UString.makeInternedImmutable("step"), step2652);
    } else {
      var if_res1803 = M2.rvoid();
    }
    return if_res1803;
  };
  var normalise_inputs = function(who2655, type_name2656, vector_p2657, unsafe_vector_length2658, vec2659, start2660, stop2661, step2662) {
    if (arguments.length !== 8) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (vector_p2657(vec2659) !== false) {
      var if_res1804 = M2.rvoid();
    } else {
      var if_res1804 = M2.raise_argument_error(who2655, type_name2656, vec2659);
    }
    if_res1804;
    var len2663 = unsafe_vector_length2658(vec2659);
    if (stop2661 !== false) {
      var if_res1805 = stop2661;
    } else {
      var if_res1805 = len2663;
    }
    var stop_times_2664 = if_res1805;
    check_ranges(who2655, vec2659, start2660, stop_times_2664, step2662, len2663);
    return M2.values(vec2659, start2660, stop_times_2664, step2662);
  };
  var __vector_gen = function(v2665, start2666, stop2667, step2668) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2668, 1) !== false) {
      var if_res1807 = M2.add1;
    } else {
      var if_res1807 = function(i2670) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2670 + step2668;
      };
    }
    if (M2.__gt_(step2668, 0) !== false) {
      var if_res1806 = function(i2671) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2671, stop2667);
      };
    } else {
      var if_res1806 = function(i2672) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2672, stop2667);
      };
    }
    return M2.values(function(i2669) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.unsafe_vector_ref(v2665, i2669);
    }, false, if_res1807, start2666, if_res1806, false, false);
  };
  var cl1808 = function(v2673) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2673, 0, false, 1);
  };
  var cl1809 = function(v2674, start2675) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2674, start2675, false, 1);
  };
  var cl1810 = function(v2676, start2677, stop2678) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2676, start2677, stop2678, 1);
  };
  var cl1811 = function(v2679, start2680, stop2681, step2682) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1813 = normalise_inputs($rjs_core.Symbol.make("in-vector"), $rjs_core.UString.makeInternedImmutable("vector"), M2.vector_p, M2.vector_length, v2679, start2680, stop2681, step2682);
    var v2683 = let_result1813.getAt(0);
    var start2684 = let_result1813.getAt(1);
    var stop2685 = let_result1813.getAt(2);
    var step2686 = let_result1813.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __vector_gen(v2683, start2684, stop2685, step2686);
    });
  };
  var in_vector = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1812 = {
      '1': cl1808,
      '2': cl1809,
      '3': cl1810,
      '4': cl1811
    }[arguments.length];
    if (fixed_lam1812 !== undefined) {
      return fixed_lam1812.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __string_gen = function(v2687, start2688, stop2689, step2690) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2690, 1) !== false) {
      var if_res1815 = M2.add1;
    } else {
      var if_res1815 = function(i2692) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2692 + step2690;
      };
    }
    if (M2.__gt_(step2690, 0) !== false) {
      var if_res1814 = function(i2693) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2693, stop2689);
      };
    } else {
      var if_res1814 = function(i2694) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2694, stop2689);
      };
    }
    return M2.values(function(i2691) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.string_ref(v2687, i2691);
    }, false, if_res1815, start2688, if_res1814, false, false);
  };
  var cl1816 = function(v2695) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2695, 0, false, 1);
  };
  var cl1817 = function(v2696, start2697) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2696, start2697, false, 1);
  };
  var cl1818 = function(v2698, start2699, stop2700) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2698, start2699, stop2700, 1);
  };
  var cl1819 = function(v2701, start2702, stop2703, step2704) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1821 = normalise_inputs($rjs_core.Symbol.make("in-string"), $rjs_core.UString.makeInternedImmutable("string"), M2.string_p, M2.string_length, v2701, start2702, stop2703, step2704);
    var v2705 = let_result1821.getAt(0);
    var start2706 = let_result1821.getAt(1);
    var stop2707 = let_result1821.getAt(2);
    var step2708 = let_result1821.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __string_gen(v2705, start2706, stop2707, step2708);
    });
  };
  var in_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1820 = {
      '1': cl1816,
      '2': cl1817,
      '3': cl1818,
      '4': cl1819
    }[arguments.length];
    if (fixed_lam1820 !== undefined) {
      return fixed_lam1820.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __bytes_gen = function(v2709, start2710, stop2711, step2712) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2712, 1) !== false) {
      var if_res1823 = M2.add1;
    } else {
      var if_res1823 = function(i2714) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2714 + step2712;
      };
    }
    if (M2.__gt_(step2712, 0) !== false) {
      var if_res1822 = function(i2715) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2715, stop2711);
      };
    } else {
      var if_res1822 = function(i2716) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2716, stop2711);
      };
    }
    return M2.values(function(i2713) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_bytes_ref(v2709, i2713);
    }, false, if_res1823, start2710, if_res1822, false, false);
  };
  var cl1824 = function(v2717) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2717, 0, false, 1);
  };
  var cl1825 = function(v2718, start2719) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2718, start2719, false, 1);
  };
  var cl1826 = function(v2720, start2721, stop2722) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2720, start2721, stop2722, 1);
  };
  var cl1827 = function(v2723, start2724, stop2725, step2726) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1829 = normalise_inputs($rjs_core.Symbol.make("in-bytes"), $rjs_core.UString.makeInternedImmutable("bytes"), M2.bytes_p, M2.__rjs_quoted__.bytes_length, v2723, start2724, stop2725, step2726);
    var v2727 = let_result1829.getAt(0);
    var start2728 = let_result1829.getAt(1);
    var stop2729 = let_result1829.getAt(2);
    var step2730 = let_result1829.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __bytes_gen(v2727, start2728, stop2729, step2730);
    });
  };
  var in_bytes = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1828 = {
      '1': cl1824,
      '2': cl1825,
      '3': cl1826,
      '4': cl1827
    }[arguments.length];
    if (fixed_lam1828 !== undefined) {
      return fixed_lam1828.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __flvector_gen = function(v2731, start2732, stop2733, step2734) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2734, 1) !== false) {
      var if_res1831 = M2.add1;
    } else {
      var if_res1831 = function(i2736) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2736 + step2734;
      };
    }
    if (M2.__gt_(step2734, 0) !== false) {
      var if_res1830 = function(i2737) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2737, stop2733);
      };
    } else {
      var if_res1830 = function(i2738) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2738, stop2733);
      };
    }
    return M2.values(function(i2735) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_flvector_ref(v2731, i2735);
    }, false, if_res1831, start2732, if_res1830, false, false);
  };
  var __fxvector_gen = function(v2739, start2740, stop2741, step2742) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2742, 1) !== false) {
      var if_res1833 = M2.add1;
    } else {
      var if_res1833 = function(i2744) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2744 + step2742;
      };
    }
    if (M2.__gt_(step2742, 0) !== false) {
      var if_res1832 = function(i2745) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2745, stop2741);
      };
    } else {
      var if_res1832 = function(i2746) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2746, stop2741);
      };
    }
    return M2.values(function(i2743) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_fxvector_ref(v2739, i2743);
    }, false, if_res1833, start2740, if_res1832, false, false);
  };
  var stop_before = function(g2747, pred2748) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2747) !== false) {
      var if_res1834 = M2.rvoid();
    } else {
      var if_res1834 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2747);
    }
    if_res1834;
    if (M2.procedure_p(pred2748) !== false) {
      var if_res1835 = M2.procedure_arity_includes_p(pred2748, 1);
    } else {
      var if_res1835 = false;
    }
    if (if_res1835 !== false) {
      var if_res1836 = M2.rvoid();
    } else {
      var if_res1836 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), pred2748);
    }
    if_res1836;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1837 = make_sequence(false, g2747);
      var pos__gt_val2749 = let_result1837.getAt(0);
      var pre_pos_next2750 = let_result1837.getAt(1);
      var pos_next2751 = let_result1837.getAt(2);
      var init2752 = let_result1837.getAt(3);
      var pos_cont_p2753 = let_result1837.getAt(4);
      var pre_cont_p2754 = let_result1837.getAt(5);
      var post_cont_p2755 = let_result1837.getAt(6);
      var cl1838 = function(val2756) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pre_cont_p2754 !== false) {
          var if_res1842 = pre_cont_p2754(val2756);
        } else {
          var if_res1842 = true;
        }
        if (if_res1842 !== false) {
          var if_res1843 = M2.not(pred2748(val2756));
        } else {
          var if_res1843 = false;
        }
        return if_res1843;
      };
      var cl1839 = $rjs_core.attachProcedureArity(function() {
        for (var vals27571844 = [],
            $__1 = 0; $__1 < arguments.length; $__1++)
          vals27571844[$__1] = arguments[$__1];
        var vals2757 = $rjs_core.Pair.listFromArray(vals27571844);
        if (pre_cont_p2754 !== false) {
          var if_res1845 = M2.apply(pre_cont_p2754, vals2757);
        } else {
          var if_res1845 = true;
        }
        if (if_res1845 !== false) {
          var if_res1846 = M2.not(M2.apply(pred2748, vals2757));
        } else {
          var if_res1846 = false;
        }
        return if_res1846;
      });
      return M2.values(pos__gt_val2749, pre_pos_next2750, pos_next2751, init2752, pos_cont_p2753, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1840 = {'1': cl1838}[arguments.length];
        if (fixed_lam1840 !== undefined) {
          return fixed_lam1840.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1841 = cl1839.apply(null, arguments);
          } else {
            var if_res1841 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1841;
        }
      }, [M2.make_arity_at_least(0)]), post_cont_p2755);
    });
  };
  var stop_after = function(g2758, pred2759) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2758) !== false) {
      var if_res1847 = M2.rvoid();
    } else {
      var if_res1847 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2758);
    }
    if_res1847;
    if (M2.procedure_p(pred2759) !== false) {
      var if_res1848 = M2.procedure_arity_includes_p(pred2759, 1);
    } else {
      var if_res1848 = false;
    }
    if (if_res1848 !== false) {
      var if_res1849 = M2.rvoid();
    } else {
      var if_res1849 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), pred2759);
    }
    if_res1849;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1850 = make_sequence(false, g2758);
      var pos__gt_val2760 = let_result1850.getAt(0);
      var pre_pos_next2761 = let_result1850.getAt(1);
      var pos_next2762 = let_result1850.getAt(2);
      var init2763 = let_result1850.getAt(3);
      var pos_cont_p2764 = let_result1850.getAt(4);
      var pre_cont_p2765 = let_result1850.getAt(5);
      var post_cont_p2766 = let_result1850.getAt(6);
      var cl1851 = function(pos2767, val2768) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (post_cont_p2766 !== false) {
          var if_res1855 = post_cont_p2766(pos2767, val2768);
        } else {
          var if_res1855 = true;
        }
        if (if_res1855 !== false) {
          var if_res1856 = M2.not(pred2759(val2768));
        } else {
          var if_res1856 = false;
        }
        return if_res1856;
      };
      var cl1852 = $rjs_core.attachProcedureArity(function(pos2769) {
        for (var vals27701857 = [],
            $__1 = 1; $__1 < arguments.length; $__1++)
          vals27701857[$__1 - 1] = arguments[$__1];
        if (arguments.length < 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var vals2770 = $rjs_core.Pair.listFromArray(vals27701857);
        if (post_cont_p2766 !== false) {
          var if_res1858 = M2.apply(post_cont_p2766, pos2769, vals2770);
        } else {
          var if_res1858 = true;
        }
        if (if_res1858 !== false) {
          var if_res1859 = M2.not(M2.apply(pred2759, vals2770));
        } else {
          var if_res1859 = false;
        }
        return if_res1859;
      });
      return M2.values(pos__gt_val2760, pre_pos_next2761, pos_next2762, init2763, pos_cont_p2764, pre_cont_p2765, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1853 = {'2': cl1851}[arguments.length];
        if (fixed_lam1853 !== undefined) {
          return fixed_lam1853.apply(null, arguments);
        } else {
          if (M2.__gt__eq_(cl1852.length, 1) !== false) {
            var if_res1854 = cl1852.apply(null, arguments);
          } else {
            var if_res1854 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1854;
        }
      }, [M2.make_arity_at_least(1)]));
    });
  };
  var in_indexed = function(g2771) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2771) !== false) {
      var if_res1860 = M2.rvoid();
    } else {
      var if_res1860 = M2.raise_argument_error($rjs_core.Symbol.make("in-indexed"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2771);
    }
    if_res1860;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1861 = make_sequence(false, g2771);
      var pos__gt_val2772 = let_result1861.getAt(0);
      var pre_pos_next2773 = let_result1861.getAt(1);
      var pos_next2774 = let_result1861.getAt(2);
      var init2775 = let_result1861.getAt(3);
      var pos_cont_p2776 = let_result1861.getAt(4);
      var pre_cont_p2777 = let_result1861.getAt(5);
      var post_cont_p2778 = let_result1861.getAt(6);
      if (pre_pos_next2773 !== false) {
        var if_res1866 = function(pos2780) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.cons(pre_pos_next2773(M2.car(pos2780)), M2.cdr(pos2780));
        };
      } else {
        var if_res1866 = false;
      }
      var temp1865 = M2.cons(init2775, 0);
      if (pos_cont_p2776 !== false) {
        var if_res1864 = function(pos2782) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos_cont_p2776(M2.car(pos2782));
        };
      } else {
        var if_res1864 = false;
      }
      if (pre_cont_p2777 !== false) {
        var if_res1863 = function(val2783, idx2784) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pre_cont_p2777(val2783);
        };
      } else {
        var if_res1863 = false;
      }
      if (post_cont_p2778 !== false) {
        var if_res1862 = function(pos2785, val2786, idx2787) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return post_cont_p2778(pos2785, val2786);
        };
      } else {
        var if_res1862 = false;
      }
      return M2.values(function(pos2779) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.values(pos__gt_val2772(M2.car(pos2779)), M2.cdr(pos2779));
      }, if_res1866, function(pos2781) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cons(pos_next2774(M2.car(pos2781)), M2.add1(M2.cdr(pos2781)));
      }, temp1865, if_res1864, if_res1863, if_res1862);
    });
  };
  var in_value = function(v2788) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(pos2789) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return v2788;
      }, function(pos2790) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return false;
      }, true, function(pos2791) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return pos2791;
      }, false, false);
    });
  };
  var in_values_sequence = function(g2792) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2792) !== false) {
      var if_res1867 = M2.rvoid();
    } else {
      var if_res1867 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2792);
    }
    if_res1867;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1868 = make_sequence(false, g2792);
      var pos__gt_val2793 = let_result1868.getAt(0);
      var pre_pos_next2794 = let_result1868.getAt(1);
      var pos_next2795 = let_result1868.getAt(2);
      var init2796 = let_result1868.getAt(3);
      var pos_cont_p2797 = let_result1868.getAt(4);
      var pre_cont_p2798 = let_result1868.getAt(5);
      var post_cont_p2799 = let_result1868.getAt(6);
      if (pre_cont_p2798 !== false) {
        var if_res1870 = function(vals2801) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(pre_cont_p2798, vals2801);
        };
      } else {
        var if_res1870 = false;
      }
      if (post_cont_p2799 !== false) {
        var if_res1869 = function(pos2802, vals2803) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(post_cont_p2799, pos2802, vals2803);
        };
      } else {
        var if_res1869 = false;
      }
      return M2.values(function(pos2800) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2793(pos2800);
        }, M2.list);
      }, pre_pos_next2794, pos_next2795, init2796, pos_cont_p2797, if_res1870, if_res1869);
    });
  };
  var in_values_times__sequence = function(g2804) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2804) !== false) {
      var if_res1871 = M2.rvoid();
    } else {
      var if_res1871 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2804);
    }
    if_res1871;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1872 = make_sequence(false, g2804);
      var pos__gt_val2805 = let_result1872.getAt(0);
      var pre_pos_next2806 = let_result1872.getAt(1);
      var pos_next2807 = let_result1872.getAt(2);
      var init2808 = let_result1872.getAt(3);
      var pos_cont_p2809 = let_result1872.getAt(4);
      var pre_cont_p2810 = let_result1872.getAt(5);
      var post_cont_p2811 = let_result1872.getAt(6);
      if (pre_cont_p2810 !== false) {
        var if_res1876 = function(vals2815) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2815) !== false) {
            var if_res1875 = M2.apply(pre_cont_p2810, vals2815);
          } else {
            var if_res1875 = pre_cont_p2810(vals2815);
          }
          return if_res1875;
        };
      } else {
        var if_res1876 = false;
      }
      if (post_cont_p2811 !== false) {
        var if_res1874 = function(pos2816, vals2817) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2817) !== false) {
            var if_res1873 = M2.apply(post_cont_p2811, pos2816, vals2817);
          } else {
            var if_res1873 = post_cont_p2811(pos2816, vals2817);
          }
          return if_res1873;
        };
      } else {
        var if_res1874 = false;
      }
      return M2.values(function(pos2812) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var cl1877 = function(v2813) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(v2813) !== false) {
            var if_res1881 = M2.list(v2813);
          } else {
            var if_res1881 = v2813;
          }
          return if_res1881;
        };
        var cl1878 = $rjs_core.attachProcedureArity(function() {
          for (var vs28141882 = [],
              $__1 = 0; $__1 < arguments.length; $__1++)
            vs28141882[$__1] = arguments[$__1];
          var vs2814 = $rjs_core.Pair.listFromArray(vs28141882);
          return vs2814;
        });
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2805(pos2812);
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1879 = {'1': cl1877}[arguments.length];
          if (fixed_lam1879 !== undefined) {
            return fixed_lam1879.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1880 = cl1878.apply(null, arguments);
            } else {
              var if_res1880 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1880;
          }
        }, [M2.make_arity_at_least(0)]));
      }, pre_pos_next2806, pos_next2807, init2808, pos_cont_p2809, if_res1876, if_res1874);
    });
  };
  var append_sequences = function(sequences2818, cyclic_p2819) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var seqs__gt_m_plus_g_plus_r2820 = function(seqs2821) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(seqs2821) !== false) {
        var let_result1883 = sequence_generate(M2.car(seqs2821));
        var more_p2822 = let_result1883.getAt(0);
        var get2823 = let_result1883.getAt(1);
        var seqs2824 = M2.cdr(seqs2821);
        if (more_p2822() !== false) {
          var if_res1884 = M2.list_times_(more_p2822, get2823, seqs2824);
        } else {
          var if_res1884 = seqs__gt_m_plus_g_plus_r2820(seqs2824);
        }
        var if_res1886 = if_res1884;
      } else {
        if (cyclic_p2819 !== false) {
          var if_res1885 = seqs__gt_m_plus_g_plus_r2820(sequences2818);
        } else {
          var if_res1885 = false;
        }
        var if_res1886 = if_res1885;
      }
      return if_res1886;
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(m_plus_g_plus_r2825) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cadr(m_plus_g_plus_r2825)();
      }, function(m_plus_g_plus_r2826) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(m_plus_g_plus_r2826) !== false) {
          var if_res1887 = M2.not(M2.car(m_plus_g_plus_r2826)());
        } else {
          var if_res1887 = false;
        }
        if (if_res1887 !== false) {
          var if_res1888 = seqs__gt_m_plus_g_plus_r2820(M2.cddr(m_plus_g_plus_r2826));
        } else {
          var if_res1888 = m_plus_g_plus_r2826;
        }
        return if_res1888;
      }, seqs__gt_m_plus_g_plus_r2820(sequences2818), M2.values, false, false);
    });
  };
  var check_sequences = function(who2827, sequences2828) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.for_each(function(g2829) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (sequence_p(g2829) !== false) {
        var if_res1889 = M2.rvoid();
      } else {
        var if_res1889 = M2.raise_argument_error(who2827, $rjs_core.UString.makeInternedImmutable("sequence?"), g2829);
      }
      return if_res1889;
    }, sequences2828);
  };
  var in_sequences = $rjs_core.attachProcedureArity(function() {
    for (var sequences28301890 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      sequences28301890[$__1] = arguments[$__1];
    var sequences2830 = $rjs_core.Pair.listFromArray(sequences28301890);
    check_sequences($rjs_core.Symbol.make("in-sequences"), sequences2830);
    if (M2.pair_p(sequences2830) !== false) {
      var if_res1891 = M2.null_p(M2.cdr(sequences2830));
    } else {
      var if_res1891 = false;
    }
    if (if_res1891 !== false) {
      var if_res1892 = M2.car(sequences2830);
    } else {
      var if_res1892 = append_sequences(sequences2830, false);
    }
    return if_res1892;
  });
  var in_cycle = $rjs_core.attachProcedureArity(function() {
    for (var sequences28311893 = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      sequences28311893[$__2] = arguments[$__2];
    var sequences2831 = $rjs_core.Pair.listFromArray(sequences28311893);
    check_sequences($rjs_core.Symbol.make("in-cycle"), sequences2831);
    return append_sequences(sequences2831, true);
  });
  var in_parallel = $rjs_core.attachProcedureArity(function() {
    for (var sequences28321894 = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      sequences28321894[$__3] = arguments[$__3];
    var sequences2832 = $rjs_core.Pair.listFromArray(sequences28321894);
    check_sequences($rjs_core.Symbol.make("in-parallel"), sequences2832);
    if (M2.__eq_(1, M2.length(sequences2832)) !== false) {
      var if_res1921 = M2.car(sequences2832);
    } else {
      var if_res1921 = make_do_sequence(function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var let_result1895 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("g")), sequences2832);
        var pos__gt_vals2847 = let_result1895.getAt(0);
        var pos_pre_inc2848 = let_result1895.getAt(1);
        var pos_next2849 = let_result1895.getAt(2);
        var init2850 = let_result1895.getAt(3);
        var pos_cont_p2851 = let_result1895.getAt(4);
        var val_cont_p2852 = let_result1895.getAt(5);
        var all_cont_p2853 = let_result1895.getAt(6);
        M2.rvoid();
        var for_loop2854 = function(p__gt_v2855, p_p_n2856, p_n2857, i2858, ps_p2859, pr_p2860, po_p2861, pos2862) {
          if (arguments.length !== 8) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (pos_cont_p2851 !== false) {
            var if_res1896 = pos_cont_p2851(pos2862);
          } else {
            var if_res1896 = true;
          }
          if (if_res1896 !== false) {
            var g2866 = pos__gt_vals2847(pos2862);
            if (all_cont_p2853 !== false) {
              var if_res1897 = function(pos2867) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return all_cont_p2853(pos2867, g2866);
              };
            } else {
              var if_res1897 = false;
            }
            var let_result1898 = M2.values(g2866, if_res1897);
            var g2863 = let_result1898.getAt(0);
            var all_cont_p_by_pos2864 = let_result1898.getAt(1);
            if (pos_pre_inc2848 !== false) {
              var if_res1899 = pos_pre_inc2848(pos2862);
            } else {
              var if_res1899 = pos2862;
            }
            var pos2865 = if_res1899;
            if (val_cont_p2852 !== false) {
              var if_res1900 = val_cont_p2852(g2863);
            } else {
              var if_res1900 = true;
            }
            if (if_res1900 !== false) {
              var p__gt_v2875 = p__gt_v2855;
              var p_p_n2876 = p_p_n2856;
              var p_n2877 = p_n2857;
              var i2878 = i2858;
              var ps_p2879 = ps_p2859;
              var pr_p2880 = pr_p2860;
              var po_p2881 = po_p2861;
              var let_result1901 = make_sequence(false, g2863);
              var p__gt_v12889 = let_result1901.getAt(0);
              var p_p_n22890 = let_result1901.getAt(1);
              var p_n32891 = let_result1901.getAt(2);
              var i42892 = let_result1901.getAt(3);
              var ps_p52893 = let_result1901.getAt(4);
              var pr_p62894 = let_result1901.getAt(5);
              var po_p72895 = let_result1901.getAt(6);
              var let_result1902 = M2.values(M2.cons(p__gt_v12889, p__gt_v2875), M2.cons(p_p_n22890, p_p_n2876), M2.cons(p_n32891, p_n2877), M2.cons(i42892, i2878), M2.cons(ps_p52893, ps_p2879), M2.cons(pr_p62894, pr_p2880), M2.cons(po_p72895, po_p2881));
              var p__gt_v2882 = let_result1902.getAt(0);
              var p_p_n2883 = let_result1902.getAt(1);
              var p_n2884 = let_result1902.getAt(2);
              var i2885 = let_result1902.getAt(3);
              var ps_p2886 = let_result1902.getAt(4);
              var pr_p2887 = let_result1902.getAt(5);
              var po_p2888 = let_result1902.getAt(6);
              var let_result1903 = M2.values(p__gt_v2882, p_p_n2883, p_n2884, i2885, ps_p2886, pr_p2887, po_p2888);
              var p__gt_v2868 = let_result1903.getAt(0);
              var p_p_n2869 = let_result1903.getAt(1);
              var p_n2870 = let_result1903.getAt(2);
              var i2871 = let_result1903.getAt(3);
              var ps_p2872 = let_result1903.getAt(4);
              var pr_p2873 = let_result1903.getAt(5);
              var po_p2874 = let_result1903.getAt(6);
              if (all_cont_p_by_pos2864 !== false) {
                var if_res1904 = all_cont_p_by_pos2864(pos2865);
              } else {
                var if_res1904 = true;
              }
              if (if_res1904 !== false) {
                var if_res1905 = M2.not(false);
              } else {
                var if_res1905 = false;
              }
              if (if_res1905 !== false) {
                var if_res1906 = for_loop2854(p__gt_v2868, p_p_n2869, p_n2870, i2871, ps_p2872, pr_p2873, po_p2874, pos_next2849(pos2865));
              } else {
                var if_res1906 = M2.values(p__gt_v2868, p_p_n2869, p_n2870, i2871, ps_p2872, pr_p2873, po_p2874);
              }
              var if_res1907 = if_res1906;
            } else {
              var if_res1907 = M2.values(p__gt_v2855, p_p_n2856, p_n2857, i2858, ps_p2859, pr_p2860, po_p2861);
            }
            var if_res1908 = if_res1907;
          } else {
            var if_res1908 = M2.values(p__gt_v2855, p_p_n2856, p_n2857, i2858, ps_p2859, pr_p2860, po_p2861);
          }
          return if_res1908;
        };
        var let_result1909 = for_loop2854(M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, init2850);
        var p__gt_v2840 = let_result1909.getAt(0);
        var p_p_n2841 = let_result1909.getAt(1);
        var p_n2842 = let_result1909.getAt(2);
        var i2843 = let_result1909.getAt(3);
        var ps_p2844 = let_result1909.getAt(4);
        var pr_p2845 = let_result1909.getAt(5);
        var po_p2846 = let_result1909.getAt(6);
        var let_result1910 = M2.values(M4.alt_reverse(p__gt_v2840), M4.alt_reverse(p_p_n2841), M4.alt_reverse(p_n2842), M4.alt_reverse(i2843), M4.alt_reverse(ps_p2844), M4.alt_reverse(pr_p2845), M4.alt_reverse(po_p2846));
        var pos__gt_vals2833 = let_result1910.getAt(0);
        var pre_pos_nexts2834 = let_result1910.getAt(1);
        var pos_nexts2835 = let_result1910.getAt(2);
        var inits2836 = let_result1910.getAt(3);
        var pos_cont_ps2837 = let_result1910.getAt(4);
        var pre_cont_ps2838 = let_result1910.getAt(5);
        var post_cont_ps2839 = let_result1910.getAt(6);
        if (M2.ormap(M2.values, pre_pos_nexts2834) !== false) {
          var if_res1920 = function(poses2899) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.map(function(pre_pos_next2900, pos2901) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_pos_next2900 !== false) {
                var if_res1919 = pre_pos_next2900(pos2901);
              } else {
                var if_res1919 = pos2901;
              }
              return if_res1919;
            }, pre_pos_nexts2834, poses2899);
          };
        } else {
          var if_res1920 = false;
        }
        if (M2.ormap(M2.values, pos_cont_ps2837) !== false) {
          var if_res1918 = function(poses2905) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.andmap(function(pos_cont_p2906, pos2907) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pos_cont_p2906 !== false) {
                var if_res1917 = pos_cont_p2906(pos2907);
              } else {
                var if_res1917 = true;
              }
              return if_res1917;
            }, pos_cont_ps2837, poses2905);
          };
        } else {
          var if_res1918 = false;
        }
        if (M2.ormap(M2.values, pre_cont_ps2838) !== false) {
          var if_res1916 = $rjs_core.attachProcedureArity(function() {
            for (var vals29081914 = [],
                $__4 = 0; $__4 < arguments.length; $__4++)
              vals29081914[$__4] = arguments[$__4];
            var vals2908 = $rjs_core.Pair.listFromArray(vals29081914);
            return M2.andmap(function(pre_cont_p2909, val2910) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_cont_p2909 !== false) {
                var if_res1915 = pre_cont_p2909(val2910);
              } else {
                var if_res1915 = true;
              }
              return if_res1915;
            }, pre_cont_ps2838, vals2908);
          });
        } else {
          var if_res1916 = false;
        }
        if (M2.ormap(M2.values, post_cont_ps2839) !== false) {
          var if_res1913 = $rjs_core.attachProcedureArity(function(poses2911) {
            for (var vals29121911 = [],
                $__5 = 1; $__5 < arguments.length; $__5++)
              vals29121911[$__5 - 1] = arguments[$__5];
            if (arguments.length < 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2912 = $rjs_core.Pair.listFromArray(vals29121911);
            return M2.andmap(function(post_cont_p2913, pos2914, val2915) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p2913 !== false) {
                var if_res1912 = post_cont_p2913(pos2914, val2915);
              } else {
                var if_res1912 = true;
              }
              return if_res1912;
            }, post_cont_ps2839, poses2911, vals2912);
          });
        } else {
          var if_res1913 = false;
        }
        return M2.values(function(poses2896) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(M2.values, M2.map(function(pos__gt_val2897, pos2898) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos__gt_val2897(pos2898);
          }, pos__gt_vals2833, poses2896));
        }, if_res1920, function(poses2902) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.map(function(pos_next2903, pos2904) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos_next2903(pos2904);
          }, pos_nexts2835, poses2902);
        }, inits2836, if_res1918, if_res1916, if_res1913);
      });
    }
    return if_res1921;
  });
  var cl1922 = function(producer2916) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values($rjs_core.attachProcedureArity(function() {
        for (var _29171926 = [],
            $__4 = 0; $__4 < arguments.length; $__4++)
          _29171926[$__4] = arguments[$__4];
        var _2917 = $rjs_core.Pair.listFromArray(_29171926);
        return producer2916();
      }), M2.rvoid, M2.rvoid(), false, false, false);
    });
  };
  var cl1923 = $rjs_core.attachProcedureArity(function(producer2918, stop2919) {
    for (var more29201927 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      more29201927[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var more2920 = $rjs_core.Pair.listFromArray(more29201927);
    if (M2.null_p(more2920) !== false) {
      var if_res1928 = function(_2922) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return producer2918();
      };
    } else {
      var if_res1928 = function(_2923) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.apply(producer2918, more2920);
      };
    }
    var produce_bang_2921 = if_res1928;
    if (M2.not(M2.procedure_p(stop2919)) !== false) {
      var if_res1931 = function(x2925) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.not(M2.eq_p(x2925, stop2919));
      };
    } else {
      if (M2.equal_p(1, M2.procedure_arity(stop2919)) !== false) {
        var if_res1930 = function(x2926) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.not(stop2919(x2926));
        };
      } else {
        var if_res1930 = $rjs_core.attachProcedureArity(function() {
          for (var xs29271929 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            xs29271929[$__5] = arguments[$__5];
          var xs2927 = $rjs_core.Pair.listFromArray(xs29271929);
          return M2.not(M2.apply(stop2919, xs2927));
        });
      }
      var if_res1931 = if_res1930;
    }
    var stop_p2924 = if_res1931;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(produce_bang_2921, M2.rvoid, M2.rvoid(), false, stop_p2924, false);
    });
  });
  var in_producer = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1924 = {'1': cl1922}[arguments.length];
    if (fixed_lam1924 !== undefined) {
      return fixed_lam1924.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl1923.length, 1) !== false) {
        var if_res1925 = cl1923.apply(null, arguments);
      } else {
        var if_res1925 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1925;
    }
  }, [1, M2.make_arity_at_least(2)]);
  var let_result1932 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2928) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2928, 0)();
  }, function(v2929) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2929, 1)();
  }, function(v2930) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2930, 2)();
  }))));
  var struct_do_stream = let_result1932.getAt(0);
  var make_do_stream = let_result1932.getAt(1);
  var do_stream_p = let_result1932.getAt(2);
  var do_stream_ref = let_result1932.getAt(3);
  var do_stream_set_bang_ = let_result1932.getAt(4);
  var empty_stream = make_do_stream(function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  }, M2.rvoid, M2.rvoid);
  var sequence__gt_stream = function(s2931) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(s2931) !== false) {
      var if_res1933 = M2.rvoid();
    } else {
      var if_res1933 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("sequence?"), s2931);
    }
    if_res1933;
    if (stream_p(s2931) !== false) {
      var if_res1944 = s2931;
    } else {
      var let_result1934 = make_sequence(false, s2931);
      var pos__gt_val2932 = let_result1934.getAt(0);
      var pre_pos_next2933 = let_result1934.getAt(1);
      var pos_next2934 = let_result1934.getAt(2);
      var init2935 = let_result1934.getAt(3);
      var pos_cont_p2936 = let_result1934.getAt(4);
      var pre_cont_p2937 = let_result1934.getAt(5);
      var post_cont_p2938 = let_result1934.getAt(6);
      var gen_stream2939 = function(pos2940) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var done_p2941 = false;
        var vals2942 = false;
        var empty_p2943 = false;
        var next2944 = false;
        var force_bang_2945 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (done_p2941 !== false) {
            var if_res1940 = M2.rvoid();
          } else {
            if (pos_cont_p2936 !== false) {
              var if_res1935 = pos_cont_p2936(pos2940);
            } else {
              var if_res1935 = true;
            }
            if (if_res1935 !== false) {
              vals2942 = M2.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return pos__gt_val2932(pos2940);
              }, M2.list);
              if (pre_pos_next2933 !== false) {
                pos2940 = pre_pos_next2933(pos2940);
                var if_res1936 = null;
              } else {
                var if_res1936 = M2.rvoid();
              }
              if_res1936;
              if (pre_cont_p2937 !== false) {
                var if_res1937 = M2.apply(pre_cont_p2937, vals2942);
              } else {
                var if_res1937 = true;
              }
              if (if_res1937 !== false) {
                var if_res1938 = M2.rvoid();
              } else {
                vals2942 = false;
                empty_p2943 = true;
                var if_res1938 = null;
              }
              var if_res1939 = if_res1938;
            } else {
              empty_p2943 = true;
              var if_res1939 = null;
            }
            if_res1939;
            done_p2941 = true;
            var if_res1940 = null;
          }
          return if_res1940;
        };
        return make_do_stream(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2945();
          return empty_p2943;
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2945();
          return M2.apply(M2.values, vals2942);
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2945();
          if (next2944 !== false) {
            var if_res1943 = next2944;
          } else {
            if (post_cont_p2938 !== false) {
              var if_res1941 = M2.apply(post_cont_p2938, pos2940, vals2942);
            } else {
              var if_res1941 = true;
            }
            if (if_res1941 !== false) {
              next2944 = gen_stream2939(pos_next2934(pos2940));
              var if_res1942 = null;
            } else {
              next2944 = empty_stream;
              var if_res1942 = null;
            }
            if_res1942;
            var if_res1943 = next2944;
          }
          return if_res1943;
        });
      };
      var if_res1944 = gen_stream2939(init2935);
    }
    return if_res1944;
  };
  var no_more = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.raise(M2.__rjs_quoted__.exn_fail_contract($rjs_core.UString.makeInternedImmutable("sequence has no more values"), M2.current_continuation_marks()));
  };
  var sequence_generate = function(g2946) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2946) !== false) {
      var if_res1945 = M2.rvoid();
    } else {
      var if_res1945 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2946);
    }
    if_res1945;
    var let_result1946 = make_sequence(false, g2946);
    var pos__gt_val2947 = let_result1946.getAt(0);
    var pre_pos_next2948 = let_result1946.getAt(1);
    var pos_next2949 = let_result1946.getAt(2);
    var init2950 = let_result1946.getAt(3);
    var pos_cont_p2951 = let_result1946.getAt(4);
    var pre_cont_p2952 = let_result1946.getAt(5);
    var post_cont_p2953 = let_result1946.getAt(6);
    var pos2954 = init2950;
    var more_p2955 = false;
    var prep_val_bang_2956 = false;
    var next2957 = false;
    var init_more_p2958 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2956();
      return more_p2955();
    };
    var init_next2959 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2956();
      return next2957();
    };
    var init_prep_val_bang_2960 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2951 !== false) {
        var if_res1947 = pos_cont_p2951(pos2954);
      } else {
        var if_res1947 = true;
      }
      if (if_res1947 !== false) {
        var if_res1955 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1953 = pos__gt_val2947(pos2954);
          if (pre_pos_next2948 !== false) {
            pos2954 = pre_pos_next2948(pos2954);
            var if_res1954 = null;
          } else {
            var if_res1954 = M2.rvoid();
          }
          if_res1954;
          return begin_res1953;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals29611948 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals29611948[$__5] = arguments[$__5];
          var vals2961 = $rjs_core.Pair.listFromArray(vals29611948);
          if (pre_cont_p2952 !== false) {
            var if_res1949 = M2.apply(pre_cont_p2952, vals2961);
          } else {
            var if_res1949 = true;
          }
          if (if_res1949 !== false) {
            more_p2955 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return true;
            };
            next2957 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var v2962 = vals2961;
              prep_val_bang_2956 = function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (post_cont_p2953 !== false) {
                  var if_res1950 = M2.apply(post_cont_p2953, pos2954, vals2961);
                } else {
                  var if_res1950 = true;
                }
                if (if_res1950 !== false) {
                  pos2954 = pos_next2949(pos2954);
                  prep_val_bang_2956 = init_prep_val_bang_2960;
                  var if_res1951 = prep_val_bang_2956();
                } else {
                  more_p2955 = function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return false;
                  };
                  next2957 = no_more;
                  var if_res1951 = null;
                }
                return if_res1951;
              };
              more_p2955 = init_more_p2958;
              next2957 = init_next2959;
              return M2.apply(M2.values, v2962);
            };
            prep_val_bang_2956 = M2.rvoid;
            var if_res1952 = M2.apply(M2.values, vals2961);
          } else {
            more_p2955 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return false;
            };
            next2957 = no_more;
            var if_res1952 = null;
          }
          return if_res1952;
        }));
      } else {
        more_p2955 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return false;
        };
        next2957 = no_more;
        var if_res1955 = null;
      }
      return if_res1955;
    };
    more_p2955 = init_more_p2958;
    prep_val_bang_2956 = init_prep_val_bang_2960;
    next2957 = init_next2959;
    var sequence_more_p2963 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return more_p2955();
    };
    var sequence_next2964 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return next2957();
    };
    return M2.values(sequence_more_p2963, sequence_next2964);
  };
  var sequence_generate_times_ = function(g2965) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2965) !== false) {
      var if_res1956 = M2.rvoid();
    } else {
      var if_res1956 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate*"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2965);
    }
    if_res1956;
    var let_result1957 = make_sequence(false, g2965);
    var pos__gt_val2966 = let_result1957.getAt(0);
    var pre_pos_next2967 = let_result1957.getAt(1);
    var pos_next2968 = let_result1957.getAt(2);
    var init2969 = let_result1957.getAt(3);
    var pos_cont_p2970 = let_result1957.getAt(4);
    var pre_cont_p2971 = let_result1957.getAt(5);
    var post_cont_p2972 = let_result1957.getAt(6);
    var next_bang_2973 = function(pos2974) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2970 !== false) {
        var if_res1958 = pos_cont_p2970(pos2974);
      } else {
        var if_res1958 = true;
      }
      if (if_res1958 !== false) {
        var if_res1966 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1964 = pos__gt_val2966(pos2974);
          if (pre_pos_next2967 !== false) {
            pos2974 = pre_pos_next2967(pos2974);
            var if_res1965 = null;
          } else {
            var if_res1965 = M2.rvoid();
          }
          if_res1965;
          return begin_res1964;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals29751959 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals29751959[$__5] = arguments[$__5];
          var vals2975 = $rjs_core.Pair.listFromArray(vals29751959);
          if (pre_cont_p2971 !== false) {
            var if_res1960 = M2.apply(pre_cont_p2971, vals2975);
          } else {
            var if_res1960 = true;
          }
          if (if_res1960 !== false) {
            var if_res1963 = M2.values(vals2975, function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p2972 !== false) {
                var if_res1961 = M2.apply(post_cont_p2972, pos2974, vals2975);
              } else {
                var if_res1961 = true;
              }
              if (if_res1961 !== false) {
                var if_res1962 = next_bang_2973(pos_next2968(pos2974));
              } else {
                var if_res1962 = M2.values(false, no_more);
              }
              return if_res1962;
            });
          } else {
            var if_res1963 = M2.values(false, no_more);
          }
          return if_res1963;
        }));
      } else {
        var if_res1966 = M2.values(false, no_more);
      }
      return if_res1966;
    };
    return next_bang_2973(init2969);
  };
  var grow_vector = function(vec2976) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n2977 = M2.vector_length(vec2976);
    var new_vec2978 = M2.make_vector(2 * n2977);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec2978, 0, vec2976, 0, n2977);
    return new_vec2978;
  };
  var shrink_vector = function(vec2979, i2980) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var new_vec2981 = M2.make_vector(i2980);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec2981, 0, vec2979, 0, i2980);
    return new_vec2981;
  };
  var dir_list = function(full_d2982, d2983, acc2984) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1967 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("f")), in_list(M2.reverse(M3.sort(M2.__rjs_quoted__.directory_list(full_d2982), M2.__rjs_quoted__.path_lt__p))));
    var pos__gt_vals2985 = let_result1967.getAt(0);
    var pos_pre_inc2986 = let_result1967.getAt(1);
    var pos_next2987 = let_result1967.getAt(2);
    var init2988 = let_result1967.getAt(3);
    var pos_cont_p2989 = let_result1967.getAt(4);
    var val_cont_p2990 = let_result1967.getAt(5);
    var all_cont_p2991 = let_result1967.getAt(6);
    M2.rvoid();
    var for_loop2992 = function(acc2993, pos2994) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2989 !== false) {
        var if_res1968 = pos_cont_p2989(pos2994);
      } else {
        var if_res1968 = true;
      }
      if (if_res1968 !== false) {
        var f2998 = pos__gt_vals2985(pos2994);
        if (all_cont_p2991 !== false) {
          var if_res1969 = function(pos2999) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p2991(pos2999, f2998);
          };
        } else {
          var if_res1969 = false;
        }
        var let_result1970 = M2.values(f2998, if_res1969);
        var f2995 = let_result1970.getAt(0);
        var all_cont_p_by_pos2996 = let_result1970.getAt(1);
        if (pos_pre_inc2986 !== false) {
          var if_res1971 = pos_pre_inc2986(pos2994);
        } else {
          var if_res1971 = pos2994;
        }
        var pos2997 = if_res1971;
        if (val_cont_p2990 !== false) {
          var if_res1972 = val_cont_p2990(f2995);
        } else {
          var if_res1972 = true;
        }
        if (if_res1972 !== false) {
          var acc3001 = acc2993;
          var acc3002 = M2.cons(M2.__rjs_quoted__.build_path(d2983, f2995), acc3001);
          var acc3000 = M2.values(acc3002);
          if (all_cont_p_by_pos2996 !== false) {
            var if_res1973 = all_cont_p_by_pos2996(pos2997);
          } else {
            var if_res1973 = true;
          }
          if (if_res1973 !== false) {
            var if_res1974 = M2.not(false);
          } else {
            var if_res1974 = false;
          }
          if (if_res1974 !== false) {
            var if_res1975 = for_loop2992(acc3000, pos_next2987(pos2997));
          } else {
            var if_res1975 = acc3000;
          }
          var if_res1976 = if_res1975;
        } else {
          var if_res1976 = acc2993;
        }
        var if_res1977 = if_res1976;
      } else {
        var if_res1977 = acc2993;
      }
      return if_res1977;
    };
    return for_loop2992(acc2984, init2988);
  };
  var next_body = function(l3003, d3004, init_dir3005, use_dir_p3006) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var full_d3007 = M2.__rjs_quoted__.path__gt_complete_path(d3004, init_dir3005);
    if (M2.__rjs_quoted__.directory_exists_p(full_d3007) !== false) {
      var if_res1978 = use_dir_p3006(full_d3007);
    } else {
      var if_res1978 = false;
    }
    if (if_res1978 !== false) {
      var if_res1979 = dir_list(full_d3007, d3004, M2.cdr(l3003));
    } else {
      var if_res1979 = M2.cdr(l3003);
    }
    return if_res1979;
  };
  var initial_state = function(orig_dir3008, init_dir3009) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (orig_dir3008 !== false) {
      var if_res1980 = dir_list(M2.__rjs_quoted__.path__gt_complete_path(orig_dir3008, init_dir3009), orig_dir3008, M2.rnull);
    } else {
      var if_res1980 = M2.__rjs_quoted__.directory_list(init_dir3009);
    }
    return if_res1980;
  };
  var cl1981 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(false, function(d3010) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl1982 = function(orig_dir3011) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(orig_dir3011, function(d3012) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl1983 = function(orig_dir3013, use_dir_p3014) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var init_dir3015 = M2.__rjs_quoted__.current_directory();
    var next3016 = function(l3017) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var d3018 = M2.car(l3017);
      return next_body(l3017, d3018, init_dir3015, use_dir_p3014);
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(M2.car, next3016, initial_state(orig_dir3013, init_dir3015), M2.pair_p, false, false);
    });
  };
  var __times_in_directory = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1984 = {
      '0': cl1981,
      '1': cl1982,
      '2': cl1983
    }[arguments.length];
    if (fixed_lam1984 !== undefined) {
      return fixed_lam1984.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var __rjs_quoted__ = {};
  __rjs_quoted__.default_in_hash_pairs = default_in_hash_pairs;
  __rjs_quoted__.in_naturals = in_naturals;
  __rjs_quoted__.in_vector = in_vector;
  __rjs_quoted__.default_in_hash_values = default_in_hash_values;
  __rjs_quoted__.check_in_bytes_lines = check_in_bytes_lines;
  __rjs_quoted__.default_in_weak_hash_pairs = default_in_weak_hash_pairs;
  __rjs_quoted__.in_input_port_chars = in_input_port_chars;
  __rjs_quoted__.default_in_mutable_hash_values = default_in_mutable_hash_values;
  __rjs_quoted__.next_body = next_body;
  __rjs_quoted__.grow_vector = grow_vector;
  __rjs_quoted__.in_indexed = in_indexed;
  __rjs_quoted__.default_in_immutable_hash_keys = default_in_immutable_hash_keys;
  __rjs_quoted__.in_port = in_port;
  __rjs_quoted__.in_producer = in_producer;
  __rjs_quoted__.default_in_hash_keys = default_in_hash_keys;
  __rjs_quoted__.default_in_mutable_hash_pairs = default_in_mutable_hash_pairs;
  __rjs_quoted__.default_in_immutable_hash = default_in_immutable_hash;
  __rjs_quoted__.default_in_mutable_hash = default_in_mutable_hash;
  __rjs_quoted__.default_in_mutable_hash_keys = default_in_mutable_hash_keys;
  __rjs_quoted__.not_weak_p = not_weak_p;
  __rjs_quoted__.default_in_weak_hash = default_in_weak_hash;
  __rjs_quoted__.initial_state = initial_state;
  __rjs_quoted__.in_lines = in_lines;
  __rjs_quoted__.default_in_immutable_hash_pairs = default_in_immutable_hash_pairs;
  __rjs_quoted__.shrink_vector = shrink_vector;
  __rjs_quoted__.default_in_weak_hash_keys = default_in_weak_hash_keys;
  __rjs_quoted__.in_range = in_range;
  __rjs_quoted__.in_parallel = in_parallel;
  __rjs_quoted__.in_value = in_value;
  __rjs_quoted__.__times_in_directory = __times_in_directory;
  __rjs_quoted__.default_in_immutable_hash_values = default_in_immutable_hash_values;
  __rjs_quoted__.unsafe_stream_rest = unsafe_stream_rest;
  __rjs_quoted__.check_in_port = check_in_port;
  __rjs_quoted__.check_in_lines = check_in_lines;
  __rjs_quoted__.normalise_inputs = normalise_inputs;
  __rjs_quoted__.__hash_gen = __hash_gen;
  __rjs_quoted__.in_string = in_string;
  __rjs_quoted__.make_sequence = make_sequence;
  __rjs_quoted__.unsafe_stream_first = unsafe_stream_first;
  __rjs_quoted__.unsafe_stream_not_empty_p = unsafe_stream_not_empty_p;
  __rjs_quoted__.in_input_port_bytes = in_input_port_bytes;
  __rjs_quoted__.mutable_p = mutable_p;
  __rjs_quoted__.default_in_weak_hash_values = default_in_weak_hash_values;
  __rjs_quoted__.stream_p = stream_p;
  __rjs_quoted__.in_bytes = in_bytes;
  __rjs_quoted__.stop_after = stop_after;
  __rjs_quoted__.default_in_hash = default_in_hash;
  __rjs_quoted__.in_stream = in_stream;
  __rjs_quoted__.make_do_sequence = make_do_sequence;
  __rjs_quoted__.in_mlist = in_mlist;
  __rjs_quoted__.in_bytes_lines = in_bytes_lines;
  __rjs_quoted__.in_list = in_list;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_do_sequence() {
      return make_do_sequence;
    },
    get prop_sequence() {
      return prop_sequence;
    },
    get sequence_generate_times_() {
      return sequence_generate_times_;
    },
    get sequence_generate() {
      return sequence_generate;
    },
    get sequence_p() {
      return sequence_p;
    },
    get make_do_stream() {
      return make_do_stream;
    },
    get empty_stream() {
      return empty_stream;
    },
    get sequence__gt_stream() {
      return sequence__gt_stream;
    },
    get stream_via_prop_p() {
      return stream_via_prop_p;
    },
    get stream_ref() {
      return stream_ref;
    },
    get prop_stream() {
      return prop_stream;
    },
    get stream_rest() {
      return stream_rest;
    },
    get stream_first() {
      return stream_first;
    },
    get stream_empty_p() {
      return stream_empty_p;
    },
    get stream_p() {
      return stream_p;
    },
    get stop_after() {
      return stop_after;
    },
    get stop_before() {
      return stop_before;
    },
    get in_values_times__sequence() {
      return in_values_times__sequence;
    },
    get in_values_sequence() {
      return in_values_sequence;
    },
    get in_parallel() {
      return in_parallel;
    },
    get in_cycle() {
      return in_cycle;
    },
    get in_sequences() {
      return in_sequences;
    }
  };
})();
var $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/qq-and-or.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var qq_append = function(a2510, b2511) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(a2510) !== false) {
      var if_res1656 = M0.append(a2510, b2511);
    } else {
      var if_res1656 = M0.raise_argument_error($rjs_core.Symbol.make("unquote-splicing"), $rjs_core.UString.makeInternedImmutable("list?"), a2510);
    }
    return if_res1656;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.qq_append = qq_append;
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_map_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/map.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var cl403 = function(f758, l759) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f758) !== false) {
      if (M0.procedure_arity_includes_p(f758, 1) !== false) {
        var if_res408 = M0.list_p(l759);
      } else {
        var if_res408 = false;
      }
      var if_res409 = if_res408;
    } else {
      var if_res409 = false;
    }
    if (if_res409 !== false) {
      var loop760 = function(l761) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l761) !== false) {
          var if_res410 = M0.rnull;
        } else {
          var r762 = M0.cdr(l761);
          var if_res410 = M0.cons(f758(M0.car(l761)), loop760(r762));
        }
        return if_res410;
      };
      var if_res411 = loop760(l759);
    } else {
      var if_res411 = M0.map(f758, l759);
    }
    return if_res411;
  };
  var cl404 = function(f763, l1764, l2765) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f763) !== false) {
      if (M0.procedure_arity_includes_p(f763, 2) !== false) {
        if (M0.list_p(l1764) !== false) {
          if (M0.list_p(l2765) !== false) {
            var if_res412 = M0.__eq_(M0.length(l1764), M0.length(l2765));
          } else {
            var if_res412 = false;
          }
          var if_res413 = if_res412;
        } else {
          var if_res413 = false;
        }
        var if_res414 = if_res413;
      } else {
        var if_res414 = false;
      }
      var if_res415 = if_res414;
    } else {
      var if_res415 = false;
    }
    if (if_res415 !== false) {
      var loop766 = function(l1767, l2768) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1767) !== false) {
          var if_res416 = M0.rnull;
        } else {
          var r1769 = M0.cdr(l1767);
          var r2770 = M0.cdr(l2768);
          var if_res416 = M0.cons(f763(M0.car(l1767), M0.car(l2768)), loop766(r1769, r2770));
        }
        return if_res416;
      };
      var if_res417 = loop766(l1764, l2765);
    } else {
      var if_res417 = M0.map(f763, l1764, l2765);
    }
    return if_res417;
  };
  var cl405 = $rjs_core.attachProcedureArity(function(f771, l772) {
    for (var args773418 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      args773418[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args773 = $rjs_core.Pair.listFromArray(args773418);
    return M0.apply(M0.map, f771, l772, args773);
  });
  var map757 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam406 = {
      '2': cl403,
      '3': cl404
    }[arguments.length];
    if (fixed_lam406 !== undefined) {
      return fixed_lam406.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl405.length, 1) !== false) {
        var if_res407 = cl405.apply(null, arguments);
      } else {
        var if_res407 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res407;
    }
  }, [M0.make_arity_at_least(2)]);
  var map2 = map757;
  var cl419 = function(f775, l776) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f775) !== false) {
      if (M0.procedure_arity_includes_p(f775, 1) !== false) {
        var if_res424 = M0.list_p(l776);
      } else {
        var if_res424 = false;
      }
      var if_res425 = if_res424;
    } else {
      var if_res425 = false;
    }
    if (if_res425 !== false) {
      var loop777 = function(l778) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l778) !== false) {
          var if_res426 = M0.rvoid();
        } else {
          var r779 = M0.cdr(l778);
          f775(M0.car(l778));
          var if_res426 = loop777(r779);
        }
        return if_res426;
      };
      var if_res427 = loop777(l776);
    } else {
      var if_res427 = M0.for_each(f775, l776);
    }
    return if_res427;
  };
  var cl420 = function(f780, l1781, l2782) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f780) !== false) {
      if (M0.procedure_arity_includes_p(f780, 2) !== false) {
        if (M0.list_p(l1781) !== false) {
          if (M0.list_p(l2782) !== false) {
            var if_res428 = M0.__eq_(M0.length(l1781), M0.length(l2782));
          } else {
            var if_res428 = false;
          }
          var if_res429 = if_res428;
        } else {
          var if_res429 = false;
        }
        var if_res430 = if_res429;
      } else {
        var if_res430 = false;
      }
      var if_res431 = if_res430;
    } else {
      var if_res431 = false;
    }
    if (if_res431 !== false) {
      var loop783 = function(l1784, l2785) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1784) !== false) {
          var if_res432 = M0.rvoid();
        } else {
          var r1786 = M0.cdr(l1784);
          var r2787 = M0.cdr(l2785);
          f780(M0.car(l1784), M0.car(l2785));
          var if_res432 = loop783(r1786, r2787);
        }
        return if_res432;
      };
      var if_res433 = loop783(l1781, l2782);
    } else {
      var if_res433 = M0.for_each(f780, l1781, l2782);
    }
    return if_res433;
  };
  var cl421 = $rjs_core.attachProcedureArity(function(f788, l789) {
    for (var args790434 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args790434[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args790 = $rjs_core.Pair.listFromArray(args790434);
    return M0.apply(M0.for_each, f788, l789, args790);
  });
  var for_each774 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam422 = {
      '2': cl419,
      '3': cl420
    }[arguments.length];
    if (fixed_lam422 !== undefined) {
      return fixed_lam422.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl421.length, 1) !== false) {
        var if_res423 = cl421.apply(null, arguments);
      } else {
        var if_res423 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res423;
    }
  }, [M0.make_arity_at_least(2)]);
  var for_each2 = for_each774;
  var cl435 = function(f792, l793) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f792) !== false) {
      if (M0.procedure_arity_includes_p(f792, 1) !== false) {
        var if_res440 = M0.list_p(l793);
      } else {
        var if_res440 = false;
      }
      var if_res441 = if_res440;
    } else {
      var if_res441 = false;
    }
    if (if_res441 !== false) {
      if (M0.null_p(l793) !== false) {
        var if_res444 = true;
      } else {
        var loop794 = function(l795) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l795)) !== false) {
            var if_res443 = f792(M0.car(l795));
          } else {
            var r796 = M0.cdr(l795);
            if (f792(M0.car(l795)) !== false) {
              var if_res442 = loop794(r796);
            } else {
              var if_res442 = false;
            }
            var if_res443 = if_res442;
          }
          return if_res443;
        };
        var if_res444 = loop794(l793);
      }
      var if_res445 = if_res444;
    } else {
      var if_res445 = M0.andmap(f792, l793);
    }
    return if_res445;
  };
  var cl436 = function(f797, l1798, l2799) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f797) !== false) {
      if (M0.procedure_arity_includes_p(f797, 2) !== false) {
        if (M0.list_p(l1798) !== false) {
          if (M0.list_p(l2799) !== false) {
            var if_res446 = M0.__eq_(M0.length(l1798), M0.length(l2799));
          } else {
            var if_res446 = false;
          }
          var if_res447 = if_res446;
        } else {
          var if_res447 = false;
        }
        var if_res448 = if_res447;
      } else {
        var if_res448 = false;
      }
      var if_res449 = if_res448;
    } else {
      var if_res449 = false;
    }
    if (if_res449 !== false) {
      if (M0.null_p(l1798) !== false) {
        var if_res452 = true;
      } else {
        var loop800 = function(l1801, l2802) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1801)) !== false) {
            var if_res451 = f797(M0.car(l1801), M0.car(l2802));
          } else {
            var r1803 = M0.cdr(l1801);
            var r2804 = M0.cdr(l2802);
            if (f797(M0.car(l1801), M0.car(l2802)) !== false) {
              var if_res450 = loop800(r1803, r2804);
            } else {
              var if_res450 = false;
            }
            var if_res451 = if_res450;
          }
          return if_res451;
        };
        var if_res452 = loop800(l1798, l2799);
      }
      var if_res453 = if_res452;
    } else {
      var if_res453 = M0.andmap(f797, l1798, l2799);
    }
    return if_res453;
  };
  var cl437 = $rjs_core.attachProcedureArity(function(f805, l806) {
    for (var args807454 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      args807454[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args807 = $rjs_core.Pair.listFromArray(args807454);
    return M0.apply(M0.andmap, f805, l806, args807);
  });
  var andmap791 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam438 = {
      '2': cl435,
      '3': cl436
    }[arguments.length];
    if (fixed_lam438 !== undefined) {
      return fixed_lam438.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl437.length, 1) !== false) {
        var if_res439 = cl437.apply(null, arguments);
      } else {
        var if_res439 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res439;
    }
  }, [M0.make_arity_at_least(2)]);
  var andmap2 = andmap791;
  var cl455 = function(f809, l810) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f809) !== false) {
      if (M0.procedure_arity_includes_p(f809, 1) !== false) {
        var if_res460 = M0.list_p(l810);
      } else {
        var if_res460 = false;
      }
      var if_res461 = if_res460;
    } else {
      var if_res461 = false;
    }
    if (if_res461 !== false) {
      if (M0.null_p(l810) !== false) {
        var if_res464 = false;
      } else {
        var loop811 = function(l812) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l812)) !== false) {
            var if_res463 = f809(M0.car(l812));
          } else {
            var r813 = M0.cdr(l812);
            var or_part814 = f809(M0.car(l812));
            if (or_part814 !== false) {
              var if_res462 = or_part814;
            } else {
              var if_res462 = loop811(r813);
            }
            var if_res463 = if_res462;
          }
          return if_res463;
        };
        var if_res464 = loop811(l810);
      }
      var if_res465 = if_res464;
    } else {
      var if_res465 = M0.ormap(f809, l810);
    }
    return if_res465;
  };
  var cl456 = function(f815, l1816, l2817) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f815) !== false) {
      if (M0.procedure_arity_includes_p(f815, 2) !== false) {
        if (M0.list_p(l1816) !== false) {
          if (M0.list_p(l2817) !== false) {
            var if_res466 = M0.__eq_(M0.length(l1816), M0.length(l2817));
          } else {
            var if_res466 = false;
          }
          var if_res467 = if_res466;
        } else {
          var if_res467 = false;
        }
        var if_res468 = if_res467;
      } else {
        var if_res468 = false;
      }
      var if_res469 = if_res468;
    } else {
      var if_res469 = false;
    }
    if (if_res469 !== false) {
      if (M0.null_p(l1816) !== false) {
        var if_res472 = false;
      } else {
        var loop818 = function(l1819, l2820) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1819)) !== false) {
            var if_res471 = f815(M0.car(l1819), M0.car(l2820));
          } else {
            var r1821 = M0.cdr(l1819);
            var r2822 = M0.cdr(l2820);
            var or_part823 = f815(M0.car(l1819), M0.car(l2820));
            if (or_part823 !== false) {
              var if_res470 = or_part823;
            } else {
              var if_res470 = loop818(r1821, r2822);
            }
            var if_res471 = if_res470;
          }
          return if_res471;
        };
        var if_res472 = loop818(l1816, l2817);
      }
      var if_res473 = if_res472;
    } else {
      var if_res473 = M0.ormap(f815, l1816, l2817);
    }
    return if_res473;
  };
  var cl457 = $rjs_core.attachProcedureArity(function(f824, l825) {
    for (var args826474 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      args826474[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args826 = $rjs_core.Pair.listFromArray(args826474);
    return M0.apply(M0.ormap, f824, l825, args826);
  });
  var ormap808 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam458 = {
      '2': cl455,
      '3': cl456
    }[arguments.length];
    if (fixed_lam458 !== undefined) {
      return fixed_lam458.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl457.length, 1) !== false) {
        var if_res459 = cl457.apply(null, arguments);
      } else {
        var if_res459 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res459;
    }
  }, [M0.make_arity_at_least(2)]);
  var ormap2 = ormap808;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ormap() {
      return ormap2;
    },
    get andmap() {
      return andmap2;
    },
    get for_each() {
      return for_each2;
    },
    get map() {
      return map2;
    }
  };
})();
var $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/norm-arity.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var procedure_arity4437 = function(p4438) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return normalize_arity(M0.procedure_arity(p4438));
  };
  var norm_procedure_arity = procedure_arity4437;
  var raise_arity_error4439 = $rjs_core.attachProcedureArity(function(name4440, arity_v4441) {
    for (var arg_vs44422854 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      arg_vs44422854[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arg_vs4442 = $rjs_core.Pair.listFromArray(arg_vs44422854);
    var or_part4443 = M0.exact_nonnegative_integer_p(arity_v4441);
    if (or_part4443 !== false) {
      var if_res2858 = or_part4443;
    } else {
      var or_part4444 = M0.arity_at_least_p(arity_v4441);
      if (or_part4444 !== false) {
        var if_res2857 = or_part4444;
      } else {
        if (M0.list_p(arity_v4441) !== false) {
          var if_res2856 = M0.andmap(function(x4445) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4446 = M0.exact_nonnegative_integer_p(x4445);
            if (or_part4446 !== false) {
              var if_res2855 = or_part4446;
            } else {
              var if_res2855 = M0.arity_at_least_p(x4445);
            }
            return if_res2855;
          }, arity_v4441);
        } else {
          var if_res2856 = false;
        }
        var if_res2857 = if_res2856;
      }
      var if_res2858 = if_res2857;
    }
    if (if_res2858 !== false) {
      var if_res2859 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4440, normalize_arity(arity_v4441), arg_vs4442);
    } else {
      var if_res2859 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4440, arity_v4441, arg_vs4442);
    }
    return if_res2859;
  });
  var norm_raise_arity_error = raise_arity_error4439;
  var normalize_arity = function(arity4447) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_arity_p(arity4447) !== false) {
      var if_res2860 = M0.rvoid();
    } else {
      var if_res2860 = M0.raise_argument_error($rjs_core.Symbol.make("normalize-arity"), $rjs_core.UString.makeInternedImmutable("procedure-arity?"), arity4447);
    }
    if_res2860;
    if (M0.pair_p(arity4447) !== false) {
      var reversed4448 = reverse_sort_arity(arity4447);
      var normalized4449 = normalize_reversed_arity(reversed4448, $rjs_core.Pair.makeList());
      var simplified4450 = normalize_singleton_arity(normalized4449);
      var if_res2861 = simplified4450;
    } else {
      var if_res2861 = arity4447;
    }
    return if_res2861;
  };
  var normalize_singleton_arity = function(arity4451) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4451) !== false) {
      var if_res2862 = M0.null_p(M0.cdr(arity4451));
    } else {
      var if_res2862 = false;
    }
    if (if_res2862 !== false) {
      var if_res2863 = M0.car(arity4451);
    } else {
      var if_res2863 = arity4451;
    }
    return if_res2863;
  };
  var normalize_reversed_arity = function(arity4452, tail4453) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4452) !== false) {
      var if_res2864 = normalize_reversed_arity(M0.cdr(arity4452), arity_insert(M0.car(arity4452), tail4453));
    } else {
      var if_res2864 = tail4453;
    }
    return if_res2864;
  };
  var arity_insert = function(elem4454, arity4455) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4455) !== false) {
      var next4456 = M0.car(arity4455);
      if (M0.arity_at_least_p(next4456) !== false) {
        var next_value4457 = M0.arity_at_least_value(next4456);
        if (M0.arity_at_least_p(elem4454) !== false) {
          var elem_value4458 = M0.arity_at_least_value(elem4454);
          if (M0.__lt_(elem_value4458, next_value4457) !== false) {
            var if_res2865 = M0.cons(elem4454, M0.cdr(arity4455));
          } else {
            var if_res2865 = arity4455;
          }
          var if_res2868 = if_res2865;
        } else {
          if (M0.__lt_(elem4454, next_value4457 - 1) !== false) {
            var if_res2867 = M0.cons(elem4454, arity4455);
          } else {
            if (M0.__eq_(elem4454, next_value4457 - 1) !== false) {
              var if_res2866 = M0.cons(M0.arity_at_least(elem4454), M0.cdr(arity4455));
            } else {
              var if_res2866 = arity4455;
            }
            var if_res2867 = if_res2866;
          }
          var if_res2868 = if_res2867;
        }
        var if_res2870 = if_res2868;
      } else {
        if (M0.__lt_(elem4454, next4456) !== false) {
          var if_res2869 = M0.cons(elem4454, arity4455);
        } else {
          var if_res2869 = arity4455;
        }
        var if_res2870 = if_res2869;
      }
      var if_res2871 = if_res2870;
    } else {
      var if_res2871 = M0.cons(elem4454, arity4455);
    }
    return if_res2871;
  };
  var reverse_sort_arity = function(arity4459) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.sort(arity4459, arity_gt__p);
  };
  var arity_gt__p = function(a4460, b4461) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.arity_at_least_p(a4460) !== false) {
      if (M0.arity_at_least_p(b4461) !== false) {
        var if_res2872 = M0.__gt_(M0.arity_at_least_value(a4460), M0.arity_at_least_value(b4461));
      } else {
        var if_res2872 = true;
      }
      var if_res2874 = if_res2872;
    } else {
      if (M0.arity_at_least_p(b4461) !== false) {
        var if_res2873 = false;
      } else {
        var if_res2873 = M0.__gt_(a4460, b4461);
      }
      var if_res2874 = if_res2873;
    }
    return if_res2874;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get normalize_arity() {
      return normalize_arity;
    },
    get norm_raise_arity_error() {
      return norm_raise_arity_error;
    },
    get norm_procedure_arity() {
      return norm_procedure_arity;
    }
  };
})();
var $__collects_47_racket_47_private_47_path_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/path.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var path_string_p = function(s3394) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3395 = M0.__rjs_quoted__.path_p(s3394);
    if (or_part3395 !== false) {
      var if_res2273 = or_part3395;
    } else {
      if (M0.string_p(s3394) !== false) {
        var or_part3396 = M0.__rjs_quoted__.relative_path_p(s3394);
        if (or_part3396 !== false) {
          var if_res2271 = or_part3396;
        } else {
          var if_res2271 = M0.__rjs_quoted__.absolute_path_p(s3394);
        }
        var if_res2272 = if_res2271;
      } else {
        var if_res2272 = false;
      }
      var if_res2273 = if_res2272;
    }
    return if_res2273;
  };
  var bsbs = M0.string($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(92));
  var normal_case_path = function(s3397) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3398 = M0.__rjs_quoted__.path_for_some_system_p(s3397);
    if (or_part3398 !== false) {
      var if_res2274 = or_part3398;
    } else {
      var if_res2274 = path_string_p(s3397);
    }
    if (if_res2274 !== false) {
      var if_res2275 = M0.rvoid();
    } else {
      var if_res2275 = M0.raise_argument_error($rjs_core.Symbol.make("normal-path-case"), $rjs_core.UString.makeInternedImmutable("(or/c path-for-some-system? path-string?)"), s3397);
    }
    if_res2275;
    if (M0.__rjs_quoted__.path_for_some_system_p(s3397) !== false) {
      var if_res2276 = M0.eq_p(M0.__rjs_quoted__.path_convention_type(s3397), $rjs_core.Symbol.make("windows"));
    } else {
      var if_res2276 = M0.eq_p(M0.system_type(), $rjs_core.Symbol.make("windows"));
    }
    if (if_res2276 !== false) {
      if (M0.string_p(s3397) !== false) {
        var if_res2277 = s3397;
      } else {
        var if_res2277 = M0.__rjs_quoted__.bytes__gt_string_by_locale(M0.__rjs_quoted__.path__gt_bytes(s3397));
      }
      var str3399 = if_res2277;
      if (M0.__rjs_quoted__.regexp_match_p("/^[\\][\\][?][\\]/", str3399) !== false) {
        if (M0.string_p(s3397) !== false) {
          var if_res2278 = M0.__rjs_quoted__.string__gt_path(s3397);
        } else {
          var if_res2278 = s3397;
        }
        var if_res2280 = if_res2278;
      } else {
        var s3400 = M0.__rjs_quoted__.string_locale_downcase(str3399);
        if (M0.__rjs_quoted__.regexp_match_p("/[\\/\\][. ]+[\\/\\]*$/", s3400) !== false) {
          var if_res2279 = s3400;
        } else {
          var if_res2279 = M0.__rjs_quoted__.regexp_replace_times_("/[ .]+([\\/\\]*)$/", s3400, $rjs_core.UString.makeInternedImmutable("\\1"));
        }
        var if_res2280 = M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.string__gt_bytes_by_locale(M0.__rjs_quoted__.regexp_replace_times_("/\\//", if_res2279, bsbs)), $rjs_core.Symbol.make("windows"));
      }
      var if_res2282 = if_res2280;
    } else {
      if (M0.string_p(s3397) !== false) {
        var if_res2281 = M0.__rjs_quoted__.string__gt_path(s3397);
      } else {
        var if_res2281 = s3397;
      }
      var if_res2282 = if_res2281;
    }
    return if_res2282;
  };
  var check_extension_call = function(s3401, sfx3402, who3403, sep3404, trust_sep_p3405) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3408 = M0.__rjs_quoted__.path_for_some_system_p(s3401);
    if (or_part3408 !== false) {
      var if_res2283 = or_part3408;
    } else {
      var if_res2283 = path_string_p(s3401);
    }
    if (M0.not(if_res2283) !== false) {
      var if_res2289 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c path-for-some-system? path-string?)"), 0);
    } else {
      var or_part3409 = M0.string_p(sfx3402);
      if (or_part3409 !== false) {
        var if_res2284 = or_part3409;
      } else {
        var if_res2284 = M0.bytes_p(sfx3402);
      }
      if (M0.not(if_res2284) !== false) {
        var if_res2288 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c string? bytes?)"), 1);
      } else {
        var or_part3410 = trust_sep_p3405;
        if (or_part3410 !== false) {
          var if_res2286 = or_part3410;
        } else {
          var or_part3411 = M0.string_p(sep3404);
          if (or_part3411 !== false) {
            var if_res2285 = or_part3411;
          } else {
            var if_res2285 = M0.bytes_p(sep3404);
          }
          var if_res2286 = if_res2285;
        }
        if (M0.not(if_res2286) !== false) {
          var if_res2287 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c string? bytes?)"), 2);
        } else {
          var if_res2287 = M0.values(false, false);
        }
        var if_res2288 = if_res2287;
      }
      var if_res2289 = if_res2288;
    }
    var let_result2290 = if_res2289;
    var err_msg3406 = let_result2290.getAt(0);
    var err_index3407 = let_result2290.getAt(1);
    if (err_msg3406 !== false) {
      if (trust_sep_p3405 !== false) {
        var if_res2291 = M0.raise_argument_error(who3403, err_msg3406, err_index3407, s3401, sfx3402);
      } else {
        var if_res2291 = M0.raise_argument_error(who3403, err_msg3406, err_index3407, s3401, sfx3402, sep3404);
      }
      var if_res2292 = if_res2291;
    } else {
      var if_res2292 = M0.rvoid();
    }
    if_res2292;
    var let_result2293 = M0.__rjs_quoted__.split_path(s3401);
    var base3412 = let_result2293.getAt(0);
    var name3413 = let_result2293.getAt(1);
    var dir_p3414 = let_result2293.getAt(2);
    if (M0.not(base3412) !== false) {
      var if_res2294 = M0.raise_mismatch_error(who3403, $rjs_core.UString.makeInternedImmutable("cannot add an extension to a root path: "), s3401);
    } else {
      var if_res2294 = M0.rvoid();
    }
    if_res2294;
    return M0.values(base3412, name3413);
  };
  var path_adjust_extension = function(name3415, sep3416, rest_bytes3417, s3418, sfx3419, trust_sep_p3420) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result2295 = check_extension_call(s3418, sfx3419, name3415, sep3416, trust_sep_p3420);
    var base3421 = let_result2295.getAt(0);
    var name3422 = let_result2295.getAt(1);
    var bs3423 = M0.__rjs_quoted__.path_element__gt_bytes(name3422);
    var finish3424 = function(i3425, sep3426, i23427) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp2300 = M0.__rjs_quoted__.subbytes(bs3423, 0, i3425);
      if (M0.string_p(sep3426) !== false) {
        var if_res2299 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sep3426, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2299 = sep3426;
      }
      var temp2298 = rest_bytes3417(bs3423, i23427);
      if (M0.string_p(sfx3419) !== false) {
        var if_res2297 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sfx3419, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2297 = sfx3419;
      }
      var temp2301 = M0.__rjs_quoted__.bytes_append(temp2300, if_res2299, temp2298, if_res2297);
      if (M0.__rjs_quoted__.path_for_some_system_p(s3418) !== false) {
        var if_res2296 = M0.__rjs_quoted__.path_convention_type(s3418);
      } else {
        var if_res2296 = M0.__rjs_quoted__.system_path_convention_type();
      }
      return M0.__rjs_quoted__.bytes__gt_path_element(temp2301, if_res2296);
    };
    var loop3429 = function(i3430) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i3430) !== false) {
        var if_res2304 = finish3424(M0.__rjs_quoted__.bytes_length(bs3423), $rjs_core.Bytes.fromIntArray([]), M0.__rjs_quoted__.bytes_length(bs3423));
      } else {
        var i3431 = M0.sub1(i3430);
        if (M0.not(M0.zero_p(i3431)) !== false) {
          var if_res2302 = M0.eq_p(M0.char__gt_integer($rjs_core.Char.charFromCodepoint(46)), M0.__rjs_quoted__.bytes_ref(bs3423, i3431));
        } else {
          var if_res2302 = false;
        }
        if (if_res2302 !== false) {
          var if_res2303 = finish3424(i3431, sep3416, M0.add1(i3431));
        } else {
          var if_res2303 = loop3429(i3431);
        }
        var if_res2304 = if_res2303;
      }
      return if_res2304;
    };
    var new_name3428 = loop3429(M0.__rjs_quoted__.bytes_length(bs3423));
    if (M0.__rjs_quoted__.path_for_some_system_p(base3421) !== false) {
      var if_res2305 = M0.__rjs_quoted__.build_path(base3421, new_name3428);
    } else {
      var if_res2305 = new_name3428;
    }
    return if_res2305;
  };
  var path_replace_extension = function(s3432, sfx3433) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-replace-extension"), $rjs_core.Bytes.fromIntArray([]), function(bs3434, i3435) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return $rjs_core.Bytes.fromIntArray([]);
    }, s3432, sfx3433, true);
  };
  var cl2306 = function(s3436, sfx3437) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), $rjs_core.Bytes.fromIntArray([95]), M0.__rjs_quoted__.subbytes, s3436, sfx3437, true);
  };
  var cl2307 = function(s3438, sfx3439, sep3440) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), sep3440, M0.__rjs_quoted__.subbytes, s3438, sfx3439, false);
  };
  var path_add_extension = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2308 = {
      '2': cl2306,
      '3': cl2307
    }[arguments.length];
    if (fixed_lam2308 !== undefined) {
      return fixed_lam2308.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var reroot_path = function(p3441, root3442) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3443 = path_string_p(p3441);
    if (or_part3443 !== false) {
      var if_res2309 = or_part3443;
    } else {
      var if_res2309 = M0.__rjs_quoted__.path_for_some_system_p(p3441);
    }
    if (if_res2309 !== false) {
      var if_res2310 = M0.rvoid();
    } else {
      var if_res2310 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("(or/c path-string? path-for-some-system?)"), 0, p3441, root3442);
    }
    if_res2310;
    var let_result2311 = M0.values();
    var or_part3444 = path_string_p(root3442);
    if (or_part3444 !== false) {
      var if_res2312 = or_part3444;
    } else {
      var if_res2312 = M0.__rjs_quoted__.path_for_some_system_p(root3442);
    }
    if (if_res2312 !== false) {
      var if_res2313 = M0.rvoid();
    } else {
      var if_res2313 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("(or/c path-string? path-for-some-system?)"), 1, p3441, root3442);
    }
    if_res2313;
    var let_result2314 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(p3441) !== false) {
      var if_res2315 = M0.__rjs_quoted__.path_convention_type(p3441);
    } else {
      var if_res2315 = M0.__rjs_quoted__.system_path_convention_type();
    }
    var conv3445 = if_res2315;
    var or_part3446 = M0.__rjs_quoted__.complete_path_p(p3441);
    if (or_part3446 !== false) {
      var if_res2316 = or_part3446;
    } else {
      var if_res2316 = M0.eq_p(M0.__rjs_quoted__.system_path_convention_type(), conv3445);
    }
    if (if_res2316 !== false) {
      var if_res2317 = M0.rvoid();
    } else {
      var if_res2317 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("path is not complete and not the platform's convention"), $rjs_core.UString.makeInternedImmutable("path"), p3441, $rjs_core.UString.makeInternedImmutable("platform convention type"), M0.__rjs_quoted__.system_path_convention_type());
    }
    if_res2317;
    var let_result2318 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(root3442) !== false) {
      var if_res2319 = M0.__rjs_quoted__.path_convention_type(root3442);
    } else {
      var if_res2319 = M0.__rjs_quoted__.system_path_convention_type();
    }
    if (M0.eq_p(if_res2319, conv3445) !== false) {
      var if_res2320 = M0.rvoid();
    } else {
      var if_res2320 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("given paths use different conventions"), $rjs_core.UString.makeInternedImmutable("path"), p3441, $rjs_core.UString.makeInternedImmutable("root path"), root3442);
    }
    if_res2320;
    var let_result2321 = M0.values();
    if (M0.__rjs_quoted__.complete_path_p(p3441) !== false) {
      var if_res2322 = p3441;
    } else {
      var if_res2322 = M0.__rjs_quoted__.path__gt_complete_path(p3441);
    }
    var c_p3447 = normal_case_path(M0.__rjs_quoted__.cleanse_path(if_res2322));
    var bstr3448 = M0.__rjs_quoted__.path__gt_bytes(c_p3447);
    if (M0.eq_p(conv3445, $rjs_core.Symbol.make("unix")) !== false) {
      if (M0.bytes_eq__p(bstr3448, $rjs_core.Bytes.fromIntArray([47])) !== false) {
        if (M0.__rjs_quoted__.path_for_some_system_p(root3442) !== false) {
          var if_res2323 = root3442;
        } else {
          var if_res2323 = M0.__rjs_quoted__.string__gt_path(root3442);
        }
        var if_res2324 = if_res2323;
      } else {
        var if_res2324 = M0.__rjs_quoted__.build_path(root3442, M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.subbytes(M0.__rjs_quoted__.path__gt_bytes(c_p3447), 1), conv3445));
      }
      var if_res2331 = if_res2324;
    } else {
      if (M0.eq_p(conv3445, $rjs_core.Symbol.make("windows")) !== false) {
        if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\[a-z]:/", bstr3448) !== false) {
          var if_res2329 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3448, 4, 5), $rjs_core.Bytes.fromIntArray([92]), M0.__rjs_quoted__.subbytes(bstr3448, 6));
        } else {
          if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3448) !== false) {
            var if_res2328 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3448, 4));
          } else {
            if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3448) !== false) {
              var if_res2327 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3448, 4));
            } else {
              if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\/", bstr3448) !== false) {
                var if_res2326 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([85, 78, 67, 92]), M0.__rjs_quoted__.subbytes(bstr3448, 2));
              } else {
                if (M0.__rjs_quoted__.regexp_match_p("/^[a-z]:/", bstr3448) !== false) {
                  var if_res2325 = M0.__rjs_quoted__.bytes_append(M0.__rjs_quoted__.subbytes(bstr3448, 0, 1), M0.__rjs_quoted__.subbytes(bstr3448, 2));
                } else {
                  var if_res2325 = M0.rvoid();
                }
                var if_res2326 = if_res2325;
              }
              var if_res2327 = if_res2326;
            }
            var if_res2328 = if_res2327;
          }
          var if_res2329 = if_res2328;
        }
        var if_res2330 = M0.__rjs_quoted__.build_path(root3442, M0.__rjs_quoted__.bytes__gt_path(if_res2329, conv3445));
      } else {
        var if_res2330 = M0.rvoid();
      }
      var if_res2331 = if_res2330;
    }
    return if_res2331;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get reroot_path() {
      return reroot_path;
    },
    get path_add_extension() {
      return path_add_extension;
    },
    get path_replace_extension() {
      return path_replace_extension;
    },
    get normal_case_path() {
      return normal_case_path;
    },
    get path_string_p() {
      return path_string_p;
    }
  };
})();
var $__runtime_47_utils_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/utils.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_kw_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1069 = M0.make_struct_type_property($rjs_core.Symbol.make("keyword-impersonator"));
  var prop_keyword_impersonator = let_result1069.getAt(0);
  var keyword_impersonator_p = let_result1069.getAt(1);
  var keyword_impersonator_ref = let_result1069.getAt(2);
  var keyword_procedure_impersonator_of = function(v1750) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_impersonator_p(v1750) !== false) {
      var if_res1070 = keyword_impersonator_ref(v1750)(v1750);
    } else {
      var if_res1070 = false;
    }
    return if_res1070;
  };
  var let_result1071 = M0.make_struct_type($rjs_core.Symbol.make("keyword-procedure"), false, 4, 0, false, M0.list(M0.cons(M0.prop_checked_procedure, true), M0.cons(M0.prop_impersonator_of, keyword_procedure_impersonator_of)), M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3));
  var struct_keyword_procedure = let_result1071.getAt(0);
  var mk_kw_proc = let_result1071.getAt(1);
  var keyword_procedure_p = let_result1071.getAt(2);
  var keyword_procedure_ref = let_result1071.getAt(3);
  var keyword_procedure_set_bang_ = let_result1071.getAt(4);
  var keyword_procedure_checker = M0.make_struct_field_accessor(keyword_procedure_ref, 0);
  var keyword_procedure_proc = M0.make_struct_field_accessor(keyword_procedure_ref, 1);
  var keyword_procedure_required = M0.make_struct_field_accessor(keyword_procedure_ref, 2);
  var keyword_procedure_allowed = M0.make_struct_field_accessor(keyword_procedure_ref, 3);
  var let_result1072 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_keyword_method = let_result1072.getAt(0);
  var make_km = let_result1072.getAt(1);
  var keyword_method_p = let_result1072.getAt(2);
  var km_ref = let_result1072.getAt(3);
  var km_set_bang_ = let_result1072.getAt(4);
  var generate_arity_string = function(proc1751) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1073 = procedure_keywords(proc1751);
    var req1752 = let_result1073.getAt(0);
    var allowed1753 = let_result1073.getAt(1);
    var a1754 = M0.procedure_arity(proc1751);
    var keywords_desc1755 = function(opt1757, req1758) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp1079 = $rjs_core.UString.makeInternedImmutable("~a with keyword~a~a");
      if (M0.null_p(M0.cdr(req1758)) !== false) {
        var if_res1078 = M0.format($rjs_core.UString.makeInternedImmutable("an ~aargument"), opt1757);
      } else {
        var if_res1078 = M0.format($rjs_core.UString.makeInternedImmutable("~aarguments"), opt1757);
      }
      if (M0.null_p(M0.cdr(req1758)) !== false) {
        var if_res1077 = $rjs_core.UString.makeInternedImmutable("");
      } else {
        var if_res1077 = $rjs_core.UString.makeInternedImmutable("s");
      }
      var tmp1759 = M0.length(req1758);
      if (M0.equal_p(tmp1759, 1) !== false) {
        var if_res1076 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a"), M0.car(req1758));
      } else {
        if (M0.equal_p(tmp1759, 2) !== false) {
          var if_res1075 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a and ~a"), M0.car(req1758), M0.cadr(req1758));
        } else {
          var loop1760 = function(req1761) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(M0.cdr(req1761)) !== false) {
              var if_res1074 = M0.format($rjs_core.UString.makeInternedImmutable(" and ~a"), M0.car(req1761));
            } else {
              var if_res1074 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a,~a"), M0.car(req1761), loop1760(M0.cdr(req1761)));
            }
            return if_res1074;
          };
          var if_res1075 = loop1760(req1758);
        }
        var if_res1076 = if_res1075;
      }
      return M0.format(temp1079, if_res1078, if_res1077, if_res1076);
    };
    var method_adjust1756 = function(a1762) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part1763 = okm_p(proc1751);
      if (or_part1763 !== false) {
        var if_res1080 = or_part1763;
      } else {
        var if_res1080 = keyword_method_p(proc1751);
      }
      if (if_res1080 !== false) {
        if (M0.zero_p(a1762) !== false) {
          var if_res1081 = 0;
        } else {
          var if_res1081 = M0.sub1(a1762);
        }
        var if_res1082 = if_res1081;
      } else {
        var if_res1082 = a1762;
      }
      return if_res1082;
    };
    if (M0.number_p(a1754) !== false) {
      var a1764 = method_adjust1756(a1754);
      var if_res1089 = M0.format($rjs_core.UString.makeInternedImmutable("~a"), a1764);
    } else {
      if (M0.arity_at_least_p(a1754) !== false) {
        var a1765 = method_adjust1756(M0.arity_at_least_value(a1754));
        var if_res1088 = M0.format($rjs_core.UString.makeInternedImmutable("at least ~a"), a1765);
      } else {
        var if_res1088 = $rjs_core.UString.makeInternedImmutable("a different number");
      }
      var if_res1089 = if_res1088;
    }
    if (M0.null_p(req1752) !== false) {
      var if_res1087 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res1087 = M0.format($rjs_core.UString.makeInternedImmutable(" plus ~a"), keywords_desc1755($rjs_core.UString.makeInternedImmutable(""), req1752));
    }
    if (allowed1753 !== false) {
      var loop1767 = function(req1768, allowed1769) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(req1768) !== false) {
          var if_res1084 = allowed1769;
        } else {
          if (M0.eq_p(M0.car(req1768), M0.car(allowed1769)) !== false) {
            var if_res1083 = loop1767(M0.cdr(req1768), M0.cdr(allowed1769));
          } else {
            var if_res1083 = M0.cons(M0.car(allowed1769), loop1767(req1768, M0.cdr(allowed1769)));
          }
          var if_res1084 = if_res1083;
        }
        return if_res1084;
      };
      var others1766 = loop1767(req1752, allowed1753);
      if (M0.null_p(others1766) !== false) {
        var if_res1085 = $rjs_core.UString.makeInternedImmutable("");
      } else {
        var if_res1085 = M0.format($rjs_core.UString.makeInternedImmutable(" plus ~a"), keywords_desc1755($rjs_core.UString.makeInternedImmutable("optional "), others1766));
      }
      var if_res1086 = if_res1085;
    } else {
      var if_res1086 = $rjs_core.UString.makeInternedImmutable(" plus arbitrary keyword arguments");
    }
    return M0.string_append(if_res1089, if_res1087, if_res1086);
  };
  var let_result1090 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string)), M0.current_inspector(), 0);
  var struct_okp = let_result1090.getAt(0);
  var make_optional_keyword_procedure = let_result1090.getAt(1);
  var okp_p = let_result1090.getAt(2);
  var okp_ref = let_result1090.getAt(3);
  var okp_set_bang_ = let_result1090.getAt(4);
  var let_result1091 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_okm = let_result1091.getAt(0);
  var make_optional_keyword_method = let_result1091.getAt(1);
  var okm_p = let_result1091.getAt(2);
  var okm_ref = let_result1091.getAt(3);
  var okm_set_bang_ = let_result1091.getAt(4);
  var let_result1092 = M0.make_struct_type_property($rjs_core.Symbol.make("named-keyword-procedure"));
  var prop_named_keyword_procedure = let_result1092.getAt(0);
  var named_keyword_procedure_p = let_result1092.getAt(1);
  var keyword_procedure_name_plus_fail = let_result1092.getAt(2);
  var let_result1094 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), function(v1770, info_l1771) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(v1770) !== false) {
      var if_res1093 = M0.make_struct_field_accessor(M0.list_ref(info_l1771, 3), v1770);
    } else {
      var if_res1093 = false;
    }
    return if_res1093;
  });
  var prop_procedure_accessor = let_result1094.getAt(0);
  var procedure_accessor_p = let_result1094.getAt(1);
  var procedure_accessor_ref = let_result1094.getAt(2);
  var let_result1095 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), false, M0.list(M0.cons(M0.prop_procedure, M0.values), M0.cons(prop_procedure_accessor, M0.values)), true);
  var new_prop_procedure = let_result1095.getAt(0);
  var new_procedure_p = let_result1095.getAt(1);
  var new_procedure_ref = let_result1095.getAt(2);
  var let_result1096 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1772) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kpp_ref(v1772, 0);
  })));
  var struct_keyword_procedure_impersonator = let_result1096.getAt(0);
  var make_kpp = let_result1096.getAt(1);
  var keyword_procedure_impersonator_p = let_result1096.getAt(2);
  var kpp_ref = let_result1096.getAt(3);
  var kpp_set_bang_ = let_result1096.getAt(4);
  var let_result1097 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1773) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kmp_ref(v1773, 0);
  })));
  var struct_keyword_method_impersonator = let_result1097.getAt(0);
  var make_kmp = let_result1097.getAt(1);
  var keyword_method_impersonator_p = let_result1097.getAt(2);
  var kmp_ref = let_result1097.getAt(3);
  var kmp_set_bang_ = let_result1097.getAt(4);
  var let_result1098 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1774) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okpp_ref(v1774, 0);
  })));
  var struct_okpp = let_result1098.getAt(0);
  var make_optional_keyword_procedure_impersonator = let_result1098.getAt(1);
  var okpp_p = let_result1098.getAt(2);
  var okpp_ref = let_result1098.getAt(3);
  var okpp_set_bang_ = let_result1098.getAt(4);
  var let_result1099 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1775) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okmp_ref(v1775, 0);
  })));
  var struct_okmp = let_result1099.getAt(0);
  var make_optional_keyword_method_impersonator = let_result1099.getAt(1);
  var okmp_p = let_result1099.getAt(2);
  var okmp_ref = let_result1099.getAt(3);
  var okmp_set_bang_ = let_result1099.getAt(4);
  var let_result1100 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_by_arity_error = let_result1100.getAt(0);
  var make_kp_by_ae = let_result1100.getAt(1);
  var kp_by_ae_p = let_result1100.getAt(2);
  var kp_by_ae_ref = let_result1100.getAt(3);
  var kp_by_ae_set_bang_ = let_result1100.getAt(4);
  var let_result1101 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_by_arity_error = let_result1101.getAt(0);
  var make_km_by_ae = let_result1101.getAt(1);
  var km_by_ae_p = let_result1101.getAt(2);
  var km_by_ae_ref = let_result1101.getAt(3);
  var km_by_ae_set_bang_ = let_result1101.getAt(4);
  var let_result1102 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_impersonator_by_arity_error = let_result1102.getAt(0);
  var make_kpi_by_ae = let_result1102.getAt(1);
  var kpi_by_ae_p = let_result1102.getAt(2);
  var kpi_by_ae_ref = let_result1102.getAt(3);
  var kpi_by_ae_set_bang_ = let_result1102.getAt(4);
  var let_result1103 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_impersonator_by_arity_error = let_result1103.getAt(0);
  var make_kmi_by_ae = let_result1103.getAt(1);
  var kmi_by_ae_p = let_result1103.getAt(2);
  var kmi_by_ae_ref = let_result1103.getAt(3);
  var kmi_by_ae_set_bang_ = let_result1103.getAt(4);
  var make_required = function(name1776, fail_proc1777, method_p1778, impersonator_p1779) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part1785 = name1776;
    if (or_part1785 !== false) {
      var if_res1107 = or_part1785;
    } else {
      var if_res1107 = $rjs_core.Symbol.make("unknown");
    }
    if (impersonator_p1779 !== false) {
      if (method_p1778 !== false) {
        var if_res1104 = struct_keyword_method_impersonator_by_arity_error;
      } else {
        var if_res1104 = struct_keyword_procedure_impersonator_by_arity_error;
      }
      var if_res1106 = if_res1104;
    } else {
      if (method_p1778 !== false) {
        var if_res1105 = struct_keyword_method_by_arity_error;
      } else {
        var if_res1105 = struct_keyword_procedure_by_arity_error;
      }
      var if_res1106 = if_res1105;
    }
    var let_result1108 = M0.make_struct_type(if_res1107, if_res1106, 0, 0, false, M0.list(M0.cons(prop_named_keyword_procedure, M0.cons(name1776, fail_proc1777))), M0.current_inspector(), fail_proc1777);
    var s_1780 = let_result1108.getAt(0);
    var mk1781 = let_result1108.getAt(1);
    var __p1782 = let_result1108.getAt(2);
    var __ref1783 = let_result1108.getAt(3);
    var __set_bang_1784 = let_result1108.getAt(4);
    return mk1781;
  };
  var cl1109 = function(proc1786) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_keyword_procedure(proc1786, $rjs_core.attachProcedureArity(function() {
      for (var args17871112 = [],
          $__1 = 0; $__1 < arguments.length; $__1++)
        args17871112[$__1] = arguments[$__1];
      var args1787 = $rjs_core.Pair.listFromArray(args17871112);
      return M0.apply(proc1786, M0.rnull, M0.rnull, args1787);
    }));
  };
  var cl1110 = function(proc1788, plain_proc1789) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_optional_keyword_procedure(make_keyword_checker(M0.rnull, false, M0.procedure_arity(proc1788)), proc1788, M0.rnull, false, plain_proc1789);
  };
  var make_keyword_procedure = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1111 = {
      '1': cl1109,
      '2': cl1110
    }[arguments.length];
    if (fixed_lam1111 !== undefined) {
      return fixed_lam1111.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var keyword_apply = $rjs_core.attachProcedureArity(function(proc1790, kws1791, kw_vals1792, normal_args1793) {
    for (var normal_argss17941113 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      normal_argss17941113[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var normal_argss1794 = $rjs_core.Pair.listFromArray(normal_argss17941113);
    var type_error1795 = function(what1796, which1797) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("keyword-apply"), what1796, which1797, proc1790, kws1791, kw_vals1792, normal_args1793, normal_argss1794);
    };
    if (M0.procedure_p(proc1790) !== false) {
      var if_res1114 = M0.rvoid();
    } else {
      var if_res1114 = type_error1795($rjs_core.UString.makeInternedImmutable("procedure?"), 0);
    }
    if_res1114;
    var loop1798 = function(ks1799) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ks1799) !== false) {
        var if_res1121 = M0.rvoid();
      } else {
        var or_part1800 = M0.not(M0.pair_p(ks1799));
        if (or_part1800 !== false) {
          var if_res1115 = or_part1800;
        } else {
          var if_res1115 = M0.not(M0.__rjs_quoted__.keyword_p(M0.car(ks1799)));
        }
        if (if_res1115 !== false) {
          var if_res1120 = type_error1795($rjs_core.UString.makeInternedImmutable("(listof keyword?)"), 1);
        } else {
          if (M0.null_p(M0.cdr(ks1799)) !== false) {
            var if_res1119 = M0.rvoid();
          } else {
            var or_part1801 = M0.not(M0.pair_p(M0.cdr(ks1799)));
            if (or_part1801 !== false) {
              var if_res1116 = or_part1801;
            } else {
              var if_res1116 = M0.not(M0.__rjs_quoted__.keyword_p(M0.cadr(ks1799)));
            }
            if (if_res1116 !== false) {
              var if_res1118 = loop1798(M0.cdr(ks1799));
            } else {
              if (M0.__rjs_quoted__.keyword_lt__p(M0.car(ks1799), M0.cadr(ks1799)) !== false) {
                var if_res1117 = loop1798(M0.cdr(ks1799));
              } else {
                var if_res1117 = type_error1795($rjs_core.UString.makeInternedImmutable("(and/c (listof? keyword?) sorted? distinct?)"), 1);
              }
              var if_res1118 = if_res1117;
            }
            var if_res1119 = if_res1118;
          }
          var if_res1120 = if_res1119;
        }
        var if_res1121 = if_res1120;
      }
      return if_res1121;
    };
    loop1798(kws1791);
    if (M0.list_p(kw_vals1792) !== false) {
      var if_res1122 = M0.rvoid();
    } else {
      var if_res1122 = type_error1795($rjs_core.UString.makeInternedImmutable("list?"), 2);
    }
    if_res1122;
    if (M0.__eq_(M0.length(kws1791), M0.length(kw_vals1792)) !== false) {
      var if_res1123 = M0.rvoid();
    } else {
      var if_res1123 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.makeInternedImmutable("keyword list length does not match value list length"), $rjs_core.UString.makeInternedImmutable("keyword list length"), M0.length(kws1791), $rjs_core.UString.makeInternedImmutable("value list length"), M0.length(kw_vals1792), $rjs_core.UString.makeInternedImmutable("keyword list"), kws1791, $rjs_core.UString.makeInternedImmutable("value list"), kw_vals1792);
    }
    if_res1123;
    var loop1803 = function(normal_argss1804, pos1805) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(M0.cdr(normal_argss1804)) !== false) {
        var l1806 = M0.car(normal_argss1804);
        if (M0.list_p(l1806) !== false) {
          var if_res1124 = l1806;
        } else {
          var if_res1124 = type_error1795($rjs_core.UString.makeInternedImmutable("list?"), pos1805);
        }
        var if_res1125 = if_res1124;
      } else {
        var if_res1125 = M0.cons(M0.car(normal_argss1804), loop1803(M0.cdr(normal_argss1804), M0.add1(pos1805)));
      }
      return if_res1125;
    };
    var normal_args1802 = loop1803(M0.cons(normal_args1793, normal_argss1794), 3);
    if (M0.null_p(kws1791) !== false) {
      var if_res1126 = M0.apply(proc1790, normal_args1802);
    } else {
      var if_res1126 = M0.apply(keyword_procedure_extract_by_method(kws1791, 2 + M0.length(normal_args1802), proc1790, 0), kws1791, kw_vals1792, normal_args1802);
    }
    return if_res1126;
  });
  var procedure_keywords = function(p1807) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1807) !== false) {
      var if_res1131 = M0.values(keyword_procedure_required(p1807), keyword_procedure_allowed(p1807));
    } else {
      if (M0.procedure_p(p1807) !== false) {
        if (new_procedure_p(p1807) !== false) {
          var v1808 = new_procedure_ref(p1807);
          if (M0.procedure_p(v1808) !== false) {
            var if_res1128 = procedure_keywords(v1808);
          } else {
            var a1809 = procedure_accessor_ref(p1807);
            if (a1809 !== false) {
              var if_res1127 = procedure_keywords(a1809(p1807));
            } else {
              var if_res1127 = M0.values(M0.rnull, M0.rnull);
            }
            var if_res1128 = if_res1127;
          }
          var if_res1129 = if_res1128;
        } else {
          var if_res1129 = M0.values(M0.rnull, M0.rnull);
        }
        var if_res1130 = if_res1129;
      } else {
        var if_res1130 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-keywords"), $rjs_core.UString.makeInternedImmutable("procedure?"), p1807);
      }
      var if_res1131 = if_res1130;
    }
    return if_res1131;
  };
  var missing_kw = $rjs_core.attachProcedureArity(function(proc1810) {
    for (var args18111132 = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      args18111132[$__2 - 1] = arguments[$__2];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args1811 = $rjs_core.Pair.listFromArray(args18111132);
    return M0.apply(keyword_procedure_extract_by_method(M0.rnull, 0, proc1810, 0), M0.rnull, M0.rnull, args1811);
  });
  var check_kw_args = function(p1812, kws1813) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1814 = function(kws1815, required1816, allowed1817) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws1815) !== false) {
        if (M0.null_p(required1816) !== false) {
          var if_res1133 = M0.values(false, false);
        } else {
          var if_res1133 = M0.values(M0.car(required1816), false);
        }
        var if_res1142 = if_res1133;
      } else {
        if (M0.pair_p(required1816) !== false) {
          var if_res1134 = M0.eq_p(M0.car(required1816), M0.car(kws1815));
        } else {
          var if_res1134 = false;
        }
        if (if_res1134 !== false) {
          var temp1137 = M0.cdr(kws1815);
          var temp1136 = M0.cdr(required1816);
          if (allowed1817 !== false) {
            var if_res1135 = M0.cdr(allowed1817);
          } else {
            var if_res1135 = false;
          }
          var if_res1141 = loop1814(temp1137, temp1136, if_res1135);
        } else {
          if (M0.not(allowed1817) !== false) {
            var if_res1140 = loop1814(M0.cdr(kws1815), required1816, false);
          } else {
            if (M0.pair_p(allowed1817) !== false) {
              if (M0.eq_p(M0.car(allowed1817), M0.car(kws1815)) !== false) {
                var if_res1138 = loop1814(M0.cdr(kws1815), required1816, M0.cdr(allowed1817));
              } else {
                var if_res1138 = loop1814(kws1815, required1816, M0.cdr(allowed1817));
              }
              var if_res1139 = if_res1138;
            } else {
              var if_res1139 = M0.values(false, M0.car(kws1815));
            }
            var if_res1140 = if_res1139;
          }
          var if_res1141 = if_res1140;
        }
        var if_res1142 = if_res1141;
      }
      return if_res1142;
    };
    return loop1814(kws1813, keyword_procedure_required(p1812), keyword_procedure_allowed(p1812));
  };
  var make_keyword_checker = function(req_kws1818, allowed_kws1819, arity1820) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.not(allowed_kws1819) !== false) {
      if (M0.null_p(req_kws1818) !== false) {
        if (M0.integer_p(arity1820) !== false) {
          var if_res1147 = function(kws1821, a1822) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (true !== false) {
              var if_res1143 = M0.__eq_(a1822, arity1820);
            } else {
              var if_res1143 = false;
            }
            return if_res1143;
          };
        } else {
          if (M0.arity_at_least_p(arity1820) !== false) {
            var arity1823 = M0.arity_at_least_value(arity1820);
            var if_res1146 = function(kws1824, a1825) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1144 = M0.__gt__eq_(a1825, arity1823);
              } else {
                var if_res1144 = false;
              }
              return if_res1144;
            };
          } else {
            var if_res1146 = function(kws1826, a1827) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1145 = arity_includes_p(arity1820, a1827);
              } else {
                var if_res1145 = false;
              }
              return if_res1145;
            };
          }
          var if_res1147 = if_res1146;
        }
        var if_res1153 = if_res1147;
      } else {
        if (M0.integer_p(arity1820) !== false) {
          var if_res1152 = function(kws1828, a1829) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (subset_p(req_kws1818, kws1828) !== false) {
              var if_res1148 = M0.__eq_(a1829, arity1820);
            } else {
              var if_res1148 = false;
            }
            return if_res1148;
          };
        } else {
          if (M0.arity_at_least_p(arity1820) !== false) {
            var arity1830 = M0.arity_at_least_value(arity1820);
            var if_res1151 = function(kws1831, a1832) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1818, kws1831) !== false) {
                var if_res1149 = M0.__gt__eq_(a1832, arity1830);
              } else {
                var if_res1149 = false;
              }
              return if_res1149;
            };
          } else {
            var if_res1151 = function(kws1833, a1834) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1818, kws1833) !== false) {
                var if_res1150 = arity_includes_p(arity1820, a1834);
              } else {
                var if_res1150 = false;
              }
              return if_res1150;
            };
          }
          var if_res1152 = if_res1151;
        }
        var if_res1153 = if_res1152;
      }
      var if_res1186 = if_res1153;
    } else {
      if (M0.null_p(allowed_kws1819) !== false) {
        if (M0.integer_p(arity1820) !== false) {
          var if_res1158 = function(kws1835, a1836) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(kws1835) !== false) {
              var if_res1154 = M0.__eq_(a1836, arity1820);
            } else {
              var if_res1154 = false;
            }
            return if_res1154;
          };
        } else {
          if (M0.arity_at_least_p(arity1820) !== false) {
            var arity1837 = M0.arity_at_least_value(arity1820);
            var if_res1157 = function(kws1838, a1839) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1838) !== false) {
                var if_res1155 = M0.__gt__eq_(a1839, arity1837);
              } else {
                var if_res1155 = false;
              }
              return if_res1155;
            };
          } else {
            var if_res1157 = function(kws1840, a1841) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1840) !== false) {
                var if_res1156 = arity_includes_p(arity1820, a1841);
              } else {
                var if_res1156 = false;
              }
              return if_res1156;
            };
          }
          var if_res1158 = if_res1157;
        }
        var if_res1185 = if_res1158;
      } else {
        if (M0.null_p(req_kws1818) !== false) {
          if (M0.integer_p(arity1820) !== false) {
            var if_res1163 = function(kws1842, a1843) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(kws1842, allowed_kws1819) !== false) {
                var if_res1159 = M0.__eq_(a1843, arity1820);
              } else {
                var if_res1159 = false;
              }
              return if_res1159;
            };
          } else {
            if (M0.arity_at_least_p(arity1820) !== false) {
              var arity1844 = M0.arity_at_least_value(arity1820);
              var if_res1162 = function(kws1845, a1846) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1845, allowed_kws1819) !== false) {
                  var if_res1160 = M0.__gt__eq_(a1846, arity1844);
                } else {
                  var if_res1160 = false;
                }
                return if_res1160;
              };
            } else {
              var if_res1162 = function(kws1847, a1848) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1847, allowed_kws1819) !== false) {
                  var if_res1161 = arity_includes_p(arity1820, a1848);
                } else {
                  var if_res1161 = false;
                }
                return if_res1161;
              };
            }
            var if_res1163 = if_res1162;
          }
          var if_res1184 = if_res1163;
        } else {
          if (M0.equal_p(req_kws1818, allowed_kws1819) !== false) {
            if (M0.integer_p(arity1820) !== false) {
              var if_res1177 = function(kws1849, a1850) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var loop1851 = function(kws1852, req_kws1853) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.null_p(req_kws1853) !== false) {
                    var if_res1166 = M0.null_p(kws1852);
                  } else {
                    if (M0.null_p(kws1852) !== false) {
                      var if_res1165 = false;
                    } else {
                      if (M0.eq_p(M0.car(kws1852), M0.car(req_kws1853)) !== false) {
                        var if_res1164 = loop1851(M0.cdr(kws1852), M0.cdr(req_kws1853));
                      } else {
                        var if_res1164 = false;
                      }
                      var if_res1165 = if_res1164;
                    }
                    var if_res1166 = if_res1165;
                  }
                  return if_res1166;
                };
                if (loop1851(kws1849, req_kws1818) !== false) {
                  var if_res1167 = M0.__eq_(a1850, arity1820);
                } else {
                  var if_res1167 = false;
                }
                return if_res1167;
              };
            } else {
              if (M0.arity_at_least_p(arity1820) !== false) {
                var arity1854 = M0.arity_at_least_value(arity1820);
                var if_res1176 = function(kws1855, a1856) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1857 = function(kws1858, req_kws1859) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1859) !== false) {
                      var if_res1170 = M0.null_p(kws1858);
                    } else {
                      if (M0.null_p(kws1858) !== false) {
                        var if_res1169 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1858), M0.car(req_kws1859)) !== false) {
                          var if_res1168 = loop1857(M0.cdr(kws1858), M0.cdr(req_kws1859));
                        } else {
                          var if_res1168 = false;
                        }
                        var if_res1169 = if_res1168;
                      }
                      var if_res1170 = if_res1169;
                    }
                    return if_res1170;
                  };
                  if (loop1857(kws1855, req_kws1818) !== false) {
                    var if_res1171 = M0.__gt__eq_(a1856, arity1854);
                  } else {
                    var if_res1171 = false;
                  }
                  return if_res1171;
                };
              } else {
                var if_res1176 = function(kws1860, a1861) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1862 = function(kws1863, req_kws1864) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1864) !== false) {
                      var if_res1174 = M0.null_p(kws1863);
                    } else {
                      if (M0.null_p(kws1863) !== false) {
                        var if_res1173 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1863), M0.car(req_kws1864)) !== false) {
                          var if_res1172 = loop1862(M0.cdr(kws1863), M0.cdr(req_kws1864));
                        } else {
                          var if_res1172 = false;
                        }
                        var if_res1173 = if_res1172;
                      }
                      var if_res1174 = if_res1173;
                    }
                    return if_res1174;
                  };
                  if (loop1862(kws1860, req_kws1818) !== false) {
                    var if_res1175 = arity_includes_p(arity1820, a1861);
                  } else {
                    var if_res1175 = false;
                  }
                  return if_res1175;
                };
              }
              var if_res1177 = if_res1176;
            }
            var if_res1183 = if_res1177;
          } else {
            if (M0.integer_p(arity1820) !== false) {
              var if_res1182 = function(kws1865, a1866) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subsets_p(req_kws1818, kws1865, allowed_kws1819) !== false) {
                  var if_res1178 = M0.__eq_(a1866, arity1820);
                } else {
                  var if_res1178 = false;
                }
                return if_res1178;
              };
            } else {
              if (M0.arity_at_least_p(arity1820) !== false) {
                var arity1867 = M0.arity_at_least_value(arity1820);
                var if_res1181 = function(kws1868, a1869) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1818, kws1868, allowed_kws1819) !== false) {
                    var if_res1179 = M0.__gt__eq_(a1869, arity1867);
                  } else {
                    var if_res1179 = false;
                  }
                  return if_res1179;
                };
              } else {
                var if_res1181 = function(kws1870, a1871) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1818, kws1870, allowed_kws1819) !== false) {
                    var if_res1180 = arity_includes_p(arity1820, a1871);
                  } else {
                    var if_res1180 = false;
                  }
                  return if_res1180;
                };
              }
              var if_res1182 = if_res1181;
            }
            var if_res1183 = if_res1182;
          }
          var if_res1184 = if_res1183;
        }
        var if_res1185 = if_res1184;
      }
      var if_res1186 = if_res1185;
    }
    return if_res1186;
  };
  var arity_includes_p = function(arity1872, a1873) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.integer_p(arity1872) !== false) {
      var if_res1188 = M0.__eq_(arity1872, a1873);
    } else {
      if (M0.arity_at_least_p(arity1872) !== false) {
        var if_res1187 = M0.__gt__eq_(a1873, M0.arity_at_least_value(a1873));
      } else {
        var if_res1187 = M0.ormap(function(ar1874) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return arity_includes_p(ar1874, a1873);
        }, arity1872);
      }
      var if_res1188 = if_res1187;
    }
    return if_res1188;
  };
  var subset_p = function(l11875, l21876) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11875) !== false) {
      var if_res1191 = true;
    } else {
      if (M0.null_p(l21876) !== false) {
        var if_res1190 = false;
      } else {
        if (M0.eq_p(M0.car(l11875), M0.car(l21876)) !== false) {
          var if_res1189 = subset_p(M0.cdr(l11875), M0.cdr(l21876));
        } else {
          var if_res1189 = subset_p(l11875, M0.cdr(l21876));
        }
        var if_res1190 = if_res1189;
      }
      var if_res1191 = if_res1190;
    }
    return if_res1191;
  };
  var subsets_p = function(l11877, l21878, l31879) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11877) !== false) {
      var if_res1196 = subset_p(l21878, l31879);
    } else {
      if (M0.null_p(l21878) !== false) {
        var if_res1195 = false;
      } else {
        if (M0.null_p(l31879) !== false) {
          var if_res1194 = false;
        } else {
          var v21880 = M0.car(l21878);
          if (M0.eq_p(M0.car(l11877), v21880) !== false) {
            var if_res1193 = subsets_p(M0.cdr(l11877), M0.cdr(l21878), M0.cdr(l31879));
          } else {
            if (M0.eq_p(v21880, M0.car(l31879)) !== false) {
              var if_res1192 = subsets_p(l11877, M0.cdr(l21878), M0.cdr(l31879));
            } else {
              var if_res1192 = subsets_p(l11877, l21878, M0.cdr(l31879));
            }
            var if_res1193 = if_res1192;
          }
          var if_res1194 = if_res1193;
        }
        var if_res1195 = if_res1194;
      }
      var if_res1196 = if_res1195;
    }
    return if_res1196;
  };
  var keyword_procedure_extract_by_method = function(kws1881, n1882, p1883, method_n1884) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1883) !== false) {
      var if_res1197 = keyword_procedure_checker(p1883)(kws1881, n1882);
    } else {
      var if_res1197 = false;
    }
    if (if_res1197 !== false) {
      var if_res1225 = keyword_procedure_proc(p1883);
    } else {
      if (M0.not(keyword_procedure_p(p1883)) !== false) {
        if (M0.procedure_p(p1883) !== false) {
          if (new_procedure_p(p1883) !== false) {
            var a1887 = procedure_accessor_ref(p1883);
            if (a1887 !== false) {
              var if_res1198 = a1887(p1883);
            } else {
              var if_res1198 = false;
            }
            var if_res1199 = if_res1198;
          } else {
            var if_res1199 = false;
          }
          var or_part1886 = if_res1199;
          if (or_part1886 !== false) {
            var if_res1202 = or_part1886;
          } else {
            var or_part1888 = M0.__rjs_quoted__.procedure_extract_target(p1883);
            if (or_part1888 !== false) {
              var if_res1201 = or_part1888;
            } else {
              if (new_procedure_p(p1883) !== false) {
                var if_res1200 = $rjs_core.Symbol.make("method");
              } else {
                var if_res1200 = false;
              }
              var if_res1201 = if_res1200;
            }
            var if_res1202 = if_res1201;
          }
          var if_res1203 = if_res1202;
        } else {
          var if_res1203 = false;
        }
        var if_res1204 = if_res1203;
      } else {
        var if_res1204 = false;
      }
      var p21885 = if_res1204;
      if (p21885 !== false) {
        if (M0.eq_p(p21885, $rjs_core.Symbol.make("method")) !== false) {
          var p31889 = keyword_procedure_extract_by_method(kws1881, M0.add1(n1882), new_procedure_ref(p1883), M0.add1(method_n1884));
          var if_res1206 = $rjs_core.attachProcedureArity(function(kws1890, kw_args1891) {
            for (var args18921205 = [],
                $__3 = 2; $__3 < arguments.length; $__3++)
              args18921205[$__3 - 2] = arguments[$__3];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var args1892 = $rjs_core.Pair.listFromArray(args18921205);
            return M0.apply(p31889, kws1890, kw_args1891, M0.cons(p1883, args1892));
          });
        } else {
          var if_res1206 = keyword_procedure_extract_by_method(kws1881, n1882, p21885, method_n1884);
        }
        var if_res1224 = if_res1206;
      } else {
        var if_res1224 = $rjs_core.attachProcedureArity(function(kws1893, kw_args1894) {
          for (var args18951207 = [],
              $__4 = 2; $__4 < arguments.length; $__4++)
            args18951207[$__4 - 2] = arguments[$__4];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var args1895 = $rjs_core.Pair.listFromArray(args18951207);
          if (keyword_procedure_p(p1883) !== false) {
            var if_res1208 = check_kw_args(p1883, kws1893);
          } else {
            var if_res1208 = M0.values(false, M0.car(kws1893));
          }
          var let_result1209 = if_res1208;
          var missing_kw1896 = let_result1209.getAt(0);
          var extra_kw1897 = let_result1209.getAt(1);
          var or_part1902 = keyword_method_p(p1883);
          if (or_part1902 !== false) {
            var if_res1210 = or_part1902;
          } else {
            var if_res1210 = okm_p(p1883);
          }
          if (if_res1210 !== false) {
            var if_res1211 = 1;
          } else {
            var if_res1211 = 0;
          }
          var method_n1901 = method_n1884 + if_res1211;
          if (M0.__gt__eq_(n1882, method_n1901) !== false) {
            var if_res1212 = n1882 - method_n1901;
          } else {
            var if_res1212 = n1882;
          }
          var n1898 = if_res1212;
          if (M0.null_p(args1895) !== false) {
            var if_res1213 = M0.null_p(kws1893);
          } else {
            var if_res1213 = false;
          }
          if (if_res1213 !== false) {
            var if_res1214 = $rjs_core.UString.makeInternedImmutable("");
          } else {
            var if_res1214 = M0.apply(M0.string_append, $rjs_core.UString.makeInternedImmutable("\n  arguments...:"), M0.append(M0.map(function(v1903) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.makeInternedImmutable("\n   ~e"), v1903);
            }, args1895), M0.map(function(kw1904, kw_arg1905) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.makeInternedImmutable("\n   ~a ~e"), kw1904, kw_arg1905);
            }, kws1893, kw_args1894)));
          }
          var args_str1899 = if_res1214;
          var proc_name1900 = function(p1906) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (named_keyword_procedure_p(p1906) !== false) {
              var if_res1215 = M0.car(keyword_procedure_name_plus_fail(p1906));
            } else {
              var if_res1215 = false;
            }
            var or_part1907 = if_res1215;
            if (or_part1907 !== false) {
              var if_res1217 = or_part1907;
            } else {
              var or_part1908 = M0.__rjs_quoted__.object_name(p1906);
              if (or_part1908 !== false) {
                var if_res1216 = or_part1908;
              } else {
                var if_res1216 = p1906;
              }
              var if_res1217 = if_res1216;
            }
            return if_res1217;
          };
          if (extra_kw1897 !== false) {
            if (keyword_procedure_p(p1883) !== false) {
              var if_res1219 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: procedure does not expect an argument with given keyword\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a\n"), $rjs_core.UString.makeInternedImmutable("  given keyword: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1900(p1883), extra_kw1897, args_str1899);
            } else {
              if (M0.procedure_p(p1883) !== false) {
                var if_res1218 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: procedure does not accept keyword arguments\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1900(p1883), args_str1899);
              } else {
                var if_res1218 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: not a procedure;\n"), $rjs_core.UString.makeInternedImmutable(" expected a procedure that can be applied to arguments\n"), $rjs_core.UString.makeInternedImmutable("  given: ~e"), $rjs_core.UString.makeInternedImmutable("~a")), p1883, args_str1899);
              }
              var if_res1219 = if_res1218;
            }
            var if_res1223 = if_res1219;
          } else {
            if (missing_kw1896 !== false) {
              var if_res1222 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: required keyword argument not supplied\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a\n"), $rjs_core.UString.makeInternedImmutable("  required keyword: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1900(p1883), missing_kw1896, args_str1899);
            } else {
              var temp1221 = M0.string_append($rjs_core.UString.makeInternedImmutable("application: no case matching ~a non-keyword argument~a\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a"), $rjs_core.UString.makeInternedImmutable("~a"));
              if (M0.__eq_(1, n1898 - 2) !== false) {
                var if_res1220 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1220 = $rjs_core.UString.makeInternedImmutable("s");
              }
              var if_res1222 = M0.format(temp1221, n1898 - 2, if_res1220, proc_name1900(p1883), args_str1899);
            }
            var if_res1223 = if_res1222;
          }
          return M0.raise(M0.__rjs_quoted__.exn_fail_contract(if_res1223, M0.current_continuation_marks()));
        });
      }
      var if_res1225 = if_res1224;
    }
    return if_res1225;
  };
  var keyword_procedure_extract = function(p1909, kws1910, n1911) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return keyword_procedure_extract_by_method(kws1910, n1911, p1909, 0);
  };
  var procedure_reduce_keyword_arity = function(proc1912, arity1913, req_kw1914, allowed_kw1915) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (okp_p(proc1912) !== false) {
      var if_res1226 = okp_ref(proc1912, 0);
    } else {
      var if_res1226 = proc1912;
    }
    var plain_proc1916 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1226, arity1913);
    var sorted_p1917 = function(kws1918) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1919 = function(kws1920) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(kws1920) !== false) {
          var if_res1229 = true;
        } else {
          if (M0.null_p(M0.cdr(kws1920)) !== false) {
            var if_res1228 = true;
          } else {
            if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws1920), M0.cadr(kws1920)) !== false) {
              var if_res1227 = loop1919(M0.cdr(kws1920));
            } else {
              var if_res1227 = false;
            }
            var if_res1228 = if_res1227;
          }
          var if_res1229 = if_res1228;
        }
        return if_res1229;
      };
      return loop1919(kws1918);
    };
    if (M0.list_p(req_kw1914) !== false) {
      if (M0.andmap(M0.__rjs_quoted__.keyword_p, req_kw1914) !== false) {
        var if_res1230 = sorted_p1917(req_kw1914);
      } else {
        var if_res1230 = false;
      }
      var if_res1231 = if_res1230;
    } else {
      var if_res1231 = false;
    }
    if (if_res1231 !== false) {
      var if_res1232 = M0.rvoid();
    } else {
      var if_res1232 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("(and/c (listof? keyword?) sorted? distinct?)"), 2, proc1912, arity1913, req_kw1914, allowed_kw1915);
    }
    if_res1232;
    if (allowed_kw1915 !== false) {
      if (M0.list_p(allowed_kw1915) !== false) {
        if (M0.andmap(M0.__rjs_quoted__.keyword_p, allowed_kw1915) !== false) {
          var if_res1233 = sorted_p1917(allowed_kw1915);
        } else {
          var if_res1233 = false;
        }
        var if_res1234 = if_res1233;
      } else {
        var if_res1234 = false;
      }
      if (if_res1234 !== false) {
        var if_res1235 = M0.rvoid();
      } else {
        var if_res1235 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("(or/c (and/c (listof? keyword?) sorted? distinct?) #f)"), 3, proc1912, arity1913, req_kw1914, allowed_kw1915);
      }
      if_res1235;
      if (subset_p(req_kw1914, allowed_kw1915) !== false) {
        var if_res1236 = M0.rvoid();
      } else {
        var if_res1236 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("allowed-keyword list does not include all required keywords"), $rjs_core.UString.makeInternedImmutable("allowed-keyword list"), allowed_kw1915, $rjs_core.UString.makeInternedImmutable("required keywords"), req_kw1914);
      }
      var if_res1237 = if_res1236;
    } else {
      var if_res1237 = M0.rvoid();
    }
    if_res1237;
    var let_result1238 = procedure_keywords(proc1912);
    var old_req1921 = let_result1238.getAt(0);
    var old_allowed1922 = let_result1238.getAt(1);
    if (subset_p(old_req1921, req_kw1914) !== false) {
      var if_res1239 = M0.rvoid();
    } else {
      var if_res1239 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot reduce required keyword set"), $rjs_core.UString.makeInternedImmutable("required keywords"), old_req1921, $rjs_core.UString.makeInternedImmutable("requested required keywords"), req_kw1914);
    }
    if_res1239;
    if (old_allowed1922 !== false) {
      if (subset_p(req_kw1914, old_allowed1922) !== false) {
        var if_res1240 = M0.rvoid();
      } else {
        var if_res1240 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot require keywords not in original allowed set"), $rjs_core.UString.makeInternedImmutable("original allowed keywords"), old_allowed1922, $rjs_core.UString.makeInternedImmutable("requested required keywords"), req_kw1914);
      }
      if_res1240;
      var or_part1923 = M0.not(allowed_kw1915);
      if (or_part1923 !== false) {
        var if_res1241 = or_part1923;
      } else {
        var if_res1241 = subset_p(allowed_kw1915, old_allowed1922);
      }
      if (if_res1241 !== false) {
        var if_res1242 = M0.rvoid();
      } else {
        var if_res1242 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot allow keywords not in original allowed set"), $rjs_core.UString.makeInternedImmutable("original allowed keywords"), old_allowed1922, $rjs_core.UString.makeInternedImmutable("requested allowed keywords"), allowed_kw1915);
      }
      var if_res1243 = if_res1242;
    } else {
      var if_res1243 = M0.rvoid();
    }
    if_res1243;
    if (M0.null_p(allowed_kw1915) !== false) {
      var if_res1252 = plain_proc1916;
    } else {
      var inc_arity1924 = function(arity1925, delta1926) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var loop1927 = function(a1928) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.integer_p(a1928) !== false) {
            var if_res1245 = a1928 + delta1926;
          } else {
            if (M0.arity_at_least_p(a1928) !== false) {
              var if_res1244 = M0.arity_at_least(M0.arity_at_least_value(a1928) + delta1926);
            } else {
              var if_res1244 = M0.map(loop1927, a1928);
            }
            var if_res1245 = if_res1244;
          }
          return if_res1245;
        };
        return loop1927(arity1925);
      };
      var new_arity1929 = inc_arity1924(arity1913, 2);
      var kw_checker1930 = make_keyword_checker(req_kw1914, allowed_kw1915, new_arity1929);
      var proc1931 = normalize_proc(proc1912);
      var new_kw_proc1932 = M0.__rjs_quoted__.procedure_reduce_arity(keyword_procedure_proc(proc1931), new_arity1929);
      if (M0.null_p(req_kw1914) !== false) {
        if (okm_p(proc1931) !== false) {
          var if_res1246 = make_optional_keyword_method;
        } else {
          var if_res1246 = make_optional_keyword_procedure;
        }
        var if_res1251 = if_res1246(kw_checker1930, new_kw_proc1932, req_kw1914, allowed_kw1915, plain_proc1916);
      } else {
        if (named_keyword_procedure_p(proc1931) !== false) {
          var if_res1249 = M0.car(keyword_procedure_name_plus_fail(proc1931));
        } else {
          var if_res1249 = false;
        }
        var or_part1933 = if_res1249;
        if (or_part1933 !== false) {
          var if_res1250 = or_part1933;
        } else {
          var if_res1250 = M0.__rjs_quoted__.object_name(proc1931);
        }
        var temp1248 = M0.__rjs_quoted__.procedure_reduce_arity(missing_kw, inc_arity1924(arity1913, 1));
        var or_part1934 = okm_p(proc1931);
        if (or_part1934 !== false) {
          var if_res1247 = or_part1934;
        } else {
          var if_res1247 = keyword_method_p(proc1931);
        }
        var if_res1251 = make_required(if_res1250, temp1248, if_res1247, false)(kw_checker1930, new_kw_proc1932, req_kw1914, allowed_kw1915);
      }
      var if_res1252 = if_res1251;
    }
    return if_res1252;
  };
  var procedure_reduce_arity1935 = function(proc1936, arity1937) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc1936) !== false) {
      var let_result1253 = procedure_keywords(proc1936);
      var req1938 = let_result1253.getAt(0);
      var allows1939 = let_result1253.getAt(1);
      if (M0.pair_p(req1938) !== false) {
        var if_res1254 = M0.not(M0.null_p(arity1937));
      } else {
        var if_res1254 = false;
      }
      var if_res1255 = if_res1254;
    } else {
      var if_res1255 = false;
    }
    if (if_res1255 !== false) {
      var if_res1257 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-arity"), $rjs_core.UString.makeInternedImmutable("procedure has required keyword arguments"), $rjs_core.UString.makeInternedImmutable("procedure"), proc1936);
    } else {
      if (okm_p(proc1936) !== false) {
        var if_res1256 = M0.__rjs_quoted__.procedure__gt_method(proc1936);
      } else {
        var if_res1256 = proc1936;
      }
      var if_res1257 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1256, arity1937);
    }
    return if_res1257;
  };
  var new_procedure_reduce_arity = procedure_reduce_arity1935;
  var procedure__gt_method1940 = function(proc1941) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proc1942 = normalize_proc(proc1941);
    if (keyword_procedure_p(proc1942) !== false) {
      if (okm_p(proc1942) !== false) {
        var if_res1260 = proc1942;
      } else {
        if (keyword_method_p(proc1942) !== false) {
          var if_res1259 = proc1942;
        } else {
          if (okp_p(proc1942) !== false) {
            var if_res1258 = make_optional_keyword_method(keyword_procedure_checker(proc1942), keyword_procedure_proc(proc1942), keyword_procedure_required(proc1942), keyword_procedure_allowed(proc1942), okp_ref(proc1942, 0));
          } else {
            var name_plus_fail1943 = keyword_procedure_name_plus_fail(proc1942);
            var mk1944 = make_required(M0.car(name_plus_fail1943), M0.cdr(name_plus_fail1943), true, false);
            var if_res1258 = mk1944(keyword_procedure_checker(proc1942), keyword_procedure_proc(proc1942), keyword_procedure_required(proc1942), keyword_procedure_allowed(proc1942));
          }
          var if_res1259 = if_res1258;
        }
        var if_res1260 = if_res1259;
      }
      var if_res1261 = if_res1260;
    } else {
      var if_res1261 = M0.__rjs_quoted__.procedure__gt_method(proc1942);
    }
    return if_res1261;
  };
  var new_procedure__gt_method = procedure__gt_method1940;
  var procedure_rename1945 = function(proc1946, name1947) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc1946) !== false) {
      var if_res1262 = M0.symbol_p(name1947);
    } else {
      var if_res1262 = false;
    }
    if (M0.not(if_res1262) !== false) {
      var if_res1265 = M0.__rjs_quoted__.procedure_rename(proc1946, name1947);
    } else {
      if (okp_p(proc1946) !== false) {
        if (okm_p(proc1946) !== false) {
          var if_res1263 = make_optional_keyword_method;
        } else {
          var if_res1263 = make_optional_keyword_procedure;
        }
        var if_res1264 = if_res1263(keyword_procedure_checker(proc1946), keyword_procedure_proc(proc1946), keyword_procedure_required(proc1946), keyword_procedure_allowed(proc1946), M0.__rjs_quoted__.procedure_rename(okp_ref(proc1946, 0), name1947));
      } else {
        var name_plus_fail1948 = keyword_procedure_name_plus_fail(proc1946);
        var mk1949 = make_required(name1947, M0.cdr(name_plus_fail1948), keyword_method_p(proc1946), false);
        var if_res1264 = mk1949(keyword_procedure_checker(proc1946), keyword_procedure_proc(proc1946), keyword_procedure_required(proc1946), keyword_procedure_allowed(proc1946));
      }
      var if_res1265 = if_res1264;
    }
    return if_res1265;
  };
  var new_procedure_rename = procedure_rename1945;
  var chaperone_procedure1950 = $rjs_core.attachProcedureArity(function(proc1951, wrap_proc1952) {
    for (var props19531266 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      props19531266[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1953 = $rjs_core.Pair.listFromArray(props19531266);
    return do_chaperone_procedure(false, false, M0.__rjs_quoted__.chaperone_procedure, $rjs_core.Symbol.make("chaperone-procedure"), proc1951, wrap_proc1952, props1953);
  });
  var new_chaperone_procedure = chaperone_procedure1950;
  var unsafe_chaperone_procedure1954 = $rjs_core.attachProcedureArity(function(proc1955, wrap_proc1956) {
    for (var props19571267 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      props19571267[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1957 = $rjs_core.Pair.listFromArray(props19571267);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_chaperone_procedure, $rjs_core.Symbol.make("unsafe-chaperone-procedure"), proc1955, wrap_proc1956, props1957);
  });
  var new_unsafe_chaperone_procedure = unsafe_chaperone_procedure1954;
  var impersonate_procedure1958 = $rjs_core.attachProcedureArity(function(proc1959, wrap_proc1960) {
    for (var props19611268 = [],
        $__5 = 2; $__5 < arguments.length; $__5++)
      props19611268[$__5 - 2] = arguments[$__5];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1961 = $rjs_core.Pair.listFromArray(props19611268);
    return do_chaperone_procedure(true, false, M0.__rjs_quoted__.impersonate_procedure, $rjs_core.Symbol.make("impersonate-procedure"), proc1959, wrap_proc1960, props1961);
  });
  var new_impersonate_procedure = impersonate_procedure1958;
  var unsafe_impersonate_procedure1962 = $rjs_core.attachProcedureArity(function(proc1963, wrap_proc1964) {
    for (var props19651269 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      props19651269[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1965 = $rjs_core.Pair.listFromArray(props19651269);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_impersonate_procedure, $rjs_core.Symbol.make("unsafe-impersonate-procedure"), proc1963, wrap_proc1964, props1965);
  });
  var new_unsafe_impersonate_procedure = unsafe_impersonate_procedure1962;
  var chaperone_procedure_times_1966 = $rjs_core.attachProcedureArity(function(proc1967, wrap_proc1968) {
    for (var props19691270 = [],
        $__7 = 2; $__7 < arguments.length; $__7++)
      props19691270[$__7 - 2] = arguments[$__7];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1969 = $rjs_core.Pair.listFromArray(props19691270);
    return do_chaperone_procedure(false, true, M0.__rjs_quoted__.chaperone_procedure_times_, $rjs_core.Symbol.make("chaperone-procedure"), proc1967, wrap_proc1968, props1969);
  });
  var new_chaperone_procedure_times_ = chaperone_procedure_times_1966;
  var impersonate_procedure_times_1970 = $rjs_core.attachProcedureArity(function(proc1971, wrap_proc1972) {
    for (var props19731271 = [],
        $__8 = 2; $__8 < arguments.length; $__8++)
      props19731271[$__8 - 2] = arguments[$__8];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1973 = $rjs_core.Pair.listFromArray(props19731271);
    return do_chaperone_procedure(true, true, M0.__rjs_quoted__.impersonate_procedure_times_, $rjs_core.Symbol.make("impersonate-procedure"), proc1971, wrap_proc1972, props1973);
  });
  var new_impersonate_procedure_times_ = impersonate_procedure_times_1970;
  var do_chaperone_procedure = function(is_impersonator_p1974, self_arg_p1975, chaperone_procedure1976, name1977, proc1978, wrap_proc1979, props1980) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc1981 = normalize_proc(proc1978);
    var n_wrap_proc1982 = normalize_proc(wrap_proc1979);
    var or_part1983 = M0.not(keyword_procedure_p(n_proc1981));
    if (or_part1983 !== false) {
      var if_res1273 = or_part1983;
    } else {
      var or_part1984 = M0.not(M0.procedure_p(wrap_proc1979));
      if (or_part1984 !== false) {
        var if_res1272 = or_part1984;
      } else {
        var if_res1272 = bad_props_p(props1980);
      }
      var if_res1273 = if_res1272;
    }
    if (if_res1273 !== false) {
      var if_res1337 = M0.apply(chaperone_procedure1976, proc1978, wrap_proc1979, props1980);
    } else {
      chaperone_arity_match_checking(self_arg_p1975, name1977, proc1978, wrap_proc1979, props1980);
      var p1986 = keyword_procedure_proc(n_wrap_proc1982);
      if (self_arg_p1975 !== false) {
        var cl1274 = $rjs_core.attachProcedureArity(function(self_proc1987, kws1988, args1989) {
          for (var rest19901279 = [],
              $__9 = 3; $__9 < arguments.length; $__9++)
            rest19901279[$__9 - 3] = arguments[$__9];
          if (arguments.length < 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest1990 = $rjs_core.Pair.listFromArray(rest19901279);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p1986, kws1988, args1989, self_proc1987, rest1990);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results19911280 = [],
                $__10 = 0; $__10 < arguments.length; $__10++)
              results19911280[$__10] = arguments[$__10];
            var results1991 = $rjs_core.Pair.listFromArray(results19911280);
            var len1992 = M0.length(results1991);
            var alen1993 = M0.length(rest1990);
            if (M0.__lt_(len1992, alen1993 + 1) !== false) {
              var if_res1281 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.makeInternedImmutable("wrong number of results from wrapper procedure"), $rjs_core.UString.makeInternedImmutable("expected minimum number of results"), alen1993 + 1, $rjs_core.UString.makeInternedImmutable("received number of results"), len1992, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
            } else {
              var if_res1281 = M0.rvoid();
            }
            if_res1281;
            var num_extra1994 = len1992 - (alen1993 + 1);
            var new_args1995 = M0.list_ref(results1991, num_extra1994);
            if (M0.list_p(new_args1995) !== false) {
              var if_res1282 = M0.__eq_(M0.length(new_args1995), M0.length(args1989));
            } else {
              var if_res1282 = false;
            }
            if (if_res1282 !== false) {
              var if_res1286 = M0.rvoid();
            } else {
              var temp1285 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1284 = $rjs_core.UString.makeInternedImmutable("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len1992, alen1993) !== false) {
                var if_res1283 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1283 = $rjs_core.UString.makeInternedImmutable(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1286 = M0.__rjs_quoted__.raise_arguments_error(temp1285, M0.format(temp1284, if_res1283), $rjs_core.UString.makeInternedImmutable("first result"), new_args1995, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
            }
            if_res1286;
            M0.for_each(function(kw1996, new_arg1997, arg1998) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1974 !== false) {
                var if_res1288 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg1997, arg1998) !== false) {
                  var if_res1287 = M0.rvoid();
                } else {
                  var if_res1287 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.makeInternedImmutable("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw1996), $rjs_core.UString.makeInternedImmutable("result"), new_arg1997, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
                }
                var if_res1288 = if_res1287;
              }
              return if_res1288;
            }, kws1988, new_args1995, args1989);
            var tmp1999 = num_extra1994;
            if (M0.equal_p(tmp1999, 0) !== false) {
              var if_res1291 = M0.apply(M0.values, kws1988, results1991);
            } else {
              if (M0.equal_p(tmp1999, 1) !== false) {
                var if_res1290 = M0.apply(M0.values, M0.car(results1991), kws1988, M0.cdr(results1991));
              } else {
                var loop2000 = function(results2001, c2002) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c2002) !== false) {
                    var if_res1289 = M0.cons(kws1988, results2001);
                  } else {
                    var if_res1289 = M0.cons(M0.car(results2001), loop2000(M0.cdr(results2001), M0.sub1(c2002)));
                  }
                  return if_res1289;
                };
                var if_res1290 = M0.apply(M0.values, loop2000(results1991, num_extra1994));
              }
              var if_res1291 = if_res1290;
            }
            return if_res1291;
          }));
        });
        var cl1275 = $rjs_core.attachProcedureArity(function() {
          for (var other20031292 = [],
              $__10 = 0; $__10 < arguments.length; $__10++)
            other20031292[$__10] = arguments[$__10];
          var other2003 = $rjs_core.Pair.listFromArray(other20031292);
          return M0.error($rjs_core.UString.makeInternedImmutable("shouldn't get here"));
        });
        var if_res1312 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1276 = {}[arguments.length];
          if (fixed_lam1276 !== undefined) {
            return fixed_lam1276.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1274.length, 1) !== false) {
              var if_res1278 = cl1274.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1277 = cl1275.apply(null, arguments);
              } else {
                var if_res1277 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
              }
              var if_res1278 = if_res1277;
            }
            return if_res1278;
          }
        }, [M0.make_arity_at_least(0)]);
      } else {
        var cl1293 = $rjs_core.attachProcedureArity(function(kws2004, args2005) {
          for (var rest20061298 = [],
              $__11 = 2; $__11 < arguments.length; $__11++)
            rest20061298[$__11 - 2] = arguments[$__11];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest2006 = $rjs_core.Pair.listFromArray(rest20061298);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p1986, kws2004, args2005, rest2006);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results20071299 = [],
                $__12 = 0; $__12 < arguments.length; $__12++)
              results20071299[$__12] = arguments[$__12];
            var results2007 = $rjs_core.Pair.listFromArray(results20071299);
            var len2008 = M0.length(results2007);
            var alen2009 = M0.length(rest2006);
            if (M0.__lt_(len2008, alen2009 + 1) !== false) {
              var if_res1300 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.makeInternedImmutable("wrong number of results from wrapper procedure"), $rjs_core.UString.makeInternedImmutable("expected minimum number of results"), alen2009 + 1, $rjs_core.UString.makeInternedImmutable("received number of results"), len2008, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
            } else {
              var if_res1300 = M0.rvoid();
            }
            if_res1300;
            var num_extra2010 = len2008 - (alen2009 + 1);
            var new_args2011 = M0.list_ref(results2007, num_extra2010);
            if (M0.list_p(new_args2011) !== false) {
              var if_res1301 = M0.__eq_(M0.length(new_args2011), M0.length(args2005));
            } else {
              var if_res1301 = false;
            }
            if (if_res1301 !== false) {
              var if_res1305 = M0.rvoid();
            } else {
              var temp1304 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1303 = $rjs_core.UString.makeInternedImmutable("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len2008, alen2009) !== false) {
                var if_res1302 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1302 = $rjs_core.UString.makeInternedImmutable(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1305 = M0.__rjs_quoted__.raise_arguments_error(temp1304, M0.format(temp1303, if_res1302), $rjs_core.UString.makeInternedImmutable("first result"), new_args2011, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
            }
            if_res1305;
            M0.for_each(function(kw2012, new_arg2013, arg2014) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1974 !== false) {
                var if_res1307 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg2013, arg2014) !== false) {
                  var if_res1306 = M0.rvoid();
                } else {
                  var if_res1306 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.makeInternedImmutable("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw2012), $rjs_core.UString.makeInternedImmutable("result"), new_arg2013, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1979);
                }
                var if_res1307 = if_res1306;
              }
              return if_res1307;
            }, kws2004, new_args2011, args2005);
            var tmp2015 = num_extra2010;
            if (M0.equal_p(tmp2015, 0) !== false) {
              var if_res1310 = M0.apply(M0.values, kws2004, results2007);
            } else {
              if (M0.equal_p(tmp2015, 1) !== false) {
                var if_res1309 = M0.apply(M0.values, M0.car(results2007), kws2004, M0.cdr(results2007));
              } else {
                var loop2016 = function(results2017, c2018) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c2018) !== false) {
                    var if_res1308 = M0.cons(kws2004, results2017);
                  } else {
                    var if_res1308 = M0.cons(M0.car(results2017), loop2016(M0.cdr(results2017), M0.sub1(c2018)));
                  }
                  return if_res1308;
                };
                var if_res1309 = M0.apply(M0.values, loop2016(results2007, num_extra2010));
              }
              var if_res1310 = if_res1309;
            }
            return if_res1310;
          }));
        });
        var cl1294 = $rjs_core.attachProcedureArity(function() {
          for (var other20191311 = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            other20191311[$__12] = arguments[$__12];
          var other2019 = $rjs_core.Pair.listFromArray(other20191311);
          return M0.error($rjs_core.UString.makeInternedImmutable("shouldn't get here"));
        });
        var if_res1312 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1295 = {}[arguments.length];
          if (fixed_lam1295 !== undefined) {
            return fixed_lam1295.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1293.length, 1) !== false) {
              var if_res1297 = cl1293.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1296 = cl1294.apply(null, arguments);
              } else {
                var if_res1296 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
              }
              var if_res1297 = if_res1296;
            }
            return if_res1297;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var kw_chaperone1985 = if_res1312;
      var wrap2022 = function(proc2023, n_proc2024) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.not(M0.eq_p(n_proc2024, proc2023)) !== false) {
          var if_res1313 = new_procedure_p(proc2023);
        } else {
          var if_res1313 = false;
        }
        if (if_res1313 !== false) {
          var v2025 = new_procedure_ref(proc2023);
          if (M0.exact_integer_p(v2025) !== false) {
            var acc2026 = procedure_accessor_ref(proc2023);
            var if_res1329 = M0.values(M0.__rjs_quoted__.chaperone_struct(proc2023, acc2026, function(self2027, sub_proc2028) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var let_result1314 = wrap2022(sub_proc2028, normalize_proc(sub_proc2028));
              var f2029 = let_result1314.getAt(0);
              var acc2030 = let_result1314.getAt(1);
              return f2029;
            }), acc2026);
          } else {
            if (is_impersonator_p1974 !== false) {
              var if_res1328 = M0.__rjs_quoted__.impersonate_struct;
            } else {
              var if_res1328 = M0.__rjs_quoted__.chaperone_struct;
            }
            if (okp_p(n_proc2024) !== false) {
              var if_res1327 = chaperone_procedure1976(proc2023, wrap_proc1979);
            } else {
              var if_res1327 = proc2023;
            }
            var new_kw_proc2031 = if_res1328(if_res1327, new_procedure_ref, function(self2032, proc2033) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1974 !== false) {
                var if_res1326 = new_impersonate_procedure;
              } else {
                var if_res1326 = new_chaperone_procedure;
              }
              if (self_arg_p1975 !== false) {
                var if_res1325 = $rjs_core.attachProcedureArity(function(proc_self2034, kws2035, kw_args2036, self2037) {
                  for (var args20381315 = [],
                      $__13 = 4; $__13 < arguments.length; $__13++)
                    args20381315[$__13 - 4] = arguments[$__13];
                  if (arguments.length < 4) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2038 = $rjs_core.Pair.listFromArray(args20381315);
                  var len2039 = M0.length(args2038);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone1985, proc_self2034, kws2035, kw_args2036, args2038);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20401316 = [],
                        $__14 = 0; $__14 < arguments.length; $__14++)
                      results20401316[$__14] = arguments[$__14];
                    var results2040 = $rjs_core.Pair.listFromArray(results20401316);
                    var r_len2041 = M0.length(results2040);
                    var list_take2042 = function(l2043, n2044) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2044) !== false) {
                        var if_res1317 = M0.rnull;
                      } else {
                        var if_res1317 = M0.cons(M0.car(l2043), list_take2042(M0.cdr(l2043), M0.sub1(n2044)));
                      }
                      return if_res1317;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList($rjs_core.Symbol.make("proc-self"))) !== false) {
                      var if_res1318 = M0.__eq_(r_len2041, 2 + len2039);
                    } else {
                      var if_res1318 = false;
                    }
                    if (if_res1318 !== false) {
                      var if_res1319 = M0.apply(M0.values, M0.cadr(results2040), self2037, M0.cddr(results2040));
                    } else {
                      var skip2045 = r_len2041 - len2039;
                      var if_res1319 = M0.apply(M0.values, M0.append(list_take2042(results2040, skip2045 - 2), M0.list(M0.list_ref(results2040, M0.sub1(skip2045)), self2037), M0.__rjs_quoted__.list_tail(results2040, skip2045)));
                    }
                    return if_res1319;
                  }));
                });
              } else {
                var if_res1325 = $rjs_core.attachProcedureArity(function(kws2046, kw_args2047, self2048) {
                  for (var args20491320 = [],
                      $__14 = 3; $__14 < arguments.length; $__14++)
                    args20491320[$__14 - 3] = arguments[$__14];
                  if (arguments.length < 3) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2049 = $rjs_core.Pair.listFromArray(args20491320);
                  var len2050 = M0.length(args2049);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone1985, kws2046, kw_args2047, args2049);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20511321 = [],
                        $__15 = 0; $__15 < arguments.length; $__15++)
                      results20511321[$__15] = arguments[$__15];
                    var results2051 = $rjs_core.Pair.listFromArray(results20511321);
                    var r_len2052 = M0.length(results2051);
                    var list_take2053 = function(l2054, n2055) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2055) !== false) {
                        var if_res1322 = M0.rnull;
                      } else {
                        var if_res1322 = M0.cons(M0.car(l2054), list_take2053(M0.cdr(l2054), M0.sub1(n2055)));
                      }
                      return if_res1322;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList()) !== false) {
                      var if_res1323 = M0.__eq_(r_len2052, 2 + len2050);
                    } else {
                      var if_res1323 = false;
                    }
                    if (if_res1323 !== false) {
                      var if_res1324 = M0.apply(M0.values, M0.cadr(results2051), self2048, M0.cddr(results2051));
                    } else {
                      var skip2056 = r_len2052 - len2050;
                      var if_res1324 = M0.apply(M0.values, M0.append(list_take2053(results2051, skip2056 - 2), M0.list(M0.list_ref(results2051, M0.sub1(skip2056)), self2048), M0.__rjs_quoted__.list_tail(results2051, skip2056)));
                    }
                    return if_res1324;
                  }));
                });
              }
              return if_res1326(proc2033, make_keyword_procedure(if_res1325));
            });
            var if_res1329 = M0.values(new_kw_proc2031, new_procedure_ref);
          }
          var if_res1334 = if_res1329;
        } else {
          if (okp_p(n_proc2024) !== false) {
            if (is_impersonator_p1974 !== false) {
              if (okm_p(n_proc2024) !== false) {
                var if_res1330 = make_optional_keyword_method_impersonator;
              } else {
                var if_res1330 = make_optional_keyword_procedure_impersonator;
              }
              var if_res1331 = if_res1330(keyword_procedure_checker(n_proc2024), chaperone_procedure1976(keyword_procedure_proc(n_proc2024), kw_chaperone1985), keyword_procedure_required(n_proc2024), keyword_procedure_allowed(n_proc2024), chaperone_procedure1976(okp_ref(n_proc2024, 0), okp_ref(n_wrap_proc1982, 0)), n_proc2024);
            } else {
              var if_res1331 = M0.__rjs_quoted__.chaperone_struct(proc2023, keyword_procedure_proc, function(self2057, proc2058) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1976(proc2058, kw_chaperone1985);
              }, M0.make_struct_field_accessor(okp_ref, 0), function(self2059, proc2060) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1976(proc2060, okp_ref(n_wrap_proc1982, 0));
              });
            }
            var if_res1333 = M0.values(if_res1331, keyword_procedure_proc);
          } else {
            if (is_impersonator_p1974 !== false) {
              var name_plus_fail2061 = keyword_procedure_name_plus_fail(n_proc2024);
              var mk2062 = make_required(M0.car(name_plus_fail2061), M0.cdr(name_plus_fail2061), keyword_method_p(n_proc2024), true);
              var if_res1332 = mk2062(keyword_procedure_checker(n_proc2024), chaperone_procedure1976(keyword_procedure_proc(n_proc2024), kw_chaperone1985), keyword_procedure_required(n_proc2024), keyword_procedure_allowed(n_proc2024), n_proc2024);
            } else {
              var if_res1332 = M0.__rjs_quoted__.chaperone_struct(n_proc2024, keyword_procedure_proc, function(self2063, proc2064) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1976(proc2064, kw_chaperone1985);
              });
            }
            var if_res1333 = M0.values(if_res1332, keyword_procedure_proc);
          }
          var if_res1334 = if_res1333;
        }
        return if_res1334;
      };
      var let_result1335 = wrap2022(proc1978, n_proc1981);
      var new_proc2020 = let_result1335.getAt(0);
      var chap_accessor2021 = let_result1335.getAt(1);
      if (M0.null_p(props1980) !== false) {
        var if_res1336 = new_proc2020;
      } else {
        var if_res1336 = M0.apply(M0.__rjs_quoted__.chaperone_struct, new_proc2020, chap_accessor2021, false, props1980);
      }
      var if_res1337 = if_res1336;
    }
    return if_res1337;
  };
  var do_unsafe_chaperone_procedure = function(unsafe_chaperone_procedure2065, name2066, proc2067, wrap_proc2068, props2069) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc2070 = normalize_proc(proc2067);
    var n_wrap_proc2071 = normalize_proc(wrap_proc2068);
    var or_part2072 = M0.not(keyword_procedure_p(n_proc2070));
    if (or_part2072 !== false) {
      var if_res1339 = or_part2072;
    } else {
      var or_part2073 = M0.not(M0.procedure_p(wrap_proc2068));
      if (or_part2073 !== false) {
        var if_res1338 = or_part2073;
      } else {
        var if_res1338 = bad_props_p(props2069);
      }
      var if_res1339 = if_res1338;
    }
    if (if_res1339 !== false) {
      var if_res1340 = M0.apply(unsafe_chaperone_procedure2065, proc2067, wrap_proc2068, props2069);
    } else {
      chaperone_arity_match_checking(false, name2066, proc2067, wrap_proc2068, props2069);
      var if_res1340 = M0.apply(unsafe_chaperone_procedure2065, proc2067, wrap_proc2068, props2069);
    }
    return if_res1340;
  };
  var bad_props_p = function(props2074) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2075 = function(props2076) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(props2076) !== false) {
        var if_res1343 = false;
      } else {
        if (M0.__rjs_quoted__.impersonator_property_p(M0.car(props2076)) !== false) {
          var props2077 = M0.cdr(props2076);
          var or_part2078 = M0.null_p(props2077);
          if (or_part2078 !== false) {
            var if_res1341 = or_part2078;
          } else {
            var if_res1341 = loop2075(M0.cdr(props2077));
          }
          var if_res1342 = if_res1341;
        } else {
          var if_res1342 = true;
        }
        var if_res1343 = if_res1342;
      }
      return if_res1343;
    };
    return loop2075(props2074);
  };
  var chaperone_arity_match_checking = function(self_arg_p2079, name2080, proc2081, wrap_proc2082, props2083) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a2084 = M0.procedure_arity(proc2081);
    var b2085 = M0.procedure_arity(wrap_proc2082);
    if (self_arg_p2079 !== false) {
      var if_res1344 = 1;
    } else {
      var if_res1344 = 0;
    }
    var d2086 = if_res1344;
    var let_result1345 = procedure_keywords(proc2081);
    var a_req2087 = let_result1345.getAt(0);
    var a_allow2088 = let_result1345.getAt(1);
    var let_result1346 = procedure_keywords(wrap_proc2082);
    var b_req2089 = let_result1346.getAt(0);
    var b_allow2090 = let_result1346.getAt(1);
    var includes_p2091 = function(a2092, b2093) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.number_p(b2093) !== false) {
        if (M0.number_p(a2092) !== false) {
          var if_res1348 = M0.__eq_(b2093, a2092 + d2086);
        } else {
          if (M0.arity_at_least_p(a2092) !== false) {
            var if_res1347 = M0.__gt__eq_(b2093, M0.arity_at_least_value(a2092) + d2086);
          } else {
            var if_res1347 = M0.ormap(function(a2094) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return includes_p2091(a2094, b2093);
            }, a2092);
          }
          var if_res1348 = if_res1347;
        }
        var if_res1352 = if_res1348;
      } else {
        if (M0.arity_at_least_p(b2093) !== false) {
          if (M0.number_p(a2092) !== false) {
            var if_res1350 = false;
          } else {
            if (M0.arity_at_least_p(a2092) !== false) {
              var if_res1349 = M0.__gt__eq_(M0.arity_at_least_value(b2093), M0.arity_at_least_value(a2092) + d2086);
            } else {
              var if_res1349 = M0.ormap(function(a2095) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return includes_p2091(b2093, a2095);
              }, a2092);
            }
            var if_res1350 = if_res1349;
          }
          var if_res1351 = if_res1350;
        } else {
          var if_res1351 = M0.andmap(function(b2096) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return includes_p2091(a2092, b2096);
          }, b2093);
        }
        var if_res1352 = if_res1351;
      }
      return if_res1352;
    };
    if (includes_p2091(b2085, a2084) !== false) {
      var if_res1353 = M0.rvoid();
    } else {
      var if_res1353 = M0.apply(M0.__rjs_quoted__.chaperone_procedure, proc2081, wrap_proc2082, props2083);
    }
    if_res1353;
    if (subset_p(b_req2089, a_req2087) !== false) {
      var if_res1354 = M0.rvoid();
    } else {
      var if_res1354 = M0.__rjs_quoted__.raise_arguments_error(name2080, $rjs_core.UString.makeInternedImmutable("wrapper procedure requires more keywords than original procedure"), $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc2082, $rjs_core.UString.makeInternedImmutable("original procedure"), proc2081);
    }
    if_res1354;
    var or_part2097 = M0.not(b_allow2090);
    if (or_part2097 !== false) {
      var if_res1356 = or_part2097;
    } else {
      if (a_allow2088 !== false) {
        var if_res1355 = subset_p(a_allow2088, b_allow2090);
      } else {
        var if_res1355 = false;
      }
      var if_res1356 = if_res1355;
    }
    if (if_res1356 !== false) {
      var if_res1357 = M0.rvoid();
    } else {
      var if_res1357 = M0.__rjs_quoted__.raise_arguments_error(name2080, $rjs_core.UString.makeInternedImmutable("wrapper procedure does not accept all keywords of original procedure"), $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc2082, $rjs_core.UString.makeInternedImmutable("original procedure"), proc2081);
    }
    if_res1357;
    return M0.rvoid();
  };
  var normalize_proc = function(proc2098) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc2098) !== false) {
      var if_res1365 = proc2098;
    } else {
      if (new_procedure_p(proc2098) !== false) {
        var let_result1358 = procedure_keywords(proc2098);
        var req_kws2099 = let_result1358.getAt(0);
        var allowed_kws2100 = let_result1358.getAt(1);
        if (M0.null_p(allowed_kws2100) !== false) {
          var if_res1363 = proc2098;
        } else {
          var if_res1363 = make_optional_keyword_procedure(function(given_kws2101, given_argc2102) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.procedure_arity_includes_p(proc2098, given_argc2102 - 2, true) !== false) {
              var or_part2103 = M0.not(allowed_kws2100);
              if (or_part2103 !== false) {
                var if_res1360 = or_part2103;
              } else {
                var if_res1360 = subset_p(given_kws2101, allowed_kws2100);
              }
              if (if_res1360 !== false) {
                var if_res1361 = subset_p(req_kws2099, given_kws2101);
              } else {
                var if_res1361 = false;
              }
              var if_res1362 = if_res1361;
            } else {
              var if_res1362 = false;
            }
            return if_res1362;
          }, $rjs_core.attachProcedureArity(function(kws2104, kw_args2105) {
            for (var vals21061359 = [],
                $__9 = 2; $__9 < arguments.length; $__9++)
              vals21061359[$__9 - 2] = arguments[$__9];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2106 = $rjs_core.Pair.listFromArray(vals21061359);
            return keyword_apply(proc2098, kws2104, kw_args2105, vals2106);
          }), req_kws2099, allowed_kws2100, proc2098);
        }
        var if_res1364 = if_res1363;
      } else {
        var if_res1364 = proc2098;
      }
      var if_res1365 = if_res1364;
    }
    return if_res1365;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.keyword_procedure_extract = keyword_procedure_extract;
  __rjs_quoted__.struct_keyword_method_by_arity_error = struct_keyword_method_by_arity_error;
  __rjs_quoted__.make_optional_keyword_method = make_optional_keyword_method;
  __rjs_quoted__.prop_named_keyword_procedure = prop_named_keyword_procedure;
  __rjs_quoted__.struct_keyword_procedure_by_arity_error = struct_keyword_procedure_by_arity_error;
  __rjs_quoted__.subsets_p = subsets_p;
  __rjs_quoted__.struct_keyword_procedure = struct_keyword_procedure;
  __rjs_quoted__.subset_p = subset_p;
  __rjs_quoted__.missing_kw = missing_kw;
  __rjs_quoted__.make_optional_keyword_procedure = make_optional_keyword_procedure;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get new_impersonate_procedure_times_() {
      return new_impersonate_procedure_times_;
    },
    get new_chaperone_procedure_times_() {
      return new_chaperone_procedure_times_;
    },
    get new_impersonate_procedure() {
      return new_impersonate_procedure;
    },
    get new_chaperone_procedure() {
      return new_chaperone_procedure;
    },
    get new_procedure_rename() {
      return new_procedure_rename;
    },
    get new_procedure__gt_method() {
      return new_procedure__gt_method;
    },
    get new_prop_procedure() {
      return new_prop_procedure;
    },
    get procedure_reduce_keyword_arity() {
      return procedure_reduce_keyword_arity;
    },
    get new_procedure_reduce_arity() {
      return new_procedure_reduce_arity;
    },
    get procedure_keywords() {
      return procedure_keywords;
    },
    get keyword_apply() {
      return keyword_apply;
    },
    get make_keyword_procedure() {
      return make_keyword_procedure;
    }
  };
})();
var $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/pre-base.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M2 = $__runtime_47_utils_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var new_apply_proc = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2112, kw_args2113, proc2114, args2115) {
    for (var rest21161369 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      rest21161369[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2116 = $rjs_core.Pair.listFromArray(rest21161369);
    return M3.keyword_apply(proc2114, kws2112, kw_args2113, M0.apply(M0.list_times_, args2115, rest2116));
  }), M0.apply);
  var new_keyword_apply = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2117, kw_args2118, proc2119, orig_kws2120, orig_kw_args2121, args2122) {
    for (var rest21231370 = [],
        $__2 = 6; $__2 < arguments.length; $__2++)
      rest21231370[$__2 - 6] = arguments[$__2];
    if (arguments.length < 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2123 = $rjs_core.Pair.listFromArray(rest21231370);
    var loop2126 = function(kws2127, kw_args2128, kws22129, kw_args22130, swapped_p2131) {
      if (arguments.length !== 5) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws2127) !== false) {
        var if_res1375 = M0.values(kws22129, kw_args22130);
      } else {
        if (M0.null_p(kws22129) !== false) {
          var if_res1374 = M0.values(kws2127, kw_args2128);
        } else {
          if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws2127), M0.car(kws22129)) !== false) {
            var let_result1371 = loop2126(M0.cdr(kws2127), M0.cdr(kw_args2128), kws22129, kw_args22130, false);
            var res_kws2132 = let_result1371.getAt(0);
            var res_kw_args2133 = let_result1371.getAt(1);
            var if_res1373 = M0.values(M0.cons(M0.car(kws2127), res_kws2132), M0.cons(M0.car(kw_args2128), res_kw_args2133));
          } else {
            if (swapped_p2131 !== false) {
              var if_res1372 = M0.raise_mismatch_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.makeInternedImmutable("keyword duplicated in list and direct keyword arguments: "), M0.car(kws2127));
            } else {
              var if_res1372 = loop2126(kws22129, kw_args22130, kws2127, kw_args2128, true);
            }
            var if_res1373 = if_res1372;
          }
          var if_res1374 = if_res1373;
        }
        var if_res1375 = if_res1374;
      }
      return if_res1375;
    };
    var let_result1376 = loop2126(kws2117, kw_args2118, orig_kws2120, orig_kw_args2121, false);
    var kws2124 = let_result1376.getAt(0);
    var kw_args2125 = let_result1376.getAt(1);
    return M3.keyword_apply(proc2119, kws2124, kw_args2125, M0.apply(M0.list_times_, args2122, rest2123));
  }), M3.keyword_apply);
  var double_flonum_p = function(x2134) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.__rjs_quoted__.flonum_p(x2134);
  };
  var cl1377 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random();
  };
  var cl1378 = function(x2136) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random(x2136);
  };
  var cl1379 = function(x2137, y2138) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(y2138) !== false) {
      if (M0.exact_integer_p(x2137) !== false) {
        var if_res1382 = M0.rvoid();
      } else {
        var if_res1382 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, x2137, y2138);
      }
      if_res1382;
      if (M0.__lt_(x2137, y2138) !== false) {
        var if_res1383 = M0.rvoid();
      } else {
        var if_res1383 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.makeInternedImmutable("(>/c "), M0.number__gt_string(x2137), $rjs_core.UString.makeInternedImmutable(")")), 1, x2137, y2138);
      }
      if_res1383;
      var d2139 = y2138 - x2137;
      if (M0.__lt__eq_(d2139, 4294967087) !== false) {
        var if_res1384 = M0.rvoid();
      } else {
        var if_res1384 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("difference between arguments is greater than 4294967087"), $rjs_core.UString.makeInternedImmutable("min"), x2137, $rjs_core.UString.makeInternedImmutable("max"), y2138);
      }
      if_res1384;
      var if_res1389 = x2137 + M0.random(d2139);
    } else {
      if (M0.__rjs_quoted__.pseudo_random_generator_p(y2138) !== false) {
        if (M0.exact_integer_p(x2137) !== false) {
          var if_res1385 = M0.__lt__eq_(1, x2137, 4294967087);
        } else {
          var if_res1385 = false;
        }
        if (if_res1385 !== false) {
          var if_res1386 = M0.rvoid();
        } else {
          var if_res1386 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("(integer-in 1 4294967087)"), 0, x2137, y2138);
        }
        if_res1386;
        var if_res1388 = M0.random(x2137, y2138);
      } else {
        if (M0.exact_integer_p(x2137) !== false) {
          var if_res1387 = M0.rvoid();
        } else {
          var if_res1387 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, x2137, y2138);
        }
        if_res1387;
        var if_res1388 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("(or/c exact-integer? pseudo-random-generator?)"), 1, x2137, y2138);
      }
      var if_res1389 = if_res1388;
    }
    return if_res1389;
  };
  var cl1380 = function(min2140, max2141, prng2142) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(min2140) !== false) {
      var if_res1390 = M0.rvoid();
    } else {
      var if_res1390 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, min2140, max2141, prng2142);
    }
    if_res1390;
    if (M0.exact_integer_p(max2141) !== false) {
      var if_res1391 = M0.rvoid();
    } else {
      var if_res1391 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 1, min2140, max2141, prng2142);
    }
    if_res1391;
    if (M0.__lt_(min2140, max2141) !== false) {
      var if_res1392 = M0.rvoid();
    } else {
      var if_res1392 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.makeInternedImmutable("(>/c "), M0.number__gt_string(min2140), $rjs_core.UString.makeInternedImmutable(")")), 1, min2140, max2141, prng2142);
    }
    if_res1392;
    var d2143 = max2141 - min2140;
    if (M0.__lt__eq_(d2143, 4294967087) !== false) {
      var if_res1393 = M0.rvoid();
    } else {
      var if_res1393 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("difference between first and second arguments is greater than 4294967087"), $rjs_core.UString.makeInternedImmutable("min"), min2140, $rjs_core.UString.makeInternedImmutable("max"), max2141, $rjs_core.UString.makeInternedImmutable("rand-gen"), prng2142);
    }
    if_res1393;
    if (M0.__rjs_quoted__.pseudo_random_generator_p(prng2142) !== false) {
      var if_res1394 = M0.rvoid();
    } else {
      var if_res1394 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("pseudo-random-generator?"), 2, min2140, max2141, prng2142);
    }
    if_res1394;
    return min2140 + M0.random(d2143, prng2142);
  };
  var random2135 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1381 = {
      '0': cl1377,
      '1': cl1378,
      '2': cl1379,
      '3': cl1380
    }[arguments.length];
    if (fixed_lam1381 !== undefined) {
      return fixed_lam1381.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2, 3]);
  var __random = random2135;
  var core42145 = function(fail12146, fail22147, collection32148, new_rest2149) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collection2150 = collection32148;
    if (fail22147 !== false) {
      var if_res1395 = fail12146;
    } else {
      var if_res1395 = function(s2152) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.makeInternedImmutable("collection-path: "), s2152), M0.current_continuation_marks()));
      };
    }
    var fail2151 = if_res1395;
    var collections2153 = new_rest2149;
    return M2.collection_path(fail2151, collection2150, collections2153);
  };
  var unpack52154 = function(given_kws2155, given_args2156, collection32157, new_rest2158) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fail22159 = M0.pair_p(given_kws2155);
    if (fail22159 !== false) {
      var if_res1396 = M0.car(given_args2156);
    } else {
      var if_res1396 = M0.rvoid();
    }
    var fail12160 = if_res1396;
    return core42145(fail12160, fail22159, collection32157, new_rest2158);
  };
  var cl1402 = $rjs_core.attachProcedureArity(function(given_kws2165, given_args2166, collection2167) {
    for (var collections21681405 = [],
        $__3 = 3; $__3 < arguments.length; $__3++)
      collections21681405[$__3 - 3] = arguments[$__3];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2168 = $rjs_core.Pair.listFromArray(collections21681405);
    return unpack52154(given_kws2165, given_args2166, collection2167, collections2168);
  });
  var temp1406 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1403 = {}[arguments.length];
    if (fixed_lam1403 !== undefined) {
      return fixed_lam1403.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1402.length, 1) !== false) {
        var if_res1404 = cl1402.apply(null, arguments);
      } else {
        var if_res1404 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1404;
    }
  }, [M0.make_arity_at_least(3)]);
  var temp1401 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("fail"));
  var cl1397 = $rjs_core.attachProcedureArity(function(collection2170) {
    for (var collections21711400 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      collections21711400[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2171 = $rjs_core.Pair.listFromArray(collections21711400);
    return unpack52154(M0.rnull, M0.rnull, collection2170, collections2171);
  });
  var collection_path2169 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1398 = {}[arguments.length];
    if (fixed_lam1398 !== undefined) {
      return fixed_lam1398.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1397.length, 1) !== false) {
        var if_res1399 = cl1397.apply(null, arguments);
      } else {
        var if_res1399 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1399;
    }
  }, [M0.make_arity_at_least(1)]);
  var collection_path2144 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2161, given_argc2162) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2162, 3) !== false) {
      var l12163 = given_kws2161;
      if (M0.null_p(l12163) !== false) {
        var if_res1408 = l12163;
      } else {
        if (M0.eq_p(M0.car(l12163), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1407 = M0.cdr(l12163);
        } else {
          var if_res1407 = l12163;
        }
        var if_res1408 = if_res1407;
      }
      var l12164 = if_res1408;
      var if_res1409 = M0.null_p(l12164);
    } else {
      var if_res1409 = false;
    }
    return if_res1409;
  }, temp1406, M0.rnull, temp1401, collection_path2169);
  var new_collection_path = collection_path2144;
  var core122173 = function(check_compiled_p62174, check_compiled_p82175, fail72176, fail92177, file_name102178, collection112179, new_rest2180) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var file_name2181 = file_name102178;
    var collection2182 = collection112179;
    if (check_compiled_p82175 !== false) {
      var if_res1411 = check_compiled_p62174;
    } else {
      if (M1.path_string_p(file_name2181) !== false) {
        var if_res1410 = M0.__rjs_quoted__.regexp_match_p("/.[.]rkt$/", file_name2181);
      } else {
        var if_res1410 = false;
      }
      var if_res1411 = if_res1410;
    }
    var check_compiled_p2183 = if_res1411;
    if (fail92177 !== false) {
      var if_res1412 = fail72176;
    } else {
      var if_res1412 = function(s2185) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.makeInternedImmutable("collection-file-path: "), s2185), M0.current_continuation_marks()));
      };
    }
    var fail2184 = if_res1412;
    var collections2186 = new_rest2180;
    return M2.collection_file_path(fail2184, check_compiled_p2183, file_name2181, collection2182, collections2186);
  };
  var unpack132187 = function(given_kws2188, given_args2189, file_name102190, collection112191, new_rest2192) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2188) !== false) {
      var if_res1413 = M0.eq_p($rjs_core.Keyword.make("check-compiled?"), M0.car(given_kws2188));
    } else {
      var if_res1413 = false;
    }
    var check_compiled_p82193 = if_res1413;
    if (check_compiled_p82193 !== false) {
      var if_res1414 = M0.car(given_args2189);
    } else {
      var if_res1414 = M0.rvoid();
    }
    var check_compiled_p62194 = if_res1414;
    if (check_compiled_p82193 !== false) {
      var if_res1415 = M0.cdr(given_kws2188);
    } else {
      var if_res1415 = given_kws2188;
    }
    var given_kws2195 = if_res1415;
    if (check_compiled_p82193 !== false) {
      var if_res1416 = M0.cdr(given_args2189);
    } else {
      var if_res1416 = given_args2189;
    }
    var given_args2196 = if_res1416;
    var fail92197 = M0.pair_p(given_kws2195);
    if (fail92197 !== false) {
      var if_res1417 = M0.car(given_args2196);
    } else {
      var if_res1417 = M0.rvoid();
    }
    var fail72198 = if_res1417;
    return core122173(check_compiled_p62194, check_compiled_p82193, fail72198, fail92197, file_name102190, collection112191, new_rest2192);
  };
  var cl1423 = $rjs_core.attachProcedureArity(function(given_kws2205, given_args2206, file_name2207, collection2208) {
    for (var collections22091426 = [],
        $__5 = 4; $__5 < arguments.length; $__5++)
      collections22091426[$__5 - 4] = arguments[$__5];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2209 = $rjs_core.Pair.listFromArray(collections22091426);
    return unpack132187(given_kws2205, given_args2206, file_name2207, collection2208, collections2209);
  });
  var temp1427 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1424 = {}[arguments.length];
    if (fixed_lam1424 !== undefined) {
      return fixed_lam1424.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1423.length, 1) !== false) {
        var if_res1425 = cl1423.apply(null, arguments);
      } else {
        var if_res1425 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1425;
    }
  }, [M0.make_arity_at_least(4)]);
  var temp1422 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("check-compiled?"), $rjs_core.Keyword.make("fail"));
  var cl1418 = $rjs_core.attachProcedureArity(function(file_name2211, collection2212) {
    for (var collections22131421 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      collections22131421[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2213 = $rjs_core.Pair.listFromArray(collections22131421);
    return unpack132187(M0.rnull, M0.rnull, file_name2211, collection2212, collections2213);
  });
  var collection_file_path2210 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1419 = {}[arguments.length];
    if (fixed_lam1419 !== undefined) {
      return fixed_lam1419.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1418.length, 1) !== false) {
        var if_res1420 = cl1418.apply(null, arguments);
      } else {
        var if_res1420 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1420;
    }
  }, [M0.make_arity_at_least(2)]);
  var collection_file_path2172 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2199, given_argc2200) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2200, 4) !== false) {
      var l12201 = given_kws2199;
      if (M0.null_p(l12201) !== false) {
        var if_res1429 = l12201;
      } else {
        if (M0.eq_p(M0.car(l12201), $rjs_core.Keyword.make("check-compiled?")) !== false) {
          var if_res1428 = M0.cdr(l12201);
        } else {
          var if_res1428 = l12201;
        }
        var if_res1429 = if_res1428;
      }
      var l12202 = if_res1429;
      var l12203 = l12202;
      if (M0.null_p(l12203) !== false) {
        var if_res1431 = l12203;
      } else {
        if (M0.eq_p(M0.car(l12203), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1430 = M0.cdr(l12203);
        } else {
          var if_res1430 = l12203;
        }
        var if_res1431 = if_res1430;
      }
      var l12204 = if_res1431;
      var if_res1432 = M0.null_p(l12204);
    } else {
      var if_res1432 = false;
    }
    return if_res1432;
  }, temp1427, M0.rnull, temp1422, collection_file_path2210);
  var new_collection_file_path = collection_file_path2172;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get random() {
      return __random;
    },
    get double_flonum_p() {
      return double_flonum_p;
    },
    get keyword_apply() {
      return new_keyword_apply;
    },
    get collection_file_path() {
      return new_collection_file_path;
    },
    get collection_path() {
      return new_collection_path;
    },
    get new_apply_proc() {
      return new_apply_proc;
    }
  };
})();
var $__collects_47_racket_47_private_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M7 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sort7 = function(cache_keys_p22214, cache_keys_p42215, key12216, key32217, lst52218, less_p62219) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lst2220 = lst52218;
    var less_p2221 = less_p62219;
    if (key32217 !== false) {
      var if_res1433 = key12216;
    } else {
      var if_res1433 = false;
    }
    var getkey2222 = if_res1433;
    if (cache_keys_p42215 !== false) {
      var if_res1434 = cache_keys_p22214;
    } else {
      var if_res1434 = false;
    }
    var cache_keys_p2223 = if_res1434;
    if (M0.list_p(lst2220) !== false) {
      var if_res1435 = M0.rvoid();
    } else {
      var if_res1435 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("list?"), lst2220);
    }
    if_res1435;
    if (M0.procedure_p(less_p2221) !== false) {
      var if_res1436 = M0.procedure_arity_includes_p(less_p2221, 2);
    } else {
      var if_res1436 = false;
    }
    if (if_res1436 !== false) {
      var if_res1437 = M0.rvoid();
    } else {
      var if_res1437 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), less_p2221);
    }
    if_res1437;
    if (getkey2222 !== false) {
      if (M0.procedure_p(getkey2222) !== false) {
        var if_res1438 = M0.procedure_arity_includes_p(getkey2222, 1);
      } else {
        var if_res1438 = false;
      }
      var if_res1439 = M0.not(if_res1438);
    } else {
      var if_res1439 = false;
    }
    if (if_res1439 !== false) {
      var if_res1440 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), getkey2222);
    } else {
      var if_res1440 = M0.rvoid();
    }
    if_res1440;
    if (getkey2222 !== false) {
      var if_res1441 = M4.sort(lst2220, less_p2221, getkey2222, cache_keys_p2223);
    } else {
      var if_res1441 = M4.sort(lst2220, less_p2221);
    }
    return if_res1441;
  };
  var unpack8 = function(given_kws2224, given_args2225, lst52226, less_p62227) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2224) !== false) {
      var if_res1442 = M0.eq_p($rjs_core.Keyword.make("cache-keys?"), M0.car(given_kws2224));
    } else {
      var if_res1442 = false;
    }
    var cache_keys_p42228 = if_res1442;
    if (cache_keys_p42228 !== false) {
      var if_res1443 = M0.car(given_args2225);
    } else {
      var if_res1443 = M0.rvoid();
    }
    var cache_keys_p22229 = if_res1443;
    if (cache_keys_p42228 !== false) {
      var if_res1444 = M0.cdr(given_kws2224);
    } else {
      var if_res1444 = given_kws2224;
    }
    var given_kws2230 = if_res1444;
    if (cache_keys_p42228 !== false) {
      var if_res1445 = M0.cdr(given_args2225);
    } else {
      var if_res1445 = given_args2225;
    }
    var given_args2231 = if_res1445;
    var key32232 = M0.pair_p(given_kws2230);
    if (key32232 !== false) {
      var if_res1446 = M0.car(given_args2231);
    } else {
      var if_res1446 = M0.rvoid();
    }
    var key12233 = if_res1446;
    return sort7(cache_keys_p22229, cache_keys_p42228, key12233, key32232, lst52226, less_p62227);
  };
  var cl1450 = function(given_kws2240, given_args2241, lst2242, less_p2243) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(given_kws2240, given_args2241, lst2242, less_p2243);
  };
  var temp1452 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1451 = {'4': cl1450}[arguments.length];
    if (fixed_lam1451 !== undefined) {
      return fixed_lam1451.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp1449 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("cache-keys?"), $rjs_core.Keyword.make("key"));
  var cl1447 = function(lst2245, less_p2246) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(M0.rnull, M0.rnull, lst2245, less_p2246);
  };
  var sort2244 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1448 = {'2': cl1447}[arguments.length];
    if (fixed_lam1448 !== undefined) {
      return fixed_lam1448.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var sort9 = M6.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2234, given_argc2235) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__eq_(given_argc2235, 4) !== false) {
      var l12236 = given_kws2234;
      if (M0.null_p(l12236) !== false) {
        var if_res1454 = l12236;
      } else {
        if (M0.eq_p(M0.car(l12236), $rjs_core.Keyword.make("cache-keys?")) !== false) {
          var if_res1453 = M0.cdr(l12236);
        } else {
          var if_res1453 = l12236;
        }
        var if_res1454 = if_res1453;
      }
      var l12237 = if_res1454;
      var l12238 = l12237;
      if (M0.null_p(l12238) !== false) {
        var if_res1456 = l12238;
      } else {
        if (M0.eq_p(M0.car(l12238), $rjs_core.Keyword.make("key")) !== false) {
          var if_res1455 = M0.cdr(l12238);
        } else {
          var if_res1455 = l12238;
        }
        var if_res1456 = if_res1455;
      }
      var l12239 = if_res1456;
      var if_res1457 = M0.null_p(l12239);
    } else {
      var if_res1457 = false;
    }
    return if_res1457;
  }, temp1452, M0.rnull, temp1449, sort2244);
  var do_remove = function(who2247, item2248, list2249, equal_p2250) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(list2249) !== false) {
      var if_res1458 = M0.rvoid();
    } else {
      var if_res1458 = M0.raise_argument_error(who2247, $rjs_core.UString.makeInternedImmutable("list?"), list2249);
    }
    if_res1458;
    var loop2251 = function(list2252) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(list2252) !== false) {
        var if_res1460 = M0.rnull;
      } else {
        if (equal_p2250(item2248, M0.car(list2252)) !== false) {
          var if_res1459 = M0.cdr(list2252);
        } else {
          var if_res1459 = M0.cons(M0.car(list2252), loop2251(M0.cdr(list2252)));
        }
        var if_res1460 = if_res1459;
      }
      return if_res1460;
    };
    return loop2251(list2249);
  };
  var cl1461 = function(item2253, list2254) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remove"), item2253, list2254, M0.equal_p);
  };
  var cl1462 = function(item2255, list2256, equal_p2257) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2257) !== false) {
      var if_res1464 = M0.procedure_arity_includes_p(equal_p2257, 2);
    } else {
      var if_res1464 = false;
    }
    if (if_res1464 !== false) {
      var if_res1465 = M0.rvoid();
    } else {
      var if_res1465 = M0.raise_argument_error($rjs_core.Symbol.make("remove"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), equal_p2257);
    }
    if_res1465;
    return do_remove($rjs_core.Symbol.make("remove"), item2255, list2256, equal_p2257);
  };
  var remove = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1463 = {
      '2': cl1461,
      '3': cl1462
    }[arguments.length];
    if (fixed_lam1463 !== undefined) {
      return fixed_lam1463.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq = function(item2258, list2259) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remq"), item2258, list2259, M0.eq_p);
  };
  var remv = function(item2260, list2261) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remv"), item2260, list2261, M0.eqv_p);
  };
  var do_remove_times_ = function(who2262, l2263, r2264, equal_p2265) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(l2263) !== false) {
      var if_res1466 = M0.rvoid();
    } else {
      var if_res1466 = M0.raise_argument_error(who2262, $rjs_core.UString.makeInternedImmutable("list?"), l2263);
    }
    if_res1466;
    if (M0.list_p(r2264) !== false) {
      var if_res1467 = M0.rvoid();
    } else {
      var if_res1467 = M0.raise_argument_error(who2262, $rjs_core.UString.makeInternedImmutable("list?"), r2264);
    }
    if_res1467;
    var rloop2266 = function(r2267) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(r2267) !== false) {
        var if_res1470 = M0.rnull;
      } else {
        var first_r2268 = M0.car(r2267);
        var loop2269 = function(l_rest2270) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(l_rest2270) !== false) {
            var if_res1469 = M0.cons(first_r2268, rloop2266(M0.cdr(r2267)));
          } else {
            if (equal_p2265(M0.car(l_rest2270), first_r2268) !== false) {
              var if_res1468 = rloop2266(M0.cdr(r2267));
            } else {
              var if_res1468 = loop2269(M0.cdr(l_rest2270));
            }
            var if_res1469 = if_res1468;
          }
          return if_res1469;
        };
        var if_res1470 = loop2269(l2263);
      }
      return if_res1470;
    };
    return rloop2266(r2264);
  };
  var cl1471 = function(l2271, r2272) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2271, r2272, M0.equal_p);
  };
  var cl1472 = function(l2273, r2274, equal_p2275) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2275) !== false) {
      var if_res1474 = M0.procedure_arity_includes_p(equal_p2275, 2);
    } else {
      var if_res1474 = false;
    }
    if (if_res1474 !== false) {
      var if_res1475 = M0.rvoid();
    } else {
      var if_res1475 = M0.raise_argument_error($rjs_core.Symbol.make("remove*"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), equal_p2275);
    }
    if_res1475;
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2273, r2274, equal_p2275);
  };
  var remove_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1473 = {
      '2': cl1471,
      '3': cl1472
    }[arguments.length];
    if (fixed_lam1473 !== undefined) {
      return fixed_lam1473.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq_times_ = function(l2276, r2277) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remq*"), l2276, r2277, M0.eq_p);
  };
  var remv_times_ = function(l2278, r2279) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remv*"), l2278, r2279, M0.eqv_p);
  };
  var memf = function(f2280, list2281) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2280) !== false) {
      var if_res1476 = M0.procedure_arity_includes_p(f2280, 1);
    } else {
      var if_res1476 = false;
    }
    if (if_res1476 !== false) {
      var if_res1477 = M0.rvoid();
    } else {
      var if_res1477 = M0.raise_argument_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.makeInternedImmutable("(any/c . -> any/c)"), f2280);
    }
    if_res1477;
    var loop2282 = function(l2283) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2283) !== false) {
        var if_res1480 = false;
      } else {
        if (M0.not(M0.pair_p(l2283)) !== false) {
          var if_res1479 = M0.raise_mismatch_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.makeInternedImmutable("not a proper list: "), list2281);
        } else {
          if (f2280(M0.car(l2283)) !== false) {
            var if_res1478 = l2283;
          } else {
            var if_res1478 = loop2282(M0.cdr(l2283));
          }
          var if_res1479 = if_res1478;
        }
        var if_res1480 = if_res1479;
      }
      return if_res1480;
    };
    return loop2282(list2281);
  };
  var findf = function(f2284, list2285) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2284) !== false) {
      var if_res1481 = M0.procedure_arity_includes_p(f2284, 1);
    } else {
      var if_res1481 = false;
    }
    if (if_res1481 !== false) {
      var if_res1482 = M0.rvoid();
    } else {
      var if_res1482 = M0.raise_argument_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), f2284);
    }
    if_res1482;
    var loop2286 = function(l2287) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2287) !== false) {
        var if_res1485 = false;
      } else {
        if (M0.not(M0.pair_p(l2287)) !== false) {
          var if_res1484 = M0.raise_mismatch_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.makeInternedImmutable("not a proper list: "), list2285);
        } else {
          var a2288 = M0.car(l2287);
          if (f2284(a2288) !== false) {
            var if_res1483 = a2288;
          } else {
            var if_res1483 = loop2286(M0.cdr(l2287));
          }
          var if_res1484 = if_res1483;
        }
        var if_res1485 = if_res1484;
      }
      return if_res1485;
    };
    return loop2286(list2285);
  };
  var bad_list = function(who2289, orig_l2290) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2289, $rjs_core.UString.makeInternedImmutable("not a proper list: "), orig_l2290);
  };
  var bad_item = function(who2291, a2292, orig_l2293) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2291, $rjs_core.UString.makeInternedImmutable("non-pair found in list: "), a2292, $rjs_core.UString.makeInternedImmutable(" in "), orig_l2293);
  };
  var assq2294 = function(x2298, l2299) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2300 = function(l2301, t2302) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2301) !== false) {
        var a2303 = M7.unsafe_car(l2301);
        if (M0.pair_p(a2303) !== false) {
          if (M0.eq_p(x2298, M7.unsafe_car(a2303)) !== false) {
            var if_res1491 = a2303;
          } else {
            var l2304 = M7.unsafe_cdr(l2301);
            if (M0.pair_p(l2304) !== false) {
              var a2305 = M7.unsafe_car(l2304);
              if (M0.pair_p(a2305) !== false) {
                if (M0.eq_p(x2298, M7.unsafe_car(a2305)) !== false) {
                  var if_res1487 = a2305;
                } else {
                  var t2306 = M7.unsafe_cdr(t2302);
                  var l2307 = M7.unsafe_cdr(l2304);
                  if (M0.eq_p(l2307, t2306) !== false) {
                    var if_res1486 = bad_list($rjs_core.Symbol.make("assq"), l2299);
                  } else {
                    var if_res1486 = loop2300(l2307, t2306);
                  }
                  var if_res1487 = if_res1486;
                }
                var if_res1488 = if_res1487;
              } else {
                var if_res1488 = bad_item($rjs_core.Symbol.make("assq"), a2305, l2299);
              }
              var if_res1490 = if_res1488;
            } else {
              if (M0.null_p(l2304) !== false) {
                var if_res1489 = false;
              } else {
                var if_res1489 = bad_list($rjs_core.Symbol.make("assq"), l2299);
              }
              var if_res1490 = if_res1489;
            }
            var if_res1491 = if_res1490;
          }
          var if_res1492 = if_res1491;
        } else {
          var if_res1492 = bad_item($rjs_core.Symbol.make("assq"), a2303, l2299);
        }
        var if_res1494 = if_res1492;
      } else {
        if (M0.null_p(l2301) !== false) {
          var if_res1493 = false;
        } else {
          var if_res1493 = bad_list($rjs_core.Symbol.make("assq"), l2299);
        }
        var if_res1494 = if_res1493;
      }
      return if_res1494;
    };
    return loop2300(l2299, l2299);
  };
  var assv2295 = function(x2308, l2309) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2310 = function(l2311, t2312) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2311) !== false) {
        var a2313 = M7.unsafe_car(l2311);
        if (M0.pair_p(a2313) !== false) {
          if (M0.eqv_p(x2308, M7.unsafe_car(a2313)) !== false) {
            var if_res1500 = a2313;
          } else {
            var l2314 = M7.unsafe_cdr(l2311);
            if (M0.pair_p(l2314) !== false) {
              var a2315 = M7.unsafe_car(l2314);
              if (M0.pair_p(a2315) !== false) {
                if (M0.eqv_p(x2308, M7.unsafe_car(a2315)) !== false) {
                  var if_res1496 = a2315;
                } else {
                  var t2316 = M7.unsafe_cdr(t2312);
                  var l2317 = M7.unsafe_cdr(l2314);
                  if (M0.eq_p(l2317, t2316) !== false) {
                    var if_res1495 = bad_list($rjs_core.Symbol.make("assv"), l2309);
                  } else {
                    var if_res1495 = loop2310(l2317, t2316);
                  }
                  var if_res1496 = if_res1495;
                }
                var if_res1497 = if_res1496;
              } else {
                var if_res1497 = bad_item($rjs_core.Symbol.make("assv"), a2315, l2309);
              }
              var if_res1499 = if_res1497;
            } else {
              if (M0.null_p(l2314) !== false) {
                var if_res1498 = false;
              } else {
                var if_res1498 = bad_list($rjs_core.Symbol.make("assv"), l2309);
              }
              var if_res1499 = if_res1498;
            }
            var if_res1500 = if_res1499;
          }
          var if_res1501 = if_res1500;
        } else {
          var if_res1501 = bad_item($rjs_core.Symbol.make("assv"), a2313, l2309);
        }
        var if_res1503 = if_res1501;
      } else {
        if (M0.null_p(l2311) !== false) {
          var if_res1502 = false;
        } else {
          var if_res1502 = bad_list($rjs_core.Symbol.make("assv"), l2309);
        }
        var if_res1503 = if_res1502;
      }
      return if_res1503;
    };
    return loop2310(l2309, l2309);
  };
  var cl1504 = function(x2318, l2319) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2320 = function(l2321, t2322) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2321) !== false) {
        var a2323 = M7.unsafe_car(l2321);
        if (M0.pair_p(a2323) !== false) {
          if (M0.equal_p(x2318, M7.unsafe_car(a2323)) !== false) {
            var if_res1512 = a2323;
          } else {
            var l2324 = M7.unsafe_cdr(l2321);
            if (M0.pair_p(l2324) !== false) {
              var a2325 = M7.unsafe_car(l2324);
              if (M0.pair_p(a2325) !== false) {
                if (M0.equal_p(x2318, M7.unsafe_car(a2325)) !== false) {
                  var if_res1508 = a2325;
                } else {
                  var t2326 = M7.unsafe_cdr(t2322);
                  var l2327 = M7.unsafe_cdr(l2324);
                  if (M0.eq_p(l2327, t2326) !== false) {
                    var if_res1507 = bad_list($rjs_core.Symbol.make("assoc"), l2319);
                  } else {
                    var if_res1507 = loop2320(l2327, t2326);
                  }
                  var if_res1508 = if_res1507;
                }
                var if_res1509 = if_res1508;
              } else {
                var if_res1509 = bad_item($rjs_core.Symbol.make("assoc"), a2325, l2319);
              }
              var if_res1511 = if_res1509;
            } else {
              if (M0.null_p(l2324) !== false) {
                var if_res1510 = false;
              } else {
                var if_res1510 = bad_list($rjs_core.Symbol.make("assoc"), l2319);
              }
              var if_res1511 = if_res1510;
            }
            var if_res1512 = if_res1511;
          }
          var if_res1513 = if_res1512;
        } else {
          var if_res1513 = bad_item($rjs_core.Symbol.make("assoc"), a2323, l2319);
        }
        var if_res1515 = if_res1513;
      } else {
        if (M0.null_p(l2321) !== false) {
          var if_res1514 = false;
        } else {
          var if_res1514 = bad_list($rjs_core.Symbol.make("assoc"), l2319);
        }
        var if_res1515 = if_res1514;
      }
      return if_res1515;
    };
    return loop2320(l2319, l2319);
  };
  var cl1505 = function(x2328, l2329, is_equal_p2330) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(is_equal_p2330) !== false) {
      var if_res1516 = M0.procedure_arity_includes_p(is_equal_p2330, 2);
    } else {
      var if_res1516 = false;
    }
    if (if_res1516 !== false) {
      var if_res1517 = M0.rvoid();
    } else {
      var if_res1517 = M0.raise_argument_error($rjs_core.Symbol.make("assoc"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), is_equal_p2330);
    }
    if_res1517;
    var loop2331 = function(l2332, t2333) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2332) !== false) {
        var a2334 = M7.unsafe_car(l2332);
        if (M0.pair_p(a2334) !== false) {
          if (is_equal_p2330(x2328, M7.unsafe_car(a2334)) !== false) {
            var if_res1523 = a2334;
          } else {
            var l2335 = M7.unsafe_cdr(l2332);
            if (M0.pair_p(l2335) !== false) {
              var a2336 = M7.unsafe_car(l2335);
              if (M0.pair_p(a2336) !== false) {
                if (is_equal_p2330(x2328, M7.unsafe_car(a2336)) !== false) {
                  var if_res1519 = a2336;
                } else {
                  var t2337 = M7.unsafe_cdr(t2333);
                  var l2338 = M7.unsafe_cdr(l2335);
                  if (M0.eq_p(l2338, t2337) !== false) {
                    var if_res1518 = bad_list($rjs_core.Symbol.make("assoc"), l2329);
                  } else {
                    var if_res1518 = loop2331(l2338, t2337);
                  }
                  var if_res1519 = if_res1518;
                }
                var if_res1520 = if_res1519;
              } else {
                var if_res1520 = bad_item($rjs_core.Symbol.make("assoc"), a2336, l2329);
              }
              var if_res1522 = if_res1520;
            } else {
              if (M0.null_p(l2335) !== false) {
                var if_res1521 = false;
              } else {
                var if_res1521 = bad_list($rjs_core.Symbol.make("assoc"), l2329);
              }
              var if_res1522 = if_res1521;
            }
            var if_res1523 = if_res1522;
          }
          var if_res1524 = if_res1523;
        } else {
          var if_res1524 = bad_item($rjs_core.Symbol.make("assoc"), a2334, l2329);
        }
        var if_res1526 = if_res1524;
      } else {
        if (M0.null_p(l2332) !== false) {
          var if_res1525 = false;
        } else {
          var if_res1525 = bad_list($rjs_core.Symbol.make("assoc"), l2329);
        }
        var if_res1526 = if_res1525;
      }
      return if_res1526;
    };
    return loop2331(l2329, l2329);
  };
  var assoc2296 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1506 = {
      '2': cl1504,
      '3': cl1505
    }[arguments.length];
    if (fixed_lam1506 !== undefined) {
      return fixed_lam1506.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var assf2297 = function(f2339, l2340) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2339) !== false) {
      var if_res1527 = M0.procedure_arity_includes_p(f2339, 1);
    } else {
      var if_res1527 = false;
    }
    if (if_res1527 !== false) {
      var if_res1528 = M0.rvoid();
    } else {
      var if_res1528 = M0.raise_argument_error($rjs_core.Symbol.make("assf"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), f2339);
    }
    if_res1528;
    var loop2341 = function(l2342, t2343) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2342) !== false) {
        var a2344 = M7.unsafe_car(l2342);
        if (M0.pair_p(a2344) !== false) {
          if ((function(_2345, a2346) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return f2339(a2346);
          })(false, M7.unsafe_car(a2344)) !== false) {
            var if_res1534 = a2344;
          } else {
            var l2347 = M7.unsafe_cdr(l2342);
            if (M0.pair_p(l2347) !== false) {
              var a2348 = M7.unsafe_car(l2347);
              if (M0.pair_p(a2348) !== false) {
                if ((function(_2349, a2350) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return f2339(a2350);
                })(false, M7.unsafe_car(a2348)) !== false) {
                  var if_res1530 = a2348;
                } else {
                  var t2351 = M7.unsafe_cdr(t2343);
                  var l2352 = M7.unsafe_cdr(l2347);
                  if (M0.eq_p(l2352, t2351) !== false) {
                    var if_res1529 = bad_list($rjs_core.Symbol.make("assf"), l2340);
                  } else {
                    var if_res1529 = loop2341(l2352, t2351);
                  }
                  var if_res1530 = if_res1529;
                }
                var if_res1531 = if_res1530;
              } else {
                var if_res1531 = bad_item($rjs_core.Symbol.make("assf"), a2348, l2340);
              }
              var if_res1533 = if_res1531;
            } else {
              if (M0.null_p(l2347) !== false) {
                var if_res1532 = false;
              } else {
                var if_res1532 = bad_list($rjs_core.Symbol.make("assf"), l2340);
              }
              var if_res1533 = if_res1532;
            }
            var if_res1534 = if_res1533;
          }
          var if_res1535 = if_res1534;
        } else {
          var if_res1535 = bad_item($rjs_core.Symbol.make("assf"), a2344, l2340);
        }
        var if_res1537 = if_res1535;
      } else {
        if (M0.null_p(l2342) !== false) {
          var if_res1536 = false;
        } else {
          var if_res1536 = bad_list($rjs_core.Symbol.make("assf"), l2340);
        }
        var if_res1537 = if_res1536;
      }
      return if_res1537;
    };
    return loop2341(l2340, l2340);
  };
  var let_result1538 = M0.values(assq2294, assv2295, assoc2296, assf2297);
  var assq = let_result1538.getAt(0);
  var assv = let_result1538.getAt(1);
  var assoc = let_result1538.getAt(2);
  var assf = let_result1538.getAt(3);
  var mapadd = function(f2353, l2354, last2355) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2356 = function(l2357) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2357) !== false) {
        var if_res1539 = M0.list(last2355);
      } else {
        var if_res1539 = M0.cons(f2353(M0.car(l2357)), loop2356(M0.cdr(l2357)));
      }
      return if_res1539;
    };
    return loop2356(l2354);
  };
  var check_fold = function(name2358, proc2359, init2360, l2361, more2362) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc2359) !== false) {
      var if_res1540 = M0.rvoid();
    } else {
      var if_res1540 = M0.apply(M0.raise_argument_error, name2358, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, proc2359, init2360, l2361, more2362);
    }
    if_res1540;
    if (M0.list_p(l2361) !== false) {
      var if_res1541 = M0.rvoid();
    } else {
      var if_res1541 = M0.apply(M0.raise_argument_error, name2358, $rjs_core.UString.makeInternedImmutable("list?"), 2, proc2359, init2360, l2361, more2362);
    }
    if_res1541;
    if (M0.null_p(more2362) !== false) {
      if (M0.procedure_arity_includes_p(proc2359, 2) !== false) {
        var if_res1542 = M0.rvoid();
      } else {
        var if_res1542 = M0.raise_mismatch_error(name2358, $rjs_core.UString.makeInternedImmutable("given procedure does not accept 2 arguments: "), proc2359);
      }
      var if_res1547 = if_res1542;
    } else {
      var len2363 = M0.length(l2361);
      var loop2364 = function(more2365, n2366) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(more2365) !== false) {
          var if_res1545 = M0.rvoid();
        } else {
          if (M0.list_p(M0.car(more2365)) !== false) {
            var if_res1543 = M0.rvoid();
          } else {
            var if_res1543 = M0.apply(M0.raise_argument_error, name2358, $rjs_core.UString.makeInternedImmutable("list?"), n2366, proc2359, init2360, l2361, more2365);
          }
          if_res1543;
          if (M0.__eq_(len2363, M0.length(M0.car(more2365))) !== false) {
            var if_res1544 = M0.rvoid();
          } else {
            var if_res1544 = M0.raise_mismatch_error(name2358, $rjs_core.UString.makeInternedImmutable("given list does not have the same size as the first list: "), M0.car(more2365));
          }
          if_res1544;
          var if_res1545 = loop2364(M0.cdr(more2365), M0.add1(n2366));
        }
        return if_res1545;
      };
      loop2364(more2362, 3);
      if (M0.procedure_arity_includes_p(proc2359, 2 + M0.length(more2362)) !== false) {
        var if_res1546 = M0.rvoid();
      } else {
        var if_res1546 = M0.raise_mismatch_error(name2358, M0.format($rjs_core.UString.makeInternedImmutable("given procedure does not accept ~a arguments: "), 2 + M0.length(more2362)), proc2359);
      }
      var if_res1547 = if_res1546;
    }
    return if_res1547;
  };
  var cl1548 = function(f2367, init2368, l2369) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldl"), f2367, init2368, l2369, M0.rnull);
    var loop2370 = function(init2371, l2372) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2372) !== false) {
        var if_res1552 = init2371;
      } else {
        var if_res1552 = loop2370(f2367(M0.car(l2372), init2371), M0.cdr(l2372));
      }
      return if_res1552;
    };
    return loop2370(init2368, l2369);
  };
  var cl1549 = $rjs_core.attachProcedureArity(function(f2373, init2374, l2375) {
    for (var ls23761553 = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      ls23761553[$__1 - 3] = arguments[$__1];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2376 = $rjs_core.Pair.listFromArray(ls23761553);
    check_fold($rjs_core.Symbol.make("foldl"), f2373, init2374, l2375, ls2376);
    var loop2377 = function(init2378, ls2379) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2379)) !== false) {
        var if_res1554 = loop2377(M0.apply(f2373, mapadd(M0.car, ls2379, init2378)), M2.map(M0.cdr, ls2379));
      } else {
        var if_res1554 = init2378;
      }
      return if_res1554;
    };
    return loop2377(init2374, M0.cons(l2375, ls2376));
  });
  var foldl = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1550 = {'3': cl1548}[arguments.length];
    if (fixed_lam1550 !== undefined) {
      return fixed_lam1550.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1549.length, 1) !== false) {
        var if_res1551 = cl1549.apply(null, arguments);
      } else {
        var if_res1551 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1551;
    }
  }, [M0.make_arity_at_least(3)]);
  var cl1555 = function(f2380, init2381, l2382) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldr"), f2380, init2381, l2382, M0.rnull);
    var loop2383 = function(init2384, l2385) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2385) !== false) {
        var if_res1559 = init2384;
      } else {
        var if_res1559 = f2380(M0.car(l2385), loop2383(init2384, M0.cdr(l2385)));
      }
      return if_res1559;
    };
    return loop2383(init2381, l2382);
  };
  var cl1556 = $rjs_core.attachProcedureArity(function(f2386, init2387, l2388) {
    for (var ls23891560 = [],
        $__2 = 3; $__2 < arguments.length; $__2++)
      ls23891560[$__2 - 3] = arguments[$__2];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2389 = $rjs_core.Pair.listFromArray(ls23891560);
    check_fold($rjs_core.Symbol.make("foldr"), f2386, init2387, l2388, ls2389);
    var loop2390 = function(ls2391) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2391)) !== false) {
        var if_res1561 = M0.apply(f2386, mapadd(M0.car, ls2391, loop2390(M2.map(M0.cdr, ls2391))));
      } else {
        var if_res1561 = init2387;
      }
      return if_res1561;
    };
    return loop2390(M0.cons(l2388, ls2389));
  });
  var foldr = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1557 = {'3': cl1555}[arguments.length];
    if (fixed_lam1557 !== undefined) {
      return fixed_lam1557.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1556.length, 1) !== false) {
        var if_res1558 = cl1556.apply(null, arguments);
      } else {
        var if_res1558 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1558;
    }
  }, [M0.make_arity_at_least(3)]);
  var filter = function(f2392, list2393) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2392) !== false) {
      var if_res1562 = M0.procedure_arity_includes_p(f2392, 1);
    } else {
      var if_res1562 = false;
    }
    if (if_res1562 !== false) {
      var if_res1563 = M0.rvoid();
    } else {
      var if_res1563 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), f2392);
    }
    if_res1563;
    if (M0.list_p(list2393) !== false) {
      var if_res1564 = M0.rvoid();
    } else {
      var if_res1564 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.makeInternedImmutable("list?"), list2393);
    }
    if_res1564;
    var loop2394 = function(l2395, result2396) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2395) !== false) {
        var if_res1567 = M5.alt_reverse(result2396);
      } else {
        var temp1566 = M0.cdr(l2395);
        if (f2392(M0.car(l2395)) !== false) {
          var if_res1565 = M0.cons(M0.car(l2395), result2396);
        } else {
          var if_res1565 = result2396;
        }
        var if_res1567 = loop2394(temp1566, if_res1565);
      }
      return if_res1567;
    };
    return loop2394(list2393, M0.rnull);
  };
  var build_vector = function(n2397, fcn2398) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2397) !== false) {
      var if_res1568 = M0.rvoid();
    } else {
      var if_res1568 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2397);
    }
    if_res1568;
    if (M0.procedure_p(fcn2398) !== false) {
      var if_res1569 = M0.procedure_arity_includes_p(fcn2398, 1);
    } else {
      var if_res1569 = false;
    }
    if (if_res1569 !== false) {
      var if_res1570 = M0.rvoid();
    } else {
      var if_res1570 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . any/c)"), fcn2398);
    }
    if_res1570;
    var vec2399 = M0.make_vector(n2397);
    var loop2400 = function(i2401) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2401, n2397) !== false) {
        var if_res1571 = vec2399;
      } else {
        M0.vector_set_bang_(vec2399, i2401, fcn2398(i2401));
        var if_res1571 = loop2400(M0.add1(i2401));
      }
      return if_res1571;
    };
    return loop2400(0);
  };
  var build_string = function(n2402, fcn2403) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2402) !== false) {
      var if_res1572 = M0.rvoid();
    } else {
      var if_res1572 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2402);
    }
    if_res1572;
    if (M0.procedure_p(fcn2403) !== false) {
      var if_res1573 = M0.procedure_arity_includes_p(fcn2403, 1);
    } else {
      var if_res1573 = false;
    }
    if (if_res1573 !== false) {
      var if_res1574 = M0.rvoid();
    } else {
      var if_res1574 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . char?)"), fcn2403);
    }
    if_res1574;
    var str2404 = M0.make_string(n2402);
    var loop2405 = function(i2406) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2406, n2402) !== false) {
        var if_res1575 = str2404;
      } else {
        M0.string_set_bang_(str2404, i2406, fcn2403(i2406));
        var if_res1575 = loop2405(M0.add1(i2406));
      }
      return if_res1575;
    };
    return loop2405(0);
  };
  var build_list = function(n2407, fcn2408) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2407) !== false) {
      var if_res1576 = M0.rvoid();
    } else {
      var if_res1576 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2407);
    }
    if_res1576;
    if (M0.procedure_p(fcn2408) !== false) {
      var if_res1577 = M0.procedure_arity_includes_p(fcn2408, 1);
    } else {
      var if_res1577 = false;
    }
    if (if_res1577 !== false) {
      var if_res1578 = M0.rvoid();
    } else {
      var if_res1578 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . any/c)"), fcn2408);
    }
    if_res1578;
    var recr2409 = function(j2410, i2411) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i2411) !== false) {
        var if_res1579 = M0.rnull;
      } else {
        var if_res1579 = M0.cons(fcn2408(j2410), recr2409(M0.add1(j2410), M0.sub1(i2411)));
      }
      return if_res1579;
    };
    return recr2409(0, n2407);
  };
  var pipeline12412 = function(f2413, rfuns2414) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(x2415) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop2416 = function(x2417, f2418, rfuns2419) {
        if (arguments.length !== 3) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2419) !== false) {
          var if_res1580 = f2418(x2417);
        } else {
          var if_res1580 = loop2416(f2418(x2417), M0.car(rfuns2419), M0.cdr(rfuns2419));
        }
        return if_res1580;
      };
      return loop2416(x2415, f2413, rfuns2414);
    };
  };
  var pipeline_times_2420 = function(f2421, rfuns2422) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2421)) !== false) {
      var loop2423 = function(f2424, rfuns2425) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2425) !== false) {
          var if_res1582 = f2424;
        } else {
          var fst2426 = M0.car(rfuns2425);
          if (M0.eqv_p(1, M1.norm_procedure_arity(fst2426)) !== false) {
            var if_res1581 = function(x2427) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return fst2426(f2424(x2427));
            };
          } else {
            var if_res1581 = function(x2428) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2424(x2428);
              }, fst2426);
            };
          }
          var if_res1582 = loop2423(if_res1581, M0.cdr(rfuns2425));
        }
        return if_res1582;
      };
      var if_res1589 = loop2423(f2421, rfuns2422);
    } else {
      var funs2429 = M5.alt_reverse(M0.cons(f2421, rfuns2422));
      var loop2430 = function(f2431, funs2432) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(funs2432) !== false) {
          var if_res1588 = f2431;
        } else {
          var fst2433 = M0.car(funs2432);
          if (M0.eqv_p(1, M1.norm_procedure_arity(f2431)) !== false) {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2433)) !== false) {
              var if_res1584 = function(x2434) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2431(fst2433(x2434));
              };
            } else {
              var if_res1584 = $rjs_core.attachProcedureArity(function() {
                for (var xs24351583 = [],
                    $__3 = 0; $__3 < arguments.length; $__3++)
                  xs24351583[$__3] = arguments[$__3];
                var xs2435 = $rjs_core.Pair.listFromArray(xs24351583);
                return f2431(M0.apply(fst2433, xs2435));
              });
            }
            var if_res1587 = if_res1584;
          } else {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2433)) !== false) {
              var if_res1586 = function(x2436) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return fst2433(x2436);
                }, f2431);
              };
            } else {
              var if_res1586 = $rjs_core.attachProcedureArity(function() {
                for (var xs24371585 = [],
                    $__4 = 0; $__4 < arguments.length; $__4++)
                  xs24371585[$__4] = arguments[$__4];
                var xs2437 = $rjs_core.Pair.listFromArray(xs24371585);
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return M0.apply(fst2433, xs2437);
                }, f2431);
              });
            }
            var if_res1587 = if_res1586;
          }
          var if_res1588 = loop2430(if_res1587, M0.cdr(funs2432));
        }
        return if_res1588;
      };
      var if_res1589 = loop2430(M0.car(funs2429), M0.cdr(funs2429));
    }
    return if_res1589;
  };
  var simple_compose2439 = function(f2440, g2441) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arity2442 = M1.norm_procedure_arity(g2441);
    var let_result1590 = M6.procedure_keywords(g2441);
    var required_kwds2443 = let_result1590.getAt(0);
    var allowed_kwds2444 = let_result1590.getAt(1);
    if (M0.eq_p(1, arity2442) !== false) {
      var if_res1597 = function(x2446) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2440(g2441(x2446));
      };
    } else {
      var cl1591 = function(x2447) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2440(g2441(x2447));
      };
      var cl1592 = function(x2448, y2449) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2440(g2441(x2448, y2449));
      };
      var cl1593 = $rjs_core.attachProcedureArity(function() {
        for (var args24501596 = [],
            $__3 = 0; $__3 < arguments.length; $__3++)
          args24501596[$__3] = arguments[$__3];
        var args2450 = $rjs_core.Pair.listFromArray(args24501596);
        return f2440(M0.apply(g2441, args2450));
      });
      var if_res1597 = $rjs_core.attachProcedureArity(function() {
        var fixed_lam1594 = {
          '1': cl1591,
          '2': cl1592
        }[arguments.length];
        if (fixed_lam1594 !== undefined) {
          return fixed_lam1594.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1595 = cl1593.apply(null, arguments);
          } else {
            var if_res1595 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1595;
        }
      }, [M0.make_arity_at_least(0)]);
    }
    var composed2445 = if_res1597;
    if (M0.null_p(allowed_kwds2444) !== false) {
      var if_res1599 = composed2445;
    } else {
      var if_res1599 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2451, kw_args2452) {
        for (var xs24531598 = [],
            $__4 = 2; $__4 < arguments.length; $__4++)
          xs24531598[$__4 - 2] = arguments[$__4];
        if (arguments.length < 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var xs2453 = $rjs_core.Pair.listFromArray(xs24531598);
        return f2440(M3.keyword_apply(g2441, kws2451, kw_args2452, xs2453));
      }), composed2445);
    }
    return if_res1599;
  };
  var cl1600 = function(f2454) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2454) !== false) {
      var if_res1606 = f2454;
    } else {
      var if_res1606 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2454);
    }
    return if_res1606;
  };
  var cl1601 = function(f2455, g2456) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2455) !== false) {
      var if_res1607 = M0.rvoid();
    } else {
      var if_res1607 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2455, g2456);
    }
    if_res1607;
    if (M0.procedure_p(g2456) !== false) {
      var if_res1608 = M0.rvoid();
    } else {
      var if_res1608 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, f2455, g2456);
    }
    if_res1608;
    if (M0.procedure_arity_includes_p(f2455, 1) !== false) {
      var if_res1609 = M0.rvoid();
    } else {
      var if_res1609 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, f2455, $rjs_core.Pair.makeList());
    }
    if_res1609;
    var let_result1610 = M6.procedure_keywords(f2455);
    var req2457 = let_result1610.getAt(0);
    var _2458 = let_result1610.getAt(1);
    if (M0.null_p(req2457) !== false) {
      var if_res1611 = M0.rvoid();
    } else {
      var if_res1611 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), 0, f2455, $rjs_core.Pair.makeList());
    }
    if_res1611;
    return simple_compose2439(f2455, g2456);
  };
  var cl1602 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1603 = $rjs_core.attachProcedureArity(function(f02459) {
    for (var fs024601612 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      fs024601612[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02460 = $rjs_core.Pair.listFromArray(fs024601612);
    var loop2461 = function(f2462, fs2463, i2464, rfuns2465) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2462) !== false) {
        var if_res1613 = M0.rvoid();
      } else {
        var if_res1613 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), i2464, f02459, fs02460);
      }
      if_res1613;
      if (M0.pair_p(fs2463) !== false) {
        if (M0.procedure_arity_includes_p(f2462, 1) !== false) {
          var if_res1614 = M0.rvoid();
        } else {
          var if_res1614 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), i2464, f02459, fs02460);
        }
        if_res1614;
        var let_result1615 = M6.procedure_keywords(f2462);
        var req2466 = let_result1615.getAt(0);
        var _2467 = let_result1615.getAt(1);
        if (M0.null_p(req2466) !== false) {
          var if_res1616 = M0.rvoid();
        } else {
          var if_res1616 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), i2464, f02459, fs02460);
        }
        if_res1616;
        var if_res1617 = loop2461(M0.car(fs2463), M0.cdr(fs2463), M0.add1(i2464), M0.cons(f2462, rfuns2465));
      } else {
        var if_res1617 = simple_compose2439(pipeline12412(M0.car(rfuns2465), M0.cdr(rfuns2465)), f2462);
      }
      return if_res1617;
    };
    return loop2461(f02459, fs02460, 0, $rjs_core.Pair.makeList());
  });
  var compose12438 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1604 = {
      '1': cl1600,
      '2': cl1601,
      '0': cl1602
    }[arguments.length];
    if (fixed_lam1604 !== undefined) {
      return fixed_lam1604.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1603.length, 1) !== false) {
        var if_res1605 = cl1603.apply(null, arguments);
      } else {
        var if_res1605 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1605;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var simple_compose2469 = function(f2470, g2471) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2470)) !== false) {
      var arity2472 = M1.norm_procedure_arity(g2471);
      var let_result1618 = M6.procedure_keywords(g2471);
      var required_kwds2473 = let_result1618.getAt(0);
      var allowed_kwds2474 = let_result1618.getAt(1);
      if (M0.eq_p(1, arity2472) !== false) {
        var if_res1625 = function(x2476) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2470(g2471(x2476));
        };
      } else {
        var cl1619 = function(x2477) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2470(g2471(x2477));
        };
        var cl1620 = function(x2478, y2479) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2470(g2471(x2478, y2479));
        };
        var cl1621 = $rjs_core.attachProcedureArity(function() {
          for (var args24801624 = [],
              $__4 = 0; $__4 < arguments.length; $__4++)
            args24801624[$__4] = arguments[$__4];
          var args2480 = $rjs_core.Pair.listFromArray(args24801624);
          return f2470(M0.apply(g2471, args2480));
        });
        var if_res1625 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1622 = {
            '1': cl1619,
            '2': cl1620
          }[arguments.length];
          if (fixed_lam1622 !== undefined) {
            return fixed_lam1622.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1623 = cl1621.apply(null, arguments);
            } else {
              var if_res1623 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1623;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2475 = if_res1625;
      if (M0.null_p(allowed_kwds2474) !== false) {
        var if_res1627 = composed2475;
      } else {
        var if_res1627 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2481, kw_args2482) {
          for (var xs24831626 = [],
              $__5 = 2; $__5 < arguments.length; $__5++)
            xs24831626[$__5 - 2] = arguments[$__5];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2483 = $rjs_core.Pair.listFromArray(xs24831626);
          return f2470(M3.keyword_apply(g2471, kws2481, kw_args2482, xs2483));
        }), composed2475);
      }
      var if_res1638 = if_res1627;
    } else {
      var arity2484 = M1.norm_procedure_arity(g2471);
      var let_result1628 = M6.procedure_keywords(g2471);
      var required_kwds2485 = let_result1628.getAt(0);
      var allowed_kwds2486 = let_result1628.getAt(1);
      if (M0.eq_p(1, arity2484) !== false) {
        var if_res1635 = function(x2488) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2471(x2488);
          }, f2470);
        };
      } else {
        var cl1629 = function(x2489) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2471(x2489);
          }, f2470);
        };
        var cl1630 = function(x2490, y2491) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2471(x2490, y2491);
          }, f2470);
        };
        var cl1631 = $rjs_core.attachProcedureArity(function() {
          for (var args24921634 = [],
              $__6 = 0; $__6 < arguments.length; $__6++)
            args24921634[$__6] = arguments[$__6];
          var args2492 = $rjs_core.Pair.listFromArray(args24921634);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(g2471, args2492);
          }, f2470);
        });
        var if_res1635 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1632 = {
            '1': cl1629,
            '2': cl1630
          }[arguments.length];
          if (fixed_lam1632 !== undefined) {
            return fixed_lam1632.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1633 = cl1631.apply(null, arguments);
            } else {
              var if_res1633 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1633;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2487 = if_res1635;
      if (M0.null_p(allowed_kwds2486) !== false) {
        var if_res1637 = composed2487;
      } else {
        var if_res1637 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2493, kw_args2494) {
          for (var xs24951636 = [],
              $__7 = 2; $__7 < arguments.length; $__7++)
            xs24951636[$__7 - 2] = arguments[$__7];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2495 = $rjs_core.Pair.listFromArray(xs24951636);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M3.keyword_apply(g2471, kws2493, kw_args2494, xs2495);
          }, f2470);
        }), composed2487);
      }
      var if_res1638 = if_res1637;
    }
    return if_res1638;
  };
  var cl1639 = function(f2496) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2496) !== false) {
      var if_res1645 = f2496;
    } else {
      var if_res1645 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2496);
    }
    return if_res1645;
  };
  var cl1640 = function(f2497, g2498) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2497) !== false) {
      var if_res1646 = M0.rvoid();
    } else {
      var if_res1646 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2497, g2498);
    }
    if_res1646;
    if (M0.procedure_p(g2498) !== false) {
      var if_res1647 = M0.rvoid();
    } else {
      var if_res1647 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, f2497, g2498);
    }
    if_res1647;
    var let_result1648 = M6.procedure_keywords(f2497);
    var req2499 = let_result1648.getAt(0);
    var _2500 = let_result1648.getAt(1);
    if (M0.null_p(req2499) !== false) {
      var if_res1649 = M0.rvoid();
    } else {
      var if_res1649 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), 0, f2497, $rjs_core.Pair.makeList());
    }
    if_res1649;
    return simple_compose2469(f2497, g2498);
  };
  var cl1641 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1642 = $rjs_core.attachProcedureArity(function(f02501) {
    for (var fs025021650 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      fs025021650[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02502 = $rjs_core.Pair.listFromArray(fs025021650);
    var loop2503 = function(f2504, fs2505, i2506, rfuns2507) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2504) !== false) {
        var if_res1651 = M0.rvoid();
      } else {
        var if_res1651 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), i2506, f02501, fs02502);
      }
      if_res1651;
      if (M0.pair_p(fs2505) !== false) {
        var let_result1652 = M6.procedure_keywords(f2504);
        var req2508 = let_result1652.getAt(0);
        var _2509 = let_result1652.getAt(1);
        if (M0.null_p(req2508) !== false) {
          var if_res1653 = M0.rvoid();
        } else {
          var if_res1653 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), i2506, f02501, fs02502);
        }
        if_res1653;
        var if_res1654 = loop2503(M0.car(fs2505), M0.cdr(fs2505), M0.add1(i2506), M0.cons(f2504, rfuns2507));
      } else {
        var if_res1654 = simple_compose2469(pipeline_times_2420(M0.car(rfuns2507), M0.cdr(rfuns2507)), f2504);
      }
      return if_res1654;
    };
    return loop2503(f02501, fs02502, 0, $rjs_core.Pair.makeList());
  });
  var compose2468 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1643 = {
      '1': cl1639,
      '2': cl1640,
      '0': cl1641
    }[arguments.length];
    if (fixed_lam1643 !== undefined) {
      return fixed_lam1643.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1642.length, 1) !== false) {
        var if_res1644 = cl1642.apply(null, arguments);
      } else {
        var if_res1644 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1644;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var let_result1655 = M0.values(compose12438, compose2468);
  var compose1 = let_result1655.getAt(0);
  var compose = let_result1655.getAt(1);
  var __rjs_quoted__ = {};
  __rjs_quoted__.sort7 = sort7;
  __rjs_quoted__.sort9 = sort9;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get compose1() {
      return compose1;
    },
    get compose() {
      return compose;
    },
    get build_list() {
      return build_list;
    },
    get build_string() {
      return build_string;
    },
    get build_vector() {
      return build_vector;
    },
    get filter() {
      return filter;
    },
    get assoc() {
      return assoc;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get findf() {
      return findf;
    },
    get assf() {
      return assf;
    },
    get memf() {
      return memf;
    },
    get remove_times_() {
      return remove_times_;
    },
    get remq_times_() {
      return remq_times_;
    },
    get remv_times_() {
      return remv_times_;
    },
    get remove() {
      return remove;
    },
    get remq() {
      return remq;
    },
    get remv() {
      return remv;
    },
    get foldr() {
      return foldr;
    },
    get foldl() {
      return foldl;
    }
  };
})();
var $__collects_47_racket_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_for_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M7 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M8 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M9 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M10 = $__runtime_47_unsafe_46_rkt_46_js__;
  var first = function(x827) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(x827) !== false) {
      var if_res475 = M2.list_p(x827);
    } else {
      var if_res475 = false;
    }
    if (if_res475 !== false) {
      var if_res476 = M2.car(x827);
    } else {
      var if_res476 = M2.raise_argument_error($rjs_core.Symbol.make("first"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), x827);
    }
    return if_res476;
  };
  var second = function(l0828) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0828) !== false) {
      var loop829 = function(l830, pos831) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l830) !== false) {
          if (M2.eq_p(pos831, 1) !== false) {
            var if_res477 = M2.car(l830);
          } else {
            var if_res477 = loop829(M2.cdr(l830), M2.sub1(pos831));
          }
          var if_res478 = if_res477;
        } else {
          var if_res478 = M2.raise_arguments_error($rjs_core.Symbol.make("second"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0828);
        }
        return if_res478;
      };
      var if_res479 = loop829(l0828, 2);
    } else {
      var if_res479 = M2.raise_argument_error($rjs_core.Symbol.make("second"), $rjs_core.UString.makeInternedImmutable("list?"), l0828);
    }
    return if_res479;
  };
  var third = function(l0832) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0832) !== false) {
      var loop833 = function(l834, pos835) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l834) !== false) {
          if (M2.eq_p(pos835, 1) !== false) {
            var if_res480 = M2.car(l834);
          } else {
            var if_res480 = loop833(M2.cdr(l834), M2.sub1(pos835));
          }
          var if_res481 = if_res480;
        } else {
          var if_res481 = M2.raise_arguments_error($rjs_core.Symbol.make("third"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0832);
        }
        return if_res481;
      };
      var if_res482 = loop833(l0832, 3);
    } else {
      var if_res482 = M2.raise_argument_error($rjs_core.Symbol.make("third"), $rjs_core.UString.makeInternedImmutable("list?"), l0832);
    }
    return if_res482;
  };
  var fourth = function(l0836) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0836) !== false) {
      var loop837 = function(l838, pos839) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l838) !== false) {
          if (M2.eq_p(pos839, 1) !== false) {
            var if_res483 = M2.car(l838);
          } else {
            var if_res483 = loop837(M2.cdr(l838), M2.sub1(pos839));
          }
          var if_res484 = if_res483;
        } else {
          var if_res484 = M2.raise_arguments_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0836);
        }
        return if_res484;
      };
      var if_res485 = loop837(l0836, 4);
    } else {
      var if_res485 = M2.raise_argument_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.makeInternedImmutable("list?"), l0836);
    }
    return if_res485;
  };
  var fifth = function(l0840) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0840) !== false) {
      var loop841 = function(l842, pos843) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l842) !== false) {
          if (M2.eq_p(pos843, 1) !== false) {
            var if_res486 = M2.car(l842);
          } else {
            var if_res486 = loop841(M2.cdr(l842), M2.sub1(pos843));
          }
          var if_res487 = if_res486;
        } else {
          var if_res487 = M2.raise_arguments_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0840);
        }
        return if_res487;
      };
      var if_res488 = loop841(l0840, 5);
    } else {
      var if_res488 = M2.raise_argument_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.makeInternedImmutable("list?"), l0840);
    }
    return if_res488;
  };
  var sixth = function(l0844) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0844) !== false) {
      var loop845 = function(l846, pos847) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l846) !== false) {
          if (M2.eq_p(pos847, 1) !== false) {
            var if_res489 = M2.car(l846);
          } else {
            var if_res489 = loop845(M2.cdr(l846), M2.sub1(pos847));
          }
          var if_res490 = if_res489;
        } else {
          var if_res490 = M2.raise_arguments_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0844);
        }
        return if_res490;
      };
      var if_res491 = loop845(l0844, 6);
    } else {
      var if_res491 = M2.raise_argument_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.makeInternedImmutable("list?"), l0844);
    }
    return if_res491;
  };
  var seventh = function(l0848) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0848) !== false) {
      var loop849 = function(l850, pos851) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l850) !== false) {
          if (M2.eq_p(pos851, 1) !== false) {
            var if_res492 = M2.car(l850);
          } else {
            var if_res492 = loop849(M2.cdr(l850), M2.sub1(pos851));
          }
          var if_res493 = if_res492;
        } else {
          var if_res493 = M2.raise_arguments_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0848);
        }
        return if_res493;
      };
      var if_res494 = loop849(l0848, 7);
    } else {
      var if_res494 = M2.raise_argument_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.makeInternedImmutable("list?"), l0848);
    }
    return if_res494;
  };
  var eighth = function(l0852) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0852) !== false) {
      var loop853 = function(l854, pos855) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l854) !== false) {
          if (M2.eq_p(pos855, 1) !== false) {
            var if_res495 = M2.car(l854);
          } else {
            var if_res495 = loop853(M2.cdr(l854), M2.sub1(pos855));
          }
          var if_res496 = if_res495;
        } else {
          var if_res496 = M2.raise_arguments_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0852);
        }
        return if_res496;
      };
      var if_res497 = loop853(l0852, 8);
    } else {
      var if_res497 = M2.raise_argument_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.makeInternedImmutable("list?"), l0852);
    }
    return if_res497;
  };
  var ninth = function(l0856) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0856) !== false) {
      var loop857 = function(l858, pos859) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l858) !== false) {
          if (M2.eq_p(pos859, 1) !== false) {
            var if_res498 = M2.car(l858);
          } else {
            var if_res498 = loop857(M2.cdr(l858), M2.sub1(pos859));
          }
          var if_res499 = if_res498;
        } else {
          var if_res499 = M2.raise_arguments_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0856);
        }
        return if_res499;
      };
      var if_res500 = loop857(l0856, 9);
    } else {
      var if_res500 = M2.raise_argument_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.makeInternedImmutable("list?"), l0856);
    }
    return if_res500;
  };
  var tenth = function(l0860) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0860) !== false) {
      var loop861 = function(l862, pos863) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l862) !== false) {
          if (M2.eq_p(pos863, 1) !== false) {
            var if_res501 = M2.car(l862);
          } else {
            var if_res501 = loop861(M2.cdr(l862), M2.sub1(pos863));
          }
          var if_res502 = if_res501;
        } else {
          var if_res502 = M2.raise_arguments_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0860);
        }
        return if_res502;
      };
      var if_res503 = loop861(l0860, 10);
    } else {
      var if_res503 = M2.raise_argument_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.makeInternedImmutable("list?"), l0860);
    }
    return if_res503;
  };
  var last_pair = function(l864) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l864) !== false) {
      var loop865 = function(l866, x867) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x867) !== false) {
          var if_res504 = loop865(x867, M2.cdr(x867));
        } else {
          var if_res504 = l866;
        }
        return if_res504;
      };
      var if_res505 = loop865(l864, M2.cdr(l864));
    } else {
      var if_res505 = M2.raise_argument_error($rjs_core.Symbol.make("last-pair"), $rjs_core.UString.makeInternedImmutable("pair?"), l864);
    }
    return if_res505;
  };
  var last = function(l868) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l868) !== false) {
      var if_res506 = M2.list_p(l868);
    } else {
      var if_res506 = false;
    }
    if (if_res506 !== false) {
      var loop869 = function(l870, x871) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x871) !== false) {
          var if_res507 = loop869(x871, M2.cdr(x871));
        } else {
          var if_res507 = M2.car(l870);
        }
        return if_res507;
      };
      var if_res508 = loop869(l868, M2.cdr(l868));
    } else {
      var if_res508 = M2.raise_argument_error($rjs_core.Symbol.make("last"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), l868);
    }
    return if_res508;
  };
  var rest = function(l872) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l872) !== false) {
      var if_res509 = M2.list_p(l872);
    } else {
      var if_res509 = false;
    }
    if (if_res509 !== false) {
      var if_res510 = M2.cdr(l872);
    } else {
      var if_res510 = M2.raise_argument_error($rjs_core.Symbol.make("rest"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), l872);
    }
    return if_res510;
  };
  var cons_p = function(l873) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.pair_p(l873);
  };
  var empty_p = function(l874) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.null_p(l874);
  };
  var empty = $rjs_core.Pair.makeList();
  var make_list = function(n875, x876) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n875) !== false) {
      var if_res511 = M2.rvoid();
    } else {
      var if_res511 = M2.raise_argument_error($rjs_core.Symbol.make("make-list"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 0, n875, x876);
    }
    if_res511;
    var loop877 = function(n878, r879) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n878) !== false) {
        var if_res512 = r879;
      } else {
        var if_res512 = loop877(M2.sub1(n878), M2.cons(x876, r879));
      }
      return if_res512;
    };
    return loop877(n875, $rjs_core.Pair.makeList());
  };
  var list_update = function(l880, i881, f882) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l880) !== false) {
      var if_res513 = M2.rvoid();
    } else {
      var if_res513 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l880, i881, f882);
    }
    if_res513;
    if (M2.exact_nonnegative_integer_p(i881) !== false) {
      var if_res514 = M2.rvoid();
    } else {
      var if_res514 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l880, i881, f882);
    }
    if_res514;
    if (M2.procedure_p(f882) !== false) {
      var if_res515 = M2.procedure_arity_includes_p(f882, 1);
    } else {
      var if_res515 = false;
    }
    if (if_res515 !== false) {
      var if_res516 = M2.rvoid();
    } else {
      var if_res516 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 2, l880, i881, f882);
    }
    if_res516;
    if (M2.zero_p(i881) !== false) {
      var if_res517 = M2.cons(f882(M2.car(l880)), M2.cdr(l880));
    } else {
      var if_res517 = M2.cons(M2.car(l880), list_update(M2.cdr(l880), M2.sub1(i881), f882));
    }
    return if_res517;
  };
  var list_set = function(l883, k884, v885) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l883) !== false) {
      var if_res518 = M2.rvoid();
    } else {
      var if_res518 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l883, k884, v885);
    }
    if_res518;
    if (M2.exact_nonnegative_integer_p(k884) !== false) {
      var if_res519 = M2.rvoid();
    } else {
      var if_res519 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l883, k884, v885);
    }
    if_res519;
    return list_update(l883, k884, function(_886) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return v885;
    });
  };
  var drop_times_ = function(list887, n888) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.zero_p(n888) !== false) {
      var if_res521 = list887;
    } else {
      if (M2.pair_p(list887) !== false) {
        var if_res520 = drop_times_(M2.cdr(list887), M2.sub1(n888));
      } else {
        var if_res520 = false;
      }
      var if_res521 = if_res520;
    }
    return if_res521;
  };
  var too_large = function(who889, list890, n891) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proper_p892 = M2.list_p(list890);
    var temp524 = $rjs_core.UString.makeInternedImmutable("a ~alist with at least ~a ~a");
    if (proper_p892 !== false) {
      var if_res523 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res523 = $rjs_core.UString.makeInternedImmutable("(possibly improper) ");
    }
    if (proper_p892 !== false) {
      var if_res522 = $rjs_core.UString.makeInternedImmutable("elements");
    } else {
      var if_res522 = $rjs_core.UString.makeInternedImmutable("pairs");
    }
    return M2.raise_argument_error(who889, M2.format(temp524, if_res523, n891, if_res522), list890);
  };
  var take = function(list0893, n0894) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0894) !== false) {
      var if_res525 = M2.rvoid();
    } else {
      var if_res525 = M2.raise_argument_error($rjs_core.Symbol.make("take"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list0893, n0894);
    }
    if_res525;
    var loop895 = function(list896, n897) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n897) !== false) {
        var if_res527 = $rjs_core.Pair.makeList();
      } else {
        if (M2.pair_p(list896) !== false) {
          var if_res526 = M2.cons(M2.car(list896), loop895(M2.cdr(list896), M2.sub1(n897)));
        } else {
          var if_res526 = too_large($rjs_core.Symbol.make("take"), list0893, n0894);
        }
        var if_res527 = if_res526;
      }
      return if_res527;
    };
    return loop895(list0893, n0894);
  };
  var drop = function(list898, n899) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n899) !== false) {
      var if_res528 = M2.rvoid();
    } else {
      var if_res528 = M2.raise_argument_error($rjs_core.Symbol.make("drop"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list898, n899);
    }
    if_res528;
    var or_part900 = drop_times_(list898, n899);
    if (or_part900 !== false) {
      var if_res529 = or_part900;
    } else {
      var if_res529 = too_large($rjs_core.Symbol.make("drop"), list898, n899);
    }
    return if_res529;
  };
  var split_at = function(list0901, n0902) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0902) !== false) {
      var if_res530 = M2.rvoid();
    } else {
      var if_res530 = M2.raise_argument_error($rjs_core.Symbol.make("split-at"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list0901, n0902);
    }
    if_res530;
    var loop903 = function(list904, n905, pfx906) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n905) !== false) {
        var if_res532 = M2.values(M8.alt_reverse(pfx906), list904);
      } else {
        if (M2.pair_p(list904) !== false) {
          var if_res531 = loop903(M2.cdr(list904), M2.sub1(n905), M2.cons(M2.car(list904), pfx906));
        } else {
          var if_res531 = too_large($rjs_core.Symbol.make("split-at"), list0901, n0902);
        }
        var if_res532 = if_res531;
      }
      return if_res532;
    };
    return loop903(list0901, n0902, $rjs_core.Pair.makeList());
  };
  var takef = function(list907, pred908) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred908) !== false) {
      var if_res533 = M2.rvoid();
    } else {
      var if_res533 = M2.raise_argument_error($rjs_core.Symbol.make("takef"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list907, pred908);
    }
    if_res533;
    var loop909 = function(list910) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list910) !== false) {
        var x911 = M2.car(list910);
        if (pred908(x911) !== false) {
          var if_res534 = M2.cons(x911, loop909(M2.cdr(list910)));
        } else {
          var if_res534 = $rjs_core.Pair.makeList();
        }
        var if_res535 = if_res534;
      } else {
        var if_res535 = $rjs_core.Pair.makeList();
      }
      return if_res535;
    };
    return loop909(list907);
  };
  var dropf = function(list912, pred913) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred913) !== false) {
      var if_res536 = M2.rvoid();
    } else {
      var if_res536 = M2.raise_argument_error($rjs_core.Symbol.make("dropf"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list912, pred913);
    }
    if_res536;
    var loop914 = function(list915) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list915) !== false) {
        var if_res537 = pred913(M2.car(list915));
      } else {
        var if_res537 = false;
      }
      if (if_res537 !== false) {
        var if_res538 = loop914(M2.cdr(list915));
      } else {
        var if_res538 = list915;
      }
      return if_res538;
    };
    return loop914(list912);
  };
  var splitf_at = function(list916, pred917) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred917) !== false) {
      var if_res539 = M2.rvoid();
    } else {
      var if_res539 = M2.raise_argument_error($rjs_core.Symbol.make("splitf-at"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list916, pred917);
    }
    if_res539;
    var loop918 = function(list919, pfx920) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list919) !== false) {
        var if_res540 = pred917(M2.car(list919));
      } else {
        var if_res540 = false;
      }
      if (if_res540 !== false) {
        var if_res541 = loop918(M2.cdr(list919), M2.cons(M2.car(list919), pfx920));
      } else {
        var if_res541 = M2.values(M8.alt_reverse(pfx920), list919);
      }
      return if_res541;
    };
    return loop918(list916, $rjs_core.Pair.makeList());
  };
  var take_right = function(list921, n922) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n922) !== false) {
      var if_res542 = M2.rvoid();
    } else {
      var if_res542 = M2.raise_argument_error($rjs_core.Symbol.make("take-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list921, n922);
    }
    if_res542;
    var loop923 = function(list924, lead925) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead925) !== false) {
        var if_res544 = loop923(M2.cdr(list924), M2.cdr(lead925));
      } else {
        var if_res544 = list924;
      }
      return if_res544;
    };
    var or_part926 = drop_times_(list921, n922);
    if (or_part926 !== false) {
      var if_res543 = or_part926;
    } else {
      var if_res543 = too_large($rjs_core.Symbol.make("take-right"), list921, n922);
    }
    return loop923(list921, if_res543);
  };
  var drop_right = function(list927, n928) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n928) !== false) {
      var if_res545 = M2.rvoid();
    } else {
      var if_res545 = M2.raise_argument_error($rjs_core.Symbol.make("drop-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list927, n928);
    }
    if_res545;
    var loop929 = function(list930, lead931) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead931) !== false) {
        var if_res547 = M2.cons(M2.car(list930), loop929(M2.cdr(list930), M2.cdr(lead931)));
      } else {
        var if_res547 = $rjs_core.Pair.makeList();
      }
      return if_res547;
    };
    var or_part932 = drop_times_(list927, n928);
    if (or_part932 !== false) {
      var if_res546 = or_part932;
    } else {
      var if_res546 = too_large($rjs_core.Symbol.make("drop-right"), list927, n928);
    }
    return loop929(list927, if_res546);
  };
  var split_at_right = function(list933, n934) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n934) !== false) {
      var if_res548 = M2.rvoid();
    } else {
      var if_res548 = M2.raise_argument_error($rjs_core.Symbol.make("split-at-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list933, n934);
    }
    if_res548;
    var loop935 = function(list936, lead937, pfx938) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead937) !== false) {
        var if_res550 = loop935(M2.cdr(list936), M2.cdr(lead937), M2.cons(M2.car(list936), pfx938));
      } else {
        var if_res550 = M2.values(M8.alt_reverse(pfx938), list936);
      }
      return if_res550;
    };
    var or_part939 = drop_times_(list933, n934);
    if (or_part939 !== false) {
      var if_res549 = or_part939;
    } else {
      var if_res549 = too_large($rjs_core.Symbol.make("split-at-right"), list933, n934);
    }
    return loop935(list933, if_res549, $rjs_core.Pair.makeList());
  };
  var count_from_right = function(who940, list941, pred942) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred942) !== false) {
      var if_res551 = M2.rvoid();
    } else {
      var if_res551 = M2.raise_argument_error(who940, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, list941, pred942);
    }
    if_res551;
    var loop943 = function(list944, rev945, n946) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list944) !== false) {
        var if_res554 = loop943(M2.cdr(list944), M2.cons(M2.car(list944), rev945), M2.add1(n946));
      } else {
        var loop947 = function(n948, list949) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(list949) !== false) {
            var if_res552 = pred942(M2.car(list949));
          } else {
            var if_res552 = false;
          }
          if (if_res552 !== false) {
            var if_res553 = loop947(M2.sub1(n948), M2.cdr(list949));
          } else {
            var if_res553 = n948;
          }
          return if_res553;
        };
        var if_res554 = loop947(n946, rev945);
      }
      return if_res554;
    };
    return loop943(list941, $rjs_core.Pair.makeList(), 0);
  };
  var takef_right = function(list950, pred951) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop(list950, count_from_right($rjs_core.Symbol.make("takef-right"), list950, pred951));
  };
  var dropf_right = function(list952, pred953) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take(list952, count_from_right($rjs_core.Symbol.make("dropf-right"), list952, pred953));
  };
  var splitf_at_right = function(list954, pred955) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_at(list954, count_from_right($rjs_core.Symbol.make("splitf-at-right"), list954, pred955));
  };
  var list_prefix_p5956 = function(ls3957, rs4958, same_p1959, same_p2960) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls961 = ls3957;
    var rs962 = rs4958;
    if (same_p2960 !== false) {
      var if_res555 = same_p1959;
    } else {
      var if_res555 = M2.equal_p;
    }
    var same_p963 = if_res555;
    if (M2.list_p(ls961) !== false) {
      var if_res556 = M2.rvoid();
    } else {
      var if_res556 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls961, rs962);
    }
    if_res556;
    if (M2.list_p(rs962) !== false) {
      var if_res557 = M2.rvoid();
    } else {
      var if_res557 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("list?"), 1, ls961, rs962);
    }
    if_res557;
    if (M2.procedure_p(same_p963) !== false) {
      var if_res558 = M2.procedure_arity_includes_p(same_p963, 2);
    } else {
      var if_res558 = false;
    }
    if (if_res558 !== false) {
      var if_res559 = M2.rvoid();
    } else {
      var if_res559 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, ls961, rs962, same_p963);
    }
    if_res559;
    var or_part964 = M2.null_p(ls961);
    if (or_part964 !== false) {
      var if_res562 = or_part964;
    } else {
      if (M2.pair_p(rs962) !== false) {
        if (same_p963(M2.car(ls961), M2.car(rs962)) !== false) {
          var if_res560 = list_prefix_p(M2.cdr(ls961), M2.cdr(rs962));
        } else {
          var if_res560 = false;
        }
        var if_res561 = if_res560;
      } else {
        var if_res561 = false;
      }
      var if_res562 = if_res561;
    }
    return if_res562;
  };
  var cl563 = function(ls965, rs966) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p5956(ls965, rs966, false, false);
  };
  var cl564 = function(ls967, rs968, same_p1969) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p5956(ls967, rs968, same_p1969, true);
  };
  var list_prefix_p = $rjs_core.attachProcedureArity(function() {
    var fixed_lam565 = {
      '2': cl563,
      '3': cl564
    }[arguments.length];
    if (fixed_lam565 !== undefined) {
      return fixed_lam565.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var internal_split_common_prefix = function(as970, bs971, same_p972, keep_prefix_p973, name974) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(as970) !== false) {
      var if_res566 = M2.rvoid();
    } else {
      var if_res566 = M2.raise_argument_error(name974, $rjs_core.UString.makeInternedImmutable("list?"), 0, as970, bs971);
    }
    if_res566;
    if (M2.list_p(bs971) !== false) {
      var if_res567 = M2.rvoid();
    } else {
      var if_res567 = M2.raise_argument_error(name974, $rjs_core.UString.makeInternedImmutable("list?"), 1, as970, bs971);
    }
    if_res567;
    if (M2.procedure_p(same_p972) !== false) {
      var if_res568 = M2.procedure_arity_includes_p(same_p972, 2);
    } else {
      var if_res568 = false;
    }
    if (if_res568 !== false) {
      var if_res569 = M2.rvoid();
    } else {
      var if_res569 = M2.raise_argument_error(name974, $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, as970, bs971, same_p972);
    }
    if_res569;
    var loop975 = function(as976, bs977) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(as976) !== false) {
        if (M2.pair_p(bs977) !== false) {
          var if_res570 = same_p972(M2.car(as976), M2.car(bs977));
        } else {
          var if_res570 = false;
        }
        var if_res571 = if_res570;
      } else {
        var if_res571 = false;
      }
      if (if_res571 !== false) {
        var let_result572 = loop975(M2.cdr(as976), M2.cdr(bs977));
        var prefix978 = let_result572.getAt(0);
        var atail979 = let_result572.getAt(1);
        var btail980 = let_result572.getAt(2);
        if (keep_prefix_p973 !== false) {
          var if_res573 = M2.cons(M2.car(as976), prefix978);
        } else {
          var if_res573 = false;
        }
        var if_res574 = M2.values(if_res573, atail979, btail980);
      } else {
        var if_res574 = M2.values(M2.rnull, as976, bs977);
      }
      return if_res574;
    };
    return loop975(as970, bs971);
  };
  var split_common_prefix11981 = function(as9982, bs10983, same_p7984, same_p8985) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as986 = as9982;
    var bs987 = bs10983;
    if (same_p8985 !== false) {
      var if_res575 = same_p7984;
    } else {
      var if_res575 = M2.equal_p;
    }
    var same_p988 = if_res575;
    return internal_split_common_prefix(as986, bs987, same_p988, true, $rjs_core.Symbol.make("split-common-prefix"));
  };
  var cl576 = function(as989, bs990) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix11981(as989, bs990, false, false);
  };
  var cl577 = function(as991, bs992, same_p7993) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix11981(as991, bs992, same_p7993, true);
  };
  var split_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam578 = {
      '2': cl576,
      '3': cl577
    }[arguments.length];
    if (fixed_lam578 !== undefined) {
      return fixed_lam578.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var take_common_prefix17994 = function(as15995, bs16996, same_p13997, same_p14998) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as999 = as15995;
    var bs1000 = bs16996;
    if (same_p14998 !== false) {
      var if_res579 = same_p13997;
    } else {
      var if_res579 = M2.equal_p;
    }
    var same_p1001 = if_res579;
    var let_result580 = internal_split_common_prefix(as999, bs1000, same_p1001, true, $rjs_core.Symbol.make("take-common-prefix"));
    var prefix1002 = let_result580.getAt(0);
    var atail1003 = let_result580.getAt(1);
    var btail1004 = let_result580.getAt(2);
    return prefix1002;
  };
  var cl581 = function(as1005, bs1006) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix17994(as1005, bs1006, false, false);
  };
  var cl582 = function(as1007, bs1008, same_p131009) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix17994(as1007, bs1008, same_p131009, true);
  };
  var take_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam583 = {
      '2': cl581,
      '3': cl582
    }[arguments.length];
    if (fixed_lam583 !== undefined) {
      return fixed_lam583.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var drop_common_prefix231010 = function(as211011, bs221012, same_p191013, same_p201014) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as1015 = as211011;
    var bs1016 = bs221012;
    if (same_p201014 !== false) {
      var if_res584 = same_p191013;
    } else {
      var if_res584 = M2.equal_p;
    }
    var same_p1017 = if_res584;
    var let_result585 = internal_split_common_prefix(as1015, bs1016, same_p1017, false, $rjs_core.Symbol.make("drop-common-prefix"));
    var prefix1018 = let_result585.getAt(0);
    var atail1019 = let_result585.getAt(1);
    var btail1020 = let_result585.getAt(2);
    return M2.values(atail1019, btail1020);
  };
  var cl586 = function(as1021, bs1022) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231010(as1021, bs1022, false, false);
  };
  var cl587 = function(as1023, bs1024, same_p191025) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231010(as1023, bs1024, same_p191025, true);
  };
  var drop_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam588 = {
      '2': cl586,
      '3': cl587
    }[arguments.length];
    if (fixed_lam588 !== undefined) {
      return fixed_lam588.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cl589 = function(ls1026) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, ls1026);
  };
  var cl590 = function(l11027, l21028) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11027, l21028);
  };
  var cl591 = function(l11029, l21030, l31031) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11029, l21030, l31031);
  };
  var cl592 = function(l11032, l21033, l31034, l41035) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11032, l21033, l31034, l41035);
  };
  var cl593 = $rjs_core.attachProcedureArity(function(l1036) {
    for (var lss1037596 = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      lss1037596[$__1 - 1] = arguments[$__1];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lss1037 = $rjs_core.Pair.listFromArray(lss1037596);
    return M2.apply(M7.new_apply_proc, M2.append, l1036, lss1037);
  });
  var append_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam594 = {
      '1': cl589,
      '2': cl590,
      '3': cl591,
      '4': cl592
    }[arguments.length];
    if (fixed_lam594 !== undefined) {
      return fixed_lam594.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl593.length, 1) !== false) {
        var if_res595 = cl593.apply(null, arguments);
      } else {
        var if_res595 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res595;
    }
  }, [M2.make_arity_at_least(1)]);
  var flatten = function(orig_sexp1038) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1039 = function(sexp1040, acc1041) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(sexp1040) !== false) {
        var if_res598 = acc1041;
      } else {
        if (M2.pair_p(sexp1040) !== false) {
          var if_res597 = loop1039(M2.car(sexp1040), loop1039(M2.cdr(sexp1040), acc1041));
        } else {
          var if_res597 = M2.cons(sexp1040, acc1041);
        }
        var if_res598 = if_res597;
      }
      return if_res598;
    };
    return loop1039(orig_sexp1038, M2.rnull);
  };
  var add_between35 = function(after_last281042, after_last321043, before_first261044, before_first301045, before_last271046, before_last311047, splice_p251048, splice_p291049, l331050, x341051) {
    if (arguments.length !== 10) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1052 = l331050;
    var x1053 = x341051;
    if (splice_p291049 !== false) {
      var if_res599 = splice_p251048;
    } else {
      var if_res599 = false;
    }
    var splice_p1054 = if_res599;
    if (before_first301045 !== false) {
      var if_res600 = before_first261044;
    } else {
      var if_res600 = $rjs_core.Pair.makeList();
    }
    var before_first1055 = if_res600;
    if (before_last311047 !== false) {
      var if_res601 = before_last271046;
    } else {
      var if_res601 = x1053;
    }
    var before_last1056 = if_res601;
    if (after_last321043 !== false) {
      var if_res602 = after_last281042;
    } else {
      var if_res602 = $rjs_core.Pair.makeList();
    }
    var after_last1057 = if_res602;
    if (M2.list_p(l1052) !== false) {
      var if_res603 = M2.rvoid();
    } else {
      var if_res603 = M2.raise_argument_error($rjs_core.Symbol.make("add-between"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1052, x1053);
    }
    if_res603;
    if (splice_p1054 !== false) {
      var check_list1058 = function(x1059, which1060) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.list_p(x1059) !== false) {
          var if_res604 = M2.rvoid();
        } else {
          var if_res604 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append($rjs_core.UString.makeInternedImmutable("list needed in splicing mode"), which1060), $rjs_core.UString.makeInternedImmutable("given"), x1059, $rjs_core.UString.makeInternedImmutable("given list..."), l1052);
        }
        return if_res604;
      };
      check_list1058(x1053, $rjs_core.UString.makeInternedImmutable(""));
      check_list1058(before_first1055, $rjs_core.UString.makeInternedImmutable(" for #:before-first"));
      check_list1058(before_last1056, $rjs_core.UString.makeInternedImmutable(" for #:before-last"));
      var if_res606 = check_list1058(after_last1057, $rjs_core.UString.makeInternedImmutable(" for #:after-last"));
    } else {
      var check_not_given1061 = function(x1062, which1063) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.eq_p($rjs_core.Pair.makeList(), x1062) !== false) {
          var if_res605 = M2.rvoid();
        } else {
          var if_res605 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append(which1063, $rjs_core.UString.makeInternedImmutable(" can only be used in splicing mode")), $rjs_core.UString.makeInternedImmutable("given"), x1062, $rjs_core.UString.makeInternedImmutable("given list..."), l1052);
        }
        return if_res605;
      };
      check_not_given1061(before_first1055, $rjs_core.UString.makeInternedImmutable("#:before-first"));
      var if_res606 = check_not_given1061(after_last1057, $rjs_core.UString.makeInternedImmutable("#:after-last"));
    }
    if_res606;
    var or_part1064 = M2.null_p(l1052);
    if (or_part1064 !== false) {
      var if_res607 = or_part1064;
    } else {
      var if_res607 = M2.null_p(M2.cdr(l1052));
    }
    if (if_res607 !== false) {
      if (splice_p1054 !== false) {
        var if_res608 = M2.append(before_first1055, l1052, after_last1057);
      } else {
        var if_res608 = l1052;
      }
      var if_res613 = if_res608;
    } else {
      if (splice_p1054 !== false) {
        var x1065 = M8.alt_reverse(x1053);
        var loop1067 = function(i1068, l1069, r1070) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1069) !== false) {
            var if_res609 = loop1067(M2.car(l1069), M2.cdr(l1069), M2.cons(i1068, M2.append(x1065, r1070)));
          } else {
            var if_res609 = M2.cons(i1068, M2.append(M8.alt_reverse(before_last1056), r1070));
          }
          return if_res609;
        };
        var r1066 = loop1067(M2.cadr(l1052), M2.cddr(l1052), $rjs_core.Pair.makeList());
        var r1071 = M8.alt_reverse(M2.append(M8.alt_reverse(after_last1057), r1066));
        var r1072 = M4.__rjs_quoted__.qq_append(before_first1055, M2.list_times_(M2.car(l1052), r1071));
        var if_res612 = r1072;
      } else {
        var temp611 = M2.car(l1052);
        var loop1073 = function(i1074, l1075, r1076) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1075) !== false) {
            var if_res610 = loop1073(M2.car(l1075), M2.cdr(l1075), M2.cons(i1074, M2.cons(x1053, r1076)));
          } else {
            var if_res610 = M2.cons(i1074, M2.cons(before_last1056, r1076));
          }
          return if_res610;
        };
        var if_res612 = M2.cons(temp611, M8.alt_reverse(loop1073(M2.cadr(l1052), M2.cddr(l1052), $rjs_core.Pair.makeList())));
      }
      var if_res613 = if_res612;
    }
    return if_res613;
  };
  var unpack36 = function(given_kws1077, given_args1078, l331079, x341080) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(given_kws1077) !== false) {
      var if_res614 = M2.eq_p($rjs_core.Keyword.make("after-last"), M2.car(given_kws1077));
    } else {
      var if_res614 = false;
    }
    var after_last321081 = if_res614;
    if (after_last321081 !== false) {
      var if_res615 = M2.car(given_args1078);
    } else {
      var if_res615 = M2.rvoid();
    }
    var after_last281082 = if_res615;
    if (after_last321081 !== false) {
      var if_res616 = M2.cdr(given_kws1077);
    } else {
      var if_res616 = given_kws1077;
    }
    var given_kws1083 = if_res616;
    if (after_last321081 !== false) {
      var if_res617 = M2.cdr(given_args1078);
    } else {
      var if_res617 = given_args1078;
    }
    var given_args1084 = if_res617;
    if (M2.pair_p(given_kws1083) !== false) {
      var if_res618 = M2.eq_p($rjs_core.Keyword.make("before-first"), M2.car(given_kws1083));
    } else {
      var if_res618 = false;
    }
    var before_first301085 = if_res618;
    if (before_first301085 !== false) {
      var if_res619 = M2.car(given_args1084);
    } else {
      var if_res619 = M2.rvoid();
    }
    var before_first261086 = if_res619;
    if (before_first301085 !== false) {
      var if_res620 = M2.cdr(given_kws1083);
    } else {
      var if_res620 = given_kws1083;
    }
    var given_kws1087 = if_res620;
    if (before_first301085 !== false) {
      var if_res621 = M2.cdr(given_args1084);
    } else {
      var if_res621 = given_args1084;
    }
    var given_args1088 = if_res621;
    if (M2.pair_p(given_kws1087) !== false) {
      var if_res622 = M2.eq_p($rjs_core.Keyword.make("before-last"), M2.car(given_kws1087));
    } else {
      var if_res622 = false;
    }
    var before_last311089 = if_res622;
    if (before_last311089 !== false) {
      var if_res623 = M2.car(given_args1088);
    } else {
      var if_res623 = M2.rvoid();
    }
    var before_last271090 = if_res623;
    if (before_last311089 !== false) {
      var if_res624 = M2.cdr(given_kws1087);
    } else {
      var if_res624 = given_kws1087;
    }
    var given_kws1091 = if_res624;
    if (before_last311089 !== false) {
      var if_res625 = M2.cdr(given_args1088);
    } else {
      var if_res625 = given_args1088;
    }
    var given_args1092 = if_res625;
    var splice_p291093 = M2.pair_p(given_kws1091);
    if (splice_p291093 !== false) {
      var if_res626 = M2.car(given_args1092);
    } else {
      var if_res626 = M2.rvoid();
    }
    var splice_p251094 = if_res626;
    return add_between35(after_last281082, after_last321081, before_first261086, before_first301085, before_last271090, before_last311089, splice_p251094, splice_p291093, l331079, x341080);
  };
  var cl630 = function(given_kws1105, given_args1106, l1107, x1108) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(given_kws1105, given_args1106, l1107, x1108);
  };
  var temp632 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam631 = {'4': cl630}[arguments.length];
    if (fixed_lam631 !== undefined) {
      return fixed_lam631.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp629 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("after-last"), $rjs_core.Keyword.make("before-first"), $rjs_core.Keyword.make("before-last"), $rjs_core.Keyword.make("splice?"));
  var cl627 = function(l1110, x1111) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(M2.rnull, M2.rnull, l1110, x1111);
  };
  var add_between1109 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam628 = {'2': cl627}[arguments.length];
    if (fixed_lam628 !== undefined) {
      return fixed_lam628.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var add_between37 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1095, given_argc1096) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(given_argc1096, 4) !== false) {
      var l11097 = given_kws1095;
      if (M2.null_p(l11097) !== false) {
        var if_res634 = l11097;
      } else {
        if (M2.eq_p(M2.car(l11097), $rjs_core.Keyword.make("after-last")) !== false) {
          var if_res633 = M2.cdr(l11097);
        } else {
          var if_res633 = l11097;
        }
        var if_res634 = if_res633;
      }
      var l11098 = if_res634;
      var l11099 = l11098;
      if (M2.null_p(l11099) !== false) {
        var if_res636 = l11099;
      } else {
        if (M2.eq_p(M2.car(l11099), $rjs_core.Keyword.make("before-first")) !== false) {
          var if_res635 = M2.cdr(l11099);
        } else {
          var if_res635 = l11099;
        }
        var if_res636 = if_res635;
      }
      var l11100 = if_res636;
      var l11101 = l11100;
      if (M2.null_p(l11101) !== false) {
        var if_res638 = l11101;
      } else {
        if (M2.eq_p(M2.car(l11101), $rjs_core.Keyword.make("before-last")) !== false) {
          var if_res637 = M2.cdr(l11101);
        } else {
          var if_res637 = l11101;
        }
        var if_res638 = if_res637;
      }
      var l11102 = if_res638;
      var l11103 = l11102;
      if (M2.null_p(l11103) !== false) {
        var if_res640 = l11103;
      } else {
        if (M2.eq_p(M2.car(l11103), $rjs_core.Keyword.make("splice?")) !== false) {
          var if_res639 = M2.cdr(l11103);
        } else {
          var if_res639 = l11103;
        }
        var if_res640 = if_res639;
      }
      var l11104 = if_res640;
      var if_res641 = M2.null_p(l11104);
    } else {
      var if_res641 = false;
    }
    return if_res641;
  }, temp632, M2.rnull, temp629, add_between1109);
  var remove_duplicates43 = function(key381112, key391113, l421114, __eq__p401115, __eq__p411116) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1117 = l421114;
    if (__eq__p411116 !== false) {
      var if_res642 = __eq__p401115;
    } else {
      var if_res642 = M2.equal_p;
    }
    var __eq__p1118 = if_res642;
    if (key391113 !== false) {
      var if_res643 = key381112;
    } else {
      var if_res643 = false;
    }
    var key1119 = if_res643;
    if (M2.list_p(l1117) !== false) {
      var if_res644 = M2.rvoid();
    } else {
      var if_res644 = M2.raise_argument_error($rjs_core.Symbol.make("remove-duplicates"), $rjs_core.UString.makeInternedImmutable("list?"), l1117);
    }
    if_res644;
    var len1120 = M2.length(l1117);
    if (M2.__lt__eq_(len1120, 1) !== false) {
      var if_res648 = true;
    } else {
      if (M2.__lt__eq_(len1120, 40) !== false) {
        var if_res647 = false;
      } else {
        if (M2.eq_p(__eq__p1118, M2.eq_p) !== false) {
          var if_res646 = M2.make_hasheq();
        } else {
          if (M2.eq_p(__eq__p1118, M2.equal_p) !== false) {
            var if_res645 = M2.make_hash();
          } else {
            var if_res645 = false;
          }
          var if_res646 = if_res645;
        }
        var if_res647 = if_res646;
      }
      var if_res648 = if_res647;
    }
    var h1121 = if_res648;
    var tmp1122 = h1121;
    if (M2.equal_p(tmp1122, true) !== false) {
      var if_res667 = l1117;
    } else {
      if (M2.equal_p(tmp1122, false) !== false) {
        var or_part1124 = key1119;
        if (or_part1124 !== false) {
          var if_res649 = or_part1124;
        } else {
          var if_res649 = function(x1125) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return x1125;
          };
        }
        var key1123 = if_res649;
        if (M2.eq_p(__eq__p1118, M2.equal_p) !== false) {
          var loop1126 = function(l1127, seen1128) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1127) !== false) {
              var if_res651 = l1127;
            } else {
              var x1129 = M2.car(l1127);
              var k1130 = key1123(x1129);
              var l1131 = M2.cdr(l1127);
              if (M0.member(k1130, seen1128) !== false) {
                var if_res650 = loop1126(l1131, seen1128);
              } else {
                var if_res650 = M2.cons(x1129, loop1126(l1131, M2.cons(k1130, seen1128)));
              }
              var if_res651 = if_res650;
            }
            return if_res651;
          };
          var if_res660 = loop1126(l1117, M2.rnull);
        } else {
          if (M2.eq_p(__eq__p1118, M2.eq_p) !== false) {
            var loop1132 = function(l1133, seen1134) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.null_p(l1133) !== false) {
                var if_res653 = l1133;
              } else {
                var x1135 = M2.car(l1133);
                var k1136 = key1123(x1135);
                var l1137 = M2.cdr(l1133);
                if (M0.memq(k1136, seen1134) !== false) {
                  var if_res652 = loop1132(l1137, seen1134);
                } else {
                  var if_res652 = M2.cons(x1135, loop1132(l1137, M2.cons(k1136, seen1134)));
                }
                var if_res653 = if_res652;
              }
              return if_res653;
            };
            var if_res659 = loop1132(l1117, M2.rnull);
          } else {
            if (M2.eq_p(__eq__p1118, M2.eqv_p) !== false) {
              var loop1138 = function(l1139, seen1140) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1139) !== false) {
                  var if_res655 = l1139;
                } else {
                  var x1141 = M2.car(l1139);
                  var k1142 = key1123(x1141);
                  var l1143 = M2.cdr(l1139);
                  if (M0.memv(k1142, seen1140) !== false) {
                    var if_res654 = loop1138(l1143, seen1140);
                  } else {
                    var if_res654 = M2.cons(x1141, loop1138(l1143, M2.cons(k1142, seen1140)));
                  }
                  var if_res655 = if_res654;
                }
                return if_res655;
              };
              var if_res658 = loop1138(l1117, M2.rnull);
            } else {
              var loop1144 = function(l1145, seen1146) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1145) !== false) {
                  var if_res657 = l1145;
                } else {
                  var x1147 = M2.car(l1145);
                  var k1148 = key1123(x1147);
                  var l1149 = M2.cdr(l1145);
                  if ((function(x1150, seen1151) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M5.ormap(function(y1152) {
                      if (arguments.length !== 1) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      return __eq__p1118(x1150, y1152);
                    }, seen1151);
                  })(k1148, seen1146) !== false) {
                    var if_res656 = loop1144(l1149, seen1146);
                  } else {
                    var if_res656 = M2.cons(x1147, loop1144(l1149, M2.cons(k1148, seen1146)));
                  }
                  var if_res657 = if_res656;
                }
                return if_res657;
              };
              var if_res658 = loop1144(l1117, M2.rnull);
            }
            var if_res659 = if_res658;
          }
          var if_res660 = if_res659;
        }
        var if_res666 = if_res660;
      } else {
        if (key1119 !== false) {
          var loop1153 = function(l1154) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1154) !== false) {
              var if_res662 = l1154;
            } else {
              var x1155 = M2.car(l1154);
              var k1156 = key1119(x1155);
              var l1157 = M2.cdr(l1154);
              if (M2.hash_ref(h1121, k1156, false) !== false) {
                var if_res661 = loop1153(l1157);
              } else {
                M2.hash_set_bang_(h1121, k1156, true);
                var if_res661 = M2.cons(x1155, loop1153(l1157));
              }
              var if_res662 = if_res661;
            }
            return if_res662;
          };
          var if_res665 = loop1153(l1117);
        } else {
          var loop1158 = function(l1159) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1159) !== false) {
              var if_res664 = l1159;
            } else {
              var x1160 = M2.car(l1159);
              var k1161 = x1160;
              var l1162 = M2.cdr(l1159);
              if (M2.hash_ref(h1121, k1161, false) !== false) {
                var if_res663 = loop1158(l1162);
              } else {
                M2.hash_set_bang_(h1121, k1161, true);
                var if_res663 = M2.cons(x1160, loop1158(l1162));
              }
              var if_res664 = if_res663;
            }
            return if_res664;
          };
          var if_res665 = loop1158(l1117);
        }
        var if_res666 = if_res665;
      }
      var if_res667 = if_res666;
    }
    return if_res667;
  };
  var unpack44 = function(given_kws1163, given_args1164, l421165, __eq__p401166, __eq__p411167) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key391168 = M2.pair_p(given_kws1163);
    if (key391168 !== false) {
      var if_res668 = M2.car(given_args1164);
    } else {
      var if_res668 = M2.rvoid();
    }
    var key381169 = if_res668;
    return remove_duplicates43(key381169, key391168, l421165, __eq__p401166, __eq__p411167);
  };
  var cl673 = function(given_kws1174, given_args1175, l1176) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1174, given_args1175, l1176, false, false);
  };
  var cl674 = function(given_kws1177, given_args1178, l1179, __eq__p401180) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1177, given_args1178, l1179, __eq__p401180, true);
  };
  var temp676 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam675 = {
      '3': cl673,
      '4': cl674
    }[arguments.length];
    if (fixed_lam675 !== undefined) {
      return fixed_lam675.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp672 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl669 = function(l1182) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1182, false, false);
  };
  var cl670 = function(l1183, __eq__p401184) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1183, __eq__p401184, true);
  };
  var remove_duplicates1181 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam671 = {
      '1': cl669,
      '2': cl670
    }[arguments.length];
    if (fixed_lam671 !== undefined) {
      return fixed_lam671.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var remove_duplicates45 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1170, given_argc1171) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1171, 3) !== false) {
      var if_res677 = M2.__lt__eq_(given_argc1171, 4);
    } else {
      var if_res677 = false;
    }
    if (if_res677 !== false) {
      var l11172 = given_kws1170;
      if (M2.null_p(l11172) !== false) {
        var if_res679 = l11172;
      } else {
        if (M2.eq_p(M2.car(l11172), $rjs_core.Keyword.make("key")) !== false) {
          var if_res678 = M2.cdr(l11172);
        } else {
          var if_res678 = l11172;
        }
        var if_res679 = if_res678;
      }
      var l11173 = if_res679;
      var if_res680 = M2.null_p(l11173);
    } else {
      var if_res680 = false;
    }
    return if_res680;
  }, temp676, M2.rnull, temp672, remove_duplicates1181);
  var check_duplicates51 = function(key461185, key471186, items501187, same_p481188, same_p491189) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var items1190 = items501187;
    if (same_p491189 !== false) {
      var if_res681 = same_p481188;
    } else {
      var if_res681 = M2.equal_p;
    }
    var same_p1191 = if_res681;
    if (key471186 !== false) {
      var if_res682 = key461185;
    } else {
      var if_res682 = M2.values;
    }
    var key1192 = if_res682;
    if (M2.list_p(items1190) !== false) {
      var if_res683 = M2.rvoid();
    } else {
      var if_res683 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("list?"), 0, items1190);
    }
    if_res683;
    if (M2.procedure_p(key1192) !== false) {
      var if_res684 = M2.procedure_arity_includes_p(key1192, 1);
    } else {
      var if_res684 = false;
    }
    if (if_res684 !== false) {
      var if_res685 = M2.rvoid();
    } else {
      var if_res685 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), key1192);
    }
    if_res685;
    if (M2.eq_p(same_p1191, M2.equal_p) !== false) {
      var if_res690 = check_duplicates_by_t(items1190, key1192, M2.make_hash());
    } else {
      if (M2.eq_p(same_p1191, M2.eq_p) !== false) {
        var if_res689 = check_duplicates_by_t(items1190, key1192, M2.make_hasheq());
      } else {
        if (M2.eq_p(same_p1191, M2.eqv_p) !== false) {
          var if_res688 = check_duplicates_by_t(items1190, key1192, M2.make_hasheqv());
        } else {
          if (M2.procedure_p(same_p1191) !== false) {
            var if_res686 = M2.procedure_arity_includes_p(same_p1191, 2);
          } else {
            var if_res686 = false;
          }
          if (if_res686 !== false) {
            var if_res687 = M2.rvoid();
          } else {
            var if_res687 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 1, items1190, same_p1191);
          }
          if_res687;
          var if_res688 = check_duplicates_by_list(items1190, key1192, same_p1191);
        }
        var if_res689 = if_res688;
      }
      var if_res690 = if_res689;
    }
    return if_res690;
  };
  var unpack52 = function(given_kws1193, given_args1194, items501195, same_p481196, same_p491197) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key471198 = M2.pair_p(given_kws1193);
    if (key471198 !== false) {
      var if_res691 = M2.car(given_args1194);
    } else {
      var if_res691 = M2.rvoid();
    }
    var key461199 = if_res691;
    return check_duplicates51(key461199, key471198, items501195, same_p481196, same_p491197);
  };
  var cl696 = function(given_kws1204, given_args1205, items1206) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1204, given_args1205, items1206, false, false);
  };
  var cl697 = function(given_kws1207, given_args1208, items1209, same_p481210) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1207, given_args1208, items1209, same_p481210, true);
  };
  var temp699 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam698 = {
      '3': cl696,
      '4': cl697
    }[arguments.length];
    if (fixed_lam698 !== undefined) {
      return fixed_lam698.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp695 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl692 = function(items1212) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1212, false, false);
  };
  var cl693 = function(items1213, same_p481214) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1213, same_p481214, true);
  };
  var check_duplicates1211 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam694 = {
      '1': cl692,
      '2': cl693
    }[arguments.length];
    if (fixed_lam694 !== undefined) {
      return fixed_lam694.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var check_duplicates53 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1200, given_argc1201) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1201, 3) !== false) {
      var if_res700 = M2.__lt__eq_(given_argc1201, 4);
    } else {
      var if_res700 = false;
    }
    if (if_res700 !== false) {
      var l11202 = given_kws1200;
      if (M2.null_p(l11202) !== false) {
        var if_res702 = l11202;
      } else {
        if (M2.eq_p(M2.car(l11202), $rjs_core.Keyword.make("key")) !== false) {
          var if_res701 = M2.cdr(l11202);
        } else {
          var if_res701 = l11202;
        }
        var if_res702 = if_res701;
      }
      var l11203 = if_res702;
      var if_res703 = M2.null_p(l11203);
    } else {
      var if_res703 = false;
    }
    return if_res703;
  }, temp699, M2.rnull, temp695, check_duplicates1211);
  var check_duplicates_by_t = function(items1215, key1216, table1217) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1218 = function(items1219) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1219) !== false) {
        var key_item1220 = key1216(M2.car(items1219));
        if (M2.hash_ref(table1217, key_item1220, false) !== false) {
          var if_res704 = M2.car(items1219);
        } else {
          M2.hash_set_bang_(table1217, key_item1220, true);
          var if_res704 = loop1218(M2.cdr(items1219));
        }
        var if_res705 = if_res704;
      } else {
        var if_res705 = false;
      }
      return if_res705;
    };
    return loop1218(items1215);
  };
  var check_duplicates_by_list = function(items1221, key1222, same_p1223) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1224 = function(items1225, sofar1226) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1225) !== false) {
        var key_item1227 = key1222(M2.car(items1225));
        var lst1228 = sofar1226;
        if (M2.list_p(lst1228) !== false) {
          var if_res706 = M2.rvoid();
        } else {
          var if_res706 = M3.__rjs_quoted__.in_list(lst1228);
        }
        if_res706;
        var for_loop1229 = function(result1230, lst1231) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(lst1231) !== false) {
            var prev1232 = M10.unsafe_car(lst1231);
            var rest1233 = M10.unsafe_cdr(lst1231);
            if (true !== false) {
              var result1235 = result1230;
              var result1236 = same_p1223(key_item1227, prev1232);
              var result1234 = M2.values(result1236);
              if (true !== false) {
                var if_res708 = M2.not($rjs_core.attachProcedureArity(function() {
                  for (var x1237707 = [],
                      $__2 = 0; $__2 < arguments.length; $__2++)
                    x1237707[$__2] = arguments[$__2];
                  var x1237 = $rjs_core.Pair.listFromArray(x1237707);
                  return result1234;
                })(prev1232));
              } else {
                var if_res708 = false;
              }
              if (if_res708 !== false) {
                var if_res709 = M2.not(false);
              } else {
                var if_res709 = false;
              }
              if (if_res709 !== false) {
                var if_res710 = for_loop1229(result1234, rest1233);
              } else {
                var if_res710 = result1234;
              }
              var if_res711 = if_res710;
            } else {
              var if_res711 = result1230;
            }
            var if_res712 = if_res711;
          } else {
            var if_res712 = result1230;
          }
          return if_res712;
        };
        if (for_loop1229(false, lst1228) !== false) {
          var if_res713 = M2.car(items1225);
        } else {
          var if_res713 = loop1224(M2.cdr(items1225), M2.cons(key_item1227, sofar1226));
        }
        var if_res714 = if_res713;
      } else {
        var if_res714 = false;
      }
      return if_res714;
    };
    return loop1224(items1221, M2.rnull);
  };
  var check_filter_arguments = function(who1238, f1239, l1240, ls1241) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1239) !== false) {
      var if_res715 = M2.rvoid();
    } else {
      var if_res715 = M2.apply(M2.raise_argument_error, who1238, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f1239, l1240, ls1241);
    }
    if_res715;
    if (M2.procedure_arity_includes_p(f1239, M2.add1(M2.length(ls1241))) !== false) {
      var if_res716 = M2.rvoid();
    } else {
      var if_res716 = M2.raise_arguments_error(who1238, $rjs_core.UString.makeInternedImmutable("mismatch between procedure arity and argument count"), $rjs_core.UString.makeInternedImmutable("procedure"), f1239, $rjs_core.UString.makeInternedImmutable("expected arity"), M2.add1(M2.length(ls1241)));
    }
    if_res716;
    if (M2.list_p(l1240) !== false) {
      var if_res717 = M5.andmap(M2.list_p, ls1241);
    } else {
      var if_res717 = false;
    }
    if (if_res717 !== false) {
      var if_res737 = M2.rvoid();
    } else {
      var let_result718 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), M2.cons(l1240, ls1241));
      var pos__gt_vals1242 = let_result718.getAt(0);
      var pos_pre_inc1243 = let_result718.getAt(1);
      var pos_next1244 = let_result718.getAt(2);
      var init1245 = let_result718.getAt(3);
      var pos_cont_p1246 = let_result718.getAt(4);
      var val_cont_p1247 = let_result718.getAt(5);
      var all_cont_p1248 = let_result718.getAt(6);
      var start1249 = 0;
      if (M2.rvoid() !== false) {
        if (M2.exact_nonnegative_integer_p(start1249) !== false) {
          var if_res719 = M2.rvoid();
        } else {
          var if_res719 = M3.__rjs_quoted__.in_naturals(start1249);
        }
        var if_res720 = if_res719;
      } else {
        var if_res720 = false;
      }
      if_res720;
      var for_loop1250 = function(pos1251, pos1252) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pos_cont_p1246 !== false) {
          var if_res721 = pos_cont_p1246(pos1251);
        } else {
          var if_res721 = true;
        }
        if (if_res721 !== false) {
          var if_res722 = true;
        } else {
          var if_res722 = false;
        }
        if (if_res722 !== false) {
          var x1257 = pos__gt_vals1242(pos1251);
          if (all_cont_p1248 !== false) {
            var if_res723 = function(pos1258) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return all_cont_p1248(pos1258, x1257);
            };
          } else {
            var if_res723 = false;
          }
          var let_result724 = M2.values(x1257, if_res723);
          var x1253 = let_result724.getAt(0);
          var all_cont_p_by_pos1254 = let_result724.getAt(1);
          if (pos_pre_inc1243 !== false) {
            var if_res725 = pos_pre_inc1243(pos1251);
          } else {
            var if_res725 = pos1251;
          }
          var pos1255 = if_res725;
          var i1256 = pos1252;
          if (val_cont_p1247 !== false) {
            var if_res726 = val_cont_p1247(x1253);
          } else {
            var if_res726 = true;
          }
          if (if_res726 !== false) {
            var if_res727 = true;
          } else {
            var if_res727 = false;
          }
          if (if_res727 !== false) {
            if (M2.list_p(x1253) !== false) {
              var if_res728 = M2.rvoid();
            } else {
              var if_res728 = M2.apply(M2.raise_argument_error, who1238, $rjs_core.UString.makeInternedImmutable("list?"), M2.add1(i1256), f1239, l1240, ls1241);
            }
            if_res728;
            var let_result729 = M2.values();
            var let_result730 = M2.values();
            if (all_cont_p_by_pos1254 !== false) {
              var if_res731 = all_cont_p_by_pos1254(pos1255);
            } else {
              var if_res731 = true;
            }
            if (if_res731 !== false) {
              var if_res732 = true;
            } else {
              var if_res732 = false;
            }
            if (if_res732 !== false) {
              var if_res733 = M2.not(false);
            } else {
              var if_res733 = false;
            }
            if (if_res733 !== false) {
              var if_res734 = for_loop1250(pos_next1244(pos1255), pos1252 + 1);
            } else {
              var if_res734 = M2.values();
            }
            var if_res735 = if_res734;
          } else {
            var if_res735 = M2.values();
          }
          var if_res736 = if_res735;
        } else {
          var if_res736 = M2.values();
        }
        return if_res736;
      };
      for_loop1250(init1245, start1249);
      var if_res737 = M2.rvoid();
    }
    return if_res737;
  };
  var filter_map = $rjs_core.attachProcedureArity(function(f1259, l1260) {
    for (var ls1261738 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      ls1261738[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1261 = $rjs_core.Pair.listFromArray(ls1261738);
    check_filter_arguments($rjs_core.Symbol.make("filter-map"), f1259, l1260, ls1261);
    if (M2.pair_p(ls1261) !== false) {
      var len1262 = M2.length(l1260);
      if (M5.andmap(function(l1263) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1262, M2.length(l1263));
      }, ls1261) !== false) {
        var loop1264 = function(l1265, ls1266) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1265) !== false) {
            var if_res740 = M2.rnull;
          } else {
            var x1267 = M2.apply(f1259, M2.car(l1265), M5.map(M2.car, ls1266));
            if (x1267 !== false) {
              var if_res739 = M2.cons(x1267, loop1264(M2.cdr(l1265), M5.map(M2.cdr, ls1266)));
            } else {
              var if_res739 = loop1264(M2.cdr(l1265), M5.map(M2.cdr, ls1266));
            }
            var if_res740 = if_res739;
          }
          return if_res740;
        };
        var if_res741 = loop1264(l1260, ls1261);
      } else {
        var if_res741 = M2.raise_arguments_error($rjs_core.Symbol.make("filter-map"), $rjs_core.UString.makeInternedImmutable("all lists must have same size"));
      }
      var if_res744 = if_res741;
    } else {
      var loop1268 = function(l1269) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1269) !== false) {
          var if_res743 = M2.rnull;
        } else {
          var x1270 = f1259(M2.car(l1269));
          if (x1270 !== false) {
            var if_res742 = M2.cons(x1270, loop1268(M2.cdr(l1269)));
          } else {
            var if_res742 = loop1268(M2.cdr(l1269));
          }
          var if_res743 = if_res742;
        }
        return if_res743;
      };
      var if_res744 = loop1268(l1260);
    }
    return if_res744;
  });
  var count = $rjs_core.attachProcedureArity(function(f1271, l1272) {
    for (var ls1273745 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      ls1273745[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1273 = $rjs_core.Pair.listFromArray(ls1273745);
    check_filter_arguments($rjs_core.Symbol.make("count"), f1271, l1272, ls1273);
    if (M2.pair_p(ls1273) !== false) {
      var len1274 = M2.length(l1272);
      if (M5.andmap(function(l1275) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1274, M2.length(l1275));
      }, ls1273) !== false) {
        var loop1276 = function(l1277, ls1278, c1279) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1277) !== false) {
            var if_res749 = c1279;
          } else {
            var temp748 = M2.cdr(l1277);
            var temp747 = M5.map(M2.cdr, ls1278);
            if (M2.apply(f1271, M2.car(l1277), M5.map(M2.car, ls1278)) !== false) {
              var if_res746 = M2.add1(c1279);
            } else {
              var if_res746 = c1279;
            }
            var if_res749 = loop1276(temp748, temp747, if_res746);
          }
          return if_res749;
        };
        var if_res750 = loop1276(l1272, ls1273, 0);
      } else {
        var if_res750 = M2.raise_arguments_error($rjs_core.Symbol.make("count"), $rjs_core.UString.makeInternedImmutable("all lists must have same size"));
      }
      var if_res754 = if_res750;
    } else {
      var loop1280 = function(l1281, c1282) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1281) !== false) {
          var if_res753 = c1282;
        } else {
          var temp752 = M2.cdr(l1281);
          if (f1271(M2.car(l1281)) !== false) {
            var if_res751 = M2.add1(c1282);
          } else {
            var if_res751 = c1282;
          }
          var if_res753 = loop1280(temp752, if_res751);
        }
        return if_res753;
      };
      var if_res754 = loop1280(l1272, 0);
    }
    return if_res754;
  });
  var partition = function(pred1283, l1284) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred1283) !== false) {
      var if_res755 = M2.procedure_arity_includes_p(pred1283, 1);
    } else {
      var if_res755 = false;
    }
    if (if_res755 !== false) {
      var if_res756 = M2.rvoid();
    } else {
      var if_res756 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, pred1283, l1284);
    }
    if_res756;
    if (M2.list_p(l1284) !== false) {
      var if_res757 = M2.rvoid();
    } else {
      var if_res757 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.makeInternedImmutable("list?"), 1, pred1283, l1284);
    }
    if_res757;
    var loop1285 = function(l1286, i1287, o1288) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1286) !== false) {
        var if_res759 = M2.values(M8.alt_reverse(i1287), M8.alt_reverse(o1288));
      } else {
        var x1289 = M2.car(l1286);
        var l1290 = M2.cdr(l1286);
        if (pred1283(x1289) !== false) {
          var if_res758 = loop1285(l1290, M2.cons(x1289, i1287), o1288);
        } else {
          var if_res758 = loop1285(l1290, i1287, M2.cons(x1289, o1288));
        }
        var if_res759 = if_res758;
      }
      return if_res759;
    };
    return loop1285(l1284, $rjs_core.Pair.makeList(), $rjs_core.Pair.makeList());
  };
  var cl760 = function(end1292) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1293 = 0;
    var end1294 = end1292;
    var inc1295 = 1;
    if (M2.real_p(start1293) !== false) {
      if (M2.real_p(end1294) !== false) {
        var if_res764 = M2.real_p(inc1295);
      } else {
        var if_res764 = false;
      }
      var if_res765 = if_res764;
    } else {
      var if_res765 = false;
    }
    if (if_res765 !== false) {
      var if_res766 = M2.rvoid();
    } else {
      var if_res766 = M3.__rjs_quoted__.in_range(start1293, end1294, inc1295);
    }
    if_res766;
    var for_loop1296 = function(fold_var1297, pos1298) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1298, end1294) !== false) {
        var i1299 = pos1298;
        if (true !== false) {
          var fold_var1301 = fold_var1297;
          var fold_var1302 = M2.cons(i1299, fold_var1301);
          var fold_var1300 = M2.values(fold_var1302);
          if (true !== false) {
            var if_res767 = M2.not(false);
          } else {
            var if_res767 = false;
          }
          if (if_res767 !== false) {
            var if_res768 = for_loop1296(fold_var1300, pos1298 + inc1295);
          } else {
            var if_res768 = fold_var1300;
          }
          var if_res769 = if_res768;
        } else {
          var if_res769 = fold_var1297;
        }
        var if_res770 = if_res769;
      } else {
        var if_res770 = fold_var1297;
      }
      return if_res770;
    };
    return M8.alt_reverse(for_loop1296(M2.rnull, start1293));
  };
  var cl761 = function(start1303, end1304) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1305 = start1303;
    var end1306 = end1304;
    var inc1307 = 1;
    if (M2.real_p(start1305) !== false) {
      if (M2.real_p(end1306) !== false) {
        var if_res771 = M2.real_p(inc1307);
      } else {
        var if_res771 = false;
      }
      var if_res772 = if_res771;
    } else {
      var if_res772 = false;
    }
    if (if_res772 !== false) {
      var if_res773 = M2.rvoid();
    } else {
      var if_res773 = M3.__rjs_quoted__.in_range(start1305, end1306, inc1307);
    }
    if_res773;
    var for_loop1308 = function(fold_var1309, pos1310) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1310, end1306) !== false) {
        var i1311 = pos1310;
        if (true !== false) {
          var fold_var1313 = fold_var1309;
          var fold_var1314 = M2.cons(i1311, fold_var1313);
          var fold_var1312 = M2.values(fold_var1314);
          if (true !== false) {
            var if_res774 = M2.not(false);
          } else {
            var if_res774 = false;
          }
          if (if_res774 !== false) {
            var if_res775 = for_loop1308(fold_var1312, pos1310 + inc1307);
          } else {
            var if_res775 = fold_var1312;
          }
          var if_res776 = if_res775;
        } else {
          var if_res776 = fold_var1309;
        }
        var if_res777 = if_res776;
      } else {
        var if_res777 = fold_var1309;
      }
      return if_res777;
    };
    return M8.alt_reverse(for_loop1308(M2.rnull, start1305));
  };
  var cl762 = function(start1315, end1316, step1317) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1318 = start1315;
    var end1319 = end1316;
    var inc1320 = step1317;
    if (M2.real_p(start1318) !== false) {
      if (M2.real_p(end1319) !== false) {
        var if_res778 = M2.real_p(inc1320);
      } else {
        var if_res778 = false;
      }
      var if_res779 = if_res778;
    } else {
      var if_res779 = false;
    }
    if (if_res779 !== false) {
      var if_res780 = M2.rvoid();
    } else {
      var if_res780 = M3.__rjs_quoted__.in_range(start1318, end1319, inc1320);
    }
    if_res780;
    var for_loop1321 = function(fold_var1322, pos1323) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__gt__eq_(step1317, 0) !== false) {
        var if_res781 = M2.__lt_(pos1323, end1319);
      } else {
        var if_res781 = M2.__gt_(pos1323, end1319);
      }
      if (if_res781 !== false) {
        var i1324 = pos1323;
        if (true !== false) {
          var fold_var1326 = fold_var1322;
          var fold_var1327 = M2.cons(i1324, fold_var1326);
          var fold_var1325 = M2.values(fold_var1327);
          if (true !== false) {
            var if_res782 = M2.not(false);
          } else {
            var if_res782 = false;
          }
          if (if_res782 !== false) {
            var if_res783 = for_loop1321(fold_var1325, pos1323 + inc1320);
          } else {
            var if_res783 = fold_var1325;
          }
          var if_res784 = if_res783;
        } else {
          var if_res784 = fold_var1322;
        }
        var if_res785 = if_res784;
      } else {
        var if_res785 = fold_var1322;
      }
      return if_res785;
    };
    return M8.alt_reverse(for_loop1321(M2.rnull, start1318));
  };
  var range1291 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam763 = {
      '1': cl760,
      '2': cl761,
      '3': cl762
    }[arguments.length];
    if (fixed_lam763 !== undefined) {
      return fixed_lam763.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var range_proc = range1291;
  var cl786 = function(f1328, l1329) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1328, l1329));
  };
  var cl787 = function(f1330, l11331, l21332) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1330, l11331, l21332));
  };
  var cl788 = $rjs_core.attachProcedureArity(function(f1333, l1334) {
    for (var ls1335791 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      ls1335791[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1335 = $rjs_core.Pair.listFromArray(ls1335791);
    return M2.apply(M2.append, M2.apply(M5.map, f1333, l1334, ls1335));
  });
  var append_map = $rjs_core.attachProcedureArity(function() {
    var fixed_lam789 = {
      '2': cl786,
      '3': cl787
    }[arguments.length];
    if (fixed_lam789 !== undefined) {
      return fixed_lam789.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl788.length, 1) !== false) {
        var if_res790 = cl788.apply(null, arguments);
      } else {
        var if_res790 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res790;
    }
  }, [M2.make_arity_at_least(2)]);
  var filter_not = function(f1336, list1337) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1336) !== false) {
      var if_res792 = M2.procedure_arity_includes_p(f1336, 1);
    } else {
      var if_res792 = false;
    }
    if (if_res792 !== false) {
      var if_res793 = M2.rvoid();
    } else {
      var if_res793 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, f1336, list1337);
    }
    if_res793;
    if (M2.list_p(list1337) !== false) {
      var if_res794 = M2.rvoid();
    } else {
      var if_res794 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1336, list1337);
    }
    if_res794;
    var loop1338 = function(l1339, result1340) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1339) !== false) {
        var if_res797 = M8.alt_reverse(result1340);
      } else {
        var temp796 = M2.cdr(l1339);
        if (f1336(M2.car(l1339)) !== false) {
          var if_res795 = result1340;
        } else {
          var if_res795 = M2.cons(M2.car(l1339), result1340);
        }
        var if_res797 = loop1338(temp796, if_res795);
      }
      return if_res797;
    };
    return loop1338(list1337, M2.rnull);
  };
  var shuffle = function(l1341) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a1342 = M2.make_vector(M2.length(l1341));
    var lst1343 = l1341;
    var start1344 = 0;
    if (M2.list_p(lst1343) !== false) {
      var if_res798 = M2.rvoid();
    } else {
      var if_res798 = M3.__rjs_quoted__.in_list(lst1343);
    }
    if_res798;
    if (M2.exact_nonnegative_integer_p(start1344) !== false) {
      var if_res799 = M2.rvoid();
    } else {
      var if_res799 = M3.__rjs_quoted__.in_naturals(start1344);
    }
    if_res799;
    var for_loop1345 = function(lst1346, pos1347) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1346) !== false) {
        var if_res800 = true;
      } else {
        var if_res800 = false;
      }
      if (if_res800 !== false) {
        var x1348 = M10.unsafe_car(lst1346);
        var rest1349 = M10.unsafe_cdr(lst1346);
        var i1350 = pos1347;
        if (true !== false) {
          var if_res801 = true;
        } else {
          var if_res801 = false;
        }
        if (if_res801 !== false) {
          var j1351 = M7.random(M2.add1(i1350));
          if (M2.__eq_(j1351, i1350) !== false) {
            var if_res802 = M2.rvoid();
          } else {
            var if_res802 = M2.vector_set_bang_(a1342, i1350, M2.vector_ref(a1342, j1351));
          }
          if_res802;
          M2.vector_set_bang_(a1342, j1351, x1348);
          var let_result803 = M2.values();
          var let_result804 = M2.values();
          if (true !== false) {
            if (true !== false) {
              var if_res805 = M2.not(false);
            } else {
              var if_res805 = false;
            }
            var if_res806 = if_res805;
          } else {
            var if_res806 = false;
          }
          if (if_res806 !== false) {
            var if_res807 = for_loop1345(rest1349, pos1347 + 1);
          } else {
            var if_res807 = M2.values();
          }
          var if_res808 = if_res807;
        } else {
          var if_res808 = M2.values();
        }
        var if_res809 = if_res808;
      } else {
        var if_res809 = M2.values();
      }
      return if_res809;
    };
    for_loop1345(lst1343, start1344);
    M2.rvoid();
    return M2.vector__gt_list(a1342);
  };
  var combinations571352 = function(l561353, k541354, k551355) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1356 = l561353;
    if (k551355 !== false) {
      var if_res810 = k541354;
    } else {
      var if_res810 = false;
    }
    var k1357 = if_res810;
    var let_result811 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), in_combinations(l1356, k1357));
    var pos__gt_vals1358 = let_result811.getAt(0);
    var pos_pre_inc1359 = let_result811.getAt(1);
    var pos_next1360 = let_result811.getAt(2);
    var init1361 = let_result811.getAt(3);
    var pos_cont_p1362 = let_result811.getAt(4);
    var val_cont_p1363 = let_result811.getAt(5);
    var all_cont_p1364 = let_result811.getAt(6);
    M2.rvoid();
    var for_loop1365 = function(fold_var1366, pos1367) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1362 !== false) {
        var if_res812 = pos_cont_p1362(pos1367);
      } else {
        var if_res812 = true;
      }
      if (if_res812 !== false) {
        var x1371 = pos__gt_vals1358(pos1367);
        if (all_cont_p1364 !== false) {
          var if_res813 = function(pos1372) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1364(pos1372, x1371);
          };
        } else {
          var if_res813 = false;
        }
        var let_result814 = M2.values(x1371, if_res813);
        var x1368 = let_result814.getAt(0);
        var all_cont_p_by_pos1369 = let_result814.getAt(1);
        if (pos_pre_inc1359 !== false) {
          var if_res815 = pos_pre_inc1359(pos1367);
        } else {
          var if_res815 = pos1367;
        }
        var pos1370 = if_res815;
        if (val_cont_p1363 !== false) {
          var if_res816 = val_cont_p1363(x1368);
        } else {
          var if_res816 = true;
        }
        if (if_res816 !== false) {
          var fold_var1374 = fold_var1366;
          var fold_var1375 = M2.cons(x1368, fold_var1374);
          var fold_var1373 = M2.values(fold_var1375);
          if (all_cont_p_by_pos1369 !== false) {
            var if_res817 = all_cont_p_by_pos1369(pos1370);
          } else {
            var if_res817 = true;
          }
          if (if_res817 !== false) {
            var if_res818 = M2.not(false);
          } else {
            var if_res818 = false;
          }
          if (if_res818 !== false) {
            var if_res819 = for_loop1365(fold_var1373, pos_next1360(pos1370));
          } else {
            var if_res819 = fold_var1373;
          }
          var if_res820 = if_res819;
        } else {
          var if_res820 = fold_var1366;
        }
        var if_res821 = if_res820;
      } else {
        var if_res821 = fold_var1366;
      }
      return if_res821;
    };
    return M8.alt_reverse(for_loop1365(M2.rnull, init1361));
  };
  var cl822 = function(l1376) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571352(l1376, false, false);
  };
  var cl823 = function(l1377, k541378) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571352(l1377, k541378, true);
  };
  var combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam824 = {
      '1': cl822,
      '2': cl823
    }[arguments.length];
    if (fixed_lam824 !== undefined) {
      return fixed_lam824.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var in_combinations621379 = function(l611380, k591381, k601382) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1383 = l611380;
    if (k601382 !== false) {
      var if_res825 = k591381;
    } else {
      var if_res825 = false;
    }
    var k1384 = if_res825;
    if (M2.list_p(l1383) !== false) {
      var if_res826 = M2.rvoid();
    } else {
      var if_res826 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1383);
    }
    if_res826;
    var let_result827 = M2.values();
    if (k1384 !== false) {
      var if_res828 = M2.not(M2.exact_nonnegative_integer_p(k1384));
    } else {
      var if_res828 = false;
    }
    if (if_res828 !== false) {
      var if_res829 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l1383, k1384);
    } else {
      var if_res829 = M2.rvoid();
    }
    if_res829;
    var let_result830 = M2.values();
    var v1385 = M2.list__gt_vector(l1383);
    var N1386 = M2.vector_length(v1385);
    var N_11387 = N1386 - 1;
    var vector_ref_by_bits1388 = function(v1389, b1390) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var start1391 = N_11387;
      var end1392 = -1;
      var inc1393 = -1;
      if (M2.real_p(start1391) !== false) {
        if (M2.real_p(end1392) !== false) {
          var if_res831 = M2.real_p(inc1393);
        } else {
          var if_res831 = false;
        }
        var if_res832 = if_res831;
      } else {
        var if_res832 = false;
      }
      if (if_res832 !== false) {
        var if_res833 = M2.rvoid();
      } else {
        var if_res833 = M3.__rjs_quoted__.in_range(start1391, end1392, inc1393);
      }
      if_res833;
      var for_loop1394 = function(acc1395, pos1396) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.__gt_(pos1396, end1392) !== false) {
          var i1397 = pos1396;
          if (true !== false) {
            var acc1399 = acc1395;
            if (M2.bitwise_bit_set_p(b1390, i1397) !== false) {
              var if_res834 = M2.cons(M2.vector_ref(v1389, i1397), acc1399);
            } else {
              var if_res834 = acc1399;
            }
            var acc1400 = if_res834;
            var acc1398 = M2.values(acc1400);
            if (true !== false) {
              var if_res835 = M2.not(false);
            } else {
              var if_res835 = false;
            }
            if (if_res835 !== false) {
              var if_res836 = for_loop1394(acc1398, pos1396 + inc1393);
            } else {
              var if_res836 = acc1398;
            }
            var if_res837 = if_res836;
          } else {
            var if_res837 = acc1395;
          }
          var if_res838 = if_res837;
        } else {
          var if_res838 = acc1395;
        }
        return if_res838;
      };
      return for_loop1394($rjs_core.Pair.makeList(), start1391);
    };
    if (M2.not(k1384) !== false) {
      var if_res841 = M2.values(0, M2.expt(2, N1386) - 1, M2.add1);
    } else {
      if (M2.__lt_(N1386, k1384) !== false) {
        var if_res840 = M2.values(1, 0, M2.values);
      } else {
        var first1404 = M2.expt(2, k1384) - 1;
        if (M2.zero_p(first1404) !== false) {
          var if_res839 = M2.add1;
        } else {
          var if_res839 = function(n1406) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var u1407 = M2.bitwise_and(n1406, M2.__(n1406));
            var v1408 = u1407 + n1406;
            return v1408 + M2.arithmetic_shift(M2.quotient(M2.bitwise_xor(v1408, n1406), u1407), -2);
          };
        }
        var gospers_hack1405 = if_res839;
        var if_res840 = M2.values(first1404, M2.arithmetic_shift(first1404, N1386 - k1384), gospers_hack1405);
      }
      var if_res841 = if_res840;
    }
    var let_result842 = if_res841;
    var first1401 = let_result842.getAt(0);
    var last1402 = let_result842.getAt(1);
    var incr1403 = let_result842.getAt(2);
    var curr_box1410 = M2.box(first1401);
    var gen_next1409 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var curr1411 = M2.unbox(curr_box1410);
      if (M2.__lt__eq_(curr1411, last1402) !== false) {
        var begin_res843 = vector_ref_by_bits1388(v1385, curr1411);
        M2.set_box_bang_(curr_box1410, incr1403(curr1411));
        var if_res844 = begin_res843;
      } else {
        var if_res844 = false;
      }
      return if_res844;
    };
    return M3.__rjs_quoted__.in_producer(gen_next1409, false);
  };
  var cl845 = function(l1412) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621379(l1412, false, false);
  };
  var cl846 = function(l1413, k591414) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621379(l1413, k591414, true);
  };
  var in_combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam847 = {
      '1': cl845,
      '2': cl846
    }[arguments.length];
    if (fixed_lam847 !== undefined) {
      return fixed_lam847.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var swap_plus_flip = function(l1415, i1416, j1417) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp1418 = j1417;
    if (M2.equal_p(tmp1418, 0) !== false) {
      var if_res855 = M2.list_times_(M2.cadr(l1415), M2.car(l1415), M2.cddr(l1415));
    } else {
      if (M2.equal_p(tmp1418, 1) !== false) {
        var a1419 = M2.car(l1415);
        var b1420 = M2.cadr(l1415);
        var c1421 = M2.caddr(l1415);
        var l1422 = M2.cdddr(l1415);
        var tmp1423 = i1416;
        if (M2.equal_p(tmp1423, 0) !== false) {
          var if_res848 = M2.list_times_(b1420, c1421, a1419, l1422);
        } else {
          var if_res848 = M2.list_times_(c1421, a1419, b1420, l1422);
        }
        var if_res854 = if_res848;
      } else {
        if (M2.equal_p(tmp1418, 2) !== false) {
          var a1424 = M2.car(l1415);
          var b1425 = M2.cadr(l1415);
          var c1426 = M2.caddr(l1415);
          var d1427 = M2.cadddr(l1415);
          var l1428 = M2.cddddr(l1415);
          var tmp1429 = i1416;
          if (M2.equal_p(tmp1429, 0) !== false) {
            var if_res850 = M2.list_times_(c1426, b1425, d1427, a1424, l1428);
          } else {
            if (M2.equal_p(tmp1429, 1) !== false) {
              var if_res849 = M2.list_times_(c1426, d1427, a1424, b1425, l1428);
            } else {
              var if_res849 = M2.list_times_(d1427, b1425, a1424, c1426, l1428);
            }
            var if_res850 = if_res849;
          }
          var if_res853 = if_res850;
        } else {
          var loop1430 = function(n1431, l11432, r11433) {
            if (arguments.length !== 3) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.__gt_(n1431, 0) !== false) {
              var if_res852 = loop1430(M2.sub1(n1431), M2.cons(M2.car(r11433), l11432), M2.cdr(r11433));
            } else {
              var loop1434 = function(n1435, l21436, r21437) {
                if (arguments.length !== 3) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.__gt_(n1435, 0) !== false) {
                  var if_res851 = loop1434(M2.sub1(n1435), M2.cons(M2.car(r21437), l21436), M2.cdr(r21437));
                } else {
                  var if_res851 = M4.__rjs_quoted__.qq_append(l21436, M2.list_times_(M2.car(r21437), M4.__rjs_quoted__.qq_append(l11432, M2.list_times_(M2.car(r11433), M2.cdr(r21437)))));
                }
                return if_res851;
              };
              var if_res852 = loop1434(j1417 - i1416, $rjs_core.Pair.makeList(), M2.cdr(r11433));
            }
            return if_res852;
          };
          var if_res853 = loop1430(i1416, $rjs_core.Pair.makeList(), l1415);
        }
        var if_res854 = if_res853;
      }
      var if_res855 = if_res854;
    }
    return if_res855;
  };
  var permutations = function(l1438) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1438)) !== false) {
      var if_res862 = M2.raise_argument_error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1438);
    } else {
      var or_part1439 = M2.null_p(l1438);
      if (or_part1439 !== false) {
        var if_res856 = or_part1439;
      } else {
        var if_res856 = M2.null_p(M2.cdr(l1438));
      }
      if (if_res856 !== false) {
        var if_res861 = M2.list(l1438);
      } else {
        var N1440 = M2.length(l1438) - 2;
        if (M2.__gt_(N1440, 254) !== false) {
          var if_res857 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("input list too long: ~e"), l1438);
        } else {
          var if_res857 = M2.rvoid();
        }
        if_res857;
        var let_result858 = M2.values();
        var c1441 = M2.make_bytes(M2.add1(N1440), 0);
        var loop1442 = function(i1443, acc1444) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var ci1445 = M2.bytes_ref(c1441, i1443);
          if (M2.__lt__eq_(ci1445, i1443) !== false) {
            M2.bytes_set_bang_(c1441, i1443, M2.add1(ci1445));
            var if_res860 = loop1442(0, M2.cons(swap_plus_flip(M2.car(acc1444), ci1445, i1443), acc1444));
          } else {
            if (M2.__lt_(i1443, N1440) !== false) {
              M2.bytes_set_bang_(c1441, i1443, 0);
              var if_res859 = loop1442(M2.add1(i1443), acc1444);
            } else {
              var if_res859 = acc1444;
            }
            var if_res860 = if_res859;
          }
          return if_res860;
        };
        var if_res861 = loop1442(0, M2.list(M8.alt_reverse(l1438)));
      }
      var if_res862 = if_res861;
    }
    return if_res862;
  };
  var in_permutations = function(l1446) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1446)) !== false) {
      var if_res871 = M2.raise_argument_error($rjs_core.Symbol.make("in-permutations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1446);
    } else {
      var or_part1447 = M2.null_p(l1446);
      if (or_part1447 !== false) {
        var if_res863 = or_part1447;
      } else {
        var if_res863 = M2.null_p(M2.cdr(l1446));
      }
      if (if_res863 !== false) {
        var if_res870 = M3.__rjs_quoted__.in_value(l1446);
      } else {
        var N1448 = M2.length(l1446) - 2;
        if (M2.__gt_(N1448, 254) !== false) {
          var if_res864 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("input list too long: ~e"), l1446);
        } else {
          var if_res864 = M2.rvoid();
        }
        if_res864;
        var let_result865 = M2.values();
        var c1449 = M2.make_bytes(M2.add1(N1448), 0);
        var i1450 = 0;
        var cur1451 = M8.alt_reverse(l1446);
        var next1452 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var r1453 = cur1451;
          var ci1454 = M2.bytes_ref(c1449, i1450);
          if (M2.__lt__eq_(ci1454, i1450) !== false) {
            M2.bytes_set_bang_(c1449, i1450, M2.add1(ci1454));
            var begin_res866 = swap_plus_flip(cur1451, ci1454, i1450);
            i1450 = 0;
            var if_res868 = begin_res866;
          } else {
            if (M2.__lt_(i1450, N1448) !== false) {
              M2.bytes_set_bang_(c1449, i1450, 0);
              i1450 = M2.add1(i1450);
              var if_res867 = next1452();
            } else {
              var if_res867 = false;
            }
            var if_res868 = if_res867;
          }
          return if_res868;
        };
        var if_res870 = M3.__rjs_quoted__.in_producer(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res869 = cur1451;
          cur1451 = next1452();
          return begin_res869;
        }, false);
      }
      var if_res871 = if_res870;
    }
    return if_res871;
  };
  var mk_min = function(cmp1455, name1456, f1457, xs1458) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1457) !== false) {
      var if_res872 = M2.procedure_arity_includes_p(f1457, 1);
    } else {
      var if_res872 = false;
    }
    if (if_res872 !== false) {
      var if_res873 = M2.rvoid();
    } else {
      var if_res873 = M2.raise_argument_error(name1456, $rjs_core.UString.makeInternedImmutable("(any/c . -> . real?)"), 0, f1457, xs1458);
    }
    if_res873;
    if (M2.list_p(xs1458) !== false) {
      var if_res874 = M2.pair_p(xs1458);
    } else {
      var if_res874 = false;
    }
    if (if_res874 !== false) {
      var if_res875 = M2.rvoid();
    } else {
      var if_res875 = M2.raise_argument_error(name1456, $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), 1, f1457, xs1458);
    }
    if_res875;
    var init_min_var1459 = f1457(M2.car(xs1458));
    if (M2.real_p(init_min_var1459) !== false) {
      var if_res876 = M2.rvoid();
    } else {
      var if_res876 = M2.raise_result_error(name1456, $rjs_core.UString.makeInternedImmutable("real?"), init_min_var1459);
    }
    if_res876;
    var loop1460 = function(min1461, min_var1462, xs1463) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(xs1463) !== false) {
        var if_res879 = min1461;
      } else {
        var new_min1464 = f1457(M2.car(xs1463));
        if (M2.real_p(new_min1464) !== false) {
          var if_res877 = M2.rvoid();
        } else {
          var if_res877 = M2.raise_result_error(name1456, $rjs_core.UString.makeInternedImmutable("real?"), new_min1464);
        }
        if_res877;
        if (cmp1455(new_min1464, min_var1462) !== false) {
          var if_res878 = loop1460(M2.car(xs1463), new_min1464, M2.cdr(xs1463));
        } else {
          var if_res878 = loop1460(min1461, min_var1462, M2.cdr(xs1463));
        }
        var if_res879 = if_res878;
      }
      return if_res879;
    };
    return loop1460(M2.car(xs1458), init_min_var1459, M2.cdr(xs1458));
  };
  var argmin = function(f1465, xs1466) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__lt_, $rjs_core.Symbol.make("argmin"), f1465, xs1466);
  };
  var argmax = function(f1467, xs1468) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__gt_, $rjs_core.Symbol.make("argmax"), f1467, xs1468);
  };
  var group_by681469 = function(key661470, l671471, __eq__p641472, __eq__p651473) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key1474 = key661470;
    var l1475 = l671471;
    if (__eq__p651473 !== false) {
      var if_res880 = __eq__p641472;
    } else {
      var if_res880 = M2.equal_p;
    }
    var __eq__p1476 = if_res880;
    if (M2.procedure_p(key1474) !== false) {
      var if_res881 = M2.procedure_arity_includes_p(key1474, 1);
    } else {
      var if_res881 = false;
    }
    if (if_res881 !== false) {
      var if_res882 = M2.rvoid();
    } else {
      var if_res882 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, key1474, l1475);
    }
    if_res882;
    var let_result883 = M2.values();
    if (M2.procedure_p(__eq__p1476) !== false) {
      var if_res884 = M2.procedure_arity_includes_p(__eq__p1476, 2);
    } else {
      var if_res884 = false;
    }
    if (if_res884 !== false) {
      var if_res885 = M2.rvoid();
    } else {
      var if_res885 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, key1474, l1475, __eq__p1476);
    }
    if_res885;
    var let_result886 = M2.values();
    if (M2.list_p(l1475) !== false) {
      var if_res887 = M2.rvoid();
    } else {
      var if_res887 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("list?"), 1, key1474, l1475);
    }
    if_res887;
    var let_result888 = M2.values();
    var alist_update1477 = function(al1478, k1479, up1480, fail1481) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1482 = function(al1483) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(al1483) !== false) {
          var if_res890 = M2.list(M2.cons(k1479, up1480($rjs_core.Pair.makeList())));
        } else {
          if (__eq__p1476(M2.car(M2.car(al1483)), k1479) !== false) {
            var if_res889 = M2.cons(M2.cons(k1479, up1480(M2.cdr(M2.car(al1483)))), M2.cdr(al1483));
          } else {
            var if_res889 = M2.cons(M2.car(al1483), loop1482(M2.cdr(al1483)));
          }
          var if_res890 = if_res889;
        }
        return if_res890;
      };
      return loop1482(al1478);
    };
    if (M2.equal_p(__eq__p1476, M2.eq_p) !== false) {
      var if_res893 = M2.values(M2.hasheq(), M1.hash_update);
    } else {
      if (M2.equal_p(__eq__p1476, M2.eqv_p) !== false) {
        var if_res892 = M2.values(M2.hasheqv(), M1.hash_update);
      } else {
        if (M2.equal_p(__eq__p1476, M2.equal_p) !== false) {
          var if_res891 = M2.values(M2.hash(), M1.hash_update);
        } else {
          var if_res891 = M2.values($rjs_core.Pair.makeList(), alist_update1477);
        }
        var if_res892 = if_res891;
      }
      var if_res893 = if_res892;
    }
    var let_result894 = if_res893;
    var base1484 = let_result894.getAt(0);
    var update1485 = let_result894.getAt(1);
    var lst1487 = l1475;
    var start1488 = 0;
    if (M2.list_p(lst1487) !== false) {
      var if_res895 = M2.rvoid();
    } else {
      var if_res895 = M3.__rjs_quoted__.in_list(lst1487);
    }
    if_res895;
    if (M2.exact_nonnegative_integer_p(start1488) !== false) {
      var if_res896 = M2.rvoid();
    } else {
      var if_res896 = M3.__rjs_quoted__.in_naturals(start1488);
    }
    if_res896;
    var for_loop1489 = function(res1490, lst1491, pos1492) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1491) !== false) {
        var if_res897 = true;
      } else {
        var if_res897 = false;
      }
      if (if_res897 !== false) {
        var elt1493 = M10.unsafe_car(lst1491);
        var rest1494 = M10.unsafe_cdr(lst1491);
        var idx1495 = pos1492;
        if (true !== false) {
          var if_res898 = true;
        } else {
          var if_res898 = false;
        }
        if (if_res898 !== false) {
          var res1497 = res1490;
          var k1499 = key1474(elt1493);
          var v1500 = M2.cons(idx1495, elt1493);
          var res1498 = update1485(res1497, k1499, function(o1501) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.cons(v1500, o1501);
          }, $rjs_core.Pair.makeList());
          var res1496 = M2.values(res1498);
          if (true !== false) {
            if (true !== false) {
              var if_res899 = M2.not(false);
            } else {
              var if_res899 = false;
            }
            var if_res900 = if_res899;
          } else {
            var if_res900 = false;
          }
          if (if_res900 !== false) {
            var if_res901 = for_loop1489(res1496, rest1494, pos1492 + 1);
          } else {
            var if_res901 = res1496;
          }
          var if_res902 = if_res901;
        } else {
          var if_res902 = res1490;
        }
        var if_res903 = if_res902;
      } else {
        var if_res903 = res1490;
      }
      return if_res903;
    };
    var classes1486 = for_loop1489(base1484, lst1487, start1488);
    if (M2.list_p(classes1486) !== false) {
      var lst1503 = classes1486;
      if (M2.list_p(lst1503) !== false) {
        var if_res904 = M2.rvoid();
      } else {
        var if_res904 = M3.__rjs_quoted__.in_list(lst1503);
      }
      if_res904;
      var for_loop1504 = function(fold_var1505, lst1506) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1506) !== false) {
          var p1507 = M10.unsafe_car(lst1506);
          var rest1508 = M10.unsafe_cdr(lst1506);
          if (true !== false) {
            var fold_var1510 = fold_var1505;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901512 = M6.__rjs_quoted__.sort9;
            var temp861513 = M2.cdr(p1507);
            var __lt_871514 = M2.__lt_;
            var car881515 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res905 = M6.__rjs_quoted__.sort7(false, false, car881515, true, temp861513, __lt_871514);
            } else {
              var if_res905 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901512, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car881515), temp861513, __lt_871514);
            }
            var fold_var1511 = M2.cons(if_res905, fold_var1510);
            var fold_var1509 = M2.values(fold_var1511);
            if (true !== false) {
              var if_res906 = M2.not(false);
            } else {
              var if_res906 = false;
            }
            if (if_res906 !== false) {
              var if_res907 = for_loop1504(fold_var1509, rest1508);
            } else {
              var if_res907 = fold_var1509;
            }
            var if_res908 = if_res907;
          } else {
            var if_res908 = fold_var1505;
          }
          var if_res909 = if_res908;
        } else {
          var if_res909 = fold_var1505;
        }
        return if_res909;
      };
      var if_res917 = M8.alt_reverse(for_loop1504(M2.rnull, lst1503));
    } else {
      var ht1516 = classes1486;
      if ((function(ht1517) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.hash_p(ht1517);
      })(ht1516) !== false) {
        var if_res910 = M2.rvoid();
      } else {
        var if_res910 = M3.__rjs_quoted__.default_in_hash(ht1516);
      }
      if_res910;
      var for_loop1518 = function(fold_var1519, i1520) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (i1520 !== false) {
          var let_result911 = M2.__rjs_quoted__.hash_iterate_key_plus_value(ht1516, i1520);
          var _1521 = let_result911.getAt(0);
          var c1522 = let_result911.getAt(1);
          if (true !== false) {
            var fold_var1524 = fold_var1519;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741526 = M6.__rjs_quoted__.sort9;
            var c891527 = c1522;
            var __lt_901528 = M2.__lt_;
            var car911529 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res912 = M6.__rjs_quoted__.sort7(false, false, car911529, true, c891527, __lt_901528);
            } else {
              var if_res912 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741526, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car911529), c891527, __lt_901528);
            }
            var fold_var1525 = M2.cons(if_res912, fold_var1524);
            var fold_var1523 = M2.values(fold_var1525);
            if (true !== false) {
              var if_res913 = M2.not(false);
            } else {
              var if_res913 = false;
            }
            if (if_res913 !== false) {
              var if_res914 = for_loop1518(fold_var1523, M2.__rjs_quoted__.hash_iterate_next(ht1516, i1520));
            } else {
              var if_res914 = fold_var1523;
            }
            var if_res915 = if_res914;
          } else {
            var if_res915 = fold_var1519;
          }
          var if_res916 = if_res915;
        } else {
          var if_res916 = fold_var1519;
        }
        return if_res916;
      };
      var if_res917 = M8.alt_reverse(for_loop1518(M2.rnull, M2.__rjs_quoted__.hash_iterate_first(ht1516)));
    }
    var sorted_classes1502 = if_res917;
    var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911531 = M6.__rjs_quoted__.sort9;
    var sorted_classes921532 = sorted_classes1502;
    var __lt_931533 = M2.__lt_;
    var caar941534 = M2.caar;
    if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
      var if_res918 = M6.__rjs_quoted__.sort7(false, false, caar941534, true, sorted_classes921532, __lt_931533);
    } else {
      var if_res918 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911531, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(caar941534), sorted_classes921532, __lt_931533);
    }
    var lst1530 = if_res918;
    if (M2.list_p(lst1530) !== false) {
      var if_res919 = M2.rvoid();
    } else {
      var if_res919 = M3.__rjs_quoted__.in_list(lst1530);
    }
    if_res919;
    var for_loop1535 = function(fold_var1536, lst1537) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1537) !== false) {
        var c1538 = M10.unsafe_car(lst1537);
        var rest1539 = M10.unsafe_cdr(lst1537);
        if (true !== false) {
          var fold_var1541 = fold_var1536;
          var fold_var1542 = M2.cons(M5.map(M2.cdr, c1538), fold_var1541);
          var fold_var1540 = M2.values(fold_var1542);
          if (true !== false) {
            var if_res920 = M2.not(false);
          } else {
            var if_res920 = false;
          }
          if (if_res920 !== false) {
            var if_res921 = for_loop1535(fold_var1540, rest1539);
          } else {
            var if_res921 = fold_var1540;
          }
          var if_res922 = if_res921;
        } else {
          var if_res922 = fold_var1536;
        }
        var if_res923 = if_res922;
      } else {
        var if_res923 = fold_var1536;
      }
      return if_res923;
    };
    return M8.alt_reverse(for_loop1535(M2.rnull, lst1530));
  };
  var cl924 = function(key1543, l1544) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681469(key1543, l1544, false, false);
  };
  var cl925 = function(key1545, l1546, __eq__p641547) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681469(key1545, l1546, __eq__p641547, true);
  };
  var group_by = $rjs_core.attachProcedureArity(function() {
    var fixed_lam926 = {
      '2': cl924,
      '3': cl925
    }[arguments.length];
    if (fixed_lam926 !== undefined) {
      return fixed_lam926.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cartesian_product = $rjs_core.attachProcedureArity(function() {
    for (var ls1548927 = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      ls1548927[$__5] = arguments[$__5];
    var ls1548 = $rjs_core.Pair.listFromArray(ls1548927);
    var let_result928 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("l")), ls1548);
    var pos__gt_vals1549 = let_result928.getAt(0);
    var pos_pre_inc1550 = let_result928.getAt(1);
    var pos_next1551 = let_result928.getAt(2);
    var init1552 = let_result928.getAt(3);
    var pos_cont_p1553 = let_result928.getAt(4);
    var val_cont_p1554 = let_result928.getAt(5);
    var all_cont_p1555 = let_result928.getAt(6);
    var start1556 = 0;
    if (M2.rvoid() !== false) {
      if (M2.exact_nonnegative_integer_p(start1556) !== false) {
        var if_res929 = M2.rvoid();
      } else {
        var if_res929 = M3.__rjs_quoted__.in_naturals(start1556);
      }
      var if_res930 = if_res929;
    } else {
      var if_res930 = false;
    }
    if_res930;
    var for_loop1557 = function(pos1558, pos1559) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1553 !== false) {
        var if_res931 = pos_cont_p1553(pos1558);
      } else {
        var if_res931 = true;
      }
      if (if_res931 !== false) {
        var if_res932 = true;
      } else {
        var if_res932 = false;
      }
      if (if_res932 !== false) {
        var l1564 = pos__gt_vals1549(pos1558);
        if (all_cont_p1555 !== false) {
          var if_res933 = function(pos1565) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1555(pos1565, l1564);
          };
        } else {
          var if_res933 = false;
        }
        var let_result934 = M2.values(l1564, if_res933);
        var l1560 = let_result934.getAt(0);
        var all_cont_p_by_pos1561 = let_result934.getAt(1);
        if (pos_pre_inc1550 !== false) {
          var if_res935 = pos_pre_inc1550(pos1558);
        } else {
          var if_res935 = pos1558;
        }
        var pos1562 = if_res935;
        var i1563 = pos1559;
        if (val_cont_p1554 !== false) {
          var if_res936 = val_cont_p1554(l1560);
        } else {
          var if_res936 = true;
        }
        if (if_res936 !== false) {
          var if_res937 = true;
        } else {
          var if_res937 = false;
        }
        if (if_res937 !== false) {
          if (M2.list_p(l1560) !== false) {
            var if_res938 = M2.rvoid();
          } else {
            var if_res938 = M2.apply(M2.raise_argument_error, $rjs_core.Symbol.make("cartesian-product"), $rjs_core.UString.makeInternedImmutable("list?"), i1563, ls1548);
          }
          if_res938;
          var let_result939 = M2.values();
          var let_result940 = M2.values();
          if (all_cont_p_by_pos1561 !== false) {
            var if_res941 = all_cont_p_by_pos1561(pos1562);
          } else {
            var if_res941 = true;
          }
          if (if_res941 !== false) {
            var if_res942 = true;
          } else {
            var if_res942 = false;
          }
          if (if_res942 !== false) {
            var if_res943 = M2.not(false);
          } else {
            var if_res943 = false;
          }
          if (if_res943 !== false) {
            var if_res944 = for_loop1557(pos_next1551(pos1562), pos1559 + 1);
          } else {
            var if_res944 = M2.values();
          }
          var if_res945 = if_res944;
        } else {
          var if_res945 = M2.values();
        }
        var if_res946 = if_res945;
      } else {
        var if_res946 = M2.values();
      }
      return if_res946;
    };
    for_loop1557(init1552, start1556);
    var let_result947 = M2.values();
    M2.rvoid();
    var let_result948 = M2.values();
    var cp_21566 = function(as1567, bs1568) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var lst1569 = as1567;
      if (M2.list_p(lst1569) !== false) {
        var if_res949 = M2.rvoid();
      } else {
        var if_res949 = M3.__rjs_quoted__.in_list(lst1569);
      }
      if_res949;
      var for_loop1570 = function(fold_var1571, lst1572) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1572) !== false) {
          var i1573 = M10.unsafe_car(lst1572);
          var rest1574 = M10.unsafe_cdr(lst1572);
          if (true !== false) {
            var lst1576 = bs1568;
            if (M2.list_p(lst1576) !== false) {
              var if_res950 = M2.rvoid();
            } else {
              var if_res950 = M3.__rjs_quoted__.in_list(lst1576);
            }
            if_res950;
            var for_loop1577 = function(fold_var1578, lst1579) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.pair_p(lst1579) !== false) {
                var j1580 = M10.unsafe_car(lst1579);
                var rest1581 = M10.unsafe_cdr(lst1579);
                if (true !== false) {
                  var fold_var1583 = fold_var1578;
                  var fold_var1584 = M2.cons(M2.cons(i1573, j1580), fold_var1583);
                  var fold_var1582 = M2.values(fold_var1584);
                  if (true !== false) {
                    var if_res951 = M2.not(false);
                  } else {
                    var if_res951 = false;
                  }
                  if (if_res951 !== false) {
                    var if_res952 = for_loop1577(fold_var1582, rest1581);
                  } else {
                    var if_res952 = fold_var1582;
                  }
                  var if_res953 = if_res952;
                } else {
                  var if_res953 = fold_var1578;
                }
                var if_res954 = if_res953;
              } else {
                var if_res954 = fold_var1578;
              }
              return if_res954;
            };
            var fold_var1575 = for_loop1577(fold_var1571, lst1576);
            if (true !== false) {
              var if_res955 = M2.not(false);
            } else {
              var if_res955 = false;
            }
            if (if_res955 !== false) {
              var if_res956 = for_loop1570(fold_var1575, rest1574);
            } else {
              var if_res956 = fold_var1575;
            }
            var if_res957 = if_res956;
          } else {
            var if_res957 = fold_var1571;
          }
          var if_res958 = if_res957;
        } else {
          var if_res958 = fold_var1571;
        }
        return if_res958;
      };
      return M8.alt_reverse(for_loop1570(M2.rnull, lst1569));
    };
    return M6.foldr(cp_21566, M2.list(M2.list()), ls1548);
  });
  var remf = function(f1585, ls1586) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1586) !== false) {
      var if_res959 = M2.rvoid();
    } else {
      var if_res959 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1585, ls1586);
    }
    if_res959;
    if (M2.procedure_p(f1585) !== false) {
      var if_res960 = M2.procedure_arity_includes_p(f1585, 1);
    } else {
      var if_res960 = false;
    }
    if (if_res960 !== false) {
      var if_res961 = M2.rvoid();
    } else {
      var if_res961 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, f1585, ls1586);
    }
    if_res961;
    if (M2.null_p(ls1586) !== false) {
      var if_res963 = $rjs_core.Pair.makeList();
    } else {
      if (f1585(M2.car(ls1586)) !== false) {
        var if_res962 = M2.cdr(ls1586);
      } else {
        var if_res962 = M2.cons(M2.car(ls1586), remf(f1585, M2.cdr(ls1586)));
      }
      var if_res963 = if_res962;
    }
    return if_res963;
  };
  var remf_times_ = function(f1587, ls1588) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1588) !== false) {
      var if_res964 = M2.rvoid();
    } else {
      var if_res964 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1587, ls1588);
    }
    if_res964;
    if (M2.procedure_p(f1587) !== false) {
      var if_res965 = M2.procedure_arity_includes_p(f1587, 1);
    } else {
      var if_res965 = false;
    }
    if (if_res965 !== false) {
      var if_res966 = M2.rvoid();
    } else {
      var if_res966 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, f1587, ls1588);
    }
    if_res966;
    if (M2.null_p(ls1588) !== false) {
      var if_res968 = $rjs_core.Pair.makeList();
    } else {
      if (f1587(M2.car(ls1588)) !== false) {
        var if_res967 = remf_times_(f1587, M2.cdr(ls1588));
      } else {
        var if_res967 = M2.cons(M2.car(ls1588), remf_times_(f1587, M2.cdr(ls1588)));
      }
      var if_res968 = if_res967;
    }
    return if_res968;
  };
  var index_of741589 = function(ls721590, v731591, __eq__p701592, __eq__p711593) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1594 = ls721590;
    var v1595 = v731591;
    if (__eq__p711593 !== false) {
      var if_res969 = __eq__p701592;
    } else {
      var if_res969 = M2.equal_p;
    }
    var __eq__p1596 = if_res969;
    if (M2.list_p(ls1594) !== false) {
      var if_res970 = M2.rvoid();
    } else {
      var if_res970 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1594, v1595);
    }
    if_res970;
    if (M2.procedure_p(__eq__p1596) !== false) {
      var if_res971 = M2.procedure_arity_includes_p(__eq__p1596, 2);
    } else {
      var if_res971 = false;
    }
    if (if_res971 !== false) {
      var if_res972 = M2.rvoid();
    } else {
      var if_res972 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c any/c)"), 2, ls1594, v1595, __eq__p1596);
    }
    if_res972;
    var loop1597 = function(ls1598, i1599) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1598) !== false) {
        var if_res974 = false;
      } else {
        if (__eq__p1596(M2.car(ls1598), v1595) !== false) {
          var if_res973 = i1599;
        } else {
          var if_res973 = loop1597(M2.cdr(ls1598), M2.add1(i1599));
        }
        var if_res974 = if_res973;
      }
      return if_res974;
    };
    return loop1597(ls1594, 0);
  };
  var cl975 = function(ls1600, v1601) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741589(ls1600, v1601, false, false);
  };
  var cl976 = function(ls1602, v1603, __eq__p701604) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741589(ls1602, v1603, __eq__p701604, true);
  };
  var index_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam977 = {
      '2': cl975,
      '3': cl976
    }[arguments.length];
    if (fixed_lam977 !== undefined) {
      return fixed_lam977.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var index_where = function(ls1605, f1606) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1605) !== false) {
      var if_res978 = M2.rvoid();
    } else {
      var if_res978 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1605, f1606);
    }
    if_res978;
    if (M2.procedure_p(f1606) !== false) {
      var if_res979 = M2.procedure_arity_includes_p(f1606, 1);
    } else {
      var if_res979 = false;
    }
    if (if_res979 !== false) {
      var if_res980 = M2.rvoid();
    } else {
      var if_res980 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 1, ls1605, f1606);
    }
    if_res980;
    var loop1607 = function(ls1608, i1609) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1608) !== false) {
        var if_res982 = false;
      } else {
        if (f1606(M2.car(ls1608)) !== false) {
          var if_res981 = i1609;
        } else {
          var if_res981 = loop1607(M2.cdr(ls1608), M2.add1(i1609));
        }
        var if_res982 = if_res981;
      }
      return if_res982;
    };
    return loop1607(ls1605, 0);
  };
  var indexes_of801610 = function(ls781611, v791612, __eq__p761613, __eq__p771614) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1615 = ls781611;
    var v1616 = v791612;
    if (__eq__p771614 !== false) {
      var if_res983 = __eq__p761613;
    } else {
      var if_res983 = M2.equal_p;
    }
    var __eq__p1617 = if_res983;
    if (M2.list_p(ls1615) !== false) {
      var if_res984 = M2.rvoid();
    } else {
      var if_res984 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1615, v1616);
    }
    if_res984;
    if (M2.procedure_p(__eq__p1617) !== false) {
      var if_res985 = M2.procedure_arity_includes_p(__eq__p1617, 2);
    } else {
      var if_res985 = false;
    }
    if (if_res985 !== false) {
      var if_res986 = M2.rvoid();
    } else {
      var if_res986 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c any/c)"), 2, ls1615, v1616, __eq__p1617);
    }
    if_res986;
    var loop1618 = function(ls1619, i1620) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1619) !== false) {
        var if_res988 = $rjs_core.Pair.makeList();
      } else {
        if (__eq__p1617(M2.car(ls1619), v1616) !== false) {
          var if_res987 = M2.cons(i1620, loop1618(M2.cdr(ls1619), M2.add1(i1620)));
        } else {
          var if_res987 = loop1618(M2.cdr(ls1619), M2.add1(i1620));
        }
        var if_res988 = if_res987;
      }
      return if_res988;
    };
    return loop1618(ls1615, 0);
  };
  var cl989 = function(ls1621, v1622) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801610(ls1621, v1622, false, false);
  };
  var cl990 = function(ls1623, v1624, __eq__p761625) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801610(ls1623, v1624, __eq__p761625, true);
  };
  var indexes_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam991 = {
      '2': cl989,
      '3': cl990
    }[arguments.length];
    if (fixed_lam991 !== undefined) {
      return fixed_lam991.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var indexes_where = function(ls1626, f1627) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1626) !== false) {
      var if_res992 = M2.rvoid();
    } else {
      var if_res992 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1626, f1627);
    }
    if_res992;
    if (M2.procedure_p(f1627) !== false) {
      var if_res993 = M2.procedure_arity_includes_p(f1627, 1);
    } else {
      var if_res993 = false;
    }
    if (if_res993 !== false) {
      var if_res994 = M2.rvoid();
    } else {
      var if_res994 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 1, ls1626, f1627);
    }
    if_res994;
    var loop1628 = function(ls1629, i1630) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1629) !== false) {
        var if_res996 = $rjs_core.Pair.makeList();
      } else {
        if (f1627(M2.car(ls1629)) !== false) {
          var if_res995 = M2.cons(i1630, loop1628(M2.cdr(ls1629), M2.add1(i1630)));
        } else {
          var if_res995 = loop1628(M2.cdr(ls1629), M2.add1(i1630));
        }
        var if_res996 = if_res995;
      }
      return if_res996;
    };
    return loop1628(ls1626, 0);
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.check_duplicates53 = check_duplicates53;
  __rjs_quoted__.add_between35 = add_between35;
  __rjs_quoted__.check_duplicates51 = check_duplicates51;
  __rjs_quoted__.remove_duplicates43 = remove_duplicates43;
  __rjs_quoted__.remove_duplicates45 = remove_duplicates45;
  __rjs_quoted__.add_between37 = add_between37;
  __rjs_quoted__.range_proc = range_proc;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get remf_times_() {
      return remf_times_;
    },
    get remf() {
      return remf;
    },
    get cartesian_product() {
      return cartesian_product;
    },
    get group_by() {
      return group_by;
    },
    get argmax() {
      return argmax;
    },
    get argmin() {
      return argmin;
    },
    get in_permutations() {
      return in_permutations;
    },
    get permutations() {
      return permutations;
    },
    get in_combinations() {
      return in_combinations;
    },
    get combinations() {
      return combinations;
    },
    get shuffle() {
      return shuffle;
    },
    get filter_not() {
      return filter_not;
    },
    get append_map() {
      return append_map;
    },
    get partition() {
      return partition;
    },
    get count() {
      return count;
    },
    get filter_map() {
      return filter_map;
    },
    get flatten() {
      return flatten;
    },
    get append_times_() {
      return append_times_;
    },
    get drop_common_prefix() {
      return drop_common_prefix;
    },
    get take_common_prefix() {
      return take_common_prefix;
    },
    get split_common_prefix() {
      return split_common_prefix;
    },
    get list_prefix_p() {
      return list_prefix_p;
    },
    get splitf_at_right() {
      return splitf_at_right;
    },
    get dropf_right() {
      return dropf_right;
    },
    get takef_right() {
      return takef_right;
    },
    get split_at_right() {
      return split_at_right;
    },
    get take_right() {
      return take_right;
    },
    get drop_right() {
      return drop_right;
    },
    get splitf_at() {
      return splitf_at;
    },
    get dropf() {
      return dropf;
    },
    get takef() {
      return takef;
    },
    get split_at() {
      return split_at;
    },
    get take() {
      return take;
    },
    get drop() {
      return drop;
    },
    get indexes_where() {
      return indexes_where;
    },
    get indexes_of() {
      return indexes_of;
    },
    get index_where() {
      return index_where;
    },
    get index_of() {
      return index_of;
    },
    get list_set() {
      return list_set;
    },
    get list_update() {
      return list_update;
    },
    get make_list() {
      return make_list;
    },
    get empty_p() {
      return empty_p;
    },
    get empty() {
      return empty;
    },
    get cons_p() {
      return cons_p;
    },
    get rest() {
      return rest;
    },
    get last() {
      return last;
    },
    get last_pair() {
      return last_pair;
    },
    get tenth() {
      return tenth;
    },
    get ninth() {
      return ninth;
    },
    get eighth() {
      return eighth;
    },
    get seventh() {
      return seventh;
    },
    get sixth() {
      return sixth;
    },
    get fifth() {
      return fifth;
    },
    get fourth() {
      return fourth;
    },
    get third() {
      return third;
    },
    get second() {
      return second;
    },
    get first() {
      return first;
    }
  };
})();
var $__collects_47_waxeye_47_ast_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/ast.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var let_result314 = M0.make_struct_type($rjs_core.Symbol.make("ast"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("ast"));
  var struct_553 = let_result314.getAt(0);
  var make_554 = let_result314.getAt(1);
  var __p555 = let_result314.getAt(2);
  var __ref556 = let_result314.getAt(3);
  var __set_bang_557 = let_result314.getAt(4);
  var let_result315 = M0.values(struct_553, make_554, __p555, M0.make_struct_field_accessor(__ref556, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref556, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_accessor(__ref556, 2, $rjs_core.Symbol.make("pos")), M0.make_struct_field_mutator(__set_bang_557, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_557, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_mutator(__set_bang_557, 2, $rjs_core.Symbol.make("pos")));
  var struct_ast = let_result315.getAt(0);
  var ast1 = let_result315.getAt(1);
  var ast_p = let_result315.getAt(2);
  var ast_t = let_result315.getAt(3);
  var ast_c = let_result315.getAt(4);
  var ast_pos = let_result315.getAt(5);
  var set_ast_t_bang_ = let_result315.getAt(6);
  var set_ast_c_bang_ = let_result315.getAt(7);
  var set_ast_pos_bang_ = let_result315.getAt(8);
  var let_result316 = M0.make_struct_type($rjs_core.Symbol.make("parse-error"), false, 6, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4, 5), false, $rjs_core.Symbol.make("parse-error"));
  var struct_558 = let_result316.getAt(0);
  var make_559 = let_result316.getAt(1);
  var __p560 = let_result316.getAt(2);
  var __ref561 = let_result316.getAt(3);
  var __set_bang_562 = let_result316.getAt(4);
  var let_result317 = M0.values(struct_558, make_559, __p560, M0.make_struct_field_accessor(__ref561, 0, $rjs_core.Symbol.make("pos")), M0.make_struct_field_accessor(__ref561, 1, $rjs_core.Symbol.make("line")), M0.make_struct_field_accessor(__ref561, 2, $rjs_core.Symbol.make("col")), M0.make_struct_field_accessor(__ref561, 3, $rjs_core.Symbol.make("expected")), M0.make_struct_field_accessor(__ref561, 4, $rjs_core.Symbol.make("received")), M0.make_struct_field_accessor(__ref561, 5, $rjs_core.Symbol.make("snippet")));
  var struct_parse_error = let_result317.getAt(0);
  var parse_error2 = let_result317.getAt(1);
  var parse_error_p = let_result317.getAt(2);
  var parse_error_pos = let_result317.getAt(3);
  var parse_error_line = let_result317.getAt(4);
  var parse_error_col = let_result317.getAt(5);
  var parse_error_expected = let_result317.getAt(6);
  var parse_error_received = let_result317.getAt(7);
  var parse_error_snippet = let_result317.getAt(8);
  var ast__gt_string = function(ast563) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var indent_level564 = 0;
    var o565 = M0.open_output_string();
    var display_a566 = function(c569) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level564, 0) !== false) {
        var if_res318 = M0.display($rjs_core.UString.makeInternedImmutable("->  "), o565);
      } else {
        var if_res318 = M0.rvoid();
      }
      if_res318;
      M0.display(ast_t(c569), o565);
      indent_level564 = indent_level564 + 1;
      M2.for_each(function(a570) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.newline(o565);
        return display_iter568(a570);
      }, ast_c(c569));
      indent_level564 = indent_level564 - 1;
      return null;
    };
    var display_c567 = function(c571) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level564, 0) !== false) {
        var if_res319 = M0.display($rjs_core.UString.makeInternedImmutable("|   "), o565);
      } else {
        var if_res319 = M0.rvoid();
      }
      if_res319;
      return M0.display(c571, o565);
    };
    var display_iter568 = function(ast572) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part573 = M0.char_p(ast572);
      if (or_part573 !== false) {
        var if_res320 = or_part573;
      } else {
        var if_res320 = ast_p(ast572);
      }
      if (if_res320 !== false) {
        var loop574 = function(i575) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.__lt_(i575, indent_level564) !== false) {
            M0.display($rjs_core.UString.makeInternedImmutable("    "), o565);
            var if_res321 = loop574(i575 + 1);
          } else {
            var if_res321 = M0.rvoid();
          }
          return if_res321;
        };
        loop574(1);
        if (M0.char_p(ast572) !== false) {
          var if_res322 = display_c567(ast572);
        } else {
          var if_res322 = display_a566(ast572);
        }
        var if_res323 = if_res322;
      } else {
        var if_res323 = M0.rvoid();
      }
      return if_res323;
    };
    display_iter568(ast563);
    return M0.get_output_string(o565);
  };
  var display_ast = function(ast576) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (ast_p(ast576) !== false) {
      var if_res325 = ast__gt_string(ast576);
    } else {
      if (parse_error_p(ast576) !== false) {
        var if_res324 = parse_error__gt_string(ast576);
      } else {
        var if_res324 = ast576;
      }
      var if_res325 = if_res324;
    }
    M0.display(if_res325);
    return M0.newline();
  };
  var ast__gt_string_sexpr = function(ast577) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var o578 = M0.open_output_string();
    var display_iter579 = function(ast580) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.display($rjs_core.UString.makeInternedImmutable("("), o578);
      M0.display(ast_t(ast580), o578);
      M2.for_each(function(a581) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.display($rjs_core.UString.makeInternedImmutable(" "), o578);
        if (ast_p(a581) !== false) {
          var if_res326 = display_iter579(a581);
        } else {
          var if_res326 = M0.display(a581, o578);
        }
        return if_res326;
      }, ast_c(ast580));
      return M0.display($rjs_core.UString.makeInternedImmutable(")"), o578);
    };
    display_iter579(ast577);
    return M0.get_output_string(o578);
  };
  var parse_error__gt_string = function(error582) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var comma_separate583 = function(l584) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp5585 = M2.map(M0.symbol__gt_string, l584);
      var temp6586 = $rjs_core.UString.makeInternedImmutable(", ");
      if (M0.variable_reference_constant_p(M1.__rjs_quoted__.add_between37) !== false) {
        var if_res327 = M1.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp5585, temp6586);
      } else {
        var if_res327 = M1.__rjs_quoted__.add_between37(temp5585, temp6586);
      }
      return M0.apply(M0.string_append, if_res327);
    };
    var expected587 = function(nts588) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var len589 = M0.length(nts588);
      if (M0.__eq_(len589, 0) !== false) {
        var if_res328 = $rjs_core.UString.makeInternedImmutable("<end of input>");
      } else {
        var if_res328 = M0.string_append($rjs_core.UString.makeInternedImmutable("["), comma_separate583(nts588), $rjs_core.UString.makeInternedImmutable("]"));
      }
      return if_res328;
    };
    var temp333 = M0.number__gt_string(parse_error_line(error582));
    var temp332 = $rjs_core.UString.makeInternedImmutable(":");
    var temp331 = M0.number__gt_string(parse_error_col(error582));
    var temp330 = $rjs_core.UString.makeInternedImmutable(" expected: ");
    var temp7590 = parse_error_expected(error582);
    if (M0.variable_reference_constant_p(M1.__rjs_quoted__.remove_duplicates45) !== false) {
      var if_res329 = M1.__rjs_quoted__.remove_duplicates43(false, false, temp7590, false, false);
    } else {
      var if_res329 = M1.__rjs_quoted__.remove_duplicates45(temp7590);
    }
    return M0.string_append(temp333, temp332, temp331, temp330, expected587(if_res329), $rjs_core.UString.makeInternedImmutable(" received: "), parse_error_received(error582), $rjs_core.UString.makeInternedImmutable("\n"), parse_error_snippet(error582));
  };
  var display_parse_error = function(error591) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.display(parse_error__gt_string(error591));
    return M0.newline();
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.parse_error_snippet = parse_error_snippet;
  __rjs_quoted__.struct_ast = struct_ast;
  __rjs_quoted__.parse_error_received = parse_error_received;
  __rjs_quoted__.set_ast_c_bang_ = set_ast_c_bang_;
  __rjs_quoted__.parse_error_pos = parse_error_pos;
  __rjs_quoted__.struct_parse_error = struct_parse_error;
  __rjs_quoted__.ast_pos = ast_pos;
  __rjs_quoted__.ast_t = ast_t;
  __rjs_quoted__.ast_c = ast_c;
  __rjs_quoted__.ast1 = ast1;
  __rjs_quoted__.ast_p = ast_p;
  __rjs_quoted__.parse_error_col = parse_error_col;
  __rjs_quoted__.set_ast_t_bang_ = set_ast_t_bang_;
  __rjs_quoted__.parse_error_line = parse_error_line;
  __rjs_quoted__.parse_error2 = parse_error2;
  __rjs_quoted__.parse_error_p = parse_error_p;
  __rjs_quoted__.set_ast_pos_bang_ = set_ast_pos_bang_;
  __rjs_quoted__.parse_error_expected = parse_error_expected;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_ast() {
      return struct_ast;
    },
    get ast_p() {
      return ast_p;
    },
    get ast_t() {
      return ast_t;
    },
    get ast_c() {
      return ast_c;
    },
    get ast_pos() {
      return ast_pos;
    },
    get set_ast_t_bang_() {
      return set_ast_t_bang_;
    },
    get set_ast_c_bang_() {
      return set_ast_c_bang_;
    },
    get set_ast_pos_bang_() {
      return set_ast_pos_bang_;
    },
    get struct_parse_error() {
      return struct_parse_error;
    },
    get parse_error_p() {
      return parse_error_p;
    },
    get parse_error_pos() {
      return parse_error_pos;
    },
    get parse_error_line() {
      return parse_error_line;
    },
    get parse_error_col() {
      return parse_error_col;
    },
    get parse_error_expected() {
      return parse_error_expected;
    },
    get parse_error_received() {
      return parse_error_received;
    },
    get parse_error_snippet() {
      return parse_error_snippet;
    },
    get ast__gt_string() {
      return ast__gt_string;
    },
    get display_ast() {
      return display_ast;
    },
    get ast__gt_string_sexpr() {
      return ast__gt_string_sexpr;
    },
    get parse_error__gt_string() {
      return parse_error__gt_string;
    },
    get display_parse_error() {
      return display_parse_error;
    }
  };
})();
var $__modules_47_gen_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/gen.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var __times_eof_check_times_ = true;
  var __times_expression_level_times_ = $rjs_core.Pair.makeList();
  var __times_file_header_times_ = false;
  var __times_module_name_times_ = false;
  var __times_name_prefix_times_ = false;
  var __times_start_index_times_ = 0;
  var __times_start_name_times_ = $rjs_core.UString.makeInternedImmutable("");
  var eof_check_bang_ = function(val621) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_eof_check_times_ = val621;
    return null;
  };
  var file_header_bang_ = function(val622) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_file_header_times_ = val622;
    return null;
  };
  var module_name_bang_ = function(val623) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_module_name_times_ = val623;
    return null;
  };
  var name_prefix_bang_ = function(val624) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_name_prefix_times_ = val624;
    return null;
  };
  var start_index_bang_ = function(val625) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_index_times_ = val625;
    return null;
  };
  var start_name_bang_ = function(val626) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_name_times_ = val626;
    return null;
  };
  var start_nt_bang_ = function(name627, grammar628) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var index_of629 = function(ls630, v631) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop632 = function(ls633, i634) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls633) !== false) {
          var if_res347 = false;
        } else {
          if (M0.equal_p(M0.car(ls633), v631) !== false) {
            var if_res346 = i634;
          } else {
            var if_res346 = loop632(M0.cdr(ls633), M0.add1(i634));
          }
          var if_res347 = if_res346;
        }
        return if_res347;
      };
      return loop632(ls630, 0);
    };
    __times_start_name_times_ = name627;
    if (M0.equal_p(name627, $rjs_core.UString.makeInternedImmutable("")) !== false) {
      var if_res349 = start_name_bang_(get_non_term(M0.car(get_defs(grammar628))));
    } else {
      var si635 = index_of629(M2.map(get_non_term, get_defs(grammar628)), name627);
      if (si635 !== false) {
        var if_res348 = start_index_bang_(si635);
      } else {
        var if_res348 = M0.error($rjs_core.Symbol.make("waxeye"), M0.format($rjs_core.UString.makeInternedImmutable("Can't find definition of starting non-terminal: ~a"), __times_start_name_times_));
      }
      var if_res349 = if_res348;
    }
    return if_res349;
  };
  var push_exp_level = function(level636) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_expression_level_times_ = M0.cons(level636, __times_expression_level_times_);
    return null;
  };
  var pop_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var top637 = M0.car(__times_expression_level_times_);
    __times_expression_level_times_ = M0.cdr(__times_expression_level_times_);
    return top637;
  };
  var peek_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.car(__times_expression_level_times_);
  };
  var get_non_terms = function(grammar638) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.map(get_non_term, M1.ast_c(grammar638));
  };
  var get_non_term = function(def639) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M1.ast_c(M0.car(M1.ast_c(def639))));
  };
  var get_defs = function(grammar640) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_c(grammar640);
  };
  var get_arrow = function(def641) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_t(M0.cadr(M1.ast_c(def641)));
  };
  var get_alternation = function(def642) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.caddr(M1.ast_c(def642));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_eof_check_times_() {
      return __times_eof_check_times_;
    },
    get __times_expression_level_times_() {
      return __times_expression_level_times_;
    },
    get __times_file_header_times_() {
      return __times_file_header_times_;
    },
    get __times_module_name_times_() {
      return __times_module_name_times_;
    },
    get __times_name_prefix_times_() {
      return __times_name_prefix_times_;
    },
    get __times_start_index_times_() {
      return __times_start_index_times_;
    },
    get __times_start_name_times_() {
      return __times_start_name_times_;
    },
    get eof_check_bang_() {
      return eof_check_bang_;
    },
    get file_header_bang_() {
      return file_header_bang_;
    },
    get module_name_bang_() {
      return module_name_bang_;
    },
    get name_prefix_bang_() {
      return name_prefix_bang_;
    },
    get start_index_bang_() {
      return start_index_bang_;
    },
    get start_name_bang_() {
      return start_name_bang_;
    },
    get start_nt_bang_() {
      return start_nt_bang_;
    },
    get push_exp_level() {
      return push_exp_level;
    },
    get pop_exp_level() {
      return pop_exp_level;
    },
    get peek_exp_level() {
      return peek_exp_level;
    },
    get get_non_terms() {
      return get_non_terms;
    },
    get get_non_term() {
      return get_non_term;
    },
    get get_defs() {
      return get_defs;
    },
    get get_arrow() {
      return get_arrow;
    },
    get get_alternation() {
      return get_alternation;
    }
  };
})();
var $__modules_47_action_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/action.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var collect_actions = function(grammar1729) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var action_list1730 = $rjs_core.Pair.makeList();
    var visit_action1731 = function(exp1732) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      action_list1730 = M1.cons(exp1732, action_list1730);
      return null;
    };
    var visit_alternation1733 = function(exp1737) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_sequence1734, M2.ast_c(exp1737));
    };
    var visit_sequence1734 = function(exp1738) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_unit1735, M2.ast_c(exp1738));
    };
    var visit_unit1735 = function(exp1739) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el1740 = M2.ast_c(exp1739);
      var el_len1741 = M1.length(el1740);
      return visit_exp1736(M1.list_ref(el1740, el_len1741 - 1));
    };
    var visit_exp1736 = function(exp1742) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type1743 = M2.ast_t(exp1742);
      var tmp1744 = type1743;
      if (M1.equal_p(tmp1744, $rjs_core.Symbol.make("action")) !== false) {
        var if_res1061 = visit_action1731(exp1742);
      } else {
        if (M1.equal_p(tmp1744, $rjs_core.Symbol.make("alternation")) !== false) {
          var if_res1060 = visit_alternation1733(exp1742);
        } else {
          if (M1.equal_p(tmp1744, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res1059 = visit_sequence1734(exp1742);
          } else {
            if (M1.equal_p(tmp1744, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res1058 = visit_unit1735(exp1742);
            } else {
              var if_res1058 = M1.rvoid();
            }
            var if_res1059 = if_res1058;
          }
          var if_res1060 = if_res1059;
        }
        var if_res1061 = if_res1060;
      }
      return if_res1061;
    };
    var get_def_actions1745 = function(def1746) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation1733(M1.caddr(M2.ast_c(def1746)));
    };
    M3.for_each(get_def_actions1745, M0.get_defs(grammar1729));
    action_list1730 = M4.alt_reverse(action_list1730);
    return null;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get collect_actions() {
      return collect_actions;
    }
  };
})();
var $__modules_47_expand_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/expand.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var expand_grammar = function(grammar1660) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lift_only_sub_exp1661 = function(visitor1662, exp1663) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil1664 = M2.ast_c(exp1663);
      M3.for_each(visitor1662, chil1664);
      if (M1.__eq_(M1.length(chil1664), 1) !== false) {
        var only1665 = M1.car(chil1664);
        M2.set_ast_t_bang_(exp1663, M2.ast_t(only1665));
        M2.set_ast_c_bang_(exp1663, M2.ast_c(only1665));
        var if_res1005 = M2.set_ast_pos_bang_(exp1663, M2.ast_pos(only1665));
      } else {
        var if_res1005 = M1.rvoid();
      }
      return if_res1005;
    };
    var visit_alternation1666 = function(exp1670) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return lift_only_sub_exp1661(visit_sequence1667, exp1670);
    };
    var visit_sequence1667 = function(exp1671) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M2.set_ast_c_bang_(exp1671, M3.map(expand_unit, M2.ast_c(exp1671)));
      return lift_only_sub_exp1661(visit_exp1669, exp1671);
    };
    var visit_only_child1668 = function(exp1672) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_exp1669(M1.car(M2.ast_c(exp1672)));
    };
    var visit_exp1669 = function(exp1673) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type1674 = M2.ast_t(exp1673);
      var tmp1675 = type1674;
      if (M1.symbol_p(tmp1675) !== false) {
        var if_res1006 = M1.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 13], [$rjs_core.Symbol.make("identifier"), 7], [$rjs_core.Symbol.make("optional"), 11], [$rjs_core.Symbol.make("not"), 10], [$rjs_core.Symbol.make("caseLiteral"), 4], [$rjs_core.Symbol.make("closure"), 6], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 14], [$rjs_core.Symbol.make("action"), 1], [$rjs_core.Symbol.make("alternation"), 2], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 15], [$rjs_core.Symbol.make("label"), 8], [$rjs_core.Symbol.make("and"), 3], [$rjs_core.Symbol.make("literal"), 9]], false), tmp1675, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return 0;
        });
      } else {
        var if_res1006 = 0;
      }
      var index1676 = if_res1006;
      if (M5.unsafe_fx_lt_(index1676, 7) !== false) {
        if (M5.unsafe_fx_lt_(index1676, 3) !== false) {
          if (M5.unsafe_fx_lt_(index1676, 1) !== false) {
            var if_res1008 = M1.error($rjs_core.Symbol.make("expand-grammar"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), type1674);
          } else {
            if (M5.unsafe_fx_lt_(index1676, 2) !== false) {
              var if_res1007 = M1.rvoid();
            } else {
              var if_res1007 = visit_alternation1666(exp1673);
            }
            var if_res1008 = if_res1007;
          }
          var if_res1012 = if_res1008;
        } else {
          if (M5.unsafe_fx_lt_(index1676, 4) !== false) {
            var if_res1011 = visit_only_child1668(exp1673);
          } else {
            if (M5.unsafe_fx_lt_(index1676, 5) !== false) {
              var if_res1010 = visit_case_literal(exp1673);
            } else {
              if (M5.unsafe_fx_lt_(index1676, 6) !== false) {
                var if_res1009 = visit_char_class(exp1673);
              } else {
                var if_res1009 = visit_only_child1668(exp1673);
              }
              var if_res1010 = if_res1009;
            }
            var if_res1011 = if_res1010;
          }
          var if_res1012 = if_res1011;
        }
        var if_res1021 = if_res1012;
      } else {
        if (M5.unsafe_fx_lt_(index1676, 11) !== false) {
          if (M5.unsafe_fx_lt_(index1676, 8) !== false) {
            var if_res1015 = M1.rvoid();
          } else {
            if (M5.unsafe_fx_lt_(index1676, 9) !== false) {
              var if_res1014 = M1.rvoid();
            } else {
              if (M5.unsafe_fx_lt_(index1676, 10) !== false) {
                var if_res1013 = visit_literal(exp1673);
              } else {
                var if_res1013 = visit_only_child1668(exp1673);
              }
              var if_res1014 = if_res1013;
            }
            var if_res1015 = if_res1014;
          }
          var if_res1020 = if_res1015;
        } else {
          if (M5.unsafe_fx_lt_(index1676, 13) !== false) {
            if (M5.unsafe_fx_lt_(index1676, 12) !== false) {
              var if_res1016 = visit_only_child1668(exp1673);
            } else {
              var if_res1016 = visit_only_child1668(exp1673);
            }
            var if_res1019 = if_res1016;
          } else {
            if (M5.unsafe_fx_lt_(index1676, 14) !== false) {
              var if_res1018 = visit_sequence1667(exp1673);
            } else {
              if (M5.unsafe_fx_lt_(index1676, 15) !== false) {
                var if_res1017 = visit_only_child1668(exp1673);
              } else {
                var if_res1017 = M1.rvoid();
              }
              var if_res1018 = if_res1017;
            }
            var if_res1019 = if_res1018;
          }
          var if_res1020 = if_res1019;
        }
        var if_res1021 = if_res1020;
      }
      return if_res1021;
    };
    var expand_def1677 = function(def1678) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation1666(M1.caddr(M2.ast_c(def1678)));
    };
    return M3.for_each(expand_def1677, M0.get_defs(grammar1660));
  };
  var expand_unit = function(exp1679) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var make_prefix1680 = function(v1681, e1682) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r1683 = M1.car(M2.ast_c(v1681));
      if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(42)) !== false) {
        var if_res1027 = $rjs_core.Symbol.make("closure");
      } else {
        if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(43)) !== false) {
          var if_res1026 = $rjs_core.Symbol.make("plus");
        } else {
          if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(63)) !== false) {
            var if_res1025 = $rjs_core.Symbol.make("optional");
          } else {
            if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(58)) !== false) {
              var if_res1024 = $rjs_core.Symbol.make("void");
            } else {
              if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(38)) !== false) {
                var if_res1023 = $rjs_core.Symbol.make("and");
              } else {
                if (M1.equal_p(r1683, $rjs_core.Char.charFromCodepoint(33)) !== false) {
                  var if_res1022 = $rjs_core.Symbol.make("not");
                } else {
                  var if_res1022 = M1.error($rjs_core.Symbol.make("make-prefix"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), r1683);
                }
                var if_res1023 = if_res1022;
              }
              var if_res1024 = if_res1023;
            }
            var if_res1025 = if_res1024;
          }
          var if_res1026 = if_res1025;
        }
        var if_res1027 = if_res1026;
      }
      return M2.__rjs_quoted__.ast1(if_res1027, M1.list(e1682), M1.cons(0, 0));
    };
    var make_label1684 = function(v1685, e1686) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r1687 = M1.car(M2.ast_c(v1685));
      return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("label"), M1.list(e1686), M1.cons(0, 0));
    };
    var expand_unit_iter1688 = function(el1689) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var rest1690 = M1.cdr(el1689);
      if (M1.null_p(rest1690) !== false) {
        var if_res1030 = M1.car(el1689);
      } else {
        var type1691 = M2.ast_t(M1.car(el1689));
        var tmp1692 = type1691;
        if (M1.equal_p(tmp1692, $rjs_core.Symbol.make("prefix")) !== false) {
          var if_res1029 = make_prefix1680;
        } else {
          if (M1.equal_p(tmp1692, $rjs_core.Symbol.make("label")) !== false) {
            var if_res1028 = make_label1684;
          } else {
            var if_res1028 = M1.error($rjs_core.Symbol.make("expand-unit-iter"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), type1691);
          }
          var if_res1029 = if_res1028;
        }
        var if_res1030 = if_res1029(M1.car(el1689), expand_unit_iter1688(rest1690));
      }
      return if_res1030;
    };
    return expand_unit_iter1688(M2.ast_c(exp1679));
  };
  var visit_case_literal = function(exp1693) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_chil1694 = function(c1695) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_alphabetic_p(c1695) !== false) {
        var if_res1031 = M1.list(M1.char_upcase(c1695), M1.char_downcase(c1695));
      } else {
        var if_res1031 = M1.list(c1695);
      }
      return if_res1031;
    };
    convert_chars_bang_(exp1693);
    var letters1696 = M2.ast_c(exp1693);
    if (M4.memf(M1.char_alphabetic_p, letters1696) !== false) {
      if (M1.null_p(M1.cdr(letters1696)) !== false) {
        var c1697 = M1.car(letters1696);
        M2.set_ast_t_bang_(exp1693, $rjs_core.Symbol.make("charClass"));
        var if_res1032 = M2.set_ast_c_bang_(exp1693, cc_chil1694(c1697));
      } else {
        M2.set_ast_t_bang_(exp1693, $rjs_core.Symbol.make("sequence"));
        var if_res1032 = M2.set_ast_c_bang_(exp1693, M3.map(function(a1698) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("charClass"), cc_chil1694(a1698), M1.cons(0, 0));
        }, letters1696));
      }
      var if_res1033 = if_res1032;
    } else {
      var if_res1033 = M2.set_ast_t_bang_(exp1693, $rjs_core.Symbol.make("literal"));
    }
    return if_res1033;
  };
  var convert_char = function(c1699) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_char1700 = function(c1701) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil1702 = M2.ast_c(c1701);
      if (M1.__eq_(M1.length(chil1702), 1) !== false) {
        var if_res1037 = M1.car(chil1702);
      } else {
        var s1703 = M1.cadr(chil1702);
        if (M1.equal_p(s1703, $rjs_core.Char.charFromCodepoint(110)) !== false) {
          var if_res1036 = $rjs_core.Char.charFromCodepoint(10);
        } else {
          if (M1.equal_p(s1703, $rjs_core.Char.charFromCodepoint(116)) !== false) {
            var if_res1035 = $rjs_core.Char.charFromCodepoint(9);
          } else {
            if (M1.equal_p(s1703, $rjs_core.Char.charFromCodepoint(114)) !== false) {
              var if_res1034 = $rjs_core.Char.charFromCodepoint(13);
            } else {
              var if_res1034 = s1703;
            }
            var if_res1035 = if_res1034;
          }
          var if_res1036 = if_res1035;
        }
        var if_res1037 = if_res1036;
      }
      return if_res1037;
    };
    var cc_hex1704 = function(c1705) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.integer__gt_char(M1.string__gt_number(M1.list__gt_string(M2.ast_c(c1705)), 16));
    };
    if (M1.equal_p(M2.ast_t(c1699), $rjs_core.Symbol.make("hex")) !== false) {
      var if_res1038 = cc_hex1704(c1699);
    } else {
      var if_res1038 = cc_char1700(c1699);
    }
    return if_res1038;
  };
  var convert_chars_bang_ = function(exp1706) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.set_ast_c_bang_(exp1706, M3.map(convert_char, M2.ast_c(exp1706)));
  };
  var visit_literal = function(exp1707) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return convert_chars_bang_(exp1707);
  };
  var visit_char_class = function(exp1708) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_part1709 = function(part1710) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var range1711 = M2.ast_c(part1710);
      if (M1.__eq_(M1.length(range1711), 1) !== false) {
        var if_res1041 = convert_char(M1.car(range1711));
      } else {
        var r11712 = convert_char(M1.car(range1711));
        var r21713 = convert_char(M1.cadr(range1711));
        if (M1.char_eq__p(r11712, r21713) !== false) {
          var if_res1040 = r11712;
        } else {
          if (M1.char_lt__p(r11712, r21713) !== false) {
            var if_res1039 = M1.cons(r11712, r21713);
          } else {
            var if_res1039 = M1.cons(r21713, r11712);
          }
          var if_res1040 = if_res1039;
        }
        var if_res1041 = if_res1040;
      }
      return if_res1041;
    };
    var cc_less_than_p1714 = function(a1715, b1716) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_p(a1715) !== false) {
        var if_res1043 = a1715;
      } else {
        var if_res1043 = M1.car(a1715);
      }
      if (M1.char_p(b1716) !== false) {
        var if_res1042 = b1716;
      } else {
        var if_res1042 = M1.car(b1716);
      }
      return M1.char_lt__p(if_res1043, if_res1042);
    };
    var minimise1717 = function(cc1718) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var next_to_p1719 = function(a1720, b1721) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.__eq_(M1.char__gt_integer(b1721) - M1.char__gt_integer(a1720), 1);
      };
      if (M1.null_p(cc1718) !== false) {
        var if_res1056 = $rjs_core.Pair.makeList();
      } else {
        var a1722 = M1.car(cc1718);
        var rest1723 = M1.cdr(cc1718);
        if (M1.null_p(rest1723) !== false) {
          var if_res1055 = cc1718;
        } else {
          var b1724 = M1.car(rest1723);
          if (M1.char_p(a1722) !== false) {
            if (M1.char_p(b1724) !== false) {
              if (M1.char_eq__p(a1722, b1724) !== false) {
                var if_res1045 = minimise1717(M1.cons(a1722, M1.cdr(rest1723)));
              } else {
                if (next_to_p1719(a1722, b1724) !== false) {
                  var if_res1044 = minimise1717(M1.cons(M1.cons(a1722, b1724), M1.cdr(rest1723)));
                } else {
                  var if_res1044 = M1.cons(a1722, minimise1717(rest1723));
                }
                var if_res1045 = if_res1044;
              }
              var if_res1047 = if_res1045;
            } else {
              if (next_to_p1719(a1722, M1.car(b1724)) !== false) {
                var if_res1046 = minimise1717(M1.cons(M1.cons(a1722, M1.cdr(b1724)), M1.cdr(rest1723)));
              } else {
                var if_res1046 = M1.cons(a1722, minimise1717(rest1723));
              }
              var if_res1047 = if_res1046;
            }
            var if_res1054 = if_res1047;
          } else {
            if (M1.char_p(b1724) !== false) {
              var or_part1725 = M1.char_eq__p(b1724, M1.car(a1722));
              if (or_part1725 !== false) {
                var if_res1048 = or_part1725;
              } else {
                var if_res1048 = M1.char_lt__eq__p(b1724, M1.cdr(a1722));
              }
              if (if_res1048 !== false) {
                var if_res1050 = minimise1717(M1.cons(a1722, M1.cdr(rest1723)));
              } else {
                if (next_to_p1719(M1.cdr(a1722), b1724) !== false) {
                  var if_res1049 = minimise1717(M1.cons(M1.cons(M1.car(a1722), b1724), M1.cdr(rest1723)));
                } else {
                  var if_res1049 = M1.cons(a1722, minimise1717(rest1723));
                }
                var if_res1050 = if_res1049;
              }
              var if_res1053 = if_res1050;
            } else {
              var or_part1726 = M1.char_lt__eq__p(M1.car(b1724), M1.cdr(a1722));
              if (or_part1726 !== false) {
                var if_res1051 = or_part1726;
              } else {
                var if_res1051 = next_to_p1719(M1.cdr(a1722), M1.car(b1724));
              }
              if (if_res1051 !== false) {
                var if_res1052 = minimise1717(M1.cons(M1.cons(M1.integer__gt_char(M1.min(M1.char__gt_integer(M1.car(a1722)), M1.char__gt_integer(M1.car(b1724)))), M1.integer__gt_char(M1.max(M1.char__gt_integer(M1.cdr(a1722)), M1.char__gt_integer(M1.cdr(b1724))))), M1.cdr(rest1723)));
              } else {
                var if_res1052 = M1.cons(a1722, minimise1717(rest1723));
              }
              var if_res1053 = if_res1052;
            }
            var if_res1054 = if_res1053;
          }
          var if_res1055 = if_res1054;
        }
        var if_res1056 = if_res1055;
      }
      return if_res1056;
    };
    var temp11727 = M3.map(cc_part1709, M2.ast_c(exp1708));
    var cc_less_than_p21728 = cc_less_than_p1714;
    if (M1.variable_reference_constant_p(M4.__rjs_quoted__.sort9) !== false) {
      var if_res1057 = M4.__rjs_quoted__.sort7(false, false, false, false, temp11727, cc_less_than_p21728);
    } else {
      var if_res1057 = M4.__rjs_quoted__.sort9(temp11727, cc_less_than_p21728);
    }
    return M2.set_ast_c_bang_(exp1708, minimise1717(if_res1057));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get expand_grammar() {
      return expand_grammar;
    },
    get expand_unit() {
      return expand_unit;
    },
    get visit_case_literal() {
      return visit_case_literal;
    },
    get convert_char() {
      return convert_char;
    },
    get convert_chars_bang_() {
      return convert_chars_bang_;
    },
    get visit_literal() {
      return visit_literal;
    },
    get visit_char_class() {
      return visit_char_class;
    }
  };
})();
var $__modules_47_transform_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/transform.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__modules_47_action_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M4 = $__modules_47_expand_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var transform_grammar = function(g592) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var nt_names593 = M1.make_hash();
    if (check_not_empty(g592) !== false) {
      if (M2.collect_actions(g592) !== false) {
        if (collect_nt_names(g592, nt_names593) !== false) {
          if (check_refs(g592, nt_names593) !== false) {
            var if_res334 = M4.expand_grammar(g592);
          } else {
            var if_res334 = false;
          }
          var if_res335 = if_res334;
        } else {
          var if_res335 = false;
        }
        var if_res336 = if_res335;
      } else {
        var if_res336 = false;
      }
      var if_res337 = if_res336;
    } else {
      var if_res337 = false;
    }
    return if_res337;
  };
  var check_not_empty = function(g594) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(M3.ast_c(g594)) !== false) {
      var if_res338 = M1.error($rjs_core.Symbol.make("check-not-empty"), $rjs_core.UString.makeInternedImmutable("grammar is empty"));
    } else {
      var if_res338 = M1.rvoid();
    }
    return if_res338;
  };
  var collect_nt_names = function(g595, nt_names596) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ok597 = true;
    M5.for_each(function(a598) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name599 = M0.get_non_term(a598);
      var found600 = M1.hash_ref(nt_names596, name599, false);
      if (found600 !== false) {
        ok597 = false;
        var if_res339 = M1.error($rjs_core.Symbol.make("check-duplicate"), $rjs_core.UString.makeInternedImmutable("duplicate definition of non-terminal: ~a"), name599);
      } else {
        var if_res339 = M1.hash_set_bang_(nt_names596, name599, name599);
      }
      return if_res339;
    }, M3.ast_c(g595));
    return ok597;
  };
  var check_refs = function(grammar601, nt_names602) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var visit_nt603 = function(exp604) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name605 = M1.list__gt_string(M3.ast_c(exp604));
      if (M1.hash_ref(nt_names602, name605, false) !== false) {
        var if_res340 = M1.rvoid();
      } else {
        var if_res340 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.makeInternedImmutable("undefined reference to non-terminal: ~a"), name605);
      }
      return if_res340;
    };
    var visit_alternation606 = function(exp610) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_sequence607, M3.ast_c(exp610));
    };
    var visit_sequence607 = function(exp611) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_unit608, M3.ast_c(exp611));
    };
    var visit_unit608 = function(exp612) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el613 = M3.ast_c(exp612);
      var el_len614 = M1.length(el613);
      return visit_exp609(M1.list_ref(el613, el_len614 - 1));
    };
    var visit_exp609 = function(exp615) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type616 = M3.ast_t(exp615);
      var tmp617 = type616;
      if (M1.equal_p(tmp617, $rjs_core.Symbol.make("alternation")) !== false) {
        var if_res344 = visit_alternation606(exp615);
      } else {
        if (M1.equal_p(tmp617, $rjs_core.Symbol.make("identifier")) !== false) {
          var if_res343 = visit_nt603(exp615);
        } else {
          if (M1.equal_p(tmp617, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res342 = visit_sequence607(exp615);
          } else {
            if (M1.equal_p(tmp617, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res341 = visit_unit608(exp615);
            } else {
              var if_res341 = M1.rvoid();
            }
            var if_res342 = if_res341;
          }
          var if_res343 = if_res342;
        }
        var if_res344 = if_res343;
      }
      return if_res344;
    };
    var check_nt_refs618 = function(def619) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation606(M1.caddr(M3.ast_c(def619)));
    };
    return M5.for_each(check_nt_refs618, M0.get_defs(grammar601));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get transform_grammar() {
      return transform_grammar;
    },
    get check_not_empty() {
      return check_not_empty;
    },
    get collect_nt_names() {
      return collect_nt_names;
    },
    get check_refs() {
      return check_refs;
    }
  };
})();
var $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw-file.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var exists_syms = $rjs_core.Pair.makeList($rjs_core.Symbol.make("error"), $rjs_core.Symbol.make("append"), $rjs_core.Symbol.make("update"), $rjs_core.Symbol.make("can-update"), $rjs_core.Symbol.make("replace"), $rjs_core.Symbol.make("truncate"), $rjs_core.Symbol.make("must-truncate"), $rjs_core.Symbol.make("truncate/replace"));
  var exists_desc = $rjs_core.UString.makeInternedImmutable("(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)");
  var binary_or_text_desc = $rjs_core.UString.makeInternedImmutable("(or/c 'binary 'text)");
  var open_input_file6 = function(for_module_p23110, for_module_p43111, mode13112, mode33113, path53114) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3115 = path53114;
    if (mode33113 !== false) {
      var if_res2077 = mode13112;
    } else {
      var if_res2077 = $rjs_core.Symbol.make("binary");
    }
    var mode3116 = if_res2077;
    if (for_module_p43111 !== false) {
      var if_res2078 = for_module_p23110;
    } else {
      var if_res2078 = false;
    }
    var for_module_p3117 = if_res2078;
    if (M3.path_string_p(path3115) !== false) {
      var if_res2079 = M1.rvoid();
    } else {
      var if_res2079 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3115);
    }
    if_res2079;
    if (M0.memq(mode3116, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2080 = M1.rvoid();
    } else {
      var if_res2080 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), binary_or_text_desc, mode3116);
    }
    if_res2080;
    if (for_module_p3117 !== false) {
      var if_res2081 = $rjs_core.Symbol.make("module");
    } else {
      var if_res2081 = $rjs_core.Symbol.make("none");
    }
    return M1.open_input_file(path3115, mode3116, if_res2081);
  };
  var unpack7 = function(given_kws3118, given_args3119, path53120) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3118) !== false) {
      var if_res2082 = M1.eq_p($rjs_core.Keyword.make("for-module?"), M1.car(given_kws3118));
    } else {
      var if_res2082 = false;
    }
    var for_module_p43121 = if_res2082;
    if (for_module_p43121 !== false) {
      var if_res2083 = M1.car(given_args3119);
    } else {
      var if_res2083 = M1.rvoid();
    }
    var for_module_p23122 = if_res2083;
    if (for_module_p43121 !== false) {
      var if_res2084 = M1.cdr(given_kws3118);
    } else {
      var if_res2084 = given_kws3118;
    }
    var given_kws3123 = if_res2084;
    if (for_module_p43121 !== false) {
      var if_res2085 = M1.cdr(given_args3119);
    } else {
      var if_res2085 = given_args3119;
    }
    var given_args3124 = if_res2085;
    var mode33125 = M1.pair_p(given_kws3123);
    if (mode33125 !== false) {
      var if_res2086 = M1.car(given_args3124);
    } else {
      var if_res2086 = M1.rvoid();
    }
    var mode13126 = if_res2086;
    return open_input_file6(for_module_p23122, for_module_p43121, mode13126, mode33125, path53120);
  };
  var cl2090 = function(given_kws3133, given_args3134, path3135) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(given_kws3133, given_args3134, path3135);
  };
  var temp2092 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2091 = {'3': cl2090}[arguments.length];
    if (fixed_lam2091 !== undefined) {
      return fixed_lam2091.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2089 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("for-module?"), $rjs_core.Keyword.make("mode"));
  var cl2087 = function(path3137) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(M1.rnull, M1.rnull, path3137);
  };
  var open_input_file3136 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2088 = {'1': cl2087}[arguments.length];
    if (fixed_lam2088 !== undefined) {
      return fixed_lam2088.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_file8 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3127, given_argc3128) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3128, 3) !== false) {
      var l13129 = given_kws3127;
      if (M1.null_p(l13129) !== false) {
        var if_res2094 = l13129;
      } else {
        if (M1.eq_p(M1.car(l13129), $rjs_core.Keyword.make("for-module?")) !== false) {
          var if_res2093 = M1.cdr(l13129);
        } else {
          var if_res2093 = l13129;
        }
        var if_res2094 = if_res2093;
      }
      var l13130 = if_res2094;
      var l13131 = l13130;
      if (M1.null_p(l13131) !== false) {
        var if_res2096 = l13131;
      } else {
        if (M1.eq_p(M1.car(l13131), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2095 = M1.cdr(l13131);
        } else {
          var if_res2095 = l13131;
        }
        var if_res2096 = if_res2095;
      }
      var l13132 = if_res2096;
      var if_res2097 = M1.null_p(l13132);
    } else {
      var if_res2097 = false;
    }
    return if_res2097;
  }, temp2092, M1.rnull, temp2089, open_input_file3136);
  var open_output_file14 = function(exists103138, exists123139, mode93140, mode113141, path133142) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3143 = path133142;
    if (mode113141 !== false) {
      var if_res2098 = mode93140;
    } else {
      var if_res2098 = $rjs_core.Symbol.make("binary");
    }
    var mode3144 = if_res2098;
    if (exists123139 !== false) {
      var if_res2099 = exists103138;
    } else {
      var if_res2099 = $rjs_core.Symbol.make("error");
    }
    var exists3145 = if_res2099;
    if (M3.path_string_p(path3143) !== false) {
      var if_res2100 = M1.rvoid();
    } else {
      var if_res2100 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3143);
    }
    if_res2100;
    if (M0.memq(mode3144, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2101 = M1.rvoid();
    } else {
      var if_res2101 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), binary_or_text_desc, mode3144);
    }
    if_res2101;
    if (M0.memq(exists3145, exists_syms) !== false) {
      var if_res2102 = M1.rvoid();
    } else {
      var if_res2102 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), exists_desc, exists3145);
    }
    if_res2102;
    return M1.open_output_file(path3143, mode3144, exists3145);
  };
  var unpack15 = function(given_kws3146, given_args3147, path133148) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3146) !== false) {
      var if_res2103 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3146));
    } else {
      var if_res2103 = false;
    }
    var exists123149 = if_res2103;
    if (exists123149 !== false) {
      var if_res2104 = M1.car(given_args3147);
    } else {
      var if_res2104 = M1.rvoid();
    }
    var exists103150 = if_res2104;
    if (exists123149 !== false) {
      var if_res2105 = M1.cdr(given_kws3146);
    } else {
      var if_res2105 = given_kws3146;
    }
    var given_kws3151 = if_res2105;
    if (exists123149 !== false) {
      var if_res2106 = M1.cdr(given_args3147);
    } else {
      var if_res2106 = given_args3147;
    }
    var given_args3152 = if_res2106;
    var mode113153 = M1.pair_p(given_kws3151);
    if (mode113153 !== false) {
      var if_res2107 = M1.car(given_args3152);
    } else {
      var if_res2107 = M1.rvoid();
    }
    var mode93154 = if_res2107;
    return open_output_file14(exists103150, exists123149, mode93154, mode113153, path133148);
  };
  var cl2111 = function(given_kws3161, given_args3162, path3163) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(given_kws3161, given_args3162, path3163);
  };
  var temp2113 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2112 = {'3': cl2111}[arguments.length];
    if (fixed_lam2112 !== undefined) {
      return fixed_lam2112.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2110 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2108 = function(path3165) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(M1.rnull, M1.rnull, path3165);
  };
  var open_output_file3164 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2109 = {'1': cl2108}[arguments.length];
    if (fixed_lam2109 !== undefined) {
      return fixed_lam2109.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_output_file16 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3155, given_argc3156) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3156, 3) !== false) {
      var l13157 = given_kws3155;
      if (M1.null_p(l13157) !== false) {
        var if_res2115 = l13157;
      } else {
        if (M1.eq_p(M1.car(l13157), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2114 = M1.cdr(l13157);
        } else {
          var if_res2114 = l13157;
        }
        var if_res2115 = if_res2114;
      }
      var l13158 = if_res2115;
      var l13159 = l13158;
      if (M1.null_p(l13159) !== false) {
        var if_res2117 = l13159;
      } else {
        if (M1.eq_p(M1.car(l13159), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2116 = M1.cdr(l13159);
        } else {
          var if_res2116 = l13159;
        }
        var if_res2117 = if_res2116;
      }
      var l13160 = if_res2117;
      var if_res2118 = M1.null_p(l13160);
    } else {
      var if_res2118 = false;
    }
    return if_res2118;
  }, temp2113, M1.rnull, temp2110, open_output_file3164);
  var open_input_output_file22 = function(exists183166, exists203167, mode173168, mode193169, path213170) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3171 = path213170;
    if (mode193169 !== false) {
      var if_res2119 = mode173168;
    } else {
      var if_res2119 = $rjs_core.Symbol.make("binary");
    }
    var mode3172 = if_res2119;
    if (exists203167 !== false) {
      var if_res2120 = exists183166;
    } else {
      var if_res2120 = $rjs_core.Symbol.make("error");
    }
    var exists3173 = if_res2120;
    if (M3.path_string_p(path3171) !== false) {
      var if_res2121 = M1.rvoid();
    } else {
      var if_res2121 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3171);
    }
    if_res2121;
    if (M0.memq(mode3172, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2122 = M1.rvoid();
    } else {
      var if_res2122 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), binary_or_text_desc, mode3172);
    }
    if_res2122;
    if (M0.memq(exists3173, exists_syms) !== false) {
      var if_res2123 = M1.rvoid();
    } else {
      var if_res2123 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), exists_desc, exists3173);
    }
    if_res2123;
    return M1.open_input_output_file(path3171, mode3172, exists3173);
  };
  var unpack23 = function(given_kws3174, given_args3175, path213176) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3174) !== false) {
      var if_res2124 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3174));
    } else {
      var if_res2124 = false;
    }
    var exists203177 = if_res2124;
    if (exists203177 !== false) {
      var if_res2125 = M1.car(given_args3175);
    } else {
      var if_res2125 = M1.rvoid();
    }
    var exists183178 = if_res2125;
    if (exists203177 !== false) {
      var if_res2126 = M1.cdr(given_kws3174);
    } else {
      var if_res2126 = given_kws3174;
    }
    var given_kws3179 = if_res2126;
    if (exists203177 !== false) {
      var if_res2127 = M1.cdr(given_args3175);
    } else {
      var if_res2127 = given_args3175;
    }
    var given_args3180 = if_res2127;
    var mode193181 = M1.pair_p(given_kws3179);
    if (mode193181 !== false) {
      var if_res2128 = M1.car(given_args3180);
    } else {
      var if_res2128 = M1.rvoid();
    }
    var mode173182 = if_res2128;
    return open_input_output_file22(exists183178, exists203177, mode173182, mode193181, path213176);
  };
  var cl2132 = function(given_kws3189, given_args3190, path3191) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(given_kws3189, given_args3190, path3191);
  };
  var temp2134 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2133 = {'3': cl2132}[arguments.length];
    if (fixed_lam2133 !== undefined) {
      return fixed_lam2133.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2131 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2129 = function(path3193) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(M1.rnull, M1.rnull, path3193);
  };
  var open_input_output_file3192 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2130 = {'1': cl2129}[arguments.length];
    if (fixed_lam2130 !== undefined) {
      return fixed_lam2130.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_output_file24 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3183, given_argc3184) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3184, 3) !== false) {
      var l13185 = given_kws3183;
      if (M1.null_p(l13185) !== false) {
        var if_res2136 = l13185;
      } else {
        if (M1.eq_p(M1.car(l13185), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2135 = M1.cdr(l13185);
        } else {
          var if_res2135 = l13185;
        }
        var if_res2136 = if_res2135;
      }
      var l13186 = if_res2136;
      var l13187 = l13186;
      if (M1.null_p(l13187) !== false) {
        var if_res2138 = l13187;
      } else {
        if (M1.eq_p(M1.car(l13187), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2137 = M1.cdr(l13187);
        } else {
          var if_res2137 = l13187;
        }
        var if_res2138 = if_res2137;
      }
      var l13188 = if_res2138;
      var if_res2139 = M1.null_p(l13188);
    } else {
      var if_res2139 = false;
    }
    return if_res2139;
  }, temp2134, M1.rnull, temp2131, open_input_output_file3192);
  var call_with_input_file29 = function(mode253194, mode263195, path273196, proc283197) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3198 = path273196;
    var proc3199 = proc283197;
    if (mode263195 !== false) {
      var if_res2140 = mode253194;
    } else {
      var if_res2140 = $rjs_core.Symbol.make("binary");
    }
    var mode3200 = if_res2140;
    if (M3.path_string_p(path3198) !== false) {
      var if_res2141 = M1.rvoid();
    } else {
      var if_res2141 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3198);
    }
    if_res2141;
    if (M1.procedure_p(proc3199) !== false) {
      var if_res2142 = M1.procedure_arity_includes_p(proc3199, 1);
    } else {
      var if_res2142 = false;
    }
    if (if_res2142 !== false) {
      var if_res2143 = M1.rvoid();
    } else {
      var if_res2143 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.makeInternedImmutable("(input-port? . -> . any)"), proc3199);
    }
    if_res2143;
    if (M0.memq(mode3200, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2144 = M1.rvoid();
    } else {
      var if_res2144 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), binary_or_text_desc, mode3200);
    }
    if_res2144;
    return M1.call_with_input_file(path3198, proc3199, mode3200);
  };
  var unpack30 = function(given_kws3201, given_args3202, path273203, proc283204) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode263205 = M1.pair_p(given_kws3201);
    if (mode263205 !== false) {
      var if_res2145 = M1.car(given_args3202);
    } else {
      var if_res2145 = M1.rvoid();
    }
    var mode253206 = if_res2145;
    return call_with_input_file29(mode253206, mode263205, path273203, proc283204);
  };
  var cl2149 = function(given_kws3211, given_args3212, path3213, proc3214) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(given_kws3211, given_args3212, path3213, proc3214);
  };
  var temp2151 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2150 = {'4': cl2149}[arguments.length];
    if (fixed_lam2150 !== undefined) {
      return fixed_lam2150.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2148 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2146 = function(path3216, proc3217) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(M1.rnull, M1.rnull, path3216, proc3217);
  };
  var call_with_input_file3215 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2147 = {'2': cl2146}[arguments.length];
    if (fixed_lam2147 !== undefined) {
      return fixed_lam2147.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file31 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3207, given_argc3208) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3208, 4) !== false) {
      var l13209 = given_kws3207;
      if (M1.null_p(l13209) !== false) {
        var if_res2153 = l13209;
      } else {
        if (M1.eq_p(M1.car(l13209), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2152 = M1.cdr(l13209);
        } else {
          var if_res2152 = l13209;
        }
        var if_res2153 = if_res2152;
      }
      var l13210 = if_res2153;
      var if_res2154 = M1.null_p(l13210);
    } else {
      var if_res2154 = false;
    }
    return if_res2154;
  }, temp2151, M1.rnull, temp2148, call_with_input_file3215);
  var call_with_output_file38 = function(exists333218, exists353219, mode323220, mode343221, path363222, proc373223) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3224 = path363222;
    var proc3225 = proc373223;
    if (mode343221 !== false) {
      var if_res2155 = mode323220;
    } else {
      var if_res2155 = $rjs_core.Symbol.make("binary");
    }
    var mode3226 = if_res2155;
    if (exists353219 !== false) {
      var if_res2156 = exists333218;
    } else {
      var if_res2156 = $rjs_core.Symbol.make("error");
    }
    var exists3227 = if_res2156;
    if (M3.path_string_p(path3224) !== false) {
      var if_res2157 = M1.rvoid();
    } else {
      var if_res2157 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3224);
    }
    if_res2157;
    if (M1.procedure_p(proc3225) !== false) {
      var if_res2158 = M1.procedure_arity_includes_p(proc3225, 1);
    } else {
      var if_res2158 = false;
    }
    if (if_res2158 !== false) {
      var if_res2159 = M1.rvoid();
    } else {
      var if_res2159 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.makeInternedImmutable("(output-port? . -> . any)"), proc3225);
    }
    if_res2159;
    if (M0.memq(mode3226, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2160 = M1.rvoid();
    } else {
      var if_res2160 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), binary_or_text_desc, mode3226);
    }
    if_res2160;
    if (M0.memq(exists3227, exists_syms) !== false) {
      var if_res2161 = M1.rvoid();
    } else {
      var if_res2161 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), exists_desc, exists3227);
    }
    if_res2161;
    return M1.call_with_output_file(path3224, proc3225, mode3226, exists3227);
  };
  var unpack39 = function(given_kws3228, given_args3229, path363230, proc373231) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3228) !== false) {
      var if_res2162 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3228));
    } else {
      var if_res2162 = false;
    }
    var exists353232 = if_res2162;
    if (exists353232 !== false) {
      var if_res2163 = M1.car(given_args3229);
    } else {
      var if_res2163 = M1.rvoid();
    }
    var exists333233 = if_res2163;
    if (exists353232 !== false) {
      var if_res2164 = M1.cdr(given_kws3228);
    } else {
      var if_res2164 = given_kws3228;
    }
    var given_kws3234 = if_res2164;
    if (exists353232 !== false) {
      var if_res2165 = M1.cdr(given_args3229);
    } else {
      var if_res2165 = given_args3229;
    }
    var given_args3235 = if_res2165;
    var mode343236 = M1.pair_p(given_kws3234);
    if (mode343236 !== false) {
      var if_res2166 = M1.car(given_args3235);
    } else {
      var if_res2166 = M1.rvoid();
    }
    var mode323237 = if_res2166;
    return call_with_output_file38(exists333233, exists353232, mode323237, mode343236, path363230, proc373231);
  };
  var cl2170 = function(given_kws3244, given_args3245, path3246, proc3247) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(given_kws3244, given_args3245, path3246, proc3247);
  };
  var temp2172 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2171 = {'4': cl2170}[arguments.length];
    if (fixed_lam2171 !== undefined) {
      return fixed_lam2171.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2169 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2167 = function(path3249, proc3250) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(M1.rnull, M1.rnull, path3249, proc3250);
  };
  var call_with_output_file3248 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2168 = {'2': cl2167}[arguments.length];
    if (fixed_lam2168 !== undefined) {
      return fixed_lam2168.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file40 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3238, given_argc3239) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3239, 4) !== false) {
      var l13240 = given_kws3238;
      if (M1.null_p(l13240) !== false) {
        var if_res2174 = l13240;
      } else {
        if (M1.eq_p(M1.car(l13240), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2173 = M1.cdr(l13240);
        } else {
          var if_res2173 = l13240;
        }
        var if_res2174 = if_res2173;
      }
      var l13241 = if_res2174;
      var l13242 = l13241;
      if (M1.null_p(l13242) !== false) {
        var if_res2176 = l13242;
      } else {
        if (M1.eq_p(M1.car(l13242), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2175 = M1.cdr(l13242);
        } else {
          var if_res2175 = l13242;
        }
        var if_res2176 = if_res2175;
      }
      var l13243 = if_res2176;
      var if_res2177 = M1.null_p(l13243);
    } else {
      var if_res2177 = false;
    }
    return if_res2177;
  }, temp2172, M1.rnull, temp2169, call_with_output_file3248);
  var with_input_from_file45 = function(mode413251, mode423252, path433253, proc443254) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3255 = path433253;
    var proc3256 = proc443254;
    if (mode423252 !== false) {
      var if_res2178 = mode413251;
    } else {
      var if_res2178 = $rjs_core.Symbol.make("binary");
    }
    var mode3257 = if_res2178;
    if (M3.path_string_p(path3255) !== false) {
      var if_res2179 = M1.rvoid();
    } else {
      var if_res2179 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3255);
    }
    if_res2179;
    if (M1.procedure_p(proc3256) !== false) {
      var if_res2180 = M1.procedure_arity_includes_p(proc3256, 0);
    } else {
      var if_res2180 = false;
    }
    if (if_res2180 !== false) {
      var if_res2181 = M1.rvoid();
    } else {
      var if_res2181 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.makeInternedImmutable("(-> any)"), proc3256);
    }
    if_res2181;
    if (M0.memq(mode3257, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2182 = M1.rvoid();
    } else {
      var if_res2182 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), binary_or_text_desc, mode3257);
    }
    if_res2182;
    return M1.with_input_from_file(path3255, proc3256, mode3257);
  };
  var unpack46 = function(given_kws3258, given_args3259, path433260, proc443261) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode423262 = M1.pair_p(given_kws3258);
    if (mode423262 !== false) {
      var if_res2183 = M1.car(given_args3259);
    } else {
      var if_res2183 = M1.rvoid();
    }
    var mode413263 = if_res2183;
    return with_input_from_file45(mode413263, mode423262, path433260, proc443261);
  };
  var cl2187 = function(given_kws3268, given_args3269, path3270, proc3271) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(given_kws3268, given_args3269, path3270, proc3271);
  };
  var temp2189 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2188 = {'4': cl2187}[arguments.length];
    if (fixed_lam2188 !== undefined) {
      return fixed_lam2188.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2186 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2184 = function(path3273, proc3274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(M1.rnull, M1.rnull, path3273, proc3274);
  };
  var with_input_from_file3272 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2185 = {'2': cl2184}[arguments.length];
    if (fixed_lam2185 !== undefined) {
      return fixed_lam2185.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var with_input_from_file47 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3264, given_argc3265) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3265, 4) !== false) {
      var l13266 = given_kws3264;
      if (M1.null_p(l13266) !== false) {
        var if_res2191 = l13266;
      } else {
        if (M1.eq_p(M1.car(l13266), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2190 = M1.cdr(l13266);
        } else {
          var if_res2190 = l13266;
        }
        var if_res2191 = if_res2190;
      }
      var l13267 = if_res2191;
      var if_res2192 = M1.null_p(l13267);
    } else {
      var if_res2192 = false;
    }
    return if_res2192;
  }, temp2189, M1.rnull, temp2186, with_input_from_file3272);
  var with_output_to_file54 = function(exists493275, exists513276, mode483277, mode503278, path523279, proc533280) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3281 = path523279;
    var proc3282 = proc533280;
    if (mode503278 !== false) {
      var if_res2193 = mode483277;
    } else {
      var if_res2193 = $rjs_core.Symbol.make("binary");
    }
    var mode3283 = if_res2193;
    if (exists513276 !== false) {
      var if_res2194 = exists493275;
    } else {
      var if_res2194 = $rjs_core.Symbol.make("error");
    }
    var exists3284 = if_res2194;
    if (M3.path_string_p(path3281) !== false) {
      var if_res2195 = M1.rvoid();
    } else {
      var if_res2195 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3281);
    }
    if_res2195;
    if (M1.procedure_p(proc3282) !== false) {
      var if_res2196 = M1.procedure_arity_includes_p(proc3282, 0);
    } else {
      var if_res2196 = false;
    }
    if (if_res2196 !== false) {
      var if_res2197 = M1.rvoid();
    } else {
      var if_res2197 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.makeInternedImmutable("(-> any)"), proc3282);
    }
    if_res2197;
    if (M0.memq(mode3283, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2198 = M1.rvoid();
    } else {
      var if_res2198 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), binary_or_text_desc, mode3283);
    }
    if_res2198;
    if (M0.memq(exists3284, exists_syms) !== false) {
      var if_res2199 = M1.rvoid();
    } else {
      var if_res2199 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), exists_desc, exists3284);
    }
    if_res2199;
    return M1.with_output_to_file(path3281, proc3282, mode3283, exists3284);
  };
  var unpack55 = function(given_kws3285, given_args3286, path523287, proc533288) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3285) !== false) {
      var if_res2200 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3285));
    } else {
      var if_res2200 = false;
    }
    var exists513289 = if_res2200;
    if (exists513289 !== false) {
      var if_res2201 = M1.car(given_args3286);
    } else {
      var if_res2201 = M1.rvoid();
    }
    var exists493290 = if_res2201;
    if (exists513289 !== false) {
      var if_res2202 = M1.cdr(given_kws3285);
    } else {
      var if_res2202 = given_kws3285;
    }
    var given_kws3291 = if_res2202;
    if (exists513289 !== false) {
      var if_res2203 = M1.cdr(given_args3286);
    } else {
      var if_res2203 = given_args3286;
    }
    var given_args3292 = if_res2203;
    var mode503293 = M1.pair_p(given_kws3291);
    if (mode503293 !== false) {
      var if_res2204 = M1.car(given_args3292);
    } else {
      var if_res2204 = M1.rvoid();
    }
    var mode483294 = if_res2204;
    return with_output_to_file54(exists493290, exists513289, mode483294, mode503293, path523287, proc533288);
  };
  var cl2208 = function(given_kws3301, given_args3302, path3303, proc3304) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(given_kws3301, given_args3302, path3303, proc3304);
  };
  var temp2210 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2209 = {'4': cl2208}[arguments.length];
    if (fixed_lam2209 !== undefined) {
      return fixed_lam2209.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2207 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2205 = function(path3306, proc3307) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(M1.rnull, M1.rnull, path3306, proc3307);
  };
  var with_output_to_file3305 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2206 = {'2': cl2205}[arguments.length];
    if (fixed_lam2206 !== undefined) {
      return fixed_lam2206.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var with_output_to_file56 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3295, given_argc3296) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3296, 4) !== false) {
      var l13297 = given_kws3295;
      if (M1.null_p(l13297) !== false) {
        var if_res2212 = l13297;
      } else {
        if (M1.eq_p(M1.car(l13297), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2211 = M1.cdr(l13297);
        } else {
          var if_res2211 = l13297;
        }
        var if_res2212 = if_res2211;
      }
      var l13298 = if_res2212;
      var l13299 = l13298;
      if (M1.null_p(l13299) !== false) {
        var if_res2214 = l13299;
      } else {
        if (M1.eq_p(M1.car(l13299), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2213 = M1.cdr(l13299);
        } else {
          var if_res2213 = l13299;
        }
        var if_res2214 = if_res2213;
      }
      var l13300 = if_res2214;
      var if_res2215 = M1.null_p(l13300);
    } else {
      var if_res2215 = false;
    }
    return if_res2215;
  }, temp2210, M1.rnull, temp2207, with_output_to_file3305);
  var call_with_input_file_times_61 = function(mode573308, mode583309, path593310, proc603311) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3312 = path593310;
    var proc3313 = proc603311;
    if (mode583309 !== false) {
      var if_res2216 = mode573308;
    } else {
      var if_res2216 = $rjs_core.Symbol.make("binary");
    }
    var mode3314 = if_res2216;
    if (M3.path_string_p(path3312) !== false) {
      var if_res2217 = M1.rvoid();
    } else {
      var if_res2217 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3312);
    }
    if_res2217;
    if (M1.procedure_p(proc3313) !== false) {
      var if_res2218 = M1.procedure_arity_includes_p(proc3313, 1);
    } else {
      var if_res2218 = false;
    }
    if (if_res2218 !== false) {
      var if_res2219 = M1.rvoid();
    } else {
      var if_res2219 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.makeInternedImmutable("(input-port? . -> . any)"), proc3313);
    }
    if_res2219;
    if (M0.memq(mode3314, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2220 = M1.rvoid();
    } else {
      var if_res2220 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), binary_or_text_desc, mode3314);
    }
    if_res2220;
    var p3315 = M1.open_input_file(path3312, mode3314);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3313(p3315);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_input_port(p3315);
    });
  };
  var unpack62 = function(given_kws3316, given_args3317, path593318, proc603319) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode583320 = M1.pair_p(given_kws3316);
    if (mode583320 !== false) {
      var if_res2221 = M1.car(given_args3317);
    } else {
      var if_res2221 = M1.rvoid();
    }
    var mode573321 = if_res2221;
    return call_with_input_file_times_61(mode573321, mode583320, path593318, proc603319);
  };
  var cl2225 = function(given_kws3326, given_args3327, path3328, proc3329) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(given_kws3326, given_args3327, path3328, proc3329);
  };
  var temp2227 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2226 = {'4': cl2225}[arguments.length];
    if (fixed_lam2226 !== undefined) {
      return fixed_lam2226.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2224 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2222 = function(path3331, proc3332) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(M1.rnull, M1.rnull, path3331, proc3332);
  };
  var call_with_input_file_times_3330 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2223 = {'2': cl2222}[arguments.length];
    if (fixed_lam2223 !== undefined) {
      return fixed_lam2223.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file_times_63 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3322, given_argc3323) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3323, 4) !== false) {
      var l13324 = given_kws3322;
      if (M1.null_p(l13324) !== false) {
        var if_res2229 = l13324;
      } else {
        if (M1.eq_p(M1.car(l13324), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2228 = M1.cdr(l13324);
        } else {
          var if_res2228 = l13324;
        }
        var if_res2229 = if_res2228;
      }
      var l13325 = if_res2229;
      var if_res2230 = M1.null_p(l13325);
    } else {
      var if_res2230 = false;
    }
    return if_res2230;
  }, temp2227, M1.rnull, temp2224, call_with_input_file_times_3330);
  var call_with_output_file_times_70 = function(exists653333, exists673334, mode643335, mode663336, path683337, proc693338) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3339 = path683337;
    var proc3340 = proc693338;
    if (mode663336 !== false) {
      var if_res2231 = mode643335;
    } else {
      var if_res2231 = $rjs_core.Symbol.make("binary");
    }
    var mode3341 = if_res2231;
    if (exists673334 !== false) {
      var if_res2232 = exists653333;
    } else {
      var if_res2232 = $rjs_core.Symbol.make("error");
    }
    var exists3342 = if_res2232;
    if (M3.path_string_p(path3339) !== false) {
      var if_res2233 = M1.rvoid();
    } else {
      var if_res2233 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3339);
    }
    if_res2233;
    if (M1.procedure_p(proc3340) !== false) {
      var if_res2234 = M1.procedure_arity_includes_p(proc3340, 1);
    } else {
      var if_res2234 = false;
    }
    if (if_res2234 !== false) {
      var if_res2235 = M1.rvoid();
    } else {
      var if_res2235 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.makeInternedImmutable("(output-port? . -> . any)"), proc3340);
    }
    if_res2235;
    if (M0.memq(mode3341, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2236 = M1.rvoid();
    } else {
      var if_res2236 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), binary_or_text_desc, mode3341);
    }
    if_res2236;
    if (M0.memq(exists3342, exists_syms) !== false) {
      var if_res2237 = M1.rvoid();
    } else {
      var if_res2237 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), exists_desc, exists3342);
    }
    if_res2237;
    var p3343 = M1.open_output_file(path3339, mode3341, exists3342);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3340(p3343);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_output_port(p3343);
    });
  };
  var unpack71 = function(given_kws3344, given_args3345, path683346, proc693347) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3344) !== false) {
      var if_res2238 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3344));
    } else {
      var if_res2238 = false;
    }
    var exists673348 = if_res2238;
    if (exists673348 !== false) {
      var if_res2239 = M1.car(given_args3345);
    } else {
      var if_res2239 = M1.rvoid();
    }
    var exists653349 = if_res2239;
    if (exists673348 !== false) {
      var if_res2240 = M1.cdr(given_kws3344);
    } else {
      var if_res2240 = given_kws3344;
    }
    var given_kws3350 = if_res2240;
    if (exists673348 !== false) {
      var if_res2241 = M1.cdr(given_args3345);
    } else {
      var if_res2241 = given_args3345;
    }
    var given_args3351 = if_res2241;
    var mode663352 = M1.pair_p(given_kws3350);
    if (mode663352 !== false) {
      var if_res2242 = M1.car(given_args3351);
    } else {
      var if_res2242 = M1.rvoid();
    }
    var mode643353 = if_res2242;
    return call_with_output_file_times_70(exists653349, exists673348, mode643353, mode663352, path683346, proc693347);
  };
  var cl2246 = function(given_kws3360, given_args3361, path3362, proc3363) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(given_kws3360, given_args3361, path3362, proc3363);
  };
  var temp2248 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2247 = {'4': cl2246}[arguments.length];
    if (fixed_lam2247 !== undefined) {
      return fixed_lam2247.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2245 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2243 = function(path3365, proc3366) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(M1.rnull, M1.rnull, path3365, proc3366);
  };
  var call_with_output_file_times_3364 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2244 = {'2': cl2243}[arguments.length];
    if (fixed_lam2244 !== undefined) {
      return fixed_lam2244.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file_times_72 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3354, given_argc3355) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3355, 4) !== false) {
      var l13356 = given_kws3354;
      if (M1.null_p(l13356) !== false) {
        var if_res2250 = l13356;
      } else {
        if (M1.eq_p(M1.car(l13356), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2249 = M1.cdr(l13356);
        } else {
          var if_res2249 = l13356;
        }
        var if_res2250 = if_res2249;
      }
      var l13357 = if_res2250;
      var l13358 = l13357;
      if (M1.null_p(l13358) !== false) {
        var if_res2252 = l13358;
      } else {
        if (M1.eq_p(M1.car(l13358), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2251 = M1.cdr(l13358);
        } else {
          var if_res2251 = l13358;
        }
        var if_res2252 = if_res2251;
      }
      var l13359 = if_res2252;
      var if_res2253 = M1.null_p(l13359);
    } else {
      var if_res2253 = false;
    }
    return if_res2253;
  }, temp2248, M1.rnull, temp2245, call_with_output_file_times_3364);
  var core773367 = function(build_p733368, build_p743369, dir753370, dir763371) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (dir763371 !== false) {
      var if_res2254 = dir753370;
    } else {
      var if_res2254 = M1.current_directory();
    }
    var dir3372 = if_res2254;
    if (build_p743369 !== false) {
      var if_res2255 = build_p733368;
    } else {
      var if_res2255 = false;
    }
    var build_p3373 = if_res2255;
    if (M3.path_string_p(dir3372) !== false) {
      var if_res2256 = M1.rvoid();
    } else {
      var if_res2256 = M1.raise_argument_error($rjs_core.Symbol.make("directory-list"), $rjs_core.UString.makeInternedImmutable("path-string?"), dir3372);
    }
    if_res2256;
    var content3374 = M4.sort(M1.directory_list(dir3372), M1.path_lt__p);
    if (build_p3373 !== false) {
      var if_res2257 = M2.map(function(i3375) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.build_path(dir3372, i3375);
      }, content3374);
    } else {
      var if_res2257 = content3374;
    }
    return if_res2257;
  };
  var unpack783376 = function(given_kws3377, given_args3378, dir753379, dir763380) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var build_p743381 = M1.pair_p(given_kws3377);
    if (build_p743381 !== false) {
      var if_res2258 = M1.car(given_args3378);
    } else {
      var if_res2258 = M1.rvoid();
    }
    var build_p733382 = if_res2258;
    return core773367(build_p733382, build_p743381, dir753379, dir763380);
  };
  var cl2263 = function(given_kws3387, given_args3388) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783376(given_kws3387, given_args3388, false, false);
  };
  var cl2264 = function(given_kws3389, given_args3390, dir753391) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783376(given_kws3389, given_args3390, dir753391, true);
  };
  var temp2266 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2265 = {
      '2': cl2263,
      '3': cl2264
    }[arguments.length];
    if (fixed_lam2265 !== undefined) {
      return fixed_lam2265.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var temp2262 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("build?"));
  var cl2259 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783376(M1.rnull, M1.rnull, false, false);
  };
  var cl2260 = function(dir753393) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783376(M1.rnull, M1.rnull, dir753393, true);
  };
  var directory_list3392 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2261 = {
      '0': cl2259,
      '1': cl2260
    }[arguments.length];
    if (fixed_lam2261 !== undefined) {
      return fixed_lam2261.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var directory_list = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3383, given_argc3384) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__gt__eq_(given_argc3384, 2) !== false) {
      var if_res2267 = M1.__lt__eq_(given_argc3384, 3);
    } else {
      var if_res2267 = false;
    }
    if (if_res2267 !== false) {
      var l13385 = given_kws3383;
      if (M1.null_p(l13385) !== false) {
        var if_res2269 = l13385;
      } else {
        if (M1.eq_p(M1.car(l13385), $rjs_core.Keyword.make("build?")) !== false) {
          var if_res2268 = M1.cdr(l13385);
        } else {
          var if_res2268 = l13385;
        }
        var if_res2269 = if_res2268;
      }
      var l13386 = if_res2269;
      var if_res2270 = M1.null_p(l13386);
    } else {
      var if_res2270 = false;
    }
    return if_res2270;
  }, temp2266, M1.rnull, temp2262, directory_list3392);
  var __rjs_quoted__ = {};
  __rjs_quoted__.call_with_input_file29 = call_with_input_file29;
  __rjs_quoted__.open_input_output_file22 = open_input_output_file22;
  __rjs_quoted__.call_with_input_file31 = call_with_input_file31;
  __rjs_quoted__.call_with_output_file40 = call_with_output_file40;
  __rjs_quoted__.call_with_input_file_times_61 = call_with_input_file_times_61;
  __rjs_quoted__.open_output_file14 = open_output_file14;
  __rjs_quoted__.call_with_output_file_times_72 = call_with_output_file_times_72;
  __rjs_quoted__.open_output_file16 = open_output_file16;
  __rjs_quoted__.with_output_to_file54 = with_output_to_file54;
  __rjs_quoted__.with_output_to_file56 = with_output_to_file56;
  __rjs_quoted__.with_input_from_file45 = with_input_from_file45;
  __rjs_quoted__.call_with_input_file_times_63 = call_with_input_file_times_63;
  __rjs_quoted__.open_input_file6 = open_input_file6;
  __rjs_quoted__.call_with_output_file38 = call_with_output_file38;
  __rjs_quoted__.with_input_from_file47 = with_input_from_file47;
  __rjs_quoted__.open_input_file8 = open_input_file8;
  __rjs_quoted__.open_input_output_file24 = open_input_output_file24;
  __rjs_quoted__.call_with_output_file_times_70 = call_with_output_file_times_70;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __directory_list() {
      return directory_list;
    }
  };
})();
var $__modules_47_version_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/version.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __times_version_times_ = $rjs_core.UString.makeInternedImmutable("0.8.1");
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_version_times_() {
      return __times_version_times_;
    }
  };
})();
var $__modules_47_code_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/code.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__modules_47_version_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var __times_default_header_times_ = M0.list(M0.string_append($rjs_core.UString.makeInternedImmutable("Generated by the Waxeye Parser Generator - version "), M4.__times_version_times_), $rjs_core.UString.makeInternedImmutable("www.waxeye.org"));
  var __times_indent_unit_times_ = 4;
  var __times_indent_level_times_ = 0;
  var indent_unit_bang_ = function(val1631) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_unit_times_ = val1631;
    return null;
  };
  var dump_string = function(s1632, path1633) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__5411634 = M2.__rjs_quoted__.call_with_output_file40;
    var path11635 = path1633;
    var temp21636 = function(p1638) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.display(s1632, p1638);
    };
    var temp31637 = $rjs_core.Symbol.make("replace");
    if (M0.variable_reference_constant_p(M2.__rjs_quoted__.call_with_output_file40) !== false) {
      var if_res997 = M2.__rjs_quoted__.call_with_output_file38(temp31637, true, false, false, path11635, temp21636);
    } else {
      var if_res997 = M0.checked_procedure_check_and_extract(M5.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__5411634, M5.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), M0.list(temp31637), path11635, temp21636);
    }
    return if_res997;
  };
  var ind = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M1.make_list(__times_indent_level_times_, M0.make_string(__times_indent_unit_times_, $rjs_core.Char.charFromCodepoint(32))));
  };
  var indent_plus_ = function(n1639) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ + n1639;
    return null;
  };
  var indent_ = function(n1640) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ - n1640;
    return null;
  };
  var bool__gt_s = function(b1641) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (b1641 !== false) {
      var if_res998 = $rjs_core.UString.makeInternedImmutable("true");
    } else {
      var if_res998 = $rjs_core.UString.makeInternedImmutable("false");
    }
    return if_res998;
  };
  var comment_bookend = function(top1642, unit1643, bot1644, lines1645) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.string_append(ind(), top1642, $rjs_core.UString.makeInternedImmutable("\n"), comment_base(unit1643, lines1645), ind(), bot1644, $rjs_core.UString.makeInternedImmutable("\n"));
  };
  var comment_base = function(unit1646, lines1647) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M3.map(function(a1648) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.equal_p($rjs_core.UString.makeInternedImmutable(""), a1648) !== false) {
        var if_res999 = M0.format($rjs_core.UString.makeInternedImmutable("~a~a\n"), ind(), unit1646);
      } else {
        var if_res999 = M0.format($rjs_core.UString.makeInternedImmutable("~a~a ~a\n"), ind(), unit1646, a1648);
      }
      return if_res999;
    }, lines1647));
  };
  var script_comment = function(lines1649) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return comment_base($rjs_core.UString.makeInternedImmutable("#"), lines1649);
  };
  var camel_case_lower = function(s1650) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl1651 = M0.string__gt_list(s1650);
    if (M0.null_p(sl1651) !== false) {
      var if_res1000 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res1000 = M0.list__gt_string(M0.cons(M0.char_downcase(M0.car(sl1651)), M0.cdr(sl1651)));
    }
    return if_res1000;
  };
  var camel_case_upper = function(s1652) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl1653 = M0.string__gt_list(s1652);
    if (M0.null_p(sl1653) !== false) {
      var if_res1001 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res1001 = M0.list__gt_string(M0.cons(M0.char_upcase(M0.car(sl1653)), M0.cdr(sl1653)));
    }
    return if_res1001;
  };
  var string__gt_upper = function(s1654) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M3.map(M0.char_upcase, M0.string__gt_list(s1654)));
  };
  var escape_for_java_char_p = function(ch1655) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part1656 = M0.equal_p(ch1655, $rjs_core.Char.charFromCodepoint(92));
    if (or_part1656 !== false) {
      var if_res1002 = or_part1656;
    } else {
      var if_res1002 = M0.equal_p(ch1655, $rjs_core.Char.charFromCodepoint(39));
    }
    return if_res1002;
  };
  var escape_java_string = function(s1657) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var escape_java_string_iter1658 = function(sl1659) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(sl1659) !== false) {
        var if_res1004 = $rjs_core.Pair.makeList();
      } else {
        if (M0.equal_p(M0.car(sl1659), $rjs_core.Char.charFromCodepoint(34)) !== false) {
          var if_res1003 = M0.cons($rjs_core.Char.charFromCodepoint(92), M0.cons($rjs_core.Char.charFromCodepoint(34), escape_java_string_iter1658(M0.cdr(sl1659))));
        } else {
          var if_res1003 = M0.cons(M0.car(sl1659), escape_java_string_iter1658(M0.cdr(sl1659)));
        }
        var if_res1004 = if_res1003;
      }
      return if_res1004;
    };
    return M0.list__gt_string(escape_java_string_iter1658(M0.string__gt_list(s1657)));
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.indent_ = indent_;
  __rjs_quoted__.indent_plus_ = indent_plus_;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_default_header_times_() {
      return __times_default_header_times_;
    },
    get __times_indent_unit_times_() {
      return __times_indent_unit_times_;
    },
    get __times_indent_level_times_() {
      return __times_indent_level_times_;
    },
    get indent_unit_bang_() {
      return indent_unit_bang_;
    },
    get dump_string() {
      return dump_string;
    },
    get ind() {
      return ind;
    },
    get indent_plus_() {
      return indent_plus_;
    },
    get indent_() {
      return indent_;
    },
    get bool__gt_s() {
      return bool__gt_s;
    },
    get comment_bookend() {
      return comment_bookend;
    },
    get comment_base() {
      return comment_base;
    },
    get script_comment() {
      return script_comment;
    },
    get camel_case_lower() {
      return camel_case_lower;
    },
    get camel_case_upper() {
      return camel_case_upper;
    },
    get string__gt_upper() {
      return string__gt_upper;
    },
    get escape_for_java_char_p() {
      return escape_for_java_char_p;
    },
    get escape_java_string() {
      return escape_java_string;
    }
  };
})();
var $__modules_47_javascript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/javascript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_code_46_rkt_46_js__;
  var M1 = $__runtime_47_paramz_46_rkt_46_js__;
  var M2 = $__modules_47_gen_46_rkt_46_js__;
  var M3 = $__runtime_47_kernel_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M5 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M7 = $__runtime_47_unsafe_46_rkt_46_js__;
  var javascript_comment = function(lines510) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.comment_bookend($rjs_core.UString.makeInternedImmutable("/*"), $rjs_core.UString.makeInternedImmutable(" *"), $rjs_core.UString.makeInternedImmutable(" */"), lines510);
  };
  var typescript = M3.make_parameter(false);
  var gen_typescript = function(grammar511, path512) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.indent_unit_bang_(2);
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res255 = M3.string_append(M3.string_downcase(M2.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("_parser.ts"));
    } else {
      var if_res255 = $rjs_core.UString.makeInternedImmutable("parser.ts");
    }
    var file_path513 = M3.string_append(path512, if_res255);
    M0.dump_string(gen_typescript_parser(grammar511), file_path513);
    return M3.list(file_path513);
  };
  var gen_javascript = function(grammar514, path515) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.indent_unit_bang_(4);
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res256 = M3.string_append(M3.string_downcase(M2.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("_parser.js"));
    } else {
      var if_res256 = $rjs_core.UString.makeInternedImmutable("parser.js");
    }
    var file_path516 = M3.string_append(path515, if_res256);
    M0.dump_string(gen_javascript_parser(grammar514), file_path516);
    return M3.list(file_path516);
  };
  var gen_literal = function(a517) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var gen_char518 = function(t519) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp262 = $rjs_core.UString.makeInternedImmutable("'~a~a'");
      if (M0.escape_for_java_char_p(t519) !== false) {
        var if_res261 = $rjs_core.UString.makeInternedImmutable("\\");
      } else {
        var if_res261 = $rjs_core.UString.makeInternedImmutable("");
      }
      if (M3.equal_p(t519, $rjs_core.Char.charFromCodepoint(34)) !== false) {
        var if_res260 = $rjs_core.UString.makeInternedImmutable("\\\"");
      } else {
        if (M3.equal_p(t519, $rjs_core.Char.charFromCodepoint(10)) !== false) {
          var if_res259 = $rjs_core.UString.makeInternedImmutable("\\n");
        } else {
          if (M3.equal_p(t519, $rjs_core.Char.charFromCodepoint(9)) !== false) {
            var if_res258 = $rjs_core.UString.makeInternedImmutable("\\t");
          } else {
            if (M3.equal_p(t519, $rjs_core.Char.charFromCodepoint(13)) !== false) {
              var if_res257 = $rjs_core.UString.makeInternedImmutable("\\r");
            } else {
              var if_res257 = t519;
            }
            var if_res258 = if_res257;
          }
          var if_res259 = if_res258;
        }
        var if_res260 = if_res259;
      }
      return M3.format(temp262, if_res261, if_res260);
    };
    return gen_array(gen_char518, a517);
  };
  var gen_char_class = function(a520) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var gen_char_class_item521 = function(a522) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M3.char_p(a522) !== false) {
        var if_res263 = M3.format($rjs_core.UString.makeInternedImmutable("0x~x"), M3.char__gt_integer(a522));
      } else {
        var if_res263 = M3.format($rjs_core.UString.makeInternedImmutable("[0x~x, 0x~x]"), M3.char__gt_integer(M3.car(a522)), M3.char__gt_integer(M3.cdr(a522)));
      }
      return if_res263;
    };
    if (M3.symbol_p(a520) !== false) {
      var if_res266 = $rjs_core.UString.makeInternedImmutable("-1");
    } else {
      if (M3.list_p(a520) !== false) {
        var if_res265 = gen_array(gen_char_class_item521, a520);
      } else {
        if (M3.char_p(a520) !== false) {
          var if_res264 = gen_char_class_item521(a520);
        } else {
          var if_res264 = a520;
        }
        var if_res265 = if_res264;
      }
      var if_res266 = if_res265;
    }
    return if_res266;
  };
  var exp_id_map = M3.make_hash($rjs_core.Pair.makeList($rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("NT"), 1), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("ALT"), 2), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("SEQ"), 3), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("PLUS"), 4), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("STAR"), 5), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("OPT"), 6), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("AND"), 7), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("NOT"), 8), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("VOID"), 9), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("ANY"), 10), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("CHAR"), 11), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("CHAR_CLASS"), 12)));
  var gen_exp = function(a523) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp526 = M5.ast_t(a523);
    if (M3.symbol_p(tmp526) !== false) {
      var if_res267 = M3.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 10], [$rjs_core.Symbol.make("identifier"), 2], [$rjs_core.Symbol.make("optional"), 8], [$rjs_core.Symbol.make("not"), 7], [$rjs_core.Symbol.make("closure"), 11], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 3], [$rjs_core.Symbol.make("alternation"), 9], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 1], [$rjs_core.Symbol.make("and"), 6], [$rjs_core.Symbol.make("literal"), 4]], false), tmp526, function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return 0;
      });
    } else {
      var if_res267 = 0;
    }
    var index527 = if_res267;
    if (M7.unsafe_fx_lt_(index527, 6) !== false) {
      if (M7.unsafe_fx_lt_(index527, 2) !== false) {
        if (M7.unsafe_fx_lt_(index527, 1) !== false) {
          var if_res268 = M3.format($rjs_core.UString.makeInternedImmutable("unknown:~a"), M5.ast_t(a523));
        } else {
          var if_res268 = M3.values($rjs_core.UString.makeInternedImmutable("ANY"), $rjs_core.UString.makeInternedImmutable("[]"));
        }
        var if_res273 = if_res268;
      } else {
        if (M7.unsafe_fx_lt_(index527, 3) !== false) {
          var if_res272 = M3.values($rjs_core.UString.makeInternedImmutable("NT"), M3.format($rjs_core.UString.makeInternedImmutable("['~a']"), M3.list__gt_string(M5.ast_c(a523))));
        } else {
          if (M7.unsafe_fx_lt_(index527, 4) !== false) {
            var if_res271 = M3.values($rjs_core.UString.makeInternedImmutable("VOID"), gen_array(gen_exp, M5.ast_c(a523)));
          } else {
            if (M7.unsafe_fx_lt_(index527, 5) !== false) {
              if (M3.__lt__eq_(M3.length(M5.ast_c(a523)), 1) !== false) {
                var if_res269 = M3.values($rjs_core.UString.makeInternedImmutable("CHAR"), gen_literal(M5.ast_c(a523)));
              } else {
                var if_res269 = M3.values($rjs_core.UString.makeInternedImmutable("SEQ"), gen_array(gen_exp, M6.map(function(b528) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return M5.__rjs_quoted__.ast1($rjs_core.Symbol.make("literal"), M3.cons(b528, $rjs_core.Pair.makeList()), $rjs_core.Pair.makeList());
                }, M5.ast_c(a523))));
              }
              var if_res270 = if_res269;
            } else {
              var if_res270 = M3.values($rjs_core.UString.makeInternedImmutable("CHAR_CLASS"), gen_char_class(M5.ast_c(a523)));
            }
            var if_res271 = if_res270;
          }
          var if_res272 = if_res271;
        }
        var if_res273 = if_res272;
      }
      var if_res280 = if_res273;
    } else {
      if (M7.unsafe_fx_lt_(index527, 9) !== false) {
        if (M7.unsafe_fx_lt_(index527, 7) !== false) {
          var if_res275 = M3.values($rjs_core.UString.makeInternedImmutable("AND"), gen_array(gen_exp, M5.ast_c(a523)));
        } else {
          if (M7.unsafe_fx_lt_(index527, 8) !== false) {
            var if_res274 = M3.values($rjs_core.UString.makeInternedImmutable("NOT"), gen_array(gen_exp, M5.ast_c(a523)));
          } else {
            var if_res274 = M3.values($rjs_core.UString.makeInternedImmutable("OPT"), gen_array(gen_exp, M5.ast_c(a523)));
          }
          var if_res275 = if_res274;
        }
        var if_res279 = if_res275;
      } else {
        if (M7.unsafe_fx_lt_(index527, 10) !== false) {
          var if_res278 = M3.values($rjs_core.UString.makeInternedImmutable("ALT"), gen_array(gen_exp, M5.ast_c(a523)));
        } else {
          if (M7.unsafe_fx_lt_(index527, 11) !== false) {
            var if_res277 = M3.values($rjs_core.UString.makeInternedImmutable("SEQ"), gen_array(gen_exp, M5.ast_c(a523)));
          } else {
            if (M7.unsafe_fx_lt_(index527, 12) !== false) {
              var if_res276 = M3.values($rjs_core.UString.makeInternedImmutable("STAR"), gen_array(gen_exp, M5.ast_c(a523)));
            } else {
              var if_res276 = M3.values($rjs_core.UString.makeInternedImmutable("PLUS"), gen_array(gen_exp, M5.ast_c(a523)));
            }
            var if_res277 = if_res276;
          }
          var if_res278 = if_res277;
        }
        var if_res279 = if_res278;
      }
      var if_res280 = if_res279;
    }
    var let_result281 = if_res280;
    var name524 = let_result281.getAt(0);
    var args525 = let_result281.getAt(1);
    if (typescript() !== false) {
      var temp285 = $rjs_core.UString.makeInternedImmutable("{ type: ExprType.~a, args: ~a }~a");
      if (M3.equal_p(name524, $rjs_core.UString.makeInternedImmutable("SEQ")) !== false) {
        var if_res284 = $rjs_core.UString.makeInternedImmutable(" as ExprSeq");
      } else {
        if (M3.equal_p(name524, $rjs_core.UString.makeInternedImmutable("ALT")) !== false) {
          var if_res283 = $rjs_core.UString.makeInternedImmutable(" as ExprAlt");
        } else {
          if (M3.equal_p(name524, $rjs_core.UString.makeInternedImmutable("CHAR_CLASS")) !== false) {
            var if_res282 = $rjs_core.UString.makeInternedImmutable(" as ExprCharClass");
          } else {
            var if_res282 = $rjs_core.UString.makeInternedImmutable("");
          }
          var if_res283 = if_res282;
        }
        var if_res284 = if_res283;
      }
      var if_res286 = M3.format(temp285, name524, args525, if_res284);
    } else {
      var if_res286 = M3.format($rjs_core.UString.makeInternedImmutable("{ type: ~a /* ~a */, args: ~a }"), M3.hash_ref(exp_id_map, name524), name524, args525);
    }
    return if_res286;
  };
  var nonterminal_mode_map = M3.make_hash($rjs_core.Pair.makeList($rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("NORMAL"), 1), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("PRUNING"), 2), $rjs_core.Pair.make($rjs_core.UString.makeInternedImmutable("VOIDING"), 3)));
  var gen_def = function(a529) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp533 = M5.ast_t(M3.list_ref(M5.ast_c(a529), 1));
    if (M3.equal_p(tmp533, $rjs_core.Symbol.make("voidArrow")) !== false) {
      var if_res289 = $rjs_core.UString.makeInternedImmutable("VOIDING");
    } else {
      if (M3.equal_p(tmp533, $rjs_core.Symbol.make("pruneArrow")) !== false) {
        var if_res288 = $rjs_core.UString.makeInternedImmutable("PRUNING");
      } else {
        if (M3.equal_p(tmp533, $rjs_core.Symbol.make("leftArrow")) !== false) {
          var if_res287 = $rjs_core.UString.makeInternedImmutable("NORMAL");
        } else {
          var if_res287 = M3.rvoid();
        }
        var if_res288 = if_res287;
      }
      var if_res289 = if_res288;
    }
    var mode_name530 = if_res289;
    var nt_name531 = M3.list__gt_string(M5.ast_c(M3.list_ref(M5.ast_c(a529), 0)));
    var exp532 = gen_exp(M3.list_ref(M5.ast_c(a529), 2));
    if (typescript() !== false) {
      var if_res290 = M3.format($rjs_core.UString.makeInternedImmutable("'~a': { mode: NonTerminalMode.~a, exp: ~a }"), nt_name531, mode_name530, exp532);
    } else {
      var if_res290 = M3.format($rjs_core.UString.makeInternedImmutable("'~a': { mode: ~a /* ~a */, exp: ~a }"), nt_name531, M3.hash_ref(nonterminal_mode_map, mode_name530), mode_name530, exp532);
    }
    return if_res290;
  };
  var gen_defs = function(a534) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return gen_map(gen_def, M5.ast_c(a534));
  };
  var gen_map = function(fn535, data536) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp292 = $rjs_core.UString.makeInternedImmutable("{~a}");
    M0.indent_plus_(1);
    if (M3.null_p(data536) !== false) {
      var if_res291 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res291 = M3.string_append(fn535(M3.car(data536)), M3.apply(M3.string_append, M6.map(function(a538) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M3.string_append($rjs_core.UString.makeInternedImmutable(",\n"), M0.ind(), fn535(a538));
      }, M3.cdr(data536))));
    }
    var val537 = if_res291;
    M0.indent_(1);
    return M3.format(temp292, val537);
  };
  var gen_array = function(fn539, data540) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp295 = $rjs_core.UString.makeInternedImmutable("[~a]");
    M0.indent_plus_(1);
    if (M3.null_p(data540) !== false) {
      var if_res294 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var temp1542 = M6.map(fn539, data540);
      var temp2543 = $rjs_core.UString.makeInternedImmutable(", ");
      if (M3.variable_reference_constant_p(M4.__rjs_quoted__.add_between37) !== false) {
        var if_res293 = M4.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp1542, temp2543);
      } else {
        var if_res293 = M4.__rjs_quoted__.add_between37(temp1542, temp2543);
      }
      var if_res294 = M3.apply(M3.string_append, if_res293);
    }
    var val541 = if_res294;
    M0.indent_(1);
    return M3.format(temp295, val541);
  };
  var gen_typescript_parser = function(grammar544) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res296 = M3.string_append(M0.camel_case_upper(M2.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("Parser"));
    } else {
      var if_res296 = $rjs_core.UString.makeInternedImmutable("Parser");
    }
    var parser_name545 = if_res296;
    var temp303 = $rjs_core.UString.makeInternedImmutable("\nimport {\n  ExprType, ExprAlt, ExprCharClass, ExprSeq,\n  NonTerminalMode, ParserConfig, WaxeyeParser\n} from 'waxeye';\nconst parserConfig: ParserConfig =\n ~a~a~a;\nconst start = '~a';\n\nexport class ~a extends WaxeyeParser {\n  public constructor() {\n    super(parserConfig, start);\n  }\n}\n");
    var temp302 = M0.ind();
    var temp301 = M0.ind();
    var __context297 = $rjs_core.Marks.getFrames();
    var __context298;
    try {
      __context298 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M1.parameterization_key, M1.extend_parameterization(M3.continuation_mark_set_first(false, M1.parameterization_key), typescript, true));
      var __wcm_result299 = gen_defs(grammar544);
    } finally {
      $rjs_core.Marks.updateFrame(__context297, __context298);
    }
    return M3.format(temp303, temp302, temp301, __wcm_result299, M2.__times_start_name_times_, parser_name545);
  };
  var gen_javascript_parser = function(grammar546) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res304 = M3.string_append(M0.camel_case_upper(M2.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("Parser"));
    } else {
      var if_res304 = $rjs_core.UString.makeInternedImmutable("Parser");
    }
    var parser_name547 = if_res304;
    var gen_parser_class548 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp311 = $rjs_core.UString.makeInternedImmutable("\nfunction ~a() {}\n~a.prototype = new waxeye.WaxeyeParser(\n~a~a~a\n~a, '~a');\n");
      var temp310 = M0.ind();
      var temp309 = M0.ind();
      var __context305 = $rjs_core.Marks.getFrames();
      var __context306;
      try {
        __context306 = $rjs_core.Marks.enterFrame();
        $rjs_core.Marks.setMark(M1.parameterization_key, M1.extend_parameterization(M3.continuation_mark_set_first(false, M1.parameterization_key), typescript, false));
        var __wcm_result307 = gen_defs(grammar546);
      } finally {
        $rjs_core.Marks.updateFrame(__context305, __context306);
      }
      return M3.format(temp311, parser_name547, parser_name547, temp310, temp309, __wcm_result307, M0.ind(), M2.__times_start_name_times_);
    };
    var gen_nodejs_imports549 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val550 = M3.format($rjs_core.UString.makeInternedImmutable("\nvar waxeye = waxeye;\nif (typeof module !== 'undefined') {\n~a// require from module system\n~awaxeye = require('waxeye');\n}\n"), M0.ind(), M0.ind());
      M0.indent_(1);
      return val550;
    };
    var gen_nodejs_exports551 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val552 = M3.format($rjs_core.UString.makeInternedImmutable("\n// Add to module system\nif (typeof module !== 'undefined') {\n~amodule.exports.~a = ~a;\n}\n"), M0.ind(), parser_name547, parser_name547);
      M0.indent_(1);
      return val552;
    };
    var temp313 = $rjs_core.UString.makeInternedImmutable("~a~a~a~a");
    if (M2.__times_file_header_times_ !== false) {
      var if_res312 = javascript_comment(M2.__times_file_header_times_);
    } else {
      var if_res312 = javascript_comment(M0.__times_default_header_times_);
    }
    return M3.format(temp313, if_res312, gen_nodejs_imports549(), gen_parser_class548(), gen_nodejs_exports551());
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get gen_typescript_parser() {
      return gen_typescript_parser;
    },
    get gen_typescript() {
      return gen_typescript;
    },
    get gen_javascript_parser() {
      return gen_javascript_parser;
    },
    get gen_javascript() {
      return gen_javascript;
    }
  };
})();
var $__collects_47_waxeye_47_set_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/set.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var within_set_p = function(a1747, b1748) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(a1747) !== false) {
      var if_res1068 = false;
    } else {
      var aa1749 = M0.car(a1747);
      if (M0.char_p(aa1749) !== false) {
        if (M0.char_eq__p(aa1749, b1748) !== false) {
          var if_res1063 = true;
        } else {
          if (M0.char_lt__p(aa1749, b1748) !== false) {
            var if_res1062 = within_set_p(M0.cdr(a1747), b1748);
          } else {
            var if_res1062 = false;
          }
          var if_res1063 = if_res1062;
        }
        var if_res1067 = if_res1063;
      } else {
        if (M0.char_lt__eq__p(M0.car(aa1749), b1748) !== false) {
          var if_res1064 = M0.char_lt__eq__p(b1748, M0.cdr(aa1749));
        } else {
          var if_res1064 = false;
        }
        if (if_res1064 !== false) {
          var if_res1066 = true;
        } else {
          if (M0.char_lt__p(M0.cdr(aa1749), b1748) !== false) {
            var if_res1065 = within_set_p(M0.cdr(a1747), b1748);
          } else {
            var if_res1065 = false;
          }
          var if_res1066 = if_res1065;
        }
        var if_res1067 = if_res1066;
      }
      var if_res1068 = if_res1067;
    }
    return if_res1068;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get within_set_p() {
      return within_set_p;
    }
  };
})();
var $__collects_47_waxeye_47_fa_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/fa.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var let_result353 = M0.make_struct_type($rjs_core.Symbol.make("edge"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("edge"));
  var struct_653 = let_result353.getAt(0);
  var make_654 = let_result353.getAt(1);
  var __p655 = let_result353.getAt(2);
  var __ref656 = let_result353.getAt(3);
  var __set_bang_657 = let_result353.getAt(4);
  var let_result354 = M0.values(struct_653, make_654, __p655, M0.make_struct_field_accessor(__ref656, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref656, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_accessor(__ref656, 2, $rjs_core.Symbol.make("v")), M0.make_struct_field_mutator(__set_bang_657, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_657, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_mutator(__set_bang_657, 2, $rjs_core.Symbol.make("v")));
  var struct_edge = let_result354.getAt(0);
  var edge1 = let_result354.getAt(1);
  var edge_p = let_result354.getAt(2);
  var edge_t = let_result354.getAt(3);
  var edge_s = let_result354.getAt(4);
  var edge_v = let_result354.getAt(5);
  var set_edge_t_bang_ = let_result354.getAt(6);
  var set_edge_s_bang_ = let_result354.getAt(7);
  var set_edge_v_bang_ = let_result354.getAt(8);
  var let_result355 = M0.make_struct_type($rjs_core.Symbol.make("state"), false, 2, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("state"));
  var struct_658 = let_result355.getAt(0);
  var make_659 = let_result355.getAt(1);
  var __p660 = let_result355.getAt(2);
  var __ref661 = let_result355.getAt(3);
  var __set_bang_662 = let_result355.getAt(4);
  var let_result356 = M0.values(struct_658, make_659, __p660, M0.make_struct_field_accessor(__ref661, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_accessor(__ref661, 1, $rjs_core.Symbol.make("match")), M0.make_struct_field_mutator(__set_bang_662, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_mutator(__set_bang_662, 1, $rjs_core.Symbol.make("match")));
  var struct_state = let_result356.getAt(0);
  var state2 = let_result356.getAt(1);
  var state_p = let_result356.getAt(2);
  var state_edges = let_result356.getAt(3);
  var state_match = let_result356.getAt(4);
  var set_state_edges_bang_ = let_result356.getAt(5);
  var set_state_match_bang_ = let_result356.getAt(6);
  var let_result357 = M0.make_struct_type($rjs_core.Symbol.make("fa"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2), false, $rjs_core.Symbol.make("fa"));
  var struct_663 = let_result357.getAt(0);
  var make_664 = let_result357.getAt(1);
  var __p665 = let_result357.getAt(2);
  var __ref666 = let_result357.getAt(3);
  var __set_bang_667 = let_result357.getAt(4);
  var let_result358 = M0.values(struct_663, make_664, __p665, M0.make_struct_field_accessor(__ref666, 0, $rjs_core.Symbol.make("type")), M0.make_struct_field_accessor(__ref666, 1, $rjs_core.Symbol.make("states")), M0.make_struct_field_accessor(__ref666, 2, $rjs_core.Symbol.make("mode")));
  var struct_fa = let_result358.getAt(0);
  var fa3 = let_result358.getAt(1);
  var fa_p = let_result358.getAt(2);
  var fa_type = let_result358.getAt(3);
  var fa_states = let_result358.getAt(4);
  var fa_mode = let_result358.getAt(5);
  var __rjs_quoted__ = {};
  __rjs_quoted__.set_edge_v_bang_ = set_edge_v_bang_;
  __rjs_quoted__.set_edge_t_bang_ = set_edge_t_bang_;
  __rjs_quoted__.state2 = state2;
  __rjs_quoted__.set_edge_s_bang_ = set_edge_s_bang_;
  __rjs_quoted__.state_match = state_match;
  __rjs_quoted__.struct_fa = struct_fa;
  __rjs_quoted__.set_state_edges_bang_ = set_state_edges_bang_;
  __rjs_quoted__.edge_s = edge_s;
  __rjs_quoted__.fa_p = fa_p;
  __rjs_quoted__.edge_t = edge_t;
  __rjs_quoted__.set_state_match_bang_ = set_state_match_bang_;
  __rjs_quoted__.struct_state = struct_state;
  __rjs_quoted__.edge1 = edge1;
  __rjs_quoted__.edge_p = edge_p;
  __rjs_quoted__.state_p = state_p;
  __rjs_quoted__.fa_type = fa_type;
  __rjs_quoted__.fa_mode = fa_mode;
  __rjs_quoted__.state_edges = state_edges;
  __rjs_quoted__.fa_states = fa_states;
  __rjs_quoted__.edge_v = edge_v;
  __rjs_quoted__.struct_edge = struct_edge;
  __rjs_quoted__.fa3 = fa3;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_edge() {
      return struct_edge;
    },
    get edge_p() {
      return edge_p;
    },
    get edge_t() {
      return edge_t;
    },
    get edge_s() {
      return edge_s;
    },
    get edge_v() {
      return edge_v;
    },
    get set_edge_t_bang_() {
      return set_edge_t_bang_;
    },
    get set_edge_s_bang_() {
      return set_edge_s_bang_;
    },
    get set_edge_v_bang_() {
      return set_edge_v_bang_;
    },
    get struct_state() {
      return struct_state;
    },
    get state_p() {
      return state_p;
    },
    get state_edges() {
      return state_edges;
    },
    get state_match() {
      return state_match;
    },
    get set_state_edges_bang_() {
      return set_state_edges_bang_;
    },
    get set_state_match_bang_() {
      return set_state_match_bang_;
    },
    get struct_fa() {
      return struct_fa;
    },
    get fa_p() {
      return fa_p;
    },
    get fa_type() {
      return fa_type;
    },
    get fa_states() {
      return fa_states;
    },
    get fa_mode() {
      return fa_mode;
    }
  };
})();
var $__collects_47_waxeye_47_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_waxeye_47_set_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var let_result359 = M1.make_struct_type($rjs_core.Symbol.make("cache-item"), false, 5, 0, false, M1.rnull, M1.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4), false, $rjs_core.Symbol.make("cache-item"));
  var struct_668 = let_result359.getAt(0);
  var make_669 = let_result359.getAt(1);
  var __p670 = let_result359.getAt(2);
  var __ref671 = let_result359.getAt(3);
  var __set_bang_672 = let_result359.getAt(4);
  var let_result360 = M1.values(struct_668, make_669, __p670, M1.make_struct_field_accessor(__ref671, 0, $rjs_core.Symbol.make("val")), M1.make_struct_field_accessor(__ref671, 1, $rjs_core.Symbol.make("pos")), M1.make_struct_field_accessor(__ref671, 2, $rjs_core.Symbol.make("line")), M1.make_struct_field_accessor(__ref671, 3, $rjs_core.Symbol.make("col")), M1.make_struct_field_accessor(__ref671, 4, $rjs_core.Symbol.make("cr")));
  var struct_cache_item = let_result360.getAt(0);
  var cache_item1 = let_result360.getAt(1);
  var cache_item_p = let_result360.getAt(2);
  var cache_item_val = let_result360.getAt(3);
  var cache_item_pos = let_result360.getAt(4);
  var cache_item_line = let_result360.getAt(5);
  var cache_item_col = let_result360.getAt(6);
  var cache_item_cr = let_result360.getAt(7);
  var make_parser = function(start673, eof_check674, automata675) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(input676) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var input_len677 = M1.string_length(input676);
      var input_pos678 = 0;
      var line679 = 1;
      var column680 = 0;
      var last_cr681 = false;
      var error_pos682 = 0;
      var error_line683 = 1;
      var error_col684 = 0;
      var error_expected685 = $rjs_core.Pair.makeList();
      var fa_stack686 = $rjs_core.Pair.makeList();
      var cache687 = M1.make_hash();
      var match_automaton688 = function(index696) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var key697 = M1.cons(index696, input_pos678);
        var value698 = M1.hash_ref(cache687, key697, false);
        if (value698 !== false) {
          restore_pos693(cache_item_pos(value698), cache_item_line(value698), cache_item_col(value698), cache_item_cr(value698));
          var if_res370 = cache_item_val(value698);
        } else {
          var automaton699 = M1.vector_ref(automata675, index696);
          var type700 = M3.fa_type(automaton699);
          var states701 = M3.fa_states(automaton699);
          var automaton_mode702 = M3.fa_mode(automaton699);
          fa_stack686 = M1.cons(M1.cons(automaton699, false), fa_stack686);
          var start_pos704 = input_pos678;
          var start_line705 = line679;
          var start_col706 = column680;
          var start_cr707 = last_cr681;
          var res708 = match_state689(M1.vector_ref(states701, 0));
          if (M1.equal_p(type700, $rjs_core.Symbol.make("&")) !== false) {
            restore_pos693(start_pos704, start_line705, start_col706, start_cr707);
            var if_res369 = M1.not(M1.not(res708));
          } else {
            if (M1.equal_p(type700, $rjs_core.Symbol.make("!")) !== false) {
              restore_pos693(start_pos704, start_line705, start_col706, start_cr707);
              if (res708 !== false) {
                var if_res361 = update_error695();
              } else {
                var if_res361 = true;
              }
              var if_res368 = if_res361;
            } else {
              if (res708 !== false) {
                var tmp709 = automaton_mode702;
                if (M1.equal_p(tmp709, $rjs_core.Symbol.make("voidArrow")) !== false) {
                  var if_res366 = true;
                } else {
                  if (M1.equal_p(tmp709, $rjs_core.Symbol.make("pruneArrow")) !== false) {
                    if (M1.null_p(res708) !== false) {
                      var if_res363 = true;
                    } else {
                      if (M1.null_p(M1.cdr(res708)) !== false) {
                        var if_res362 = M1.car(res708);
                      } else {
                        var if_res362 = M2.__rjs_quoted__.ast1(type700, res708, M1.cons(start_pos704, input_pos678));
                      }
                      var if_res363 = if_res362;
                    }
                    var if_res365 = if_res363;
                  } else {
                    if (M1.equal_p(tmp709, $rjs_core.Symbol.make("leftArrow")) !== false) {
                      var if_res364 = M2.__rjs_quoted__.ast1(type700, res708, M1.cons(start_pos704, input_pos678));
                    } else {
                      var if_res364 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.makeInternedImmutable("Unknown automaton mode"));
                    }
                    var if_res365 = if_res364;
                  }
                  var if_res366 = if_res365;
                }
                var if_res367 = if_res366;
              } else {
                var if_res367 = update_error695();
              }
              var if_res368 = if_res367;
            }
            var if_res369 = if_res368;
          }
          var v703 = if_res369;
          fa_stack686 = M1.cdr(fa_stack686);
          M1.hash_set_bang_(cache687, key697, cache_item1(v703, input_pos678, line679, column680, last_cr681));
          var if_res370 = v703;
        }
        return if_res370;
      };
      var match_state689 = function(state710) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var res711 = match_edges690(M3.state_edges(state710));
        if (res711 !== false) {
          var if_res372 = res711;
        } else {
          if (M3.state_match(state710) !== false) {
            var if_res371 = $rjs_core.Pair.makeList();
          } else {
            var if_res371 = false;
          }
          var if_res372 = if_res371;
        }
        return if_res372;
      };
      var match_edges690 = function(edges712) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(edges712) !== false) {
          var if_res374 = false;
        } else {
          var res713 = match_edge691(M1.car(edges712));
          if (res713 !== false) {
            var if_res373 = res713;
          } else {
            var if_res373 = match_edges690(M1.cdr(edges712));
          }
          var if_res374 = if_res373;
        }
        return if_res374;
      };
      var match_edge691 = function(edge714) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var start_pos715 = input_pos678;
        var start_line716 = line679;
        var start_col717 = column680;
        var start_cr718 = last_cr681;
        var t719 = M3.edge_t(edge714);
        if (M1.equal_p($rjs_core.Symbol.make("wild"), t719) !== false) {
          if (M1.__lt_(input_pos678, input_len677) !== false) {
            var if_res375 = mv692();
          } else {
            var if_res375 = record_error694();
          }
          var if_res383 = if_res375;
        } else {
          if (M1.char_p(t719) !== false) {
            if (M1.__lt_(input_pos678, input_len677) !== false) {
              var if_res376 = M1.equal_p(M1.string_ref(input676, input_pos678), t719);
            } else {
              var if_res376 = false;
            }
            if (if_res376 !== false) {
              var if_res377 = mv692();
            } else {
              var if_res377 = record_error694();
            }
            var if_res382 = if_res377;
          } else {
            if (M1.pair_p(t719) !== false) {
              if (M1.__lt_(input_pos678, input_len677) !== false) {
                var if_res378 = M0.within_set_p(t719, M1.string_ref(input676, input_pos678));
              } else {
                var if_res378 = false;
              }
              if (if_res378 !== false) {
                var if_res379 = mv692();
              } else {
                var if_res379 = record_error694();
              }
              var if_res381 = if_res379;
            } else {
              if (M1.integer_p(t719) !== false) {
                var if_res380 = match_automaton688(t719);
              } else {
                var if_res380 = false;
              }
              var if_res381 = if_res380;
            }
            var if_res382 = if_res381;
          }
          var if_res383 = if_res382;
        }
        var res720 = if_res383;
        if (res720 !== false) {
          var tran_res721 = match_state689(M1.vector_ref(M3.fa_states(M1.caar(fa_stack686)), M3.edge_s(edge714)));
          if (tran_res721 !== false) {
            var or_part722 = M3.edge_v(edge714);
            if (or_part722 !== false) {
              var if_res384 = or_part722;
            } else {
              var if_res384 = M1.equal_p(res720, true);
            }
            if (if_res384 !== false) {
              var if_res385 = tran_res721;
            } else {
              var if_res385 = M1.cons(res720, tran_res721);
            }
            var if_res386 = if_res385;
          } else {
            restore_pos693(start_pos715, start_line716, start_col717, start_cr718);
            var if_res386 = false;
          }
          var if_res387 = if_res386;
        } else {
          var if_res387 = false;
        }
        return if_res387;
      };
      var mv692 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var ch723 = M1.string_ref(input676, input_pos678);
        input_pos678 = input_pos678 + 1;
        if (M1.char_eq__p(ch723, $rjs_core.Char.charFromCodepoint(13)) !== false) {
          line679 = line679 + 1;
          column680 = 0;
          last_cr681 = true;
          var if_res390 = null;
        } else {
          if (M1.char_eq__p(ch723, $rjs_core.Char.charFromCodepoint(10)) !== false) {
            if (last_cr681 !== false) {
              var if_res388 = M1.rvoid();
            } else {
              line679 = line679 + 1;
              column680 = 0;
              var if_res388 = null;
            }
            var if_res389 = if_res388;
          } else {
            column680 = column680 + 1;
            var if_res389 = null;
          }
          if_res389;
          last_cr681 = false;
          var if_res390 = null;
        }
        if_res390;
        return ch723;
      };
      var restore_pos693 = function(p724, l725, c726, cr727) {
        if (arguments.length !== 4) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        input_pos678 = p724;
        line679 = l725;
        column680 = c726;
        last_cr681 = cr727;
        return null;
      };
      var record_error694 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__lt_(error_pos682, input_pos678) !== false) {
          error_pos682 = input_pos678;
          error_line683 = line679;
          error_col684 = column680;
          error_expected685 = $rjs_core.Pair.makeList();
          var if_res391 = null;
        } else {
          var if_res391 = M1.rvoid();
        }
        if_res391;
        if (M1.__lt__eq_(error_pos682, input_pos678) !== false) {
          fa_stack686 = M1.cons(M1.cons(M1.caar(fa_stack686), true), M1.cdr(fa_stack686));
          var if_res392 = null;
        } else {
          var if_res392 = M1.rvoid();
        }
        if_res392;
        return false;
      };
      var update_error695 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.cdar(fa_stack686) !== false) {
          error_expected685 = M1.cons(M3.fa_type(M1.caar(fa_stack686)), error_expected685);
          var if_res393 = null;
        } else {
          var if_res393 = M1.rvoid();
        }
        if_res393;
        return false;
      };
      var do_eof_check728 = function(res731) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (res731 !== false) {
          if (eof_check674 !== false) {
            var if_res394 = M1.__lt_(input_pos678, input_len677);
          } else {
            var if_res394 = false;
          }
          if (if_res394 !== false) {
            var if_res395 = M2.__rjs_quoted__.parse_error2(error_pos682, error_line683, error_col684, error_expected685, received729(), snippet730());
          } else {
            var if_res395 = res731;
          }
          var if_res396 = if_res395;
        } else {
          var if_res396 = M2.__rjs_quoted__.parse_error2(error_pos682, error_line683, error_col684, error_expected685, received729(), snippet730());
        }
        return if_res396;
      };
      var received729 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__eq_(error_pos682, input_len677) !== false) {
          var if_res397 = $rjs_core.UString.makeInternedImmutable("<end of input>");
        } else {
          var if_res397 = M1.substring(input676, error_pos682, error_pos682 + 1);
        }
        return if_res397;
      };
      var snippet730 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var snippet_length_max732 = 80;
        var line_finder733 = function(index_test734, index_move735) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var loop736 = function(i737, j738) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (index_test734(i737) !== false) {
              if (M1.__lt_(j738, snippet_length_max732) !== false) {
                var ch739 = M1.string_ref(input676, index_move735(i737));
                var or_part740 = M1.char_eq__p(ch739, $rjs_core.Char.charFromCodepoint(10));
                if (or_part740 !== false) {
                  var if_res398 = or_part740;
                } else {
                  var if_res398 = M1.char_eq__p(ch739, $rjs_core.Char.charFromCodepoint(13));
                }
                var if_res399 = M1.not(if_res398);
              } else {
                var if_res399 = false;
              }
              var if_res400 = if_res399;
            } else {
              var if_res400 = false;
            }
            if (if_res400 !== false) {
              var if_res401 = loop736(index_move735(i737), j738 + 1);
            } else {
              var if_res401 = i737;
            }
            return if_res401;
          };
          return loop736(error_pos682, 0);
        };
        var find_line_start741 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder733(function(i742) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__gt_(i742, 0);
          }, M1.sub1);
        };
        var find_line_end743 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder733(function(i744) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__lt_(i744, input_len677 - 1);
          }, M1.add1);
        };
        var build_snippet745 = function(start746, end747) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M1.string_append(M1.substring(input676, start746, M1.min(end747, input_len677)), $rjs_core.UString.makeInternedImmutable("\n"), M1.make_string(error_pos682 - start746, $rjs_core.Char.charFromCodepoint(32)), $rjs_core.UString.makeInternedImmutable("^"));
        };
        var line_start748 = find_line_start741();
        var line_end749 = find_line_end743();
        if (M1.__lt_(line_end749 - line_start748, snippet_length_max732) !== false) {
          var if_res402 = build_snippet745(line_start748, line_end749 + 1);
        } else {
          var s_len750 = error_pos682 - line_start748;
          var e_len751 = (line_end749 + 1) - error_pos682;
          var half_max752 = snippet_length_max732 / 2;
          var s753 = M1.min(s_len750, half_max752);
          var e754 = M1.min(e_len751, half_max752);
          var ss755 = s753 + (half_max752 - e754);
          var ee756 = e754 + (half_max752 - s753);
          var if_res402 = build_snippet745(error_pos682 - ss755, error_pos682 + ee756);
        }
        return if_res402;
      };
      return do_eof_check728(match_automaton688(start673));
    };
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.cache_item_p = cache_item_p;
  __rjs_quoted__.cache_item_cr = cache_item_cr;
  __rjs_quoted__.cache_item_pos = cache_item_pos;
  __rjs_quoted__.cache_item_val = cache_item_val;
  __rjs_quoted__.cache_item1 = cache_item1;
  __rjs_quoted__.struct_cache_item = struct_cache_item;
  __rjs_quoted__.cache_item_col = cache_item_col;
  __rjs_quoted__.cache_item_line = cache_item_line;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_parser() {
      return make_parser;
    }
  };
})();
var $__modules_47_grammar_45_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/grammar-parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_parser_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var automata = M0.vector(M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("grammar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(1, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("definition"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 2, false), M2.__rjs_quoted__.edge1(18, 2, false), M2.__rjs_quoted__.edge1(19, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alternation"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(20, 2, false)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sequence"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("unit"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(5, 0, false), M2.__rjs_quoted__.edge1(6, 0, false), M2.__rjs_quoted__.edge1(8, 1, false), M2.__rjs_quoted__.edge1(21, 3, false), M2.__rjs_quoted__.edge1(7, 2, false), M2.__rjs_quoted__.edge1(9, 2, false), M2.__rjs_quoted__.edge1(10, 2, false), M2.__rjs_quoted__.edge1(12, 2, false), M2.__rjs_quoted__.edge1(16, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(28, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(22, 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("prefix"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(33), $rjs_core.Char.charFromCodepoint(38), M0.cons($rjs_core.Char.charFromCodepoint(42), $rjs_core.Char.charFromCodepoint(43)), $rjs_core.Char.charFromCodepoint(58), $rjs_core.Char.charFromCodepoint(63)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("label"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("action"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(64), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 3, true), M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(23, 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(62), 7, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("identifier"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false), M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("literal"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(30, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(29, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("caseLiteral"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(32, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(31, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("lChar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(34, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34), $rjs_core.Char.charFromCodepoint(39), $rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(33, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("charClass"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(91), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(35, 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(13, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("range"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 1, false), M2.__rjs_quoted__.edge1(15, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("char"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(38, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(93)), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(37, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(36, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("hex"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(117), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(123), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 5, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 7, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 8, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 9, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("wildCard"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(46), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("leftArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("pruneArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("voidArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(58), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alt"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(124), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("open"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(40), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("close"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(41), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("comma"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(44), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(35), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(40, 2, false), M2.__rjs_quoted__.edge1(26, 3, false), M2.__rjs_quoted__.edge1(39, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("mComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(25, 2, false), M2.__rjs_quoted__.edge1(41, 3, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 5, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("endOfLine"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 1, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("ws"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(9), $rjs_core.Char.charFromCodepoint(32)), 0, false), M2.__rjs_quoted__.edge1(26, 0, false), M2.__rjs_quoted__.edge1(24, 0, false), M2.__rjs_quoted__.edge1(25, 0, false)), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 1, false), M2.__rjs_quoted__.edge1(18, 1, false), M2.__rjs_quoted__.edge1(19, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")));
  var grammar_parser = M1.make_parser(0, true, automata);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get grammar_parser() {
      return grammar_parser;
    }
  };
})();
var $__modules_47_racketscript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/racketscript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__;
  var M1 = $__modules_47_gen_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var M4 = $__modules_47_transform_46_rkt_46_js__;
  var M5 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M6 = $__modules_47_javascript_46_rkt_46_js__;
  var M7 = $__modules_47_grammar_45_parser_46_rkt_46_js__;
  var syntax_error_message = function(error1) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.string_append($rjs_core.UString.makeInternedImmutable("syntax error in grammar: "), M5.parse_error__gt_string(error1));
  };
  var transform_and_set_start42 = function(grammar_or_error33, start_name14, start_name25) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var grammar_or_error6 = grammar_or_error33;
    if (start_name25 !== false) {
      var if_res1 = start_name14;
    } else {
      var if_res1 = $rjs_core.UString.makeInternedImmutable("");
    }
    var start_name7 = if_res1;
    if (M5.ast_p(grammar_or_error6) !== false) {
      var grammar8 = grammar_or_error6;
      M4.transform_grammar(grammar8);
      M1.start_nt_bang_(start_name7, grammar8);
      var if_res2 = grammar8;
    } else {
      var if_res2 = grammar_or_error6;
    }
    return if_res2;
  };
  var cl3 = function(grammar_or_error9) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error9, false, false);
  };
  var cl4 = function(grammar_or_error10, start_name111) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error10, start_name111, true);
  };
  var transform_and_set_start = $rjs_core.attachProcedureArity(function() {
    var fixed_lam5 = {
      '1': cl3,
      '2': cl4
    }[arguments.length];
    if (fixed_lam5 !== undefined) {
      return fixed_lam5.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var js_result = function(grammar_or_error12, fn13) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M5.ast_p(grammar_or_error12) !== false) {
      var if_res6 = [M0.js_string(fn13(grammar_or_error12)), null];
    } else {
      var if_res6 = [null, M0.js_string(syntax_error_message(grammar_or_error12))];
    }
    return if_res6;
  };
  var grammar_to_ast_string = function(grammar_src14) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(M7.grammar_parser(M0.racket_string(grammar_src14)), M5.ast__gt_string);
  };
  var grammar_to_transformed_ast_string = function(grammar_src15) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M7.grammar_parser(M0.racket_string(grammar_src15))), M5.ast__gt_string);
  };
  var generate_parser = function(grammar_src16) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M7.grammar_parser(M0.racket_string(grammar_src16))), M6.gen_javascript_parser);
  };
  window.waxeyeCompiler = {
    'grammarToAstString': grammar_to_ast_string,
    'grammarToTransformedAstString': grammar_to_transformed_ast_string,
    'generateParser': generate_parser
  };
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
