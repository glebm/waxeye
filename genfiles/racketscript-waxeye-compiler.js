var $__runtime_47_core_47_raw_95_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/raw_hashing.js";
  function hash(o) {
    if (o === null)
      return 0;
    switch ((typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o))) {
      case 'number':
        return hashNumber(o);
      case 'string':
        return hashString(o);
      case 'boolean':
        return o ? 1 : -1;
      case 'undefined':
        return 0;
      case 'object':
      case 'function':
        return hashObjectIdentity(o);
      default:
        return hashString(o.toString());
    }
  }
  function hashString(s) {
    var h = 0;
    var n = s.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + s.charCodeAt(i));
    }
    return h;
  }
  var kBuf = new ArrayBuffer(8);
  var kBufAsF64 = new Float64Array(kBuf);
  var kBufAsI32 = new Int32Array(kBuf);
  function hashNumber(n) {
    if (~~n === n) {
      return ~~n;
    }
    kBufAsF64[0] = n;
    return kBufAsI32[0] ^ kBufAsI32[1];
  }
  var objectIds = new WeakMap();
  var currentId = 0;
  function hashObjectIdentity(o) {
    var result = objectIds.get(o);
    if (result === undefined) {
      currentId = ~~(currentId + 1);
      objectIds.set(o, currentId);
      return currentId;
    }
    return result;
  }
  function hashIntArray(a) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + a[i]);
    }
    return h;
  }
  function hashArray(a, valueToIntFn) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + valueToIntFn(a[i]));
    }
    return h;
  }
  return {
    get hash() {
      return hash;
    },
    get hashString() {
      return hashString;
    },
    get hashNumber() {
      return hashNumber;
    },
    get hashObjectIdentity() {
      return hashObjectIdentity;
    },
    get hashIntArray() {
      return hashIntArray;
    },
    get hashArray() {
      return hashArray;
    }
  };
})();
var $__runtime_47_core_47_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/primitive.js";
  var hashString = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashString;
  var Primitive = function() {
    function Primitive() {}
    return ($traceurRuntime.createClass)(Primitive, {hashForEqual: function() {
        return hashString(this.toString());
      }}, {});
  }();
  function check(v) {
    return (v instanceof Primitive);
  }
  return {
    get Primitive() {
      return Primitive;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mini_native_output_string_port.js";
  var MiniNativeOutputStringPort = function() {
    function MiniNativeOutputStringPort() {
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(MiniNativeOutputStringPort, {
      consume: function(nativeString) {
        this._buffer.push(nativeString);
      },
      getOutputString: function() {
        return this._buffer.join('');
      }
    }, {});
  }();
  return {get MiniNativeOutputStringPort() {
      return MiniNativeOutputStringPort;
    }};
})();
var $__runtime_47_core_47_bytes_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/bytes.js";
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextDecoder = (typeof window === 'undefined') ? require('util').TextDecoder : window.TextDecoder;
  function check(bs) {
    return (typeof bs === 'undefined' ? 'undefined' : $traceurRuntime.typeof(bs)) === 'object' && bs !== null && bs.constructor === Uint8Array;
  }
  function eq(a, b) {
    if (a.length !== b.length)
      return false;
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function fromIntArray(ints) {
    return new Uint8Array(ints);
  }
  var utf8Decoder = new TextDecoder('utf-8');
  function toString(bytes) {
    return utf8Decoder.decode(bytes);
  }
  function displayNativeString(out, bytes) {
    out.consume(toString(bytes));
  }
  function hashForEqual(bytes) {
    return hashIntArray(bytes);
  }
  return {
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get fromIntArray() {
      return fromIntArray;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_char_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/char.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Char = function($__super) {
    function Char(codepoint, nativeString) {
      $traceurRuntime.superConstructor(Char).call(this);
      this.codepoint = codepoint;
      this._nativeString = nativeString;
    }
    return ($traceurRuntime.createClass)(Char, {
      equals: function(v) {
        return check(v) && eq(this, v);
      },
      isImmutable: function() {
        return true;
      },
      valueOf: function() {
        return this.codepoint;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = String.fromCodePoint(this.codepoint);
        }
        return this._nativeString;
      },
      hashForEqual: function() {
        return this.codepoint;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      writeNativeString: function(out) {
        var c = this.codepoint;
        switch (c) {
          case 0:
            out.consume('#\\nul');
            break;
          case 8:
            out.consume('#\\backspace');
            break;
          case 9:
            out.consume('#\\tab');
            break;
          case 10:
            out.consume('#\\newline');
            break;
          case 11:
            out.consume('#\\vtab');
            break;
          case 12:
            out.consume('#\\page');
            break;
          case 13:
            out.consume('#\\return');
            break;
          case 32:
            out.consume('#\\space');
            break;
          case 127:
            out.consume('#\\rubout');
            break;
          default:
            if (isGraphicCodepoint(c)) {
              out.consume(("#\\" + this.toString()));
            } else {
              out.consume(c > 0xFFFF ? ("#\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("#\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
            }
        }
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      }
    }, {}, $__super);
  }(Primitive);
  var INTERN_CACHE_SIZE = 256;
  var internedCache = new Array(INTERN_CACHE_SIZE);
  function charFromCodepoint(codepoint) {
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, null);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, null);
  }
  function charFromNativeString(s) {
    var codepoint = s.codePointAt(0);
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, s);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, s);
  }
  function check(char) {
    return (typeof char === 'undefined' ? 'undefined' : $traceurRuntime.typeof(char)) === 'object' && char !== null && char.constructor === Char;
  }
  function eq(a, b) {
    return a.codepoint === b.codepoint;
  }
  function charToInteger(c) {
    return c.codepoint;
  }
  function integerToChar(k) {
    return charFromCodepoint(k);
  }
  function charUtf8Length(c) {
    var cp = c.codepoint;
    if (cp < 0x80) {
      return 1;
    } else if (cp < 0x800) {
      return 2;
    } else if (cp < 0x10000) {
      return 3;
    } else if (cp < 0x200000) {
      return 4;
    } else if (cp < 0x4000000) {
      return 5;
    }
    return 6;
  }
  function isGraphicCodepoint(c) {
    return (c > 32 && c < 127 || (c > 160 && c < 896 && !(c === 173 || c > 887 && c < 890)) || (c > 899 && c < 1480 && !(c === 1328 || c > 1366 && c < 1369 || c === 1376 || c === 1416 || c > 1418 && c < 1421 || c === 1424 || (c > 906 && c < 910 && c !== 908) || c === 930)) || c > 1487 && c < 1515 || c > 1519 && c < 1525 || (c > 1541 && c < 1970 && !(c > 1563 && c < 1566 || c === 1757 || c > 1805 && c < 1808 || c > 1866 && c < 1869)) || c > 1983 && c < 2043);
  }
  function isBlankCodepoint(c) {
    return (c === 9 || c === 32 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c === 8239 || c === 8287 || c === 12288);
  }
  function isWhitespaceCodepoint(c) {
    return (c > 8 && c < 14 || c === 32 || c === 133 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c > 8231 && c < 8234 || c === 8239 || c === 8287 || c === 12288);
  }
  return {
    get Char() {
      return Char;
    },
    get charFromCodepoint() {
      return charFromCodepoint;
    },
    get charFromNativeString() {
      return charFromNativeString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get charToInteger() {
      return charToInteger;
    },
    get integerToChar() {
      return integerToChar;
    },
    get charUtf8Length() {
      return charUtf8Length;
    },
    get isGraphicCodepoint() {
      return isGraphicCodepoint;
    },
    get isBlankCodepoint() {
      return isBlankCodepoint;
    },
    get isWhitespaceCodepoint() {
      return isWhitespaceCodepoint;
    }
  };
})();
var $__runtime_47_third_45_party_47_hamt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/third-party/hamt.js";
  var _typeof = typeof Symbol === "function" && $traceurRuntime.typeof(Symbol.iterator) === "symbol" ? function(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  };
  var hamt = {};
  var SIZE = 5;
  var BUCKET_SIZE = Math.pow(2, SIZE);
  var MASK = BUCKET_SIZE - 1;
  var MAX_INDEX_NODE = BUCKET_SIZE / 2;
  var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
  var nothing = {};
  var constant = function constant(x) {
    return function() {
      return x;
    };
  };
  var hash = hamt.hash = function(str) {
    var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);
    if (type === 'number')
      return str;
    if (type !== 'string')
      str += '';
    var hash = 0;
    for (var i = 0,
        len = str.length; i < len; ++i) {
      var c = str.charCodeAt(i);
      hash = (hash << 5) - hash + c | 0;
    }
    return hash;
  };
  var popcount = function popcount(x) {
    x -= x >> 1 & 0x55555555;
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x += x >> 8;
    x += x >> 16;
    return x & 0x7f;
  };
  var hashFragment = function hashFragment(shift, h) {
    return h >>> shift & MASK;
  };
  var toBitmap = function toBitmap(x) {
    return 1 << x;
  };
  var fromBitmap = function fromBitmap(bitmap, bit) {
    return popcount(bitmap & bit - 1);
  };
  var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {
    var out = arr;
    if (!mutate) {
      var len = arr.length;
      out = new Array(len);
      for (var i = 0; i < len; ++i) {
        out[i] = arr[i];
      }
    }
    out[at] = v;
    return out;
  };
  var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {
    var newLen = arr.length - 1;
    var i = 0;
    var g = 0;
    var out = arr;
    if (mutate) {
      i = g = at;
    } else {
      out = new Array(newLen);
      while (i < at) {
        out[g++] = arr[i++];
      }
    }
    ++i;
    while (i <= newLen) {
      out[g++] = arr[i++];
    }
    if (mutate) {
      out.length = newLen;
    }
    return out;
  };
  var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {
    var len = arr.length;
    if (mutate) {
      var _i = len;
      while (_i >= at) {
        arr[_i--] = arr[_i];
      }
      arr[at] = v;
      return arr;
    }
    var i = 0,
        g = 0;
    var out = new Array(len + 1);
    while (i < at) {
      out[g++] = arr[i++];
    }
    out[at] = v;
    while (i < len) {
      out[++g] = arr[i++];
    }
    return out;
  };
  var LEAF = 1;
  var COLLISION = 2;
  var INDEX = 3;
  var ARRAY = 4;
  var empty = {__hamt_isEmpty: true};
  var isEmptyNode = function isEmptyNode(x) {
    return x === empty || x && x.__hamt_isEmpty;
  };
  var Leaf = function Leaf(edit, hash, key, value) {
    return {
      type: LEAF,
      edit: edit,
      hash: hash,
      key: key,
      value: value,
      _modify: Leaf__modify
    };
  };
  var Collision = function Collision(edit, hash, children) {
    return {
      type: COLLISION,
      edit: edit,
      hash: hash,
      children: children,
      _modify: Collision__modify
    };
  };
  var IndexedNode = function IndexedNode(edit, mask, children) {
    return {
      type: INDEX,
      edit: edit,
      mask: mask,
      children: children,
      _modify: IndexedNode__modify
    };
  };
  var ArrayNode = function ArrayNode(edit, size, children) {
    return {
      type: ARRAY,
      edit: edit,
      size: size,
      children: children,
      _modify: ArrayNode__modify
    };
  };
  var isLeaf = function isLeaf(node) {
    return node === empty || node.type === LEAF || node.type === COLLISION;
  };
  var expand = function expand(edit, frag, child, bitmap, subNodes) {
    var arr = [];
    var bit = bitmap;
    var count = 0;
    for (var i = 0; bit; ++i) {
      if (bit & 1)
        arr[i] = subNodes[count++];
      bit >>>= 1;
    }
    arr[frag] = child;
    return ArrayNode(edit, count + 1, arr);
  };
  var pack = function pack(edit, count, removed, elements) {
    var children = new Array(count - 1);
    var g = 0;
    var bitmap = 0;
    for (var i = 0,
        len = elements.length; i < len; ++i) {
      if (i !== removed) {
        var elem = elements[i];
        if (elem && !isEmptyNode(elem)) {
          children[g++] = elem;
          bitmap |= 1 << i;
        }
      }
    }
    return IndexedNode(edit, bitmap, children);
  };
  var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {
    if (h1 === h2)
      return Collision(edit, h1, [n2, n1]);
    var subH1 = hashFragment(shift, h1);
    var subH2 = hashFragment(shift, h2);
    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
  };
  var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {
    var len = list.length;
    for (var i = 0; i < len; ++i) {
      var child = list[i];
      if (keyEq(k, child.key)) {
        var value = child.value;
        var _newValue = f(value);
        if (_newValue === value)
          return list;
        if (_newValue === nothing) {
          --size.value;
          return arraySpliceOut(mutate, i, list);
        }
        return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);
      }
    }
    var newValue = f();
    if (newValue === nothing)
      return list;
    ++size.value;
    return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);
  };
  var canEditNode = function canEditNode(edit, node) {
    return edit === node.edit;
  };
  var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {
    if (keyEq(k, this.key)) {
      var _v = f(this.value);
      if (_v === this.value)
        return this;
      else if (_v === nothing) {
        --size.value;
        return empty;
      }
      if (canEditNode(edit, this)) {
        this.value = _v;
        return this;
      }
      return Leaf(edit, h, k, _v);
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {
    if (h === this.hash) {
      var canEdit = canEditNode(edit, this);
      var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
      if (list === this.children)
        return this;
      return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {
    var mask = this.mask;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var bit = toBitmap(frag);
    var indx = fromBitmap(mask, bit);
    var exists = mask & bit;
    var current = exists ? children[indx] : empty;
    var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (current === child)
      return this;
    var canEdit = canEditNode(edit, this);
    var bitmap = mask;
    var newChildren = void 0;
    if (exists && isEmptyNode(child)) {
      bitmap &= ~bit;
      if (!bitmap)
        return empty;
      if (children.length <= 2 && isLeaf(children[indx ^ 1]))
        return children[indx ^ 1];
      newChildren = arraySpliceOut(canEdit, indx, children);
    } else if (!exists && !isEmptyNode(child)) {
      if (children.length >= MAX_INDEX_NODE)
        return expand(edit, frag, child, mask, children);
      bitmap |= bit;
      newChildren = arraySpliceIn(canEdit, indx, child, children);
    } else {
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return IndexedNode(edit, bitmap, newChildren);
  };
  var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {
    var count = this.size;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var child = children[frag];
    var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (child === newChild)
      return this;
    var canEdit = canEditNode(edit, this);
    var newChildren = void 0;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      --count;
      if (count <= MIN_ARRAY_NODE)
        return pack(edit, count, frag, children);
      newChildren = arrayUpdate(canEdit, frag, empty, children);
    } else {
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return ArrayNode(edit, count, newChildren);
  };
  empty._modify = function(edit, keyEq, shift, f, h, k, size) {
    var v = f();
    if (v === nothing)
      return empty;
    ++size.value;
    return Leaf(edit, h, k, v);
  };
  function Map(editable, edit, config, root, size) {
    this._editable = editable;
    this._edit = edit;
    this._config = config;
    this._root = root;
    this._size = size;
  }
  ;
  Map.prototype.setTree = function(newRoot, newSize) {
    if (this._editable) {
      this._root = newRoot;
      this._size = newSize;
      return this;
    }
    return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);
  };
  var tryGetHash = hamt.tryGetHash = function(alt, hash, key, map) {
    var node = map._root;
    var shift = 0;
    var keyEq = map._config.keyEq;
    while (true) {
      switch (node.type) {
        case LEAF:
          {
            return keyEq(key, node.key) ? node.value : alt;
          }
        case COLLISION:
          {
            if (hash === node.hash) {
              var children = node.children;
              for (var i = 0,
                  len = children.length; i < len; ++i) {
                var child = children[i];
                if (keyEq(key, child.key))
                  return child.value;
              }
            }
            return alt;
          }
        case INDEX:
          {
            var frag = hashFragment(shift, hash);
            var bit = toBitmap(frag);
            if (node.mask & bit) {
              node = node.children[fromBitmap(node.mask, bit)];
              shift += SIZE;
              break;
            }
            return alt;
          }
        case ARRAY:
          {
            node = node.children[hashFragment(shift, hash)];
            if (node) {
              shift += SIZE;
              break;
            }
            return alt;
          }
        default:
          return alt;
      }
    }
  };
  Map.prototype.tryGetHash = function(alt, hash, key) {
    return tryGetHash(alt, hash, key, this);
  };
  var tryGet = hamt.tryGet = function(alt, key, map) {
    return tryGetHash(alt, map._config.hash(key), key, map);
  };
  Map.prototype.tryGet = function(alt, key) {
    return tryGet(alt, key, this);
  };
  var getHash = hamt.getHash = function(hash, key, map) {
    return tryGetHash(undefined, hash, key, map);
  };
  Map.prototype.getHash = function(hash, key) {
    return getHash(hash, key, this);
  };
  var get = hamt.get = function(key, map) {
    return tryGetHash(undefined, map._config.hash(key), key, map);
  };
  Map.prototype.get = function(key, alt) {
    return tryGet(alt, key, this);
  };
  var hasHash = hamt.has = function(hash, key, map) {
    return tryGetHash(nothing, hash, key, map) !== nothing;
  };
  Map.prototype.hasHash = function(hash, key) {
    return hasHash(hash, key, this);
  };
  var has = hamt.has = function(key, map) {
    return hasHash(map._config.hash(key), key, map);
  };
  Map.prototype.has = function(key) {
    return has(key, this);
  };
  var defKeyCompare = function defKeyCompare(x, y) {
    return x === y;
  };
  hamt.make = function(config) {
    return new Map(0, 0, {
      keyEq: config && config.keyEq || defKeyCompare,
      hash: config && config.hash || hash
    }, empty, 0);
  };
  hamt.empty = hamt.make();
  var isEmpty = hamt.isEmpty = function(map) {
    return map && !!isEmptyNode(map._root);
  };
  Map.prototype.isEmpty = function() {
    return isEmpty(this);
  };
  var modifyHash = hamt.modifyHash = function(f, hash, key, map) {
    var size = {value: map._size};
    var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);
    return map.setTree(newRoot, size.value);
  };
  Map.prototype.modifyHash = function(hash, key, f) {
    return modifyHash(f, hash, key, this);
  };
  var modify = hamt.modify = function(f, key, map) {
    return modifyHash(f, map._config.hash(key), key, map);
  };
  Map.prototype.modify = function(key, f) {
    return modify(f, key, this);
  };
  var setHash = hamt.setHash = function(hash, key, value, map) {
    return modifyHash(constant(value), hash, key, map);
  };
  Map.prototype.setHash = function(hash, key, value) {
    return setHash(hash, key, value, this);
  };
  var set = hamt.set = function(key, value, map) {
    return setHash(map._config.hash(key), key, value, map);
  };
  Map.prototype.set = function(key, value) {
    return set(key, value, this);
  };
  var del = constant(nothing);
  var removeHash = hamt.removeHash = function(hash, key, map) {
    return modifyHash(del, hash, key, map);
  };
  Map.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {
    return removeHash(hash, key, this);
  };
  var remove = hamt.remove = function(key, map) {
    return removeHash(map._config.hash(key), key, map);
  };
  Map.prototype.remove = Map.prototype.delete = function(key) {
    return remove(key, this);
  };
  var beginMutation = hamt.beginMutation = function(map) {
    return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
  };
  Map.prototype.beginMutation = function() {
    return beginMutation(this);
  };
  var endMutation = hamt.endMutation = function(map) {
    map._editable = map._editable && map._editable - 1;
    return map;
  };
  Map.prototype.endMutation = function() {
    return endMutation(this);
  };
  var mutate = hamt.mutate = function(f, map) {
    var transient = beginMutation(map);
    f(transient);
    return endMutation(transient);
  };
  Map.prototype.mutate = function(f) {
    return mutate(f, this);
  };
  var appk = function appk(k) {
    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
  };
  var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {
    while (i < len) {
      var child = children[i++];
      if (child && !isEmptyNode(child))
        return lazyVisit(child, f, [len, children, i, f, k]);
    }
    return appk(k);
  };
  var lazyVisit = function lazyVisit(node, f, k) {
    switch (node.type) {
      case LEAF:
        return {
          value: f(node),
          rest: k
        };
      case COLLISION:
      case ARRAY:
      case INDEX:
        var children = node.children;
        return lazyVisitChildren(children.length, children, 0, f, k);
      default:
        return appk(k);
    }
  };
  var DONE = {done: true};
  function MapIterator(v) {
    this.v = v;
  }
  ;
  MapIterator.prototype.next = function() {
    if (!this.v)
      return DONE;
    var v0 = this.v;
    this.v = appk(v0.rest);
    return v0;
  };
  MapIterator.prototype[Symbol.iterator] = function() {
    return this;
  };
  var visit = function visit(map, f) {
    return new MapIterator(lazyVisit(map._root, f));
  };
  var buildPairs = function buildPairs(x) {
    return [x.key, x.value];
  };
  var entries = hamt.entries = function(map) {
    return visit(map, buildPairs);
  };
  Map.prototype.entries = Map.prototype[Symbol.iterator] = function() {
    return entries(this);
  };
  var buildKeys = function buildKeys(x) {
    return x.key;
  };
  var keys = hamt.keys = function(map) {
    return visit(map, buildKeys);
  };
  Map.prototype.keys = function() {
    return keys(this);
  };
  var buildValues = function buildValues(x) {
    return x.value;
  };
  var values = hamt.values = Map.prototype.values = function(map) {
    return visit(map, buildValues);
  };
  Map.prototype.values = function() {
    return values(this);
  };
  var fold = hamt.fold = function(f, z, m) {
    var root = m._root;
    if (root.type === LEAF)
      return f(z, root.value, root.key);
    var toVisit = [root.children];
    var children = void 0;
    while (children = toVisit.pop()) {
      for (var i = 0,
          len = children.length; i < len; ) {
        var child = children[i++];
        if (child && child.type) {
          if (child.type === LEAF)
            z = f(z, child.value, child.key);
          else
            toVisit.push(child.children);
        }
      }
    }
    return z;
  };
  Map.prototype.fold = function(f, z) {
    return fold(f, z, this);
  };
  var forEach = hamt.forEach = function(f, map) {
    return fold(function(_, value, key) {
      return f(value, key, map);
    }, null, map);
  };
  Map.prototype.forEach = function(f) {
    return forEach(f, this);
  };
  var count = hamt.count = function(map) {
    return map._size;
  };
  Map.prototype.count = function() {
    return count(this);
  };
  Object.defineProperty(Map.prototype, 'size', {get: Map.prototype.count});
  ;
  return {get hamt() {
      return hamt;
    }};
})();
var $__runtime_47_core_47_lib_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/lib.js";
  ;
  function argumentsToArray(args) {
    return Array.prototype.slice.call(args, 0);
  }
  function argumentsSlice(a, i) {
    return [].slice.call(a, i);
  }
  function attachReadOnlyProperty(o, k, v) {
    return Object.defineProperty(o, k, {
      value: v,
      writable: false,
      configurable: false
    });
  }
  function internedMake(f) {
    var cache = new Map();
    return function(v) {
      v = v.toString();
      var result = cache.get(v);
      if (result === undefined) {
        result = f(v);
        cache.set(v, result);
      }
      return result;
    };
  }
  return {
    get hamt() {
      return $__runtime_47_third_45_party_47_hamt_46_js__.hamt;
    },
    get argumentsToArray() {
      return argumentsToArray;
    },
    get argumentsSlice() {
      return argumentsSlice;
    },
    get attachReadOnlyProperty() {
      return attachReadOnlyProperty;
    },
    get internedMake() {
      return internedMake;
    }
  };
})();
var $__runtime_47_core_47_procedure_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/procedure.js";
  function attachProcedureArity(fn, arity) {
    fn.__rjs_arityValue = arity || fn.length;
    return fn;
  }
  function check(v) {
    return typeof v === 'function';
  }
  function toString(f) {
    return f.name ? ("#<procedure:" + f.name + ">") : '#<procedure>';
  }
  function displayNativeString(out, f) {
    out.consume(toString(f));
  }
  return {
    get attachProcedureArity() {
      return attachProcedureArity;
    },
    get check() {
      return check;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    }
  };
})();
var $__runtime_47_core_47_print_95_native_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_native_string.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  function displayNativeString(out, v) {
    if (v === true) {
      out.consume('#t');
    } else if (v === false) {
      out.consume('#f');
    } else if (v === undefined || v === null) {
      out.consume('#<void>');
    } else if (Primitive.check(v)) {
      v.displayNativeString(out);
    } else if (Bytes.check(v)) {
      Bytes.displayNativeString(out, v);
    } else if (Procedure.check(v)) {
      if (v.__rjs_struct_object) {
        v.__rjs_struct_object.displayNativeString(out);
      } else {
        Procedure.displayNativeString(out, v);
      }
    } else {
      out.consume(v.toString());
    }
  }
  function writeNativeString(out, v) {
    if (Primitive.check(v)) {
      v.writeNativeString(out);
    } else {
      displayNativeString(out, v);
    }
  }
  function printNativeString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printNativeString(out);
    } else {
      writeNativeString(out, v);
    }
  }
  return {
    get displayNativeString() {
      return displayNativeString;
    },
    get writeNativeString() {
      return writeNativeString;
    },
    get printNativeString() {
      return printNativeString;
    }
  };
})();
var $__runtime_47_core_47_errors_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/errors.js";
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var printNativeString = ($__runtime_47_core_47_print_95_native_95_string_46_js__).printNativeString;
  function printError(out, msg, args) {
    out.consume(msg);
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (args)[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var arg = $__2.value;
        {
          out.consume(' ');
          if (typeof arg === 'string') {
            out.consume(arg);
          } else {
            printNativeString(out, arg, true, 0);
          }
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
  }
  function makeError(name) {
    var $__0 = this;
    var e = function(msg) {
      for (var args = [],
          $__8 = 1; $__8 < arguments.length; $__8++)
        args[$__8 - 1] = arguments[$__8];
      this.name = name;
      var stringOut = new MiniNativeOutputStringPort();
      printError(stringOut, msg, args);
      this.message = stringOut.getOutputString();
      this.stack = (new Error()).stack;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }
    };
    e.prototype = Object.create(Error.prototype);
    e.prototype.constructor = e;
    return function() {
      for (var args = [],
          $__9 = 0; $__9 < arguments.length; $__9++)
        args[$__9] = arguments[$__9];
      return new (Function.prototype.bind.apply(e, [$__0].concat(args)))();
    };
  }
  var racketCoreError = makeError('RacketCoreError');
  var racketContractError = makeError('RacketContractError');
  return {
    get racketCoreError() {
      return racketCoreError;
    },
    get racketContractError() {
      return racketContractError;
    }
  };
})();
var $__runtime_47_core_47_unicode_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/unicode_string.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextEncoder = (typeof window === 'undefined') ? require('util').TextEncoder : window.TextEncoder;
  var UString = function($__super) {
    function UString(chars, nativeString) {
      $traceurRuntime.superConstructor(UString).call(this);
      this.chars = chars;
      this._nativeString = nativeString;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(UString, {
      get length() {
        return this.chars.length;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = this.chars.join('');
        }
        return this._nativeString;
      },
      charAt: function(i) {
        this.checkIndexLtLength(i);
        return this.chars[i];
      },
      toLowerCase: function() {
        return makeMutable(this.toString().toLowerCase());
      },
      toUpperCase: function() {
        return makeMutable(this.toString().toUpperCase());
      },
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), null);
      },
      split: function(sep) {
        return this.toString().split(sep).map(function(s) {
          return makeMutable(s);
        });
      },
      checkIndexLtLength: function(i) {
        if (i >= this.length) {
          if (this.length > 0) {
            throw racketContractError(("string-ref: index is out of range\n  index: " + i + "\n  valid range: [0, " + (this.length - 1) + "]\n  string: "), this);
          } else {
            throw racketContractError(("string-ref: index is out of range for empty string\n  index: " + i));
          }
        }
      },
      valueOf: function() {
        return this.toString();
      },
      equals: function(v) {
        return check(v) && this.toString() === v.toString();
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = hashIntArray(this.chars);
        }
        return this._cachedHashCode;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      displayUString: function(out) {
        out.consume(this);
      },
      writeNativeString: function(out) {
        out.consume('"');
        var $__7 = true;
        var $__8 = false;
        var $__9 = undefined;
        try {
          for (var $__5 = void 0,
              $__4 = (this.chars)[Symbol.iterator](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
            var char = $__5.value;
            {
              var c = char.codepoint;
              switch (c) {
                case 7:
                  out.consume('\\a');
                  break;
                case 8:
                  out.consume('\\b');
                  break;
                case 9:
                  out.consume('\\t');
                  break;
                case 11:
                  out.consume('\\v');
                  break;
                case 12:
                  out.consume('\\f');
                  break;
                case 10:
                  out.consume('\\n');
                  break;
                case 13:
                  out.consume('\\r');
                  break;
                case 27:
                  out.consume('\\e');
                  break;
                case 34:
                  out.consume('\\"');
                  break;
                case 92:
                  out.consume('\\\\');
                  break;
                default:
                  if (Char.isGraphicCodepoint(c) || Char.isBlankCodepoint(c)) {
                    out.consume(char.toString());
                  } else {
                    out.consume(c > 0xFFFF ? ("\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
                  }
              }
            }
          }
        } catch ($__10) {
          $__8 = true;
          $__9 = $__10;
        } finally {
          try {
            if (!$__7 && $__4.return != null) {
              $__4.return();
            }
          } finally {
            if ($__8) {
              throw $__9;
            }
          }
        }
        out.consume('"');
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      },
      isValidInteger: function(radix) {
        var chars = this.chars;
        var startFrom = chars[0].codepoint === 45 ? 1 : 0;
        if (radix > 10) {
          var maxLowercase = 86 + radix;
          var maxUppercase = maxLowercase - 32;
          for (var i = startFrom; i < chars.length; ++i) {
            var cp = chars[i].codepoint;
            if (cp < 48 || cp > maxLowercase || cp > maxUppercase && cp < 97 || cp > 57 && cp < 65)
              return false;
          }
        } else {
          var max = 47 + radix;
          for (var i$__14 = startFrom; i$__14 < chars.length; ++i$__14) {
            var cp$__15 = chars[i$__14].codepoint;
            if (cp$__15 < 48 || cp$__15 > max)
              return false;
          }
        }
        return true;
      }
    }, {}, $__super);
  }(Primitive);
  var ImmutableUString = function($__super) {
    function ImmutableUString() {
      $traceurRuntime.superConstructor(ImmutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableUString, {isImmutable: function() {
        return true;
      }}, {}, $__super);
  }(UString);
  var ImmutableBMPString = function($__super) {
    function ImmutableBMPString() {
      $traceurRuntime.superConstructor(ImmutableBMPString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableBMPString, {
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), this.toString().substring(start, end));
      },
      writeNativeString: function(out) {
        out.consume(JSON.stringify(this.toString()));
      }
    }, {}, $__super);
  }(ImmutableUString);
  var MutableUString = function($__super) {
    function MutableUString() {
      $traceurRuntime.superConstructor(MutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(MutableUString, {
      isImmutable: function() {
        return false;
      },
      setCharAt: function(i, char) {
        this.checkIndexLtLength(i);
        if (!Char.eq(char, this.chars[i])) {
          this.chars[i] = char;
          this._nativeString = null;
          this._cachedHashCode = null;
        }
      }
    }, {}, $__super);
  }(UString);
  function nativeStringToChars(nativeString) {
    return Array.from(nativeString, Char.charFromNativeString);
  }
  var makeInternedImmutable = internedMake(function(nativeString) {
    return makeImmutable(nativeString);
  });
  var make = makeInternedImmutable;
  function makeImmutable(nativeString) {
    return makeImmutableFromCharsAndNativeString(nativeStringToChars(nativeString), nativeString);
  }
  function makeImmutableFromCharsAndNativeString(chars, nativeString) {
    return chars.length === nativeString.length ? new ImmutableBMPString(chars, nativeString) : new ImmutableUString(chars, nativeString);
  }
  function makeMutable(nativeString) {
    return new MutableUString(nativeStringToChars(nativeString), nativeString);
  }
  function makeMutableFromChars(chars) {
    return new MutableUString(chars, null);
  }
  function copyAsMutable(str) {
    return new MutableUString(str.chars, str._nativeString);
  }
  function makeMutableFromCharsVarArgs() {
    for (var chars = [],
        $__11 = 0; $__11 < arguments.length; $__11++)
      chars[$__11] = arguments[$__11];
    return makeMutableFromChars(chars);
  }
  function stringToImmutableString(v) {
    return v instanceof ImmutableUString ? v : makeImmutableFromCharsAndNativeString(v.chars, v.toString());
  }
  function check(v) {
    return v instanceof UString;
  }
  function eq(a, b) {
    return a.toString() === b.toString();
  }
  function lt(a, b) {
    if (a.length < b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] < b.chars[i];
      }
    }
    return false;
  }
  function gt(a, b) {
    if (a.length > b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] > b.chars[i];
      }
    }
    return false;
  }
  function lte(a, b) {
    return !gt(a, b);
  }
  function gte(a, b) {
    return !lt(a, b);
  }
  function repeatChar(k, c) {
    var chars = new Array(k);
    chars.fill(c.toString());
    return new MutableUString(chars, null);
  }
  var utf8Encoder = new TextEncoder();
  function toBytesUtf8(str) {
    return utf8Encoder.encode(str.toString());
  }
  function fromBytesUtf8(bytes) {
    return makeMutable(Bytes.toString(bytes));
  }
  function stringAppend() {
    var $__13;
    for (var strs = [],
        $__12 = 0; $__12 < arguments.length; $__12++)
      strs[$__12] = arguments[$__12];
    return makeMutableFromChars(($__13 = []).concat.apply($__13, $traceurRuntime.spread(strs.map(function(s) {
      return s.chars;
    }))));
  }
  Char.Char.prototype.displayUString = function(out) {
    out.consume(new MutableUString([this], this._nativeString));
  };
  Char.Char.prototype.writeUString = function(out) {
    var stringOut = new MiniNativeOutputStringPort();
    this.writeNativeString(stringOut);
    out.consume(makeMutable(stringOut.getOutputString()));
  };
  return {
    get UString() {
      return UString;
    },
    get makeInternedImmutable() {
      return makeInternedImmutable;
    },
    get make() {
      return make;
    },
    get makeImmutable() {
      return makeImmutable;
    },
    get makeMutable() {
      return makeMutable;
    },
    get makeMutableFromChars() {
      return makeMutableFromChars;
    },
    get copyAsMutable() {
      return copyAsMutable;
    },
    get makeMutableFromCharsVarArgs() {
      return makeMutableFromCharsVarArgs;
    },
    get stringToImmutableString() {
      return stringToImmutableString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get lt() {
      return lt;
    },
    get gt() {
      return gt;
    },
    get lte() {
      return lte;
    },
    get gte() {
      return gte;
    },
    get repeatChar() {
      return repeatChar;
    },
    get toBytesUtf8() {
      return toBytesUtf8;
    },
    get fromBytesUtf8() {
      return fromBytesUtf8;
    },
    get stringAppend() {
      return stringAppend;
    }
  };
})();
var $__runtime_47_core_47_printable_95_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printable_primitive.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var PRINT_PREFIX_USTRING = UString.makeInternedImmutable("'");
  var PrintablePrimitive = function($__super) {
    function PrintablePrimitive() {
      $traceurRuntime.superConstructor(PrintablePrimitive).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(PrintablePrimitive, {
      displayUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.displayNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      writeNativeString: function(out) {
        this.displayNativeString(out);
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        out.consume("'");
        this.writeNativeString(out);
      },
      printUString: function(out) {
        out.consume(PRINT_PREFIX_USTRING);
        this.writeUString(out);
      },
      toString: function() {
        var out = new MiniNativeOutputStringPort();
        this.displayNativeString(out);
        return out.getOutputString();
      }
    }, {}, $__super);
  }(Primitive);
  return {get PrintablePrimitive() {
      return PrintablePrimitive;
    }};
})();
var $__runtime_47_core_47_equality_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/equality.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function isEq(v1, v2) {
    return v1 === v2;
  }
  function isEqv(v1, v2) {
    return v1 === v2 || Char.check(v1) && Char.check(v2) && Char.eq(v1, v2);
  }
  function isEqual(v1, v2) {
    if (v1 === v2)
      return true;
    if (Primitive.check(v1))
      return v1.equals(v2);
    if (Bytes.check(v1) && Bytes.check(v2))
      return Bytes.eq(v1, v2);
    return false;
  }
  return {
    get isEq() {
      return isEq;
    },
    get isEqv() {
      return isEqv;
    },
    get isEqual() {
      return isEqual;
    }
  };
})();
var $__runtime_47_core_47_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hashing.js";
  var hash = ($__runtime_47_core_47_raw_95_hashing_46_js__).hash;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function hashForEq(o) {
    return hash(o);
  }
  function hashForEqv(o) {
    if (Char.check(o))
      return o.codepoint;
    return hash(o);
  }
  function hashForEqual(o) {
    if (Primitive.check(o))
      return o.hashForEqual();
    if (Bytes.check(o))
      return Bytes.hashForEqual(o);
    return hash(o);
  }
  return {
    get hashForEq() {
      return hashForEq;
    },
    get hashForEqv() {
      return hashForEqv;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_print_95_ustring_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_ustring.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var TRUE_USTRING = UString.makeInternedImmutable('#t');
  var FALSE_USTRING = UString.makeInternedImmutable('#f');
  var VOID_USTRING = UString.makeInternedImmutable('#<void>');
  function displayUString(out, v) {
    if (v === true) {
      out.consume(TRUE_USTRING);
    } else if (v === false) {
      out.consume(FALSE_USTRING);
    } else if (v === undefined || v === null) {
      out.consume(VOID_USTRING);
    } else if (typeof v === 'number' || typeof v === 'string') {
      out.consume(UString.makeMutable(v.toString()));
    } else if (Primitive.check(v)) {
      v.displayUString(out);
    } else if (Bytes.check(v)) {
      out.consume(UString.makeMutable(Bytes.toString(v)));
    } else if (Procedure.check(v)) {
      if (v.__rjs_struct_object) {
        v.__rjs_struct_object.displayUString(out);
      } else {
        out.consume(UString.makeMutable(Procedure.toString(v)));
      }
    } else {
      out.consume(UString.makeMutable(v.toString()));
    }
  }
  function writeUString(out, v) {
    if (Primitive.check(v)) {
      v.writeUString(out);
    } else {
      displayUString(out, v);
    }
  }
  function printUString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printUString(out);
    } else {
      writeUString(out, v);
    }
  }
  return {
    get displayUString() {
      return displayUString;
    },
    get writeUString() {
      return writeUString;
    },
    get printUString() {
      return printUString;
    }
  };
})();
var $__runtime_47_core_47_box_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/box.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var $__5 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__5.displayUString,
      writeUString = $__5.writeUString;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var BOX_PREFIX_USTRING = UString.makeInternedImmutable('#&');
  var Box = function($__super) {
    function Box(v) {
      $traceurRuntime.superConstructor(Box).call(this);
      this.value = v;
    }
    return ($traceurRuntime.createClass)(Box, {
      set: function(v) {
        this.value = v;
      },
      get: function() {
        return this.value;
      },
      equals: function(v) {
        return isEqual(v.value, this.value);
      },
      hashForEqual: function() {
        return hashForEqual(this.value);
      },
      displayNativeString: function(out) {
        out.consume('#&');
        displayNativeString(out, this.value);
      },
      displayUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        displayUString(out, this.value);
      },
      writeNativeString: function(out) {
        out.consume('#&');
        writeNativeString(out, this.value);
      },
      writeUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        writeUString(out, this.value);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(v) {
    return new Box(v);
  }
  function check(v) {
    return (v instanceof Box);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_pair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/pair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var Empty = function($__super) {
    function Empty() {
      $traceurRuntime.superConstructor(Empty).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Empty, {
      equals: function(v) {
        return this === v;
      },
      get length() {
        return 0;
      },
      displayNativeString: function(out) {
        out.consume('()');
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var EMPTY = new Empty();
  function isEmpty(v) {
    return v === EMPTY;
  }
  var Pair = function($__super) {
    function Pair(hd, tl) {
      $traceurRuntime.superConstructor(Pair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Pair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Pair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === Pair;
  }
  function make(hd, tl) {
    return new Pair(hd, tl);
  }
  function makeList() {
    for (var items = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      items[$__2] = arguments[$__2];
    return items.reduceRight(function(result, item) {
      return make(item, result);
    }, EMPTY);
  }
  function listToArray(lst) {
    var r = [];
    listForEach(lst, function(x) {
      return r.push(x);
    });
    return r;
  }
  function listFromArray(lst) {
    return makeList.apply((void 0), $traceurRuntime.spread(lst));
  }
  function listForEach(lst, fn) {
    while (!isEmpty(lst)) {
      fn(lst.hd);
      lst = lst.tl;
    }
  }
  function listFind(lst, fn) {
    while (!isEmpty(lst)) {
      var result = fn(lst.hd);
      if (result !== false) {
        return result;
      }
      lst = lst.tl;
    }
    return false;
  }
  function listMap(lst, fn) {
    var result = [];
    var mapper = function(x) {
      return result.push(result, fn(x));
    };
    listForEach(lst, mapper);
    return listFromArray(result);
  }
  function isList(v) {
    return v === EMPTY || (check(v) && v._listLength !== -1);
  }
  return {
    get EMPTY() {
      return EMPTY;
    },
    get isEmpty() {
      return isEmpty;
    },
    get Pair() {
      return Pair;
    },
    get check() {
      return check;
    },
    get make() {
      return make;
    },
    get makeList() {
      return makeList;
    },
    get listToArray() {
      return listToArray;
    },
    get listFromArray() {
      return listFromArray;
    },
    get listForEach() {
      return listForEach;
    },
    get listFind() {
      return listFind;
    },
    get listMap() {
      return listMap;
    },
    get isList() {
      return isList;
    }
  };
})();
var $__runtime_47_core_47_regexp_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/regexp.js";
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  function check(v) {
    return v instanceof RegExp;
  }
  function fromString(str) {
    return new RegExp(str.toString());
  }
  function match(pattern, input) {
    var isRegexpPattern = check(pattern);
    var isBytesPattern = !isRegexpPattern && Bytes.check(pattern);
    var isStringPattern = !isRegexpPattern && !isBytesPattern && UString.check(pattern);
    var isBytesInput = Bytes.check(input);
    var isStringInput = !isBytesInput && UString.check(input);
    if (!(isRegexpPattern || isBytesPattern || isStringPattern) || !(isBytesInput || isStringInput)) {
      throw racketContractError('expected regexp, string or byte pat, ' + 'and string or byte input, got pattern:', pattern, ', input:', input);
    }
    var stringInput = isBytesInput ? UString.fromBytesUtf8((input)) : input;
    var stringOrRegExpPattern = isBytesPattern ? UString.fromBytesUtf8((pattern)) : pattern;
    var result = stringInput.toString().match(stringOrRegExpPattern);
    if (result === null) {
      return false;
    }
    if ((isStringPattern || isRegexpPattern) && isStringInput) {
      return Pair.listFromArray(result.map(function(x) {
        return (x !== undefined ? UString.makeMutable(x) : false);
      }));
    }
    return Pair.listFromArray(result.map(function(x) {
      return (x !== undefined ? UString.toBytesUtf8(x) : false);
    }));
  }
  return {
    get check() {
      return check;
    },
    get fromString() {
      return fromString;
    },
    get match() {
      return match;
    }
  };
})();
var $__runtime_47_core_47_hash_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hash.js";
  var $ = $__runtime_47_core_47_lib_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__13 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__13.displayNativeString,
      writeNativeString = $__13.writeNativeString;
  var $__14 = $__runtime_47_core_47_equality_46_js__,
      isEqual = $__14.isEqual,
      isEqv = $__14.isEqv,
      isEq = $__14.isEq;
  var $__15 = $__runtime_47_core_47_hashing_46_js__,
      hashForEqual = $__15.hashForEqual,
      hashForEqv = $__15.hashForEqv,
      hashForEq = $__15.hashForEq;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var hashConfigs = {
    eq: {
      hash: hashForEq,
      keyEq: isEq
    },
    eqv: {
      hash: hashForEqv,
      keyEq: isEqv
    },
    equal: {
      hash: hashForEqual,
      keyEq: isEqual
    }
  };
  var Hash = function($__super) {
    function Hash(hash, type, mutable) {
      $traceurRuntime.superConstructor(Hash).call(this);
      this._h = hash;
      this._mutable = mutable;
      this._type = type;
    }
    return ($traceurRuntime.createClass)(Hash, {
      writeToPort: function(out, itemFn) {
        var $__10,
            $__11;
        out.consume('#hash');
        if (this._type === 'eq' || this._type === 'eqv') {
          out.consume(this._type);
        }
        out.consume('(');
        var n = this._h.size;
        var i = 0;
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              out.consume('(');
              itemFn(out, k);
              out.consume(' . ');
              itemFn(out, v);
              out.consume(')');
              if (++i !== n)
                out.consume(' ');
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      toRawString: function() {
        return ("'" + this.toString());
      },
      isImmutable: function() {
        return !this._mutable;
      },
      ref: function(k, fail) {
        var result = this._h.get(k);
        if (result !== undefined) {
          return result;
        } else if (fail !== undefined) {
          return fail;
        }
        throw racketCoreError('hash-ref: no value found for key\n  key:', k);
      },
      set: function(k, v) {
        var newH = this._h.set(k, v);
        if (this._mutable) {
          this._h = newH;
        } else {
          return new Hash(newH, this._type, false);
        }
      },
      size: function() {
        return this._h.size;
      },
      equals: function(v) {
        var $__10,
            $__11;
        if (!check(v)) {
          return false;
        }
        if (this._h.size !== v._h.size || this._type !== v._type || this._mutable !== v._mutable) {
          return false;
        }
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                key = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                val = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              var vv = v._h.get(key);
              if (vv === undefined || !isEqual(val, vv)) {
                return false;
              }
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        return true;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, type, mutable) {
    var h = items.reduce(function(acc, item) {
      var $__10,
          $__11;
      var $__9 = item,
          k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
          v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
      return acc.set(k, v);
    }, $.hamt.make(hashConfigs[type]));
    return new Hash(h, type, mutable);
  }
  function makeEq(items, mutable) {
    return make(items, 'eq', mutable);
  }
  function makeEqv(items, mutable) {
    return make(items, 'eqv', mutable);
  }
  function makeEqual(items, mutable) {
    return make(items, 'equal', mutable);
  }
  function makeFromAssocs(assocs, type, mutable) {
    var items = [];
    Pair.listForEach(assocs, function(item) {
      items.push([item.hd, item.tl]);
    });
    return make(items, type, mutable);
  }
  function makeEqFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eq', mutable);
  }
  function makeEqvFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eqv', mutable);
  }
  function makeEqualFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'equal', mutable);
  }
  function map(hash, proc) {
    var result = Pair.EMPTY;
    hash._h.forEach(function(value, key) {
      result = Pair.make(proc(key, value), result);
    });
    return result;
  }
  function check(v1) {
    return (v1 instanceof Hash);
  }
  function isEqualHash(h) {
    return check(h) && h._type === 'equal';
  }
  function isEqvHash(h) {
    return check(h) && h._type === 'eqv';
  }
  function isEqHash(h) {
    return check(h) && h._type === 'eq';
  }
  return {
    get makeEq() {
      return makeEq;
    },
    get makeEqv() {
      return makeEqv;
    },
    get makeEqual() {
      return makeEqual;
    },
    get makeEqFromAssocs() {
      return makeEqFromAssocs;
    },
    get makeEqvFromAssocs() {
      return makeEqvFromAssocs;
    },
    get makeEqualFromAssocs() {
      return makeEqualFromAssocs;
    },
    get map() {
      return map;
    },
    get check() {
      return check;
    },
    get isEqualHash() {
      return isEqualHash;
    },
    get isEqvHash() {
      return isEqvHash;
    },
    get isEqHash() {
      return isEqHash;
    }
  };
})();
var $__runtime_47_core_47_keyword_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/keyword.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Keyword = function($__super) {
    function Keyword(v) {
      $traceurRuntime.superConstructor(Keyword).call(this);
      this.v = v;
    }
    return ($traceurRuntime.createClass)(Keyword, {
      displayNativeString: function(out) {
        out.consume('#:');
        out.consume(this.v);
      },
      equals: function(v) {
        return check(v) && this.v === v.v;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Keyword(v);
  });
  function check(v) {
    return (v instanceof Keyword);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_numbers_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/numbers.js";
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  function add() {
    for (var operands = [],
        $__0 = 0; $__0 < arguments.length; $__0++)
      operands[$__0] = arguments[$__0];
    return [].reduce.call(operands, function(a, b) {
      return a + b;
    }, 0);
  }
  function sub() {
    for (var operands = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      operands[$__1] = arguments[$__1];
    if (operands.length === 1) {
      return -operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result -= operands[i];
    }
    return result;
  }
  function mul() {
    for (var operands = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      operands[$__2] = arguments[$__2];
    return [].reduce.call(operands, function(a, b) {
      return a * b;
    }, 1);
  }
  function div() {
    for (var operands = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      operands[$__3] = arguments[$__3];
    if (operands.length === 1) {
      return 1 / operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result /= operands[i];
    }
    return result;
  }
  function compare(cmp, operands) {
    if (operands.length < 2) {
      throw racketCoreError.apply((void 0), $traceurRuntime.spread(['compare: at least 2 arguments required, given'], operands));
    }
    for (var i = 1; i < operands.length; i++) {
      if (!cmp(operands[i - 1], operands[i])) {
        return false;
      }
    }
    return true;
  }
  function lt() {
    for (var operands = [],
        $__4 = 0; $__4 < arguments.length; $__4++)
      operands[$__4] = arguments[$__4];
    return compare(function(a, b) {
      return a < b;
    }, operands);
  }
  function lte() {
    for (var operands = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      operands[$__5] = arguments[$__5];
    return compare(function(a, b) {
      return a <= b;
    }, operands);
  }
  function gt() {
    for (var operands = [],
        $__6 = 0; $__6 < arguments.length; $__6++)
      operands[$__6] = arguments[$__6];
    return compare(function(a, b) {
      return a > b;
    }, operands);
  }
  function gte() {
    for (var operands = [],
        $__7 = 0; $__7 < arguments.length; $__7++)
      operands[$__7] = arguments[$__7];
    return compare(function(a, b) {
      return a >= b;
    }, operands);
  }
  function equals() {
    for (var operands = [],
        $__8 = 0; $__8 < arguments.length; $__8++)
      operands[$__8] = arguments[$__8];
    return compare(function(a, b) {
      return a === b;
    }, operands);
  }
  function check(v) {
    return typeof v === 'number';
  }
  return {
    get add() {
      return add;
    },
    get sub() {
      return sub;
    },
    get mul() {
      return mul;
    },
    get div() {
      return div;
    },
    get compare() {
      return compare;
    },
    get lt() {
      return lt;
    },
    get lte() {
      return lte;
    },
    get gt() {
      return gt;
    },
    get gte() {
      return gte;
    },
    get equals() {
      return equals;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_ports_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/ports.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Port = function($__super) {
    function Port() {
      $traceurRuntime.superConstructor(Port).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Port, {
      isOutputPort: function() {
        return false;
      },
      isInputPort: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var OutputPort = function($__super) {
    function OutputPort() {
      $traceurRuntime.superConstructor(OutputPort).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(OutputPort, {
      isOutputPort: function() {
        return true;
      },
      displayNativeString: function(out) {
        out.consume(("#<output-port:" + this.name + ">"));
      }
    }, {}, $__super);
  }(Port);
  function check(v) {
    return v instanceof Port;
  }
  function isInputPort(v) {
    return check(v) && v.isInputPort();
  }
  function isOutputPort(v) {
    return check(v) && v.isOutputPort();
  }
  var NewlineFlushingOutputPort = function($__super) {
    function NewlineFlushingOutputPort(consumeFn, name) {
      $traceurRuntime.superConstructor(NewlineFlushingOutputPort).call(this);
      this._buffer = [];
      this._consumeFn = consumeFn;
      this.name = name;
    }
    return ($traceurRuntime.createClass)(NewlineFlushingOutputPort, {
      consume: function(nativeString) {
        var lastNewlineIndex = nativeString.lastIndexOf('\n');
        if (lastNewlineIndex >= 0) {
          this._buffer.push(nativeString.slice(0, lastNewlineIndex));
          this._consumeFn(this._buffer.join(''));
          var restChars = nativeString.slice(lastNewlineIndex + 1);
          this._buffer = [];
          if (restChars !== '') {
            this._buffer.push(restChars);
          }
        } else {
          this._buffer.push(nativeString);
        }
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var standardOutputPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stdout');
  var standardErrorPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stderr');
  var NativeOutputStringPort = function($__super) {
    function NativeOutputStringPort() {
      $traceurRuntime.superConstructor(NativeOutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(NativeOutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return '';
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = '').concat.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return this._buffer[0];
      },
      get name() {
        return 'js-string';
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var OutputStringPort = function($__super) {
    function OutputStringPort() {
      $traceurRuntime.superConstructor(OutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(OutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return UString.makeMutable('');
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = UString).stringAppend.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return UString.copyAsMutable(this._buffer[0]);
      },
      get name() {
        return 'string';
      },
      isUStringPort: function() {
        return true;
      }
    }, {}, $__super);
  }(OutputPort);
  function openOutputString() {
    return new OutputStringPort();
  }
  function getOutputString(outputStringPort) {
    return outputStringPort.getOutputString();
  }
  return {
    get check() {
      return check;
    },
    get isInputPort() {
      return isInputPort;
    },
    get isOutputPort() {
      return isOutputPort;
    },
    get standardOutputPort() {
      return standardOutputPort;
    },
    get standardErrorPort() {
      return standardErrorPort;
    },
    get NativeOutputStringPort() {
      return NativeOutputStringPort;
    },
    get openOutputString() {
      return openOutputString;
    },
    get getOutputString() {
      return getOutputString;
    }
  };
})();
var $__runtime_47_core_47_check_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/check.js";
  function raise(exp) {
    for (var args = [],
        $__0 = 1; $__0 < arguments.length; $__0++)
      args[$__0 - 1] = arguments[$__0];
    throw exp.apply(this, args);
  }
  function truthy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val !== true) {
      raise(exp, msg);
    }
    return true;
  }
  function falsy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    return truthy(val === false, exp, msg);
  }
  function type(val, type) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val instanceof type) {
      return true;
    }
    raise(TypeError, (msg + "(" + val + " : " + $traceurRuntime.typeof((val)) + " != " + type.name + ")"));
  }
  function eq(val1, val2, exp, msg) {
    if (val1 !== val2) {
      raise(exp, msg);
    }
    return true;
  }
  return {
    get raise() {
      return raise;
    },
    get truthy() {
      return truthy;
    },
    get falsy() {
      return falsy;
    },
    get type() {
      return type;
    },
    get eq() {
      return eq;
    }
  };
})();
var $__runtime_47_core_47_values_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/values.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Values = function($__super) {
    function Values(vals) {
      $traceurRuntime.superConstructor(Values).call(this);
      this.v = vals;
    }
    return ($traceurRuntime.createClass)(Values, {
      getAt: function(i) {
        return this.v[i];
      },
      getAll: function() {
        return this.v;
      }
    }, {}, $__super);
  }(Primitive);
  function make(vals) {
    return new Values(vals);
  }
  function check(v) {
    return (v instanceof Values);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_struct_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/struct.js";
  var C = $__runtime_47_core_47_check_46_js__;
  var $ = $__runtime_47_core_47_lib_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__15 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__15.displayNativeString,
      writeNativeString = $__15.writeNativeString,
      printNativeString = $__15.printNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Struct = function($__super) {
    function Struct(desc, fields) {
      var callerName = arguments[2] !== (void 0) ? arguments[2] : false;
      $traceurRuntime.superConstructor(Struct).call(this);
      this._desc = desc;
      C.eq(fields.length, this._desc._totalInitFields, racketCoreError, 'arity mismatch');
      var guardLambda = this._desc._options.guard;
      var finalCallerName = callerName || this._desc._options.constructorName || this._desc._options.name;
      if (guardLambda) {
        var guardFields = fields.concat(finalCallerName);
        var new_fields = guardLambda.apply((void 0), $traceurRuntime.spread(guardFields));
        if (Values.check(new_fields)) {
          fields = new_fields.getAll();
        } else {
          fields = [new_fields];
        }
      }
      this._superStructInstance = false;
      var superType = this._desc.getSuperType();
      if (superType !== false) {
        var superInitFields = fields.slice(0, superType._totalInitFields);
        this._fields = fields.slice(superType._totalInitFields);
        this._superStructInstance = superType.getStructConstructor(finalCallerName).apply((void 0), $traceurRuntime.spread(superInitFields));
      } else {
        this._fields = fields;
      }
      var autoV = this._desc._options.autoV;
      for (var i = 0; i < this._desc._options.autoFieldCount; i++) {
        this._fields.push(autoV);
      }
    }
    return ($traceurRuntime.createClass)(Struct, {
      writeToPort: function(out, itemFn) {
        if (this._desc._options.inspector) {
          out.consume('#<');
          out.consume(this._desc.getName());
          out.consume('>');
        } else {
          out.consume('#(struct:');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                itemFn(out, field);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      printNativeString: function(out) {
        if (this._desc._options.inspector) {
          this.writeNativeString(out);
        } else {
          out.consume('(');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                printNativeString(out, field, true, 0);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      equals: function(v) {
        if (!check(v, this._desc)) {
          return false;
        }
        if (this._desc._options.inspector) {
          return this === v;
        }
        for (var i = 0; i < this._fields.length; i++) {
          if (!isEqual(this._fields[i], v._fields[i])) {
            return false;
          }
        }
        return true;
      },
      getField: function(n) {
        if (n >= this._fields.length) {
          throw new Error(("TypeError: invalid field at position " + n));
        }
        return this._fields[n];
      },
      setField: function(n, v) {
        C.truthy(n < this._fields.length, racketCoreError, 'invalid field at position');
        C.falsy(this._desc.isFieldImmutable(n), racketCoreError, 'field is immutable');
        this._fields[n] = v;
      },
      _maybeFindSuperInstance: function(targetDesc) {
        for (var s = this; s !== false; s = s._superStructInstance) {
          if (s._desc === targetDesc) {
            return s;
          }
        }
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var StructTypeDescriptor = function($__super) {
    function StructTypeDescriptor(options) {
      $traceurRuntime.superConstructor(StructTypeDescriptor).call(this);
      this._options = options;
      var props = options.props && Pair.listToArray(options.props);
      this._options.props = new Map();
      if (props) {
        var $__8 = true;
        var $__9 = false;
        var $__10 = undefined;
        try {
          for (var $__6 = void 0,
              $__5 = (props)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
            var prop = $__6.value;
            {
              prop.hd.attachToStructTypeDescriptor(this, prop.tl);
            }
          }
        } catch ($__11) {
          $__9 = true;
          $__10 = $__11;
        } finally {
          try {
            if (!$__8 && $__5.return != null) {
              $__5.return();
            }
          } finally {
            if ($__9) {
              throw $__10;
            }
          }
        }
      }
      this._propProcedure = this._findProperty(propProcedure);
      this._options.autoV = this._options.autoV || false;
      this._totalInitFields = options.initFieldCount;
      if (options.superType) {
        this._totalInitFields += options.superType._totalInitFields;
      }
      var immutables = options.immutables || Pair.EMPTY;
      this._options.immutables = new Set(Pair.listToArray(immutables));
      this._options.immutables.forEach(function(e) {
        if (e < 0 || e >= options.initFieldCount) {
          C.raise('invalid index in immutables provided');
        }
      });
    }
    return ($traceurRuntime.createClass)(StructTypeDescriptor, {
      displayNativeString: function(out) {
        out.consume('#<struct-type:');
        out.consume(this._options.name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getName: function() {
        return this._options.name;
      },
      getSuperType: function() {
        return this._options.superType;
      },
      getApplicableStructObject: function(structObject, procSpec) {
        var structfn = function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var proc;
          if (typeof(procSpec) === 'function') {
            proc = procSpec;
            args.unshift(structObject);
          } else if (Number.isInteger(procSpec)) {
            proc = structObject.getField(procSpec);
          } else {
            throw new Error(("ValueError: invalid field at position " + procSpec));
          }
          return proc.apply((void 0), $traceurRuntime.spread(args));
        };
        structfn.__rjs_struct_object = structObject;
        return structfn;
      },
      maybeStructObject: function(s) {
        var structObject;
        if (s instanceof Struct) {
          return s;
        } else if (s instanceof Function && (s.__rjs_struct_object instanceof Struct)) {
          return s.__rjs_struct_object;
        }
        return false;
      },
      getStructConstructor: function() {
        var subtype = arguments[0] !== (void 0) ? arguments[0] : false;
        var $__4 = this;
        return $.attachReadOnlyProperty(function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var structObject = new Struct($__4, args, subtype);
          var hasPropProc = $__4._propProcedure !== undefined && $__4._propProcedure !== false;
          var hasProcSpec = $__4._options.procSpec !== undefined && $__4._options.procSpec !== false;
          if (!hasPropProc && !hasProcSpec) {
            return structObject;
          } else if (hasPropProc) {
            return $__4.getApplicableStructObject(structObject, $__4._propProcedure);
          }
          return $__4.getApplicableStructObject(structObject, $__4._options.procSpec);
        }, 'racketProcedureType', 'struct-constructor');
      },
      getStructPredicate: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s) {
          var structObject = $__4.maybeStructObject(s);
          return structObject && structObject._maybeFindSuperInstance($__4) && true;
        }, 'racketProcedureType', 'struct-predicate');
      },
      getStructAccessor: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'accessor applied to invalid type');
          }
          return sobj.getField(pos);
        }, 'racketProcedureType', 'struct-accessor');
      },
      getStructMutator: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos, v) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'mutator applied to invalid type');
          }
          return sobj.setField(pos, v);
        }, 'racketProcedureType', 'struct-mutator');
      },
      _findProperty: function(prop) {
        for (var desc = this; desc; desc = desc.getSuperType()) {
          var val = desc._options.props.get(prop);
          if (val !== undefined) {
            return val;
          }
        }
        return undefined;
      },
      isFieldImmutable: function(n) {
        return this._options.immutables.has(n);
      }
    }, {make: function(options) {
        return Object.freeze(new StructTypeDescriptor(options));
      }}, $__super);
  }(PrintablePrimitive);
  var StructTypeProperty = function($__super) {
    function StructTypeProperty(args) {
      $traceurRuntime.superConstructor(StructTypeProperty).call(this);
      this._name = args.name.toString();
      this._guard = args.guard || false;
      this._canImpersonate = args.canImpersonate || false;
      this._supers = (args.supers && Pair.listToArray(args.supers)) || [];
    }
    return ($traceurRuntime.createClass)(StructTypeProperty, {
      displayNativeString: function(out) {
        out.consume('#<struct-type-property:');
        out.consume(this._name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getPropertyPredicate: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            return false;
          }
          return desc._findProperty($__4) !== undefined;
        };
      },
      getPropertyAccessor: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            C.raise(racketCoreError, 'invalid argument to accessor');
          }
          return desc._findProperty($__4) || C.raise(racketCoreError, 'property not in struct');
        };
      },
      attachToStructTypeDescriptor: function(desc, v) {
        var newV = v;
        if (this._guard) {
          newV = this._guard(v, Pair.listFromArray(structTypeInfo(desc)));
        }
        desc._options.props.set(this, newV);
        this._supers.forEach(function(superEntry) {
          var prop = superEntry.hd;
          var proc = superEntry.tl;
          prop.attachToStructTypeDescriptor(desc, proc(newV));
        });
      }
    }, {make: function(args) {
        return Object.freeze(new StructTypeProperty(args));
      }}, $__super);
  }(PrintablePrimitive);
  function makeStructTypeProperty(options) {
    var stProp = StructTypeProperty.make(options);
    return Values.make([stProp, stProp.getPropertyPredicate(), stProp.getPropertyAccessor()]);
  }
  function makeStructType(options) {
    var descriptor = new StructTypeDescriptor(options);
    return Values.make([descriptor, descriptor.getStructConstructor(), descriptor.getStructPredicate(), descriptor.getStructAccessor(), descriptor.getStructMutator()]);
  }
  function isStructType(v) {
    return v instanceof StructTypeDescriptor;
  }
  function structTypeInfo(desc) {
    return [desc._options.name, desc._options.initFieldCount, desc._options.autoFieldCount, desc.getStructAccessor(), desc.getStructMutator(), desc._options.immutables, desc._options.superType || false, false];
  }
  function isStructInstance(v) {
    return (v instanceof Struct) || (v instanceof Function) && (v.__rjs_struct_object instanceof Struct);
  }
  function check(v, desc) {
    return isStructInstance(v) && v._desc == desc;
  }
  var propProcedure = makeStructTypeProperty({name: 'prop:procedure'}).getAt(0);
  return {
    get makeStructTypeProperty() {
      return makeStructTypeProperty;
    },
    get makeStructType() {
      return makeStructType;
    },
    get isStructType() {
      return isStructType;
    },
    get structTypeInfo() {
      return structTypeInfo;
    },
    get isStructInstance() {
      return isStructInstance;
    },
    get check() {
      return check;
    },
    get propProcedure() {
      return propProcedure;
    }
  };
})();
var $__runtime_47_core_47_symbol_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/symbol.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Symbol = function($__super) {
    function Symbol(v) {
      $traceurRuntime.superConstructor(Symbol).call(this);
      this.v = v;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Symbol, {
      displayNativeString: function(out) {
        out.consume(this.v);
      },
      equals: function(v) {
        return v === this;
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Symbol.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Symbol(v.toString());
  });
  var makeUninterned = function(v) {
    return new Symbol(v);
  };
  function check(v) {
    return (v instanceof Symbol);
  }
  return {
    get make() {
      return make;
    },
    get makeUninterned() {
      return makeUninterned;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_vector_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/vector.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Vector = function($__super) {
    function Vector(items, mutable) {
      $traceurRuntime.superConstructor(Vector).call(this);
      this.mutable = mutable;
      this.items = items;
    }
    return ($traceurRuntime.createClass)(Vector, {
      writeToPort: function(out, itemFn) {
        var n = this.items.length;
        out.consume('#(');
        for (var i = 0; i < n; i++) {
          itemFn(out, this.items[i]);
          if (i !== n - 1)
            out.consume(' ');
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      isImmutable: function() {
        return !this.mutable;
      },
      ref: function(n) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-ref: index out of range\n  index: " + n));
        }
        return this.items[n];
      },
      set: function(n, v) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-set: index out of range\n  index: " + n));
        } else if (!this.mutable) {
          throw racketCoreError('vector-set: immutable vector\n ', this);
        }
        this.items[n] = v;
      },
      length: function() {
        return this.items.length;
      },
      equals: function(v) {
        if (!check(v)) {
          return false;
        }
        var items1 = this.items;
        var items2 = v.items;
        if (items1.length != items2.length) {
          return false;
        }
        for (var i = 0; i < items1.length; i++) {
          if (!isEqual(items1[i], items2[i])) {
            return false;
          }
        }
        return true;
      },
      hashForEqual: function() {
        return hashArray(this.items, hashForEqual);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, mutable) {
    return new Vector(items, mutable);
  }
  function copy(vec, mutable) {
    return new Vector(vec.items, mutable);
  }
  function makeInit(size, init) {
    var r = new Array(size);
    r.fill(init);
    return new Vector(r, true);
  }
  function check(v1) {
    return (v1 instanceof Vector);
  }
  return {
    get make() {
      return make;
    },
    get copy() {
      return copy;
    },
    get makeInit() {
      return makeInit;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_marks_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/marks.js";
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var HASH = ($__runtime_47_core_47_hashing_46_js__).hashForEq;
  var __frames;
  var __prompts = new Map();
  var __async_callback_wrappers = [];
  var __defaultContinuationPromptTag = makeContinuationPromptTag(Symbol.make('default'));
  function init() {
    __frames = Pair.EMPTY;
    savePrompt(__defaultContinuationPromptTag);
    enterFrame();
  }
  function registerAsynCallbackWrapper(w) {
    __async_callback_wrappers.push(w);
  }
  function defaultContinuationPromptTag() {
    return __defaultContinuationPromptTag;
  }
  init();
  function ContinuationPromptTag(tag) {
    this.tag = tag;
    return this;
  }
  function AbortCurrentContinuation(promptTag, handlerArgs) {
    this.name = 'abort-current-continuation';
    this.promptTag = promptTag;
    this.handlerArgs = handlerArgs;
    this.stack = (new Error()).stack;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }
  }
  AbortCurrentContinuation.prototype = Object.create(Error.prototype);
  AbortCurrentContinuation.prototype.constructor = AbortCurrentContinuation;
  function savePrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      promptVal = [];
      __prompts.set(promptTag, promptVal);
    }
    promptVal.push(__frames.hd);
  }
  function deleteCurrentPrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    promptVal.pop();
    if (promptVal.length === 0) {
      __prompts.delete(promptTag);
    }
  }
  function getPromptFrame(promptTag) {
    if (promptTag === undefined) {
      return promptTag;
    }
    var result = __prompts.get(promptTag);
    return (result && result[result.length - 1]) || undefined;
  }
  function makeContinuationPromptTag(sym) {
    return new ContinuationPromptTag(sym);
  }
  function isContinuationPromptTag(tag) {
    return tag instanceof ContinuationPromptTag;
  }
  function callWithContinuationPrompt(proc, promptTag, handler) {
    for (var args = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      args[$__1 - 3] = arguments[$__1];
    promptTag = promptTag || __defaultContinuationPromptTag;
    try {
      savePrompt(promptTag);
      return proc.apply((void 0), $traceurRuntime.spread(args));
    } catch (e) {
      if (e instanceof AbortCurrentContinuation && e.promptTag === promptTag) {
        return handler.apply((void 0), $traceurRuntime.spread(e.handlerArgs));
      }
      throw e;
    } finally {
      deleteCurrentPrompt(promptTag);
    }
  }
  function getFrames() {
    return __frames;
  }
  function updateFrame(newFrames, oldFrames) {
    if (__frames !== oldFrames) {
      throw new Error("current frame doesn't match with old frame");
    }
    return __frames = newFrames;
  }
  function enterFrame() {
    __frames = Pair.make({}, __frames);
    return __frames;
  }
  function setMark(key, value) {
    var frame = __frames.hd;
    frame[HASH(key)] = value;
  }
  function getContinuationMarks(promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var frames = __frames;
    var promptFrame = getPromptFrame(promptTag);
    if (promptFrame === undefined && promptTag !== __defaultContinuationPromptTag) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    var result = [];
    while (!Pair.isEmpty(frames)) {
      if (frames.hd === promptFrame) {
        break;
      }
      result.push(frames.hd);
      frames = frames.tl;
    }
    return result;
  }
  function getMarks(framesArr, key, promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var keyHash = HASH(key);
    var promptFrame = getPromptFrame(promptTag);
    var result = [];
    for (var ii = 0; ii < framesArr.length; ++ii) {
      var fr = framesArr[ii];
      if (keyHash in fr) {
        if (fr === promptFrame) {
          break;
        }
        result.push(fr[keyHash]);
      }
    }
    return Pair.listFromArray(result);
  }
  function getFirstMark(frames, key, noneV) {
    var keyHash = HASH(key);
    return Pair.listFind(frames, function(fr) {
      if (keyHash in fr) {
        return fr[keyHash];
      }
    }) || noneV;
  }
  function wrapWithContext(fn) {
    return (function(currentFrames) {
      var state = {};
      __async_callback_wrappers.forEach(function(w) {
        return w.onCreate(state);
      });
      return function() {
        for (var args = [],
            $__2 = 0; $__2 < arguments.length; $__2++)
          args[$__2] = arguments[$__2];
        init();
        __async_callback_wrappers.forEach(function(w) {
          return w.onInvoke(state);
        });
        try {
          return fn.apply((void 0), $traceurRuntime.spread(args));
        } finally {
          __frames = undefined;
        }
      };
    }(__frames));
  }
  return {
    get init() {
      return init;
    },
    get registerAsynCallbackWrapper() {
      return registerAsynCallbackWrapper;
    },
    get defaultContinuationPromptTag() {
      return defaultContinuationPromptTag;
    },
    get AbortCurrentContinuation() {
      return AbortCurrentContinuation;
    },
    get makeContinuationPromptTag() {
      return makeContinuationPromptTag;
    },
    get isContinuationPromptTag() {
      return isContinuationPromptTag;
    },
    get callWithContinuationPrompt() {
      return callWithContinuationPrompt;
    },
    get getFrames() {
      return getFrames;
    },
    get updateFrame() {
      return updateFrame;
    },
    get enterFrame() {
      return enterFrame;
    },
    get setMark() {
      return setMark;
    },
    get getContinuationMarks() {
      return getContinuationMarks;
    },
    get getMarks() {
      return getMarks;
    },
    get getFirstMark() {
      return getFirstMark;
    },
    get wrapWithContext() {
      return wrapWithContext;
    }
  };
})();
var $__runtime_47_core_47_mpair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mpair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var $__4 = $__runtime_47_core_47_pair_46_js__,
      EMPTY = $__4.EMPTY,
      isEmpty = $__4.isEmpty,
      isList = $__4.isList;
  var MPair = function($__super) {
    function MPair(hd, tl) {
      $traceurRuntime.superConstructor(MPair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(MPair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, MPair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      setCar: function(v) {
        if (this.hd !== v) {
          this.hd = v;
          this._cachedHashCode = null;
        }
      },
      setCdr: function(v) {
        if (this.tl !== v) {
          this.tl = v;
          this._listLength = isList(tl) ? tl.length + 1 : -1;
          this._cachedHashCode = null;
        }
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === MPair;
  }
  function make(hd, tl) {
    return new MPair(hd, tl);
  }
  return {
    get check() {
      return check;
    },
    get make() {
      return make;
    }
  };
})();
var $__runtime_47_core_47_printing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printing.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var $__0 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__0.displayNativeString,
      writeNativeString = $__0.writeNativeString,
      printNativeString = $__0.printNativeString;
  var $__1 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__1.displayUString,
      writeUString = $__1.writeUString,
      printUString = $__1.printUString;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  function display(out, v) {
    if (out.isUStringPort()) {
      displayUString(out, v);
    } else {
      displayNativeString(out, v);
    }
  }
  function write(out, v) {
    if (out.isUStringPort()) {
      writeUString(out, v);
    } else {
      writeNativeString(out, v);
    }
  }
  function print(out, v, printAsExpression, quoteDepth) {
    if (out.isUStringPort()) {
      printUString(out, v, printAsExpression, quoteDepth);
    } else {
      printNativeString(out, v, printAsExpression, quoteDepth);
    }
  }
  return {
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    }
  };
})();
var $__runtime_47_core_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core.js";
  var Box = $__runtime_47_core_47_box_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Regexp = $__runtime_47_core_47_regexp_46_js__;
  var Hash = $__runtime_47_core_47_hash_46_js__;
  var Keyword = $__runtime_47_core_47_keyword_46_js__;
  var Number = $__runtime_47_core_47_numbers_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Struct = $__runtime_47_core_47_struct_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Vector = $__runtime_47_core_47_vector_46_js__;
  var Marks = $__runtime_47_core_47_marks_46_js__;
  var MPair = $__runtime_47_core_47_mpair_46_js__;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  function bitwiseNot(a) {
    return ~a;
  }
  return {
    get Bytes() {
      return Bytes;
    },
    get Number() {
      return Number;
    },
    get Char() {
      return Char;
    },
    get Pair() {
      return Pair;
    },
    get Primitive() {
      return Primitive;
    },
    get Struct() {
      return Struct;
    },
    get Symbol() {
      return Symbol;
    },
    get Keyword() {
      return Keyword;
    },
    get Values() {
      return Values;
    },
    get Vector() {
      return Vector;
    },
    get Hash() {
      return Hash;
    },
    get Box() {
      return Box;
    },
    get Marks() {
      return Marks;
    },
    get Ports() {
      return Ports;
    },
    get UString() {
      return UString;
    },
    get Regexp() {
      return Regexp;
    },
    get MPair() {
      return MPair;
    },
    get argumentsToArray() {
      return $__runtime_47_core_47_lib_46_js__.argumentsToArray;
    },
    get argumentsSlice() {
      return $__runtime_47_core_47_lib_46_js__.argumentsSlice;
    },
    get racketCoreError() {
      return $__runtime_47_core_47_errors_46_js__.racketCoreError;
    },
    get racketContractError() {
      return $__runtime_47_core_47_errors_46_js__.racketContractError;
    },
    get attachProcedureArity() {
      return $__runtime_47_core_47_procedure_46_js__.attachProcedureArity;
    },
    get isEq() {
      return $__runtime_47_core_47_equality_46_js__.isEq;
    },
    get isEqv() {
      return $__runtime_47_core_47_equality_46_js__.isEqv;
    },
    get isEqual() {
      return $__runtime_47_core_47_equality_46_js__.isEqual;
    },
    get hashForEq() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEq;
    },
    get hashForEqv() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqv;
    },
    get hashForEqual() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqual;
    },
    get display() {
      return $__runtime_47_core_47_printing_46_js__.display;
    },
    get write() {
      return $__runtime_47_core_47_printing_46_js__.write;
    },
    get print() {
      return $__runtime_47_core_47_printing_46_js__.print;
    },
    get bitwiseNot() {
      return bitwiseNot;
    }
  };
})();
var $__runtime_47_paramz_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.js";
  var Core = $__runtime_47_core_46_js__;
  var hamt = ($__runtime_47_core_47_lib_46_js__).hamt;
  var Marks = Core.Marks;
  var Box = Core.Box;
  var ParameterizationKey = {};
  var ExceptionHandlerKey = {};
  var __top;
  function getCurrentParameterization() {
    return Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false);
  }
  function makeParameter(initValue) {
    var param = function(maybeSetVal) {
      var current = getCurrentParameterization();
      var pv = (current && current.get(param, false)) || __top.get(param, false);
      if (!pv && maybeSetVal !== undefined) {
        pv = Box.make(initValue);
        __top.set(param, pv);
      }
      if (maybeSetVal === undefined) {
        return pv ? pv.get() : initValue;
      }
      pv.set(maybeSetVal);
    };
    return param;
  }
  function extendParameterization(parameterization) {
    for (var args = [],
        $__9 = 1; $__9 < arguments.length; $__9++)
      args[$__9 - 1] = arguments[$__9];
    var result = parameterization;
    for (var i = 0; i < args.length; i += 2) {
      result = result.set(args[i], Box.make(args[i + 1]));
    }
    return result;
  }
  function copyParameterization(parameterization) {
    var $__11,
        $__12;
    var result = hamt.make();
    var $__5 = true;
    var $__6 = false;
    var $__7 = undefined;
    try {
      for (var $__3 = void 0,
          $__2 = (parameterization)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
        var $__10 = $__3.value,
            key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
            val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
        {
          result = result.set(key, Box.make(val.get()));
        }
      }
    } catch ($__8) {
      $__6 = true;
      $__7 = $__8;
    } finally {
      try {
        if (!$__5 && $__2.return != null) {
          $__2.return();
        }
      } finally {
        if ($__6) {
          throw $__7;
        }
      }
    }
    return result;
  }
  (function() {
    var p = getCurrentParameterization();
    if (p !== false) {
      return;
    }
    Marks.setMark(ParameterizationKey, hamt.make());
    __top = new Map();
    Marks.registerAsynCallbackWrapper({
      onCreate: function(state) {
        var $__11,
            $__12;
        var paramz = {};
        paramz.top = new Map();
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (__top)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__10 = $__3.value,
                key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
                val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
            {
              paramz.top.set(key, Box.make(val.get()));
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        paramz.bottom = copyParameterization(Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false));
        state.paramz = paramz;
      },
      onInvoke: function(state) {
        __top = state.paramz.top;
        Marks.setMark(ParameterizationKey, state.paramz.bottom);
      }
    });
  }());
  return {
    get ParameterizationKey() {
      return ParameterizationKey;
    },
    get ExceptionHandlerKey() {
      return ExceptionHandlerKey;
    },
    get getCurrentParameterization() {
      return getCurrentParameterization;
    },
    get makeParameter() {
      return makeParameter;
    },
    get extendParameterization() {
      return extendParameterization;
    },
    get copyParameterization() {
      return copyParameterization;
    }
  };
})();
var $__runtime_47_kernel_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.js";
  var Core = $__runtime_47_core_46_js__;
  function isImmutable(v) {
    if (Core.Primitive.check(v)) {
      return v.isImmutable();
    } else if (Core.Bytes.check(v) || typeof v === 'string') {
      return true;
    } else if (typeof v === 'number' || typeof v === 'boolean' || typeof v === 'undefined' || v === null) {
      return false;
    }
    throw Core.racketCoreError('isImmutable not implemented for', v);
  }
  var NO_ARG_FORM_RE = /^~[\s~n%]/;
  function fprintf(isPrintAsExpression, out, form) {
    var $__4;
    for (var args = [],
        $__0 = 3; $__0 < arguments.length; $__0++)
      args[$__0 - 3] = arguments[$__0];
    var regex = /~(?:[aAsSvVbBoOxX~n%]|\s+)/g;
    var formStr = form.toString();
    var reExecResult;
    var currentMatchIndex = 0;
    var prevIndex = 0;
    var lastMatch = '';
    var matches = formStr.match(regex);
    var numExpected = matches ? matches.filter(function(m) {
      return !NO_ARG_FORM_RE.test(m);
    }).length : 0;
    if (numExpected !== args.length) {
      throw ($__4 = Core).racketContractError.apply($__4, $traceurRuntime.spread([("fprintf: format string requires " + numExpected + " arguments, ") + ("given " + args.length + "; arguments were:"), out, form], args));
    }
    while ((reExecResult = regex.exec(formStr)) !== null) {
      Core.display(out, formStr.slice(prevIndex + lastMatch.length, reExecResult.index));
      prevIndex = reExecResult.index;
      lastMatch = reExecResult[0];
      if (/^~\s/.test(lastMatch))
        continue;
      switch (lastMatch.charAt(1)) {
        case '~':
          Core.display(out, '~');
          continue;
        case 'n':
        case '%':
          Core.display(out, '\n');
          continue;
      }
      var v = args[currentMatchIndex];
      currentMatchIndex += 1;
      switch (lastMatch.charAt(1)) {
        case 'a':
        case 'A':
          Core.display(out, v);
          break;
        case 's':
        case 'S':
          Core.write(out, v);
          break;
        case 'v':
        case 'V':
          Core.print(out, v, isPrintAsExpression, 0);
          break;
        case 'b':
        case 'B':
          Core.display(out, v.toString(2));
          break;
        case 'o':
        case 'O':
          Core.display(out, v.toString(8));
          break;
        case 'x':
        case 'X':
          Core.display(out, v.toString(16));
          break;
        default:
          throw Core.racketContractError('Unsupported format:', lastMatch);
      }
    }
    if (lastMatch.length + prevIndex < form.length) {
      Core.display(out, formStr.slice(lastMatch.length + prevIndex));
    }
  }
  function format(form) {
    for (var args = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args[$__1 - 1] = arguments[$__1];
    var strOut = Core.Ports.openOutputString();
    fprintf.apply((void 0), $traceurRuntime.spread([strOut, form], args));
    return Core.Ports.getOutputString(strOut);
  }
  function listToString(charsList) {
    return Core.UString.makeMutableFromChars(Core.Pair.listToArray(charsList));
  }
  function error(firstArg) {
    var $__4,
        $__5;
    for (var rest = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      rest[$__2 - 1] = arguments[$__2];
    if (Core.Symbol.check(firstArg)) {
      if (rest.length === 0) {
        throw Core.racketCoreError(firstArg.toString());
      } else {
        throw ($__4 = Core).racketCoreError.apply($__4, $traceurRuntime.spread([(firstArg.toString() + ":")], rest));
      }
    } else if (Core.UString.check(firstArg) || typeof firstArg === 'string') {
      throw ($__5 = Core).racketCoreError.apply($__5, $traceurRuntime.spread([firstArg.toString()], rest));
    } else {
      throw Core.racketContractError('error: invalid arguments');
    }
  }
  function random() {
    for (var args = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      args[$__3] = arguments[$__3];
    switch (args.length) {
      case 0:
        return Math.random();
      case 1:
        if (args[0] > 0) {
          return Math.floor(Math.random() * args[0]);
        }
        error('random: argument should be positive');
      case 2:
        if (args[0] > 0 && args[1] > args[0]) {
          return Math.floor(args[0] + Math.random() * (args[1] - args[0]));
        }
        error('random: invalid arguments');
      default:
        error('random: invalid number of arguments');
    }
  }
  function memv(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEqv(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memq(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEq(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function findf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return list.hd;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function sort9(lst, cmp) {
    var arr = Core.Pair.listToArray(lst);
    var x2i = new Map();
    arr.forEach(function(x, i) {
      x2i.set(x, i);
    });
    var srted = arr.sort(function(x, y) {
      if (cmp(x, y)) {
        return -1;
      } else if (cmp(y, x)) {
        return 1;
      }
      return x2i.get(x) - x2i.get(y);
    });
    return Core.Pair.listFromArray(srted);
  }
  function assv(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEqv(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assq(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEq(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assf(f, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (f(lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  return {
    get isImmutable() {
      return isImmutable;
    },
    get fprintf() {
      return fprintf;
    },
    get format() {
      return format;
    },
    get listToString() {
      return listToString;
    },
    get error() {
      return error;
    },
    get random() {
      return random;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    }
  };
})();
var $__runtime_47_lib_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/lib.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var Kernel = $__runtime_47_kernel_46_js__;
  var Values = Core.Values;
  var Pair = Core.Pair;
  var __rjs_quoted__ = {};
  __rjs_quoted__.Core = Core;
  __rjs_quoted__.Pair = Pair;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get Kernel() {
      return Kernel;
    },
    get Core() {
      return Core;
    },
    get Paramz() {
      return Paramz;
    },
    get Values() {
      return Values;
    },
    get Pair() {
      return Pair;
    }
  };
})();
var $__runtime_47_kernel_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M2 = $__runtime_47_lib_46_rkt_46_js__;
  var equal_p = M2.Core.isEqual;
  var eqv_p = M2.Core.isEqv;
  var eq_p = M2.Core.isEq;
  var values = function() {
    var vals73 = M2.Core.argumentsToArray(arguments);
    if ((vals73.length === 1) !== false) {
      var if_res10 = vals73[0];
    } else {
      var if_res10 = M2.Values.make(vals73);
    }
    return if_res10;
  };
  var call_with_values = function(generator74, receiver75) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var vals76 = generator74();
    if (M2.Values.check(vals76) !== false) {
      var if_res12 = receiver75.apply(this, vals76.getAll());
    } else {
      if (not(eq_p(vals76, undefined) || eq_p(vals76, null)) !== false) {
        var if_res11 = receiver75.apply(this, [vals76]);
      } else {
        var if_res11 = rvoid();
      }
      var if_res12 = if_res11;
    }
    return if_res12;
  };
  var immutable_p = function(v77) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.isImmutable(v77);
  };
  var rvoid = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return null;
  };
  var void_p = function(v78) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (v78 === null) || (v78 === undefined);
  };
  var number_p = M2.Core.Number.check;
  var real_p = M2.Core.Number.check;
  var integer_p = Number.isInteger;
  var zero_p = function(v79) {
    if (number_p(v79) !== false) {
      var if_res13 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), v79, $rjs_core.UString.make(", at:"), 0);
      var if_res13 = null;
    }
    if_res13;
    return v79 === 0;
  };
  var raise_mismatch_error = function(e80) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return error($rjs_core.Symbol.make("boo"));
  };
  var positive_p = function(v81) {
    if (real_p(v81) !== false) {
      var if_res14 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v81, $rjs_core.UString.make(", at:"), 0);
      var if_res14 = null;
    }
    if_res14;
    return v81 > 0;
  };
  var negative_p = function(v82) {
    if (real_p(v82) !== false) {
      var if_res15 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v82, $rjs_core.UString.make(", at:"), 0);
      var if_res15 = null;
    }
    if_res15;
    return v82 < 0;
  };
  var add1 = function(v83) {
    if (number_p(v83) !== false) {
      var if_res16 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), v83, $rjs_core.UString.make(", at:"), 0);
      var if_res16 = null;
    }
    if_res16;
    return v83 + 1;
  };
  var sub1 = function(v84) {
    if (number_p(v84) !== false) {
      var if_res17 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), v84, $rjs_core.UString.make(", at:"), 0);
      var if_res17 = null;
    }
    if_res17;
    return v84 - 1;
  };
  var quotient = function(dividend85, divisor86) {
    if (integer_p(dividend85) !== false) {
      var if_res18 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), dividend85, $rjs_core.UString.make(", at:"), 0);
      var if_res18 = null;
    }
    if_res18;
    if (integer_p(divisor86) !== false) {
      var if_res19 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), divisor86, $rjs_core.UString.make(", at:"), 1);
      var if_res19 = null;
    }
    if_res19;
    return (dividend85 / divisor86) | 0;
  };
  var even_p = function(v87) {
    if (integer_p(v87) !== false) {
      var if_res20 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), v87, $rjs_core.UString.make(", at:"), 0);
      var if_res20 = null;
    }
    if_res20;
    return (v87 % 2) === 0;
  };
  var odd_p = function(v88) {
    if (integer_p(v88) !== false) {
      var if_res21 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), v88, $rjs_core.UString.make(", at:"), 0);
      var if_res21 = null;
    }
    if_res21;
    return not((v88 % 2) === 0);
  };
  var exact_nonnegative_integer_p = function(v89) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v89) && (v89 >= 0);
  };
  var exact_integer_p = function(v90) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v90);
  };
  var __times_ = M2.Core.Number.mul;
  var __by_ = M2.Core.Number.div;
  var __plus_ = M2.Core.Number.add;
  var __ = M2.Core.Number.sub;
  var __lt_ = M2.Core.Number.lt;
  var __gt_ = M2.Core.Number.gt;
  var __lt__eq_ = M2.Core.Number.lte;
  var __gt__eq_ = M2.Core.Number.gte;
  var __eq_ = M2.Core.Number.equals;
  var floor = function(v91) {
    if (real_p(v91) !== false) {
      var if_res22 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v91, $rjs_core.UString.make(", at:"), 0);
      var if_res22 = null;
    }
    if_res22;
    return Math.floor(v91);
  };
  var abs = function(v92) {
    if (real_p(v92) !== false) {
      var if_res23 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v92, $rjs_core.UString.make(", at:"), 0);
      var if_res23 = null;
    }
    if_res23;
    return Math.abs(v92);
  };
  var sin = function(v93) {
    if (real_p(v93) !== false) {
      var if_res24 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v93, $rjs_core.UString.make(", at:"), 0);
      var if_res24 = null;
    }
    if_res24;
    return Math.sin(v93);
  };
  var cos = function(v94) {
    if (real_p(v94) !== false) {
      var if_res25 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v94, $rjs_core.UString.make(", at:"), 0);
      var if_res25 = null;
    }
    if_res25;
    return Math.cos(v94);
  };
  var tan = function(v95) {
    if (real_p(v95) !== false) {
      var if_res26 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v95, $rjs_core.UString.make(", at:"), 0);
      var if_res26 = null;
    }
    if_res26;
    return Math.tan(v95);
  };
  var atan = function(v96) {
    if (real_p(v96) !== false) {
      var if_res27 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v96, $rjs_core.UString.make(", at:"), 0);
      var if_res27 = null;
    }
    if_res27;
    return Math.atan(v96);
  };
  var ceiling = function(v97) {
    if (real_p(v97) !== false) {
      var if_res28 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v97, $rjs_core.UString.make(", at:"), 0);
      var if_res28 = null;
    }
    if_res28;
    return Math.ceil(v97);
  };
  var round = function(v98) {
    if (real_p(v98) !== false) {
      var if_res29 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v98, $rjs_core.UString.make(", at:"), 0);
      var if_res29 = null;
    }
    if_res29;
    return Math.round(v98);
  };
  var min = function(a99, b100) {
    if (real_p(a99) !== false) {
      var if_res30 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), a99, $rjs_core.UString.make(", at:"), 0);
      var if_res30 = null;
    }
    if_res30;
    if (real_p(b100) !== false) {
      var if_res31 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), b100, $rjs_core.UString.make(", at:"), 1);
      var if_res31 = null;
    }
    if_res31;
    return Math.min(a99, b100);
  };
  var max = function(a101, b102) {
    if (real_p(a101) !== false) {
      var if_res32 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), a101, $rjs_core.UString.make(", at:"), 0);
      var if_res32 = null;
    }
    if_res32;
    if (real_p(b102) !== false) {
      var if_res33 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), b102, $rjs_core.UString.make(", at:"), 1);
      var if_res33 = null;
    }
    if_res33;
    return Math.max(a101, b102);
  };
  var log = function(v103) {
    if (real_p(v103) !== false) {
      var if_res34 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("real?"), $rjs_core.UString.make(", given:"), v103, $rjs_core.UString.make(", at:"), 0);
      var if_res34 = null;
    }
    if_res34;
    return Math.log(v103);
  };
  var expt = function(w104, z105) {
    if (number_p(w104) !== false) {
      var if_res35 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), w104, $rjs_core.UString.make(", at:"), 0);
      var if_res35 = null;
    }
    if_res35;
    if (number_p(z105) !== false) {
      var if_res36 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), z105, $rjs_core.UString.make(", at:"), 1);
      var if_res36 = null;
    }
    if_res36;
    return Math.pow(w104, z105);
  };
  var sqrt = function(v106) {
    if (number_p(v106) !== false) {
      var if_res37 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), v106, $rjs_core.UString.make(", at:"), 0);
      var if_res37 = null;
    }
    if_res37;
    return Math.sqrt(v106);
  };
  var sqr = function(v107) {
    if (number_p(v107) !== false) {
      var if_res38 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), v107, $rjs_core.UString.make(", at:"), 0);
      var if_res38 = null;
    }
    if_res38;
    return __times_(v107, v107);
  };
  var remainder = function(a108, b109) {
    if (integer_p(a108) !== false) {
      var if_res39 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), a108, $rjs_core.UString.make(", at:"), 0);
      var if_res39 = null;
    }
    if_res39;
    if (integer_p(b109) !== false) {
      var if_res40 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), b109, $rjs_core.UString.make(", at:"), 1);
      var if_res40 = null;
    }
    if_res40;
    return a108 % b109;
  };
  var number__gt_string = function(n110) {
    if (number_p(n110) !== false) {
      var if_res41 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("number?"), $rjs_core.UString.make(", given:"), n110, $rjs_core.UString.make(", at:"), 0);
      var if_res41 = null;
    }
    if_res41;
    return M2.Core.UString.makeMutable(n110.toString());
  };
  var inexact__gt_exact = function(x111) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x111;
  };
  var exact__gt_inexact = function(x112) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x112;
  };
  var not = function(v113) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return equal_p(v113, false) || false;
  };
  var rfalse = false;
  var rtrue = true;
  var false_p = function(v114) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v114 === false;
  };
  var car = function(pair115) {
    if (pair_p(pair115) !== false) {
      var if_res42 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("pair?"), $rjs_core.UString.make(", given:"), pair115, $rjs_core.UString.make(", at:"), 0);
      var if_res42 = null;
    }
    if_res42;
    return pair115.hd;
  };
  var cdr = function(pair116) {
    if (pair_p(pair116) !== false) {
      var if_res43 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("pair?"), $rjs_core.UString.make(", given:"), pair116, $rjs_core.UString.make(", at:"), 0);
      var if_res43 = null;
    }
    if_res43;
    return pair116.tl;
  };
  var cons = M2.Core.Pair.make;
  var pair_p = M2.Core.Pair.check;
  var caar = function(v117) {
    if ((function(v118) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v118) && pair_p(v118.hd);
    })(v117) !== false) {
      var if_res44 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/pair-of? pair? #t)"), $rjs_core.UString.make(", given:"), v117, $rjs_core.UString.make(", at:"), 0);
      var if_res44 = null;
    }
    if_res44;
    return v117.hd.hd;
  };
  var cadr = function(v119) {
    if ((function(v120) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v120) && pair_p(v120.tl);
    })(v119) !== false) {
      var if_res45 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/pair-of? #t pair?)"), $rjs_core.UString.make(", given:"), v119, $rjs_core.UString.make(", at:"), 0);
      var if_res45 = null;
    }
    if_res45;
    return v119.tl.hd;
  };
  var cdar = function(v121) {
    if ((function(v122) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v122) && pair_p(v122.hd);
    })(v121) !== false) {
      var if_res46 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/pair-of? pair? #t)"), $rjs_core.UString.make(", given:"), v121, $rjs_core.UString.make(", at:"), 0);
      var if_res46 = null;
    }
    if_res46;
    return v121.hd.tl;
  };
  var cddr = function(v123) {
    if ((function(v124) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v124) && pair_p(v124.tl);
    })(v123) !== false) {
      var if_res47 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/pair-of? #t pair?)"), $rjs_core.UString.make(", given:"), v123, $rjs_core.UString.make(", at:"), 0);
      var if_res47 = null;
    }
    if_res47;
    return v123.tl.tl;
  };
  var caddr = function(v125) {
    if ((function(v126) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v126) && (function(v127) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.Core.Pair.check(v127) && pair_p(v127.tl);
      })(v126.tl);
    })(v125) !== false) {
      var if_res48 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/pair-of? #t (check/pair-of? #t pair?))"), $rjs_core.UString.make(", given:"), v125, $rjs_core.UString.make(", at:"), 0);
      var if_res48 = null;
    }
    if_res48;
    return v125.tl.tl.hd;
  };
  var rnull = M2.Core.Pair.EMPTY;
  var list = M2.Core.Pair.makeList;
  var null_p = M2.Core.Pair.isEmpty;
  var list_p = M2.Core.Pair.isList;
  var length = function(v128) {
    if (list_p(v128) !== false) {
      var if_res49 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("list?"), $rjs_core.UString.make(", given:"), v128, $rjs_core.UString.make(", at:"), 0);
      var if_res49 = null;
    }
    if_res49;
    return v128.length;
  };
  var reverse = function(lst129) {
    if (list_p(lst129) !== false) {
      var if_res50 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("list?"), $rjs_core.UString.make(", given:"), lst129, $rjs_core.UString.make(", at:"), 0);
      var if_res50 = null;
    }
    if_res50;
    var loop130 = function(lst131, result132) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst131) !== false) {
        var if_res51 = result132;
      } else {
        var if_res51 = loop130(lst131.tl, M2.Core.Pair.make(lst131.hd, result132));
      }
      return if_res51;
    };
    return loop130(lst129, $rjs_core.Pair.makeList());
  };
  var list_times_ = function() {
    var let_result52 = values();
    var n_args133 = arguments.length;
    var top_arguments134 = arguments;
    var loop135 = function(ii136, result137) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((ii136 === 0) !== false) {
        var if_res53 = result137;
      } else {
        var next_ii138 = ii136 - 1;
        var if_res53 = loop135(next_ii138, M2.Core.Pair.make(top_arguments134[next_ii138], result137));
      }
      return if_res53;
    };
    return loop135(n_args133 - 1, arguments[n_args133 - 1]);
  };
  var append = function() {
    var let_result54 = values();
    var result139 = $rjs_core.Pair.makeList();
    var lsts140 = arguments;
    var loop141 = function(i142) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i142 < lsts140.length) !== false) {
        var lst143 = lsts140[i142];
        result139 = foldr(M2.Core.Pair.make, lst143, result139);
        var if_res55 = loop141(i142 + 1);
      } else {
        var if_res55 = rvoid();
      }
      return if_res55;
    };
    loop141(0);
    return result139;
  };
  var for_each = function(lam144) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res56 = null;
    } else {
      var if_res56 = rvoid();
    }
    if_res56;
    var let_result57 = values();
    var lsts145 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam144) !== false) {
      var if_res58 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("procedure?"), $rjs_core.UString.make(", given:"), lam144, $rjs_core.UString.make(", at:"), 0);
      var if_res58 = null;
    }
    if_res58;
    map.apply(null, [lam144].concat(lsts145));
    return null;
  };
  var mcons = function(hd146, tl147) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.make(hd146, tl147);
  };
  var mpair_p = function(v148) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.check(v148);
  };
  var mcar = function(p149) {
    if (mpair_p(p149) !== false) {
      var if_res59 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("mpair?"), $rjs_core.UString.make(", given:"), p149, $rjs_core.UString.make(", at:"), 0);
      var if_res59 = null;
    }
    if_res59;
    return p149.car();
  };
  var mcdr = function(p150) {
    if (mpair_p(p150) !== false) {
      var if_res60 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("mpair?"), $rjs_core.UString.make(", given:"), p150, $rjs_core.UString.make(", at:"), 0);
      var if_res60 = null;
    }
    if_res60;
    return p150.cdr();
  };
  var set_mcar_bang_ = function(p151, v152) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p151) !== false) {
      var if_res61 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("mpair?"), $rjs_core.UString.make(", given:"), p151, $rjs_core.UString.make(", at:"), 0);
      var if_res61 = null;
    }
    if_res61;
    return p151.setCar(v152);
  };
  var set_mcdr_bang_ = function(p153, v154) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p153) !== false) {
      var if_res62 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("mpair?"), $rjs_core.UString.make(", given:"), p153, $rjs_core.UString.make(", at:"), 0);
      var if_res62 = null;
    }
    if_res62;
    return p153.setCdr(v154);
  };
  var make_struct_type = function(name155, super_type156, init_field_count157, auto_field_count158, auto_v159, props160, inspector161, proc_spec162, immutables163, guard164, constructor_name165) {
    return M2.Core.Struct.makeStructType({
      'name': name155.toString(),
      'superType': super_type156,
      'initFieldCount': init_field_count157,
      'autoFieldCount': auto_field_count158,
      'autoV': auto_v159,
      'props': props160,
      'inspector': inspector161,
      'procSpec': proc_spec162,
      'immutables': immutables163,
      'guard': guard164,
      'constructorName': constructor_name165
    });
  };
  var make_struct_field_accessor = function(ref166, index167, field_name168) {
    return function(s169) {
      if ((arguments.length !== 1) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
        var if_res63 = null;
      } else {
        var if_res63 = rvoid();
      }
      if_res63;
      return ref166(s169, index167);
    };
  };
  var make_struct_field_mutator = function(set170, index171, fieldName172) {
    return function(s173, v174) {
      if ((arguments.length !== 2) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
        var if_res64 = null;
      } else {
        var if_res64 = rvoid();
      }
      if_res64;
      return set170(s173, index171, v174);
    };
  };
  var make_struct_type_property = function(name175, guard176, supers177, can_impersonate_p178) {
    return M2.Core.Struct.makeStructTypeProperty({
      'name': name175,
      'guard': guard176,
      'supers': supers177,
      'canImpersonate': can_impersonate_p178
    });
  };
  var check_struct_type = function(name179, what180) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (what180 !== false) {
      if (M2.Core.Struct.isStructType(what180) !== false) {
        var if_res65 = rvoid();
      } else {
        throw M2.Core.racketCoreError($rjs_core.UString.make("not a struct type"));
        var if_res65 = null;
      }
      if_res65;
      var if_res66 = what180;
    } else {
      var if_res66 = rvoid();
    }
    return if_res66;
  };
  var struct_type_p = function(v181) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Struct.isStructType(v181);
  };
  var struct_type_info = function(desc182) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Values.make(M2.Core.Struct.structTypeInfo(desc182));
  };
  var vector = function() {
    return M2.Core.Vector.make(M2.Core.argumentsToArray(arguments), true);
  };
  var make_vector = function(size183, v184) {
    if (integer_p(size183) !== false) {
      var if_res67 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), size183, $rjs_core.UString.make(", at:"), 0);
      var if_res67 = null;
    }
    if_res67;
    return M2.Core.Vector.makeInit(size183, v184 || 0);
  };
  var vector_p = M2.Core.Vector.check;
  var vector_length = function(v185) {
    if (vector_p(v185) !== false) {
      var if_res68 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("vector?"), $rjs_core.UString.make(", given:"), v185, $rjs_core.UString.make(", at:"), 0);
      var if_res68 = null;
    }
    if_res68;
    return v185.length();
  };
  var vector_ref = function(vec186, i187) {
    if (vector_p(vec186) !== false) {
      var if_res69 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("vector?"), $rjs_core.UString.make(", given:"), vec186, $rjs_core.UString.make(", at:"), 0);
      var if_res69 = null;
    }
    if_res69;
    if (integer_p(i187) !== false) {
      var if_res70 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), i187, $rjs_core.UString.make(", at:"), 1);
      var if_res70 = null;
    }
    if_res70;
    return vec186.ref(i187);
  };
  var vector_set_bang_ = function(vec188, i189, v190) {
    if (vector(vec188) !== false) {
      var if_res71 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("vector"), $rjs_core.UString.make(", given:"), vec188, $rjs_core.UString.make(", at:"), 0);
      var if_res71 = null;
    }
    if_res71;
    if (integer_p(i189) !== false) {
      var if_res72 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("integer?"), $rjs_core.UString.make(", given:"), i189, $rjs_core.UString.make(", at:"), 1);
      var if_res72 = null;
    }
    if_res72;
    return vec188.set(i189, v190);
  };
  var vector__gt_list = function(vec191) {
    if (vector_p(vec191) !== false) {
      var if_res73 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("vector?"), $rjs_core.UString.make(", given:"), vec191, $rjs_core.UString.make(", at:"), 0);
      var if_res73 = null;
    }
    if_res73;
    return M2.Core.Pair.listFromArray(vec191.items);
  };
  var vector__gt_immutable_vector = function(vec192) {
    if (vector_p(vec192) !== false) {
      var if_res74 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("vector?"), $rjs_core.UString.make(", given:"), vec192, $rjs_core.UString.make(", at:"), 0);
      var if_res74 = null;
    }
    if_res74;
    return M2.Core.Vector.copy(vec192, false);
  };
  var hash = function() {
    var let_result75 = values();
    var kv_times_193 = arguments;
    if (((kv_times_193.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("invalid number of arguments"));
      var if_res76 = null;
    } else {
      var if_res76 = rvoid();
    }
    if_res76;
    var items194 = [];
    var loop195 = function(i196) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i196 < kv_times_193.length) !== false) {
        items194.push([kv_times_193[i196], kv_times_193[__plus_(i196, 1)]]);
        var if_res77 = loop195(i196 + 2);
      } else {
        var if_res77 = rvoid();
      }
      return if_res77;
    };
    loop195(0);
    return M2.Core.Hash.makeEqual(items194, false);
  };
  var hasheqv = function() {
    var let_result78 = values();
    var kv_times_197 = arguments;
    if (((kv_times_197.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("invalid number of arguments"));
      var if_res79 = null;
    } else {
      var if_res79 = rvoid();
    }
    if_res79;
    var items198 = [];
    var loop199 = function(i200) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i200 < kv_times_197.length) !== false) {
        items198.push([kv_times_197[i200], kv_times_197[__plus_(i200, 1)]]);
        var if_res80 = loop199(i200 + 2);
      } else {
        var if_res80 = rvoid();
      }
      return if_res80;
    };
    loop199(0);
    return M2.Core.Hash.makeEqv(items198, false);
  };
  var hasheq = function() {
    var let_result81 = values();
    var kv_times_201 = arguments;
    if (((kv_times_201.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("invalid number of arguments"));
      var if_res82 = null;
    } else {
      var if_res82 = rvoid();
    }
    if_res82;
    var items202 = [];
    var loop203 = function(i204) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i204 < kv_times_201.length) !== false) {
        items202.push([kv_times_201[i204], kv_times_201[__plus_(i204, 1)]]);
        var if_res83 = loop203(i204 + 2);
      } else {
        var if_res83 = rvoid();
      }
      return if_res83;
    };
    loop203(0);
    return M2.Core.Hash.makeEq(items202, false);
  };
  var make_hash = function(assocs205) {
    var let_result84 = values();
    var assocs_times_206 = assocs205 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_206, true);
  };
  var make_hasheqv = function(assocs207) {
    var let_result85 = values();
    var assocs_times_208 = assocs207 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_208, true);
  };
  var make_hasheq = function(assocs209) {
    var let_result86 = values();
    var assocs_times_210 = assocs209 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_210, true);
  };
  var make_immutable_hash = function(assocs211) {
    var let_result87 = values();
    var assocs_times_212 = assocs211 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_212, false);
  };
  var make_immutable_hasheqv = function(assocs213) {
    var let_result88 = values();
    var assocs_times_214 = assocs213 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_214, false);
  };
  var make_immutable_hasheq = function(assocs215) {
    var let_result89 = values();
    var assocs_times_216 = assocs215 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_216, false);
  };
  var hash_p = M2.Core.Hash.check;
  var hash_equal_p = M2.Core.Hash.isEqualHash;
  var hash_eqv_p = M2.Core.Hash.isEqvHash;
  var hash_eq_p = M2.Core.Hash.isEqHash;
  var hash_ref = function(h217, k218, fail219) {
    return h217.ref(k218, fail219);
  };
  var hash_set = function(h220, k221, v222) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h220.set(k221, v222);
  };
  var hash_set_bang_ = function(h223, k224, v225) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h223.set(k224, v225);
  };
  var hash_map = function(h226, proc227) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Hash.map(h226, proc227);
  };
  var apply = function(lam228) {
    var let_result90 = values();
    var args229 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam228) !== false) {
      var if_res91 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("procedure?"), $rjs_core.UString.make(", given:"), lam228, $rjs_core.UString.make(", at:"), 0);
      var if_res91 = null;
    }
    if_res91;
    var let_result92 = values();
    if (zero_p(args229.length) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res96 = null;
    } else {
      if (equal_p(args229.length, 1) !== false) {
        if (null_p(args229[0]) !== false) {
          var if_res94 = rvoid();
        } else {
          if (M2.Core.Pair.check(args229[0]) !== false) {
            var if_res93 = rvoid();
          } else {
            throw M2.Core.racketContractError($rjs_core.UString.make("expected a"), M2.Core.Pair, $rjs_core.UString.make(", but given"), args229[0]);
            var if_res93 = null;
          }
          var if_res94 = if_res93;
        }
        if_res94;
        var if_res95 = M2.Core.Pair.listToArray(args229[0]);
      } else {
        var if_res95 = args229.concat(M2.Core.Pair.listToArray(args229.pop()));
      }
      var if_res96 = if_res95;
    }
    var final_args230 = if_res96;
    return lam228.apply(null, final_args230);
  };
  var map = function(fn231) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res97 = null;
    } else {
      var if_res97 = rvoid();
    }
    if_res97;
    var let_result98 = values();
    var lists232 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(fn231) !== false) {
      var if_res99 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("procedure?"), $rjs_core.UString.make(", given:"), fn231, $rjs_core.UString.make(", at:"), 0);
      var if_res99 = null;
    }
    if_res99;
    var let_result100 = values();
    if (__lt__eq_(lists232.length, 0) !== false) {
      var if_res101 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.make("need at-least two arguments"));
    } else {
      var if_res101 = rvoid();
    }
    if_res101;
    var let_result102 = values();
    var lst_len233 = length(lists232[0]);
    var loop234 = function(i235) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i235 < lists232.length) !== false) {
        var v236 = lists232[i235];
        if (eq_p(length(v236), lst_len233) !== false) {
          var if_res103 = rvoid();
        } else {
          var if_res103 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.make("all input lists must have equal length"));
        }
        if_res103;
        var if_res104 = loop234(i235 + 1);
      } else {
        var if_res104 = rvoid();
      }
      return if_res104;
    };
    loop234(1);
    var let_result105 = values();
    var result237 = Array(lst_len233);
    var args238 = Array(lists232.length);
    var loop239 = function(result_i240) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i240 < lst_len233) !== false) {
        var loop241 = function(lst_j242) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j242 < lists232.length) !== false) {
            var lst243 = lists232[lst_j242];
            args238[lst_j242] = lst243.hd;
            lists232[lst_j242] = lst243.tl;
            var if_res106 = loop241(lst_j242 + 1);
          } else {
            var if_res106 = rvoid();
          }
          return if_res106;
        };
        loop241(0);
        result237[result_i240] = fn231.apply(null, args238);
        var if_res107 = loop239(result_i240 + 1);
      } else {
        var if_res107 = rvoid();
      }
      return if_res107;
    };
    loop239(0);
    return M2.Core.Pair.listFromArray(result237);
  };
  var foldl = function(fn244, init245) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res108 = null;
    } else {
      var if_res108 = rvoid();
    }
    if_res108;
    var let_result109 = values();
    var lists246 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn244) !== false) {
      var if_res110 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("procedure?"), $rjs_core.UString.make(", given:"), fn244, $rjs_core.UString.make(", at:"), 0);
      var if_res110 = null;
    }
    if_res110;
    var let_result111 = values();
    if (__lt__eq_(lists246.length, 0) !== false) {
      var if_res112 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.make("need at-least two arguments"));
    } else {
      var if_res112 = rvoid();
    }
    if_res112;
    var let_result113 = values();
    var lst_len247 = length(lists246[0]);
    var loop248 = function(i249) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i249 < lists246.length) !== false) {
        var v250 = lists246[i249];
        if (eq_p(length(v250), lst_len247) !== false) {
          var if_res114 = rvoid();
        } else {
          var if_res114 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.make("all input lists must have equal length"));
        }
        if_res114;
        var if_res115 = loop248(i249 + 1);
      } else {
        var if_res115 = rvoid();
      }
      return if_res115;
    };
    loop248(1);
    var let_result116 = values();
    var result251 = init245;
    var args252 = Array(lists246.length + 1);
    var loop253 = function(result_i254) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i254 < lst_len247) !== false) {
        var loop255 = function(lst_j256) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j256 < lists246.length) !== false) {
            var lst257 = lists246[lst_j256];
            args252[lst_j256] = lst257.hd;
            lists246[lst_j256] = lst257.tl;
            var if_res117 = loop255(lst_j256 + 1);
          } else {
            var if_res117 = rvoid();
          }
          return if_res117;
        };
        loop255(0);
        args252[lists246.length] = result251;
        result251 = fn244.apply(null, args252);
        var if_res118 = loop253(result_i254 + 1);
      } else {
        var if_res118 = rvoid();
      }
      return if_res118;
    };
    loop253(0);
    return result251;
  };
  var _foldr = function(fn258, init259, lists260) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lists260[0]) !== false) {
      var if_res120 = init259;
    } else {
      var args261 = Array(add1(lists260.length));
      var loop262 = function(ii263) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((ii263 < lists260.length) !== false) {
          var lst264 = lists260[ii263];
          args261[ii263] = lst264.hd;
          lists260[ii263] = lst264.tl;
          var if_res119 = loop262(ii263 + 1);
        } else {
          var if_res119 = rvoid();
        }
        return if_res119;
      };
      loop262(0);
      args261[lists260.length] = _foldr(fn258, init259, lists260);
      var if_res120 = fn258.apply(null, args261);
    }
    return if_res120;
  };
  var foldr = function(fn265, init266) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res121 = null;
    } else {
      var if_res121 = rvoid();
    }
    if_res121;
    var let_result122 = values();
    var lists267 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn265) !== false) {
      var if_res123 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("procedure?"), $rjs_core.UString.make(", given:"), fn265, $rjs_core.UString.make(", at:"), 0);
      var if_res123 = null;
    }
    if_res123;
    var let_result124 = values();
    if (__lt__eq_(lists267.length, 0) !== false) {
      var if_res125 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.make("need at-least two arguments"));
    } else {
      var if_res125 = rvoid();
    }
    if_res125;
    var let_result126 = values();
    var lst_len268 = length(lists267[0]);
    var loop269 = function(i270) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i270 < lists267.length) !== false) {
        var v271 = lists267[i270];
        if (eq_p(length(v271), lst_len268) !== false) {
          var if_res127 = rvoid();
        } else {
          var if_res127 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.make("all input lists must have equal length"));
        }
        if_res127;
        var if_res128 = loop269(i270 + 1);
      } else {
        var if_res128 = rvoid();
      }
      return if_res128;
    };
    loop269(1);
    return _foldr(fn265, init266, lists267);
  };
  var cl129 = function(end272) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range(0, end272, 1);
  };
  var cl130 = function(start273, end274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (__lt_(start273, end274) !== false) {
      var if_res133 = 1;
    } else {
      var if_res133 = -1;
    }
    return range(start273, end274, if_res133);
  };
  var cl131 = function(start275, end276, step277) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result278 = [];
    if ((__gt__eq_(step277, 0) && __lt_(step277, end276)) !== false) {
      var loop279 = function(i280) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i280 < end276) !== false) {
          result278.push(i280);
          var if_res134 = loop279(i280 + step277);
        } else {
          var if_res134 = rvoid();
        }
        return if_res134;
      };
      var if_res137 = loop279(start275);
    } else {
      if ((__lt__eq_(step277, 0) && __lt_(end276, start275)) !== false) {
        var loop281 = function(i282) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((i282 < __(end276)) !== false) {
            result278.push(__(i282));
            var if_res135 = loop281(i282 + __(step277));
          } else {
            var if_res135 = rvoid();
          }
          return if_res135;
        };
        var if_res136 = loop281(__(start275));
      } else {
        var if_res136 = rvoid();
      }
      var if_res137 = if_res136;
    }
    if_res137;
    return M2.Core.Pair.listFromArray(result278);
  };
  var range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam132 = {
      '1': cl129,
      '2': cl130,
      '3': cl131
    }[arguments.length];
    if (fixed_lam132 !== undefined) {
      return fixed_lam132.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var remove = function(v283, lst284, proc285) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (eq_p(proc285, undefined) !== false) {
      proc285 = M2.Core.isEqual;
      var if_res138 = null;
    } else {
      var if_res138 = rvoid();
    }
    if_res138;
    var loop286 = function(result287, lst288) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst288) !== false) {
        var if_res140 = reverse(result287);
      } else {
        if (proc285(v283, car(lst288)) !== false) {
          var if_res139 = append(reverse(result287), cdr(lst288));
        } else {
          var if_res139 = rvoid();
        }
        if_res139;
        var if_res140 = loop286(cons(car(lst288), result287), cdr(lst288));
      }
      return if_res140;
    };
    return loop286($rjs_core.Pair.makeList(), lst284);
  };
  var filter = function(fn289, lst290) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop291 = function(result292, lst293) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst293) !== false) {
        var if_res142 = reverse(result292);
      } else {
        if (fn289(lst293.hd) !== false) {
          var if_res141 = loop291(M2.Core.Pair.make(lst293.hd, result292), lst293.tl);
        } else {
          var if_res141 = loop291(result292, lst293.tl);
        }
        var if_res142 = if_res141;
      }
      return if_res142;
    };
    return loop291($rjs_core.Pair.makeList(), lst290);
  };
  var ormap = function(fn294) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res143 = null;
    } else {
      var if_res143 = rvoid();
    }
    if_res143;
    var let_result144 = values();
    var lists295 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args296 = M2.Core.argumentsToArray(arguments);
      var final_arg297 = args296.pop();
      return (final_arg297 || fn294.apply(null, args296)) && true;
    }, false].concat(lists295));
  };
  var andmap = function(fn298) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res145 = null;
    } else {
      var if_res145 = rvoid();
    }
    if_res145;
    var let_result146 = values();
    var lists299 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args300 = M2.Core.argumentsToArray(arguments);
      var final_arg301 = args300.pop();
      return (final_arg301 && fn298.apply(null, args300)) && true;
    }, true].concat(lists299));
  };
  var member = function(v302, lst303) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop304 = function(lst305) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst305) !== false) {
        var if_res148 = false;
      } else {
        if (M2.Core.isEqual(v302, lst305.hd) !== false) {
          var if_res147 = lst305;
        } else {
          var if_res147 = loop304(lst305.tl);
        }
        var if_res148 = if_res147;
      }
      return if_res148;
    };
    return loop304(lst303);
  };
  var compose = function() {
    var procs306 = M2.Core.argumentsToArray(arguments);
    return function() {
      var let_result149 = values();
      var result307 = M2.Core.argumentsToArray(arguments);
      var procs_times_308 = procs306.reverse();
      var loop309 = function(i310) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i310 < procs_times_308.length) !== false) {
          var p311 = procs_times_308[i310];
          result307 = p311.apply(null, result307);
          if (M2.Core.Values.check(result307) !== false) {
            result307 = result307.getAll();
            var if_res150 = null;
          } else {
            result307 = [result307];
            var if_res150 = null;
          }
          if_res150;
          var if_res151 = loop309(i310 + 1);
        } else {
          var if_res151 = rvoid();
        }
        return if_res151;
      };
      loop309(0);
      if ((result307.length === 1) !== false) {
        var if_res152 = result307[0];
      } else {
        var if_res152 = M2.Core.Values.make(result307);
      }
      return if_res152;
    };
  };
  var compose1 = function() {
    var procs312 = M2.Core.argumentsToArray(arguments);
    return function(v313) {
      var let_result153 = values();
      var result314 = v313;
      var procs_times_315 = procs312.reverse();
      var loop316 = function(i317) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i317 < procs_times_315.length) !== false) {
          var p318 = procs_times_315[i317];
          result314 = p318(result314);
          var if_res154 = loop316(i317 + 1);
        } else {
          var if_res154 = rvoid();
        }
        return if_res154;
      };
      loop316(0);
      return result314;
    };
  };
  var list_ref = function(lst319, pos320) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop321 = function(i322, lst323) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst323) !== false) {
        var if_res156 = error($rjs_core.Symbol.make("list-ref?"), $rjs_core.UString.make("insufficient elements"));
      } else {
        if ((i322 === pos320) !== false) {
          var if_res155 = lst323.hd;
        } else {
          var if_res155 = loop321(i322 + 1, lst323.tl);
        }
        var if_res156 = if_res155;
      }
      return if_res156;
    };
    return loop321(0, lst319);
  };
  var build_list = function(n324, proc325) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arr326 = Array(n324);
    var loop327 = function(i328) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i328 < n324) !== false) {
        arr326[i328] = proc325(i328);
        var if_res157 = loop327(i328 + 1);
      } else {
        var if_res157 = rvoid();
      }
      return if_res157;
    };
    loop327(0);
    return M2.Core.Pair.listFromArray(arr326);
  };
  var make_list = function(n329, v330) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop331 = function(result332, i333) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i333 === n329) !== false) {
        var if_res158 = result332;
      } else {
        var if_res158 = loop331(M2.Core.Pair.make(v330, result332), i333 + 1);
      }
      return if_res158;
    };
    return loop331($rjs_core.Pair.makeList(), 0);
  };
  var flatten = function(lst334) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lst334) !== false) {
      var if_res160 = lst334;
    } else {
      if (pair_p(lst334) !== false) {
        var if_res159 = append(flatten(lst334.hd), flatten(lst334.tl));
      } else {
        var if_res159 = list(lst334);
      }
      var if_res160 = if_res159;
    }
    return if_res160;
  };
  var assoc = function(k335, lst336) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop337 = function(lst338) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst338) !== false) {
        var if_res162 = false;
      } else {
        if (M2.Core.isEqual(k335, lst338.hd.hd) !== false) {
          var if_res161 = lst338.hd;
        } else {
          var if_res161 = loop337(lst338.tl);
        }
        var if_res162 = if_res161;
      }
      return if_res162;
    };
    return loop337(lst336);
  };
  var memv = M2.Kernel.memv;
  var memq = M2.Kernel.memq;
  var memf = M2.Kernel.memf;
  var findf = M2.Kernel.findf;
  var sort9 = M2.Kernel.sort9;
  var assv = M2.Kernel.assv;
  var assq = M2.Kernel.assq;
  var assf = M2.Kernel.assf;
  var alt_reverse = reverse;
  var string = M2.Core.UString.makeMutableFromCharsVarArgs;
  var string_append = M2.Core.UString.stringAppend;
  var string_ref = function(s339, i340) {
    if (string_p(s339) !== false) {
      var if_res163 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s339, $rjs_core.UString.make(", at:"), 0);
      var if_res163 = null;
    }
    if_res163;
    if (exact_nonnegative_integer_p(i340) !== false) {
      var if_res164 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("exact-nonnegative-integer?"), $rjs_core.UString.make(", given:"), i340, $rjs_core.UString.make(", at:"), 1);
      var if_res164 = null;
    }
    if_res164;
    return s339.charAt(i340);
  };
  var string_eq__p = function(sa341, sb342) {
    if (string_p(sa341) !== false) {
      var if_res165 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sa341, $rjs_core.UString.make(", at:"), 0);
      var if_res165 = null;
    }
    if_res165;
    if (string_p(sb342) !== false) {
      var if_res166 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sb342, $rjs_core.UString.make(", at:"), 1);
      var if_res166 = null;
    }
    if_res166;
    return M2.Core.UString.eq(sa341, sb342);
  };
  var string_lt__p = function(sa343, sb344) {
    if (string_p(sa343) !== false) {
      var if_res167 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sa343, $rjs_core.UString.make(", at:"), 0);
      var if_res167 = null;
    }
    if_res167;
    if (string_p(sb344) !== false) {
      var if_res168 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sb344, $rjs_core.UString.make(", at:"), 1);
      var if_res168 = null;
    }
    if_res168;
    return M2.Core.UString.lt(sa343, sb344);
  };
  var string_lt__eq__p = function(sa345, sb346) {
    if (string_p(sa345) !== false) {
      var if_res169 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sa345, $rjs_core.UString.make(", at:"), 0);
      var if_res169 = null;
    }
    if_res169;
    if (string_p(sb346) !== false) {
      var if_res170 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sb346, $rjs_core.UString.make(", at:"), 1);
      var if_res170 = null;
    }
    if_res170;
    return M2.Core.UString.lte(sa345, sb346);
  };
  var string_gt__p = function(sa347, sb348) {
    if (string_p(sa347) !== false) {
      var if_res171 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sa347, $rjs_core.UString.make(", at:"), 0);
      var if_res171 = null;
    }
    if_res171;
    if (string_p(sb348) !== false) {
      var if_res172 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sb348, $rjs_core.UString.make(", at:"), 1);
      var if_res172 = null;
    }
    if_res172;
    return M2.Core.UString.gt(sa347, sb348);
  };
  var string_gt__eq__p = function(sa349, sb350) {
    if (string_p(sa349) !== false) {
      var if_res173 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sa349, $rjs_core.UString.make(", at:"), 0);
      var if_res173 = null;
    }
    if_res173;
    if (string_p(sb350) !== false) {
      var if_res174 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), sb350, $rjs_core.UString.make(", at:"), 1);
      var if_res174 = null;
    }
    if_res174;
    return M2.Core.UString.gte(sa349, sb350);
  };
  var string_p = function(v351) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.UString.check(v351);
  };
  var fprintf = $rjs_core.attachProcedureArity(function(out352, form353) {
    for (var args354175 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      args354175[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args354 = $rjs_core.Pair.listFromArray(args354175);
    return apply(M2.Kernel.fprintf, print_as_expression(), out352, form353, args354);
  });
  var eprintf = $rjs_core.attachProcedureArity(function(form355) {
    for (var args356176 = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      args356176[$__2 - 1] = arguments[$__2];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args356 = $rjs_core.Pair.listFromArray(args356176);
    return apply(M2.Kernel.fprintf, print_as_expression(), current_output_port(), form355, args356);
  });
  var format = $rjs_core.attachProcedureArity(function(form357) {
    for (var args358177 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      args358177[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args358 = $rjs_core.Pair.listFromArray(args358177);
    var out359 = open_output_string();
    apply(fprintf, out359, form357, args358);
    return get_output_string(out359);
  });
  var symbol_p = M2.Core.Symbol.check;
  var make_string4360 = function(k3361, c1362, c2363) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var k364 = k3361;
    if (c2363 !== false) {
      var if_res178 = c1362;
    } else {
      var if_res178 = $rjs_core.Char.charFromCodepoint(0);
    }
    var c365 = if_res178;
    return M2.Core.UString.repeatChar(k364, c365);
  };
  var cl179 = function(k366) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4360(k366, false, false);
  };
  var cl180 = function(k367, c1368) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4360(k367, c1368, true);
  };
  var make_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam181 = {
      '1': cl179,
      '2': cl180
    }[arguments.length];
    if (fixed_lam181 !== undefined) {
      return fixed_lam181.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var list__gt_string = function(lst369) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.listToString(lst369);
  };
  var string__gt_immutable_string8370 = function(s6371, s7372) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (s7372 !== false) {
      var if_res182 = s6371;
    } else {
      var if_res182 = string_p;
    }
    var s373 = if_res182;
    return M2.Core.UString.stringToImmutableString(s373);
  };
  var cl183 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8370(false, false);
  };
  var cl184 = function(s6374) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8370(s6374, true);
  };
  var string__gt_immutable_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam185 = {
      '0': cl183,
      '1': cl184
    }[arguments.length];
    if (fixed_lam185 !== undefined) {
      return fixed_lam185.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var symbol__gt_string = function(v375) {
    if (symbol_p(v375) !== false) {
      var if_res186 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("symbol?"), $rjs_core.UString.make(", given:"), v375, $rjs_core.UString.make(", at:"), 0);
      var if_res186 = null;
    }
    if_res186;
    return M2.Core.UString.makeMutable(v375.toString());
  };
  var string__gt_symbol = function(s376) {
    if (string_p(s376) !== false) {
      var if_res187 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s376, $rjs_core.UString.make(", at:"), 0);
      var if_res187 = null;
    }
    if_res187;
    return M2.Core.Symbol.make(s376);
  };
  var string__gt_uninterned_symbol = function(s377) {
    if (string_p(s377) !== false) {
      var if_res188 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s377, $rjs_core.UString.make(", at:"), 0);
      var if_res188 = null;
    }
    if_res188;
    return M2.Core.Symbol.makeUninterned(s377);
  };
  var string__gt_number13378 = function(s12379, radix10380, radix11381) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var s382 = s12379;
    if (radix11381 !== false) {
      var if_res189 = radix10380;
    } else {
      var if_res189 = 10;
    }
    var radix383 = if_res189;
    var integer_in384 = function(lo385, hi386) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return function(v387) {
        return (exact_integer_p(v387) && __gt__eq_(v387, lo385)) && __lt__eq_(v387, hi386);
      };
    };
    if (string_p(s382) !== false) {
      var if_res190 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s382, $rjs_core.UString.make(", at:"), 0);
      var if_res190 = null;
    }
    if_res190;
    if (integer_in384(2, 16)(radix383) !== false) {
      var if_res191 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(integer-in 2 16)"), $rjs_core.UString.make(", given:"), radix383, $rjs_core.UString.make(", at:"), 1);
      var if_res191 = null;
    }
    if_res191;
    var result388 = parseInt(s382, radix383);
    if ((isNaN(result388) || not(s382.isValidInteger(radix383))) !== false) {
      var if_res192 = false;
    } else {
      var if_res192 = result388;
    }
    return if_res192;
  };
  var cl193 = function(s389) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_number13378(s389, false, false);
  };
  var cl194 = function(s390, radix10391) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_number13378(s390, radix10391, true);
  };
  var string__gt_number = $rjs_core.attachProcedureArity(function() {
    var fixed_lam195 = {
      '1': cl193,
      '2': cl194
    }[arguments.length];
    if (fixed_lam195 !== undefined) {
      return fixed_lam195.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var symbol_interned_p = function(sym392) {
    if (symbol_p(sym392) !== false) {
      var if_res196 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("symbol?"), $rjs_core.UString.make(", given:"), sym392, $rjs_core.UString.make(", at:"), 0);
      var if_res196 = null;
    }
    if_res196;
    return sym392 === M2.Core.Symbol.make(sym392.v);
  };
  var symbol_eq__p = function(s393, v394) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return s393.equals(v394);
  };
  var string_length = function(s395) {
    if (string_p(s395) !== false) {
      var if_res197 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s395, $rjs_core.UString.make(", at:"), 0);
      var if_res197 = null;
    }
    if_res197;
    return s395.length;
  };
  var string_downcase = function(s396) {
    if (string_p(s396) !== false) {
      var if_res198 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s396, $rjs_core.UString.make(", at:"), 0);
      var if_res198 = null;
    }
    if_res198;
    return s396.toLowerCase();
  };
  var string_upcase = function(s397) {
    if (string_p(s397) !== false) {
      var if_res199 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), s397, $rjs_core.UString.make(", at:"), 0);
      var if_res199 = null;
    }
    if_res199;
    return s397.toUpperCase();
  };
  var substring19398 = function(str17399, start18400, end15401, end16402) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var str403 = str17399;
    var start404 = start18400;
    if (end16402 !== false) {
      var if_res200 = end15401;
    } else {
      var if_res200 = false;
    }
    var end405 = if_res200;
    if (not(M2.Core.UString.check(str403)) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("expected a string"));
      var if_res204 = null;
    } else {
      if ((start404 < 0) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.make("invalid start index"));
        var if_res203 = null;
      } else {
        if (((end405 !== false) && (((end405 < 0) || (end405 > str403.length)) || (end405 < start404))) !== false) {
          throw M2.Core.racketContractError($rjs_core.UString.make("invalid end index"));
          var if_res202 = null;
        } else {
          if ((end405 === false) !== false) {
            end405 = str403.length;
            var if_res201 = null;
          } else {
            var if_res201 = rvoid();
          }
          var if_res202 = if_res201;
        }
        var if_res203 = if_res202;
      }
      var if_res204 = if_res203;
    }
    if_res204;
    return str403.substring(start404, end405);
  };
  var cl205 = function(str406, start407) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring19398(str406, start407, false, false);
  };
  var cl206 = function(str408, start409, end15410) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring19398(str408, start409, end15410, true);
  };
  var substring = $rjs_core.attachProcedureArity(function() {
    var fixed_lam207 = {
      '2': cl205,
      '3': cl206
    }[arguments.length];
    if (fixed_lam207 !== undefined) {
      return fixed_lam207.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var string_split = function(str411, sep412) {
    if (string_p(str411) !== false) {
      var if_res208 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), str411, $rjs_core.UString.make(", at:"), 0);
      var if_res208 = null;
    }
    if_res208;
    if ((function(v413) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v413) || regexp_p(v413);
    })(sep412) !== false) {
      var if_res209 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/or string? regexp?)"), $rjs_core.UString.make(", given:"), sep412, $rjs_core.UString.make(", at:"), 1);
      var if_res209 = null;
    }
    if_res209;
    return M2.Core.Pair.listFromArray(str411.split(sep412));
  };
  var string_set_bang_ = function(str414, k415, char416) {
    if ((function(v417) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v417) && (function(v418) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return not(immutable_p(v418));
      })(v417);
    })(str414) !== false) {
      var if_res210 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("(check/and string? (check/not immutable?))"), $rjs_core.UString.make(", given:"), str414, $rjs_core.UString.make(", at:"), 0);
      var if_res210 = null;
    }
    if_res210;
    if (exact_nonnegative_integer_p(k415) !== false) {
      var if_res211 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("exact-nonnegative-integer?"), $rjs_core.UString.make(", given:"), k415, $rjs_core.UString.make(", at:"), 1);
      var if_res211 = null;
    }
    if_res211;
    if (char_p(char416) !== false) {
      var if_res212 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), char416, $rjs_core.UString.make(", at:"), 2);
      var if_res212 = null;
    }
    if_res212;
    return str414.setCharAt(k415, char416);
  };
  var char_p = function(c419) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Char.check(c419);
  };
  var char__gt_integer = function(c420) {
    if (char_p(c420) !== false) {
      var if_res213 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), c420, $rjs_core.UString.make(", at:"), 0);
      var if_res213 = null;
    }
    if_res213;
    return M2.Core.Char.charToInteger(c420);
  };
  var integer__gt_char = function(k421) {
    if (exact_nonnegative_integer_p(k421) !== false) {
      var if_res214 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("exact-nonnegative-integer?"), $rjs_core.UString.make(", given:"), k421, $rjs_core.UString.make(", at:"), 0);
      var if_res214 = null;
    }
    if_res214;
    return M2.Core.Char.integerToChar(k421);
  };
  var char_utf_8_length = function(c422) {
    if (char_p(c422) !== false) {
      var if_res215 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), c422, $rjs_core.UString.make(", at:"), 0);
      var if_res215 = null;
    }
    if_res215;
    return M2.Core.Char.charUtf8Length(c422);
  };
  var char_lt__p = function(a423, b424) {
    if (char_p(a423) !== false) {
      var if_res216 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), a423, $rjs_core.UString.make(", at:"), 0);
      var if_res216 = null;
    }
    if_res216;
    if (char_p(b424) !== false) {
      var if_res217 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), b424, $rjs_core.UString.make(", at:"), 1);
      var if_res217 = null;
    }
    if_res217;
    return a423 < b424;
  };
  var char_lt__eq__p = function(a425, b426) {
    if (char_p(a425) !== false) {
      var if_res218 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), a425, $rjs_core.UString.make(", at:"), 0);
      var if_res218 = null;
    }
    if_res218;
    if (char_p(b426) !== false) {
      var if_res219 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), b426, $rjs_core.UString.make(", at:"), 1);
      var if_res219 = null;
    }
    if_res219;
    return a425 <= b426;
  };
  var char_gt__p = function(a427, b428) {
    if (char_p(a427) !== false) {
      var if_res220 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), a427, $rjs_core.UString.make(", at:"), 0);
      var if_res220 = null;
    }
    if_res220;
    if (char_p(b428) !== false) {
      var if_res221 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), b428, $rjs_core.UString.make(", at:"), 1);
      var if_res221 = null;
    }
    if_res221;
    return a427 > b428;
  };
  var char_gt__eq__p = function(a429, b430) {
    if (char_p(a429) !== false) {
      var if_res222 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), a429, $rjs_core.UString.make(", at:"), 0);
      var if_res222 = null;
    }
    if_res222;
    if (char_p(b430) !== false) {
      var if_res223 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), b430, $rjs_core.UString.make(", at:"), 1);
      var if_res223 = null;
    }
    if_res223;
    return a429 >= b430;
  };
  var char_eq__p = function(a431, b432) {
    if (char_p(a431) !== false) {
      var if_res224 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), a431, $rjs_core.UString.make(", at:"), 0);
      var if_res224 = null;
    }
    if_res224;
    if (char_p(b432) !== false) {
      var if_res225 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("char?"), $rjs_core.UString.make(", given:"), b432, $rjs_core.UString.make(", at:"), 1);
      var if_res225 = null;
    }
    if_res225;
    return M2.Core.Char.eq(a431, b432);
  };
  var box = M2.Core.Box.make;
  var unbox = function(v433) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v433.get();
  };
  var set_box_bang_ = function(b434, v435) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return b434.set(v435);
  };
  var let_result226 = M2.Core.Struct.makeStructTypeProperty({'name': $rjs_core.UString.make("prop:evt")});
  var prop_evt = let_result226.getAt(0);
  var evt_p = let_result226.getAt(1);
  var prop_checked_procedure = make_struct_type_property($rjs_core.UString.make("prop:checked-procedure")).getAt(0);
  var prop_impersonator_of = make_struct_type_property($rjs_core.UString.make("prop:impersonator-of")).getAt(0);
  var prop_arity_string = make_struct_type_property($rjs_core.UString.make("prop:arity-string")).getAt(0);
  var prop_incomplete_arity = make_struct_type_property($rjs_core.UString.make("prop:incomplete-arity")).getAt(0);
  var prop_method_arity_error = make_struct_type_property($rjs_core.UString.make("prop:method-arity-error")).getAt(0);
  var prop_exn_srclocs = make_struct_type_property($rjs_core.UString.make("prop:exn:srclocs")).getAt(0);
  var prop_procedure = M2.Core.Struct.propProcedure;
  var error = M2.Kernel.error;
  var bytes_p = function(bs436) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Bytes.check(bs436);
  };
  var bytes__gt_string_by_utf_8 = function(bs437) {
    if (bytes_p(bs437) !== false) {
      var if_res227 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("bytes?"), $rjs_core.UString.make(", given:"), bs437, $rjs_core.UString.make(", at:"), 0);
      var if_res227 = null;
    }
    if_res227;
    return M2.Core.UString.fromBytesUtf8(bs437);
  };
  var string__gt_bytes_by_utf_8 = function(str438) {
    if (string_p(str438) !== false) {
      var if_res228 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), str438, $rjs_core.UString.make(", at:"), 0);
      var if_res228 = null;
    }
    if_res228;
    return M2.Core.UString.toBytesUtf8(str438);
  };
  var bytes_eq__p = function(bstr1439, bstr2440) {
    if (bytes_p(bstr1439) !== false) {
      var if_res229 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("bytes?"), $rjs_core.UString.make(", given:"), bstr1439, $rjs_core.UString.make(", at:"), 0);
      var if_res229 = null;
    }
    if_res229;
    if (bytes_p(bstr2440) !== false) {
      var if_res230 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("bytes?"), $rjs_core.UString.make(", given:"), bstr2440, $rjs_core.UString.make(", at:"), 1);
      var if_res230 = null;
    }
    if_res230;
    return M2.Core.Bytes.eq(bstr1439, bstr2440);
  };
  var current_continuation_marks = M2.Core.Marks.getContinuationMarks;
  var continuation_mark_set__gt_list = M2.Core.Marks.getMarks;
  var continuation_mark_set_first = function(mark_set441, key_v442, none_v443, prompt_tag444) {
    var let_result231 = values();
    var mark_set445 = mark_set445 || M2.Core.Marks.getContinuationMarks(prompt_tag444);
    var marks446 = M2.Core.Marks.getMarks(mark_set445, key_v442, prompt_tag444);
    if (null_p(marks446) !== false) {
      var if_res232 = none_v443;
    } else {
      var if_res232 = marks446.hd;
    }
    return if_res232;
  };
  var make_parameter = M2.Paramz.makeParameter;
  var call_with_continuation_prompt = M2.Core.Marks.callWithContinuationPrompt;
  var abort_current_continuation = function(prompt_tag447) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.make("arity mismatch"));
      var if_res233 = null;
    } else {
      var if_res233 = rvoid();
    }
    if_res233;
    var let_result234 = values();
    var args448 = Array.prototype.slice.call(arguments, 1);
    throw new M2.Core.Marks.AbortCurrentContinuation(prompt_tag447, args448);
    return null;
  };
  var make_continuation_prompt_tag = M2.Core.Marks.makeContinuationPromptTag;
  var default_continuation_prompt_tag = M2.Core.Marks.defaultContinuationPromptTag;
  var raise = function(e449) {
    var abort_ccp450 = continuation_mark_set_first(current_continuation_marks(), M2.Paramz.ExceptionHandlerKey);
    return abort_ccp450(e449);
  };
  var current_output_port = make_parameter(M2.Core.Ports.standardOutputPort);
  var current_error_port = make_parameter(M2.Core.Ports.standardErrorPort);
  var current_print = make_parameter(function(p451) {
    if (void_p(p451) !== false) {
      var if_res235 = rvoid();
    } else {
      print(p451);
      var if_res235 = newline();
    }
    return if_res235;
  });
  var port_p = function(p452) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.check(p452);
  };
  var input_port_p = function(p453) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isInputPort(p453);
  };
  var output_port_p = function(p454) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isOutputPort(p454);
  };
  var string_port_p = function(p455) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isStringPort(p455);
  };
  var open_output_string = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.openOutputString();
  };
  var get_output_string = function(p456) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.getOutputString(p456);
  };
  var print_as_expression = make_parameter(true);
  var display24457 = function(datum23458, out21459, out22460) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum461 = datum23458;
    if (out22460 !== false) {
      var if_res236 = out21459;
    } else {
      var if_res236 = current_output_port();
    }
    var out462 = if_res236;
    return M2.Core.display(out462, datum461);
  };
  var cl237 = function(datum463) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display24457(datum463, false, false);
  };
  var cl238 = function(datum464, out21465) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display24457(datum464, out21465, true);
  };
  var display = $rjs_core.attachProcedureArity(function() {
    var fixed_lam239 = {
      '1': cl237,
      '2': cl238
    }[arguments.length];
    if (fixed_lam239 !== undefined) {
      return fixed_lam239.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var write29466 = function(datum28467, out26468, out27469) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum470 = datum28467;
    if (out27469 !== false) {
      var if_res240 = out26468;
    } else {
      var if_res240 = current_output_port();
    }
    var out471 = if_res240;
    return M2.Core.write(out471, datum470);
  };
  var cl241 = function(datum472) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write29466(datum472, false, false);
  };
  var cl242 = function(datum473, out26474) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write29466(datum473, out26474, true);
  };
  var write = $rjs_core.attachProcedureArity(function() {
    var fixed_lam243 = {
      '1': cl241,
      '2': cl242
    }[arguments.length];
    if (fixed_lam243 !== undefined) {
      return fixed_lam243.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var print36475 = function(datum35476, out31477, quote_depth32478, out33479, quote_depth34480) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum481 = datum35476;
    if (out33479 !== false) {
      var if_res244 = out31477;
    } else {
      var if_res244 = current_output_port();
    }
    var out482 = if_res244;
    if (quote_depth34480 !== false) {
      var if_res245 = quote_depth32478;
    } else {
      var if_res245 = 0;
    }
    var quote_depth483 = if_res245;
    return M2.Core.print(out482, datum481, print_as_expression(), quote_depth483);
  };
  var cl246 = function(datum484) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print36475(datum484, false, false, false, false);
  };
  var cl247 = function(datum485, out486, quote_depth32487) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print36475(datum485, out486, quote_depth32487, true, true);
  };
  var cl248 = function(datum488, out31489) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print36475(datum488, out31489, false, true, false);
  };
  var print = $rjs_core.attachProcedureArity(function() {
    var fixed_lam249 = {
      '1': cl246,
      '3': cl247,
      '2': cl248
    }[arguments.length];
    if (fixed_lam249 !== undefined) {
      return fixed_lam249.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var newline40490 = function(out38491, out39492) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (out39492 !== false) {
      var if_res250 = out38491;
    } else {
      var if_res250 = current_output_port();
    }
    var out493 = if_res250;
    return display($rjs_core.UString.make("\n"), out493);
  };
  var cl251 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline40490(false, false);
  };
  var cl252 = function(out38494) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline40490(out38494, true);
  };
  var newline = $rjs_core.attachProcedureArity(function() {
    var fixed_lam253 = {
      '0': cl251,
      '1': cl252
    }[arguments.length];
    if (fixed_lam253 !== undefined) {
      return fixed_lam253.apply(null, arguments);
    } else {
      return error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var current_inspector = function() {
    return true;
  };
  var raise_argument_error = error;
  var check_method = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var random = M2.Kernel.random;
  var current_seconds = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.floor(Date.now() / 1000);
  };
  var regexp_p = function(v495) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.check(v495);
  };
  var pregexp_p = regexp_p;
  var byte_regexp_p = regexp_p;
  var byte_pregexp_p = regexp_p;
  var regexp = function(str496) {
    if (string_p(str496) !== false) {
      var if_res254 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("string?"), $rjs_core.UString.make(", given:"), str496, $rjs_core.UString.make(", at:"), 0);
      var if_res254 = null;
    }
    if_res254;
    return M2.Core.Regexp.fromString(str496);
  };
  var pregexp = regexp;
  var byte_regexp = function(bs497) {
    if (bytes_p(bs497) !== false) {
      var if_res255 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.make("Expected:"), $rjs_core.UString.make("bytes?"), $rjs_core.UString.make(", given:"), bs497, $rjs_core.UString.make(", at:"), 0);
      var if_res255 = null;
    }
    if_res255;
    return M2.Core.Regexp.fromString(bytes__gt_string_by_utf_8(bs497));
  };
  var byte_pregexp = byte_regexp;
  var regexp_match = function(pattern498, input499) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.match(pattern498, input499);
  };
  var let_result256 = make_struct_type($rjs_core.Symbol.make("kernel:arity-at-least"), false, 1, 0, false, rnull, false, false, $rjs_core.Pair.makeList(0), false, $rjs_core.Symbol.make("kernel:arity-at-least"));
  var struct_500 = let_result256.getAt(0);
  var make_501 = let_result256.getAt(1);
  var __p502 = let_result256.getAt(2);
  var __ref503 = let_result256.getAt(3);
  var __set_bang_504 = let_result256.getAt(4);
  var let_result257 = values(struct_500, make_501, __p502, make_struct_field_accessor(__ref503, 0, $rjs_core.Symbol.make("value")));
  var struct_kernel_arity_at_least = let_result257.getAt(0);
  var make_arity_at_least = let_result257.getAt(1);
  var kernel_arity_at_least_p = let_result257.getAt(2);
  var kernel_arity_at_least_value = let_result257.getAt(3);
  var procedure_p = function(f505) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return typeof(f505) === "function";
  };
  var arity_at_least = make_arity_at_least;
  var arity_at_least_p = function(p506) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_p(p506);
  };
  var arity_at_least_value = function(p507) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_value(p507);
  };
  var procedure_arity_includes_p = function(f508) {
    return true;
  };
  var procedure_arity = function(fn509) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (Array.isArray(fn509.__rjs_arityValue) !== false) {
      if ((fn509.__rjs_arityValue.length === 1) !== false) {
        var if_res258 = fn509.__rjs_arityValue[0];
      } else {
        var if_res258 = M2.Core.Pair.listFromArray(fn509.__rjs_arityValue);
      }
      var if_res260 = if_res258;
    } else {
      if ((fn509.__rjs_arityValue === undefined) !== false) {
        var if_res259 = fn509.length;
      } else {
        var if_res259 = make_arity_at_least(fn509.__rjs_arityValue || fn509.length);
      }
      var if_res260 = if_res259;
    }
    return if_res260;
  };
  var procedure_arity_p = function(v510) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (exact_nonnegative_integer_p(v510) || kernel_arity_at_least_p(v510)) || ormap(function(v511) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return exact_nonnegative_integer_p(v511) || kernel_arity_at_least_p(v511);
    }, v510);
  };
  var checked_procedure_check_and_extract = function(type512, v513, proc514, v1515, v2516) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((M2.Core.Struct.check(v513, type512) && type512._findProperty(prop_checked_procedure)) !== false) {
      var fn517 = v513.getField(0);
      var r1518 = fn517(v1515, v2516);
      if (r1518 !== false) {
        var if_res261 = v513.getField(1);
      } else {
        var if_res261 = proc514(v513, v1515, v2516);
      }
      var if_res262 = if_res261;
    } else {
      var if_res262 = proc514(v513, v1515, v2516);
    }
    return if_res262;
  };
  var gensym = function(sym519) {
    var s520 = (sym519 && sym519.v) || $rjs_core.UString.make("");
    __count = __count + 1;
    return M2.Core.Symbol.makeUninterned(s520 + __count);
  };
  var eval_jit_enabled = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var variable_reference_constant_p = function(x521) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var inspector_p = function(p522) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  };
  var make_thread_cell = function(p523) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p523;
  };
  var __count = 1000;
  var system_type = function(system_type524, mod525) {
    return $rjs_core.Symbol.make("javascript");
  };
  var make_weak_hash = make_hash;
  var make_weak_hasheqv = make_hasheqv;
  var make_weak_hasheq = make_hasheq;
  var __rjs_quoted__ = {};
  __rjs_quoted__.make_struct_type_property = make_struct_type_property;
  __rjs_quoted__.__plus_ = __plus_;
  __rjs_quoted__.struct_kernel_arity_at_least = struct_kernel_arity_at_least;
  __rjs_quoted__.length = length;
  __rjs_quoted__.kernel_arity_at_least_value = kernel_arity_at_least_value;
  __rjs_quoted__.make_arity_at_least = make_arity_at_least;
  __rjs_quoted__.kernel_arity_at_least_p = kernel_arity_at_least_p;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get equal_p() {
      return equal_p;
    },
    get eqv_p() {
      return eqv_p;
    },
    get eq_p() {
      return eq_p;
    },
    get values() {
      return values;
    },
    get call_with_values() {
      return call_with_values;
    },
    get immutable_p() {
      return immutable_p;
    },
    get rvoid() {
      return rvoid;
    },
    get void_p() {
      return void_p;
    },
    get number_p() {
      return number_p;
    },
    get real_p() {
      return real_p;
    },
    get integer_p() {
      return integer_p;
    },
    get zero_p() {
      return zero_p;
    },
    get raise_mismatch_error() {
      return raise_mismatch_error;
    },
    get positive_p() {
      return positive_p;
    },
    get negative_p() {
      return negative_p;
    },
    get add1() {
      return add1;
    },
    get sub1() {
      return sub1;
    },
    get quotient() {
      return quotient;
    },
    get even_p() {
      return even_p;
    },
    get odd_p() {
      return odd_p;
    },
    get exact_nonnegative_integer_p() {
      return exact_nonnegative_integer_p;
    },
    get exact_integer_p() {
      return exact_integer_p;
    },
    get __times_() {
      return __times_;
    },
    get __by_() {
      return __by_;
    },
    get __plus_() {
      return __plus_;
    },
    get __() {
      return __;
    },
    get __lt_() {
      return __lt_;
    },
    get __gt_() {
      return __gt_;
    },
    get __lt__eq_() {
      return __lt__eq_;
    },
    get __gt__eq_() {
      return __gt__eq_;
    },
    get __eq_() {
      return __eq_;
    },
    get floor() {
      return floor;
    },
    get abs() {
      return abs;
    },
    get sin() {
      return sin;
    },
    get cos() {
      return cos;
    },
    get tan() {
      return tan;
    },
    get atan() {
      return atan;
    },
    get ceiling() {
      return ceiling;
    },
    get round() {
      return round;
    },
    get min() {
      return min;
    },
    get max() {
      return max;
    },
    get log() {
      return log;
    },
    get expt() {
      return expt;
    },
    get sqrt() {
      return sqrt;
    },
    get sqr() {
      return sqr;
    },
    get remainder() {
      return remainder;
    },
    get number__gt_string() {
      return number__gt_string;
    },
    get inexact__gt_exact() {
      return inexact__gt_exact;
    },
    get exact__gt_inexact() {
      return exact__gt_inexact;
    },
    get not() {
      return not;
    },
    get rfalse() {
      return rfalse;
    },
    get rtrue() {
      return rtrue;
    },
    get false_p() {
      return false_p;
    },
    get car() {
      return car;
    },
    get cdr() {
      return cdr;
    },
    get cons() {
      return cons;
    },
    get pair_p() {
      return pair_p;
    },
    get caar() {
      return caar;
    },
    get cadr() {
      return cadr;
    },
    get cdar() {
      return cdar;
    },
    get cddr() {
      return cddr;
    },
    get caddr() {
      return caddr;
    },
    get rnull() {
      return rnull;
    },
    get list() {
      return list;
    },
    get null_p() {
      return null_p;
    },
    get list_p() {
      return list_p;
    },
    get length() {
      return length;
    },
    get reverse() {
      return reverse;
    },
    get list_times_() {
      return list_times_;
    },
    get append() {
      return append;
    },
    get for_each() {
      return for_each;
    },
    get mcons() {
      return mcons;
    },
    get mpair_p() {
      return mpair_p;
    },
    get mcar() {
      return mcar;
    },
    get mcdr() {
      return mcdr;
    },
    get set_mcar_bang_() {
      return set_mcar_bang_;
    },
    get set_mcdr_bang_() {
      return set_mcdr_bang_;
    },
    get make_struct_type() {
      return make_struct_type;
    },
    get make_struct_field_accessor() {
      return make_struct_field_accessor;
    },
    get make_struct_field_mutator() {
      return make_struct_field_mutator;
    },
    get make_struct_type_property() {
      return make_struct_type_property;
    },
    get check_struct_type() {
      return check_struct_type;
    },
    get struct_type_p() {
      return struct_type_p;
    },
    get struct_type_info() {
      return struct_type_info;
    },
    get vector() {
      return vector;
    },
    get make_vector() {
      return make_vector;
    },
    get vector_p() {
      return vector_p;
    },
    get vector_length() {
      return vector_length;
    },
    get vector_ref() {
      return vector_ref;
    },
    get vector_set_bang_() {
      return vector_set_bang_;
    },
    get vector__gt_list() {
      return vector__gt_list;
    },
    get vector__gt_immutable_vector() {
      return vector__gt_immutable_vector;
    },
    get hash() {
      return hash;
    },
    get hasheqv() {
      return hasheqv;
    },
    get hasheq() {
      return hasheq;
    },
    get make_hash() {
      return make_hash;
    },
    get make_hasheqv() {
      return make_hasheqv;
    },
    get make_hasheq() {
      return make_hasheq;
    },
    get make_immutable_hash() {
      return make_immutable_hash;
    },
    get make_immutable_hasheqv() {
      return make_immutable_hasheqv;
    },
    get make_immutable_hasheq() {
      return make_immutable_hasheq;
    },
    get hash_p() {
      return hash_p;
    },
    get hash_equal_p() {
      return hash_equal_p;
    },
    get hash_eqv_p() {
      return hash_eqv_p;
    },
    get hash_eq_p() {
      return hash_eq_p;
    },
    get hash_ref() {
      return hash_ref;
    },
    get hash_set() {
      return hash_set;
    },
    get hash_set_bang_() {
      return hash_set_bang_;
    },
    get hash_map() {
      return hash_map;
    },
    get apply() {
      return apply;
    },
    get map() {
      return map;
    },
    get foldl() {
      return foldl;
    },
    get _foldr() {
      return _foldr;
    },
    get foldr() {
      return foldr;
    },
    get range() {
      return range;
    },
    get remove() {
      return remove;
    },
    get filter() {
      return filter;
    },
    get ormap() {
      return ormap;
    },
    get andmap() {
      return andmap;
    },
    get member() {
      return member;
    },
    get compose() {
      return compose;
    },
    get compose1() {
      return compose1;
    },
    get list_ref() {
      return list_ref;
    },
    get build_list() {
      return build_list;
    },
    get make_list() {
      return make_list;
    },
    get flatten() {
      return flatten;
    },
    get assoc() {
      return assoc;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    },
    get alt_reverse() {
      return alt_reverse;
    },
    get string() {
      return string;
    },
    get string_append() {
      return string_append;
    },
    get string_ref() {
      return string_ref;
    },
    get string_eq__p() {
      return string_eq__p;
    },
    get string_lt__p() {
      return string_lt__p;
    },
    get string_lt__eq__p() {
      return string_lt__eq__p;
    },
    get string_gt__p() {
      return string_gt__p;
    },
    get string_gt__eq__p() {
      return string_gt__eq__p;
    },
    get string_p() {
      return string_p;
    },
    get fprintf() {
      return fprintf;
    },
    get eprintf() {
      return eprintf;
    },
    get format() {
      return format;
    },
    get symbol_p() {
      return symbol_p;
    },
    get make_string() {
      return make_string;
    },
    get list__gt_string() {
      return list__gt_string;
    },
    get string__gt_immutable_string() {
      return string__gt_immutable_string;
    },
    get symbol__gt_string() {
      return symbol__gt_string;
    },
    get string__gt_symbol() {
      return string__gt_symbol;
    },
    get string__gt_uninterned_symbol() {
      return string__gt_uninterned_symbol;
    },
    get string__gt_number() {
      return string__gt_number;
    },
    get symbol_interned_p() {
      return symbol_interned_p;
    },
    get symbol_eq__p() {
      return symbol_eq__p;
    },
    get string_length() {
      return string_length;
    },
    get string_downcase() {
      return string_downcase;
    },
    get string_upcase() {
      return string_upcase;
    },
    get substring() {
      return substring;
    },
    get string_split() {
      return string_split;
    },
    get string_set_bang_() {
      return string_set_bang_;
    },
    get char_p() {
      return char_p;
    },
    get char__gt_integer() {
      return char__gt_integer;
    },
    get integer__gt_char() {
      return integer__gt_char;
    },
    get char_utf_8_length() {
      return char_utf_8_length;
    },
    get char_lt__p() {
      return char_lt__p;
    },
    get char_lt__eq__p() {
      return char_lt__eq__p;
    },
    get char_gt__p() {
      return char_gt__p;
    },
    get char_gt__eq__p() {
      return char_gt__eq__p;
    },
    get char_eq__p() {
      return char_eq__p;
    },
    get box() {
      return box;
    },
    get unbox() {
      return unbox;
    },
    get set_box_bang_() {
      return set_box_bang_;
    },
    get evt_p() {
      return evt_p;
    },
    get prop_evt() {
      return prop_evt;
    },
    get prop_checked_procedure() {
      return prop_checked_procedure;
    },
    get prop_impersonator_of() {
      return prop_impersonator_of;
    },
    get prop_arity_string() {
      return prop_arity_string;
    },
    get prop_incomplete_arity() {
      return prop_incomplete_arity;
    },
    get prop_method_arity_error() {
      return prop_method_arity_error;
    },
    get prop_exn_srclocs() {
      return prop_exn_srclocs;
    },
    get prop_procedure() {
      return prop_procedure;
    },
    get error() {
      return error;
    },
    get bytes_p() {
      return bytes_p;
    },
    get bytes__gt_string_by_utf_8() {
      return bytes__gt_string_by_utf_8;
    },
    get string__gt_bytes_by_utf_8() {
      return string__gt_bytes_by_utf_8;
    },
    get bytes_eq__p() {
      return bytes_eq__p;
    },
    get current_continuation_marks() {
      return current_continuation_marks;
    },
    get continuation_mark_set__gt_list() {
      return continuation_mark_set__gt_list;
    },
    get continuation_mark_set_first() {
      return continuation_mark_set_first;
    },
    get make_parameter() {
      return make_parameter;
    },
    get call_with_continuation_prompt() {
      return call_with_continuation_prompt;
    },
    get abort_current_continuation() {
      return abort_current_continuation;
    },
    get make_continuation_prompt_tag() {
      return make_continuation_prompt_tag;
    },
    get default_continuation_prompt_tag() {
      return default_continuation_prompt_tag;
    },
    get raise() {
      return raise;
    },
    get current_output_port() {
      return current_output_port;
    },
    get current_error_port() {
      return current_error_port;
    },
    get current_print() {
      return current_print;
    },
    get port_p() {
      return port_p;
    },
    get input_port_p() {
      return input_port_p;
    },
    get output_port_p() {
      return output_port_p;
    },
    get string_port_p() {
      return string_port_p;
    },
    get open_output_string() {
      return open_output_string;
    },
    get get_output_string() {
      return get_output_string;
    },
    get print_as_expression() {
      return print_as_expression;
    },
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    },
    get newline() {
      return newline;
    },
    get current_inspector() {
      return current_inspector;
    },
    get raise_argument_error() {
      return raise_argument_error;
    },
    get check_method() {
      return check_method;
    },
    get random() {
      return random;
    },
    get current_seconds() {
      return current_seconds;
    },
    get regexp_p() {
      return regexp_p;
    },
    get pregexp_p() {
      return pregexp_p;
    },
    get byte_regexp_p() {
      return byte_regexp_p;
    },
    get byte_pregexp_p() {
      return byte_pregexp_p;
    },
    get regexp() {
      return regexp;
    },
    get pregexp() {
      return pregexp;
    },
    get byte_regexp() {
      return byte_regexp;
    },
    get byte_pregexp() {
      return byte_pregexp;
    },
    get regexp_match() {
      return regexp_match;
    },
    get kernel_arity_at_least_value() {
      return kernel_arity_at_least_value;
    },
    get kernel_arity_at_least_p() {
      return kernel_arity_at_least_p;
    },
    get make_arity_at_least() {
      return make_arity_at_least;
    },
    get struct_kernel_arity_at_least() {
      return struct_kernel_arity_at_least;
    },
    get procedure_p() {
      return procedure_p;
    },
    get arity_at_least() {
      return arity_at_least;
    },
    get arity_at_least_p() {
      return arity_at_least_p;
    },
    get arity_at_least_value() {
      return arity_at_least_value;
    },
    get procedure_arity_includes_p() {
      return procedure_arity_includes_p;
    },
    get procedure_arity() {
      return procedure_arity;
    },
    get procedure_arity_p() {
      return procedure_arity_p;
    },
    get checked_procedure_check_and_extract() {
      return checked_procedure_check_and_extract;
    },
    get gensym() {
      return gensym;
    },
    get eval_jit_enabled() {
      return eval_jit_enabled;
    },
    get variable_reference_constant_p() {
      return variable_reference_constant_p;
    },
    get inspector_p() {
      return inspector_p;
    },
    get make_thread_cell() {
      return make_thread_cell;
    },
    get system_type() {
      return system_type;
    },
    get make_weak_hash() {
      return make_weak_hash;
    },
    get make_weak_hasheqv() {
      return make_weak_hasheqv;
    },
    get make_weak_hasheq() {
      return make_weak_hasheq;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/private/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var ___js_ffi = $rjs_core.attachProcedureArity(function() {
    for (var _691370 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      _691370[$__1] = arguments[$__1];
    var _691 = $rjs_core.Pair.listFromArray(_691370);
    return M0.error($rjs_core.Symbol.make("racketscript"), $rjs_core.UString.make("can't make JS ffi calls in Racket"));
  });
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ___js_ffi() {
      return ___js_ffi;
    }
  };
})();
var $__collects_47_racket_47_private_47_member_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/member.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var bad_list = function(who3120, orig_l3121) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who3120, $rjs_core.UString.make("not a proper list: "), orig_l3121);
  };
  var memq3122 = function(v3123, orig_l3124) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3125 = function(ls3126) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3126) !== false) {
        var if_res2093 = false;
      } else {
        if (M0.not(M0.pair_p(ls3126)) !== false) {
          var if_res2092 = bad_list($rjs_core.Symbol.make("memq"), orig_l3124);
        } else {
          if (M0.eq_p(v3123, M0.car(ls3126)) !== false) {
            var if_res2091 = ls3126;
          } else {
            var if_res2091 = loop3125(M0.cdr(ls3126));
          }
          var if_res2092 = if_res2091;
        }
        var if_res2093 = if_res2092;
      }
      return if_res2093;
    };
    return loop3125(orig_l3124);
  };
  var memv3127 = function(v3128, orig_l3129) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3130 = function(ls3131) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3131) !== false) {
        var if_res2090 = false;
      } else {
        if (M0.not(M0.pair_p(ls3131)) !== false) {
          var if_res2089 = bad_list($rjs_core.Symbol.make("memv"), orig_l3129);
        } else {
          if (M0.eqv_p(v3128, M0.car(ls3131)) !== false) {
            var if_res2088 = ls3131;
          } else {
            var if_res2088 = loop3130(M0.cdr(ls3131));
          }
          var if_res2089 = if_res2088;
        }
        var if_res2090 = if_res2089;
      }
      return if_res2090;
    };
    return loop3130(orig_l3129);
  };
  var member3133 = function(v3134, orig_l3135) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3136 = function(ls3137) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3137) !== false) {
        var if_res2079 = false;
      } else {
        if (M0.not(M0.pair_p(ls3137)) !== false) {
          var if_res2078 = bad_list($rjs_core.Symbol.make("member"), orig_l3135);
        } else {
          if (M0.equal_p(v3134, M0.car(ls3137)) !== false) {
            var if_res2077 = ls3137;
          } else {
            var if_res2077 = loop3136(M0.cdr(ls3137));
          }
          var if_res2078 = if_res2077;
        }
        var if_res2079 = if_res2078;
      }
      return if_res2079;
    };
    return loop3136(orig_l3135);
  };
  var default3132 = member3133;
  var cl2080 = function(v3139, orig_l3140) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return default3132(v3139, orig_l3140);
  };
  var cl2081 = function(v3141, orig_l3142, eq_p3143) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(eq_p3143) !== false) {
      var if_res2083 = M0.procedure_arity_includes_p(eq_p3143, 2);
    } else {
      var if_res2083 = false;
    }
    if (if_res2083 !== false) {
      var if_res2084 = M0.rvoid();
    } else {
      var if_res2084 = M0.raise_argument_error($rjs_core.Symbol.make("member"), $rjs_core.UString.make("(procedure-arity-includes/c 2)"), eq_p3143);
    }
    if_res2084;
    var member3144 = function(v3145, orig_l3146) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop3147 = function(ls3148) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls3148) !== false) {
          var if_res2087 = false;
        } else {
          if (M0.not(M0.pair_p(ls3148)) !== false) {
            var if_res2086 = bad_list($rjs_core.Symbol.make("member"), orig_l3146);
          } else {
            if (eq_p3143(v3145, M0.car(ls3148)) !== false) {
              var if_res2085 = ls3148;
            } else {
              var if_res2085 = loop3147(M0.cdr(ls3148));
            }
            var if_res2086 = if_res2085;
          }
          var if_res2087 = if_res2086;
        }
        return if_res2087;
      };
      return loop3147(orig_l3146);
    };
    return member3144(v3141, orig_l3142);
  };
  var member3138 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2082 = {
      '2': cl2080,
      '3': cl2081
    }[arguments.length];
    if (fixed_lam2082 !== undefined) {
      return fixed_lam2082.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var let_result2094 = M0.values(memq3122, memv3127, member3138);
  var memq = let_result2094.getAt(0);
  var memv = let_result2094.getAt(1);
  var member = let_result2094.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get member() {
      return member;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    }
  };
})();
var $__runtime_47_paramz_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var parameterization_key = Paramz.ParameterizationKey;
  var extend_parameterization = Paramz.extendParameterization;
  var exception_handler_key = Paramz.ExceptionHandlerKey;
  var check_for_break = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return undefined;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get parameterization_key() {
      return parameterization_key;
    },
    get extend_parameterization() {
      return extend_parameterization;
    },
    get exception_handler_key() {
      return exception_handler_key;
    },
    get check_for_break() {
      return check_for_break;
    }
  };
})();
var $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/more-scheme.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_paramz_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var current_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.extend_parameterization(M1.continuation_mark_set_first(false, M0.parameterization_key));
  };
  var call_with_parameterization = function(paramz3058, thunk3059) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.parameterization_p(paramz3058) !== false) {
      var if_res2003 = M1.rvoid();
    } else {
      var if_res2003 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.make("parameterization?"), 0, paramz3058, thunk3059);
    }
    if_res2003;
    if (M1.procedure_p(thunk3059) !== false) {
      var if_res2004 = M1.procedure_arity_includes_p(thunk3059, 0);
    } else {
      var if_res2004 = false;
    }
    if (if_res2004 !== false) {
      var if_res2005 = M1.rvoid();
    } else {
      var if_res2005 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.make("(-> any)"), 1, paramz3058, thunk3059);
    }
    if_res2005;
    var __context2006 = $rjs_core.Marks.getFrames();
    var __context2007;
    try {
      __context2007 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.parameterization_key, paramz3058);
      var __wcm_result2008 = thunk3059();
    } finally {
      $rjs_core.Marks.updateFrame(__context2006, __context2007);
    }
    return __wcm_result2008;
  };
  var let_result2010 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false);
  var struct_break_paramz = let_result2010.getAt(0);
  var make_break_paramz = let_result2010.getAt(1);
  var break_paramz_p = let_result2010.getAt(2);
  var break_paramz_ref = let_result2010.getAt(3);
  var break_paramz_set_bang_ = let_result2010.getAt(4);
  var inspector3060 = M1.current_inspector();
  if (inspector3060 !== false) {
    var if_res2011 = M1.not(M1.inspector_p(inspector3060));
  } else {
    var if_res2011 = false;
  }
  if (if_res2011 !== false) {
    var if_res2012 = M1.raise_argument_error($rjs_core.Symbol.make("define-struct"), $rjs_core.UString.make("(or/c inspector? #f)"), inspector3060);
  } else {
    var if_res2012 = M1.rvoid();
  }
  if_res2012;
  var let_result2013 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false, M1.rnull, inspector3060);
  var type3061 = let_result2013.getAt(0);
  var maker3062 = let_result2013.getAt(1);
  var pred3063 = let_result2013.getAt(2);
  var access3064 = let_result2013.getAt(3);
  var mutate3065 = let_result2013.getAt(4);
  var let_result2014 = M1.values(type3061, maker3062, pred3063, M1.make_struct_field_accessor(access3064, 0, $rjs_core.Symbol.make("cell")), M1.make_struct_field_mutator(mutate3065, 0, $rjs_core.Symbol.make("cell")));
  var struct_break_parameterization = let_result2014.getAt(0);
  var make_break_parameterization = let_result2014.getAt(1);
  var break_parameterization_p = let_result2014.getAt(2);
  var break_parameterization_cell = let_result2014.getAt(3);
  var set_break_parameterization_cell_bang_ = let_result2014.getAt(4);
  var current_break_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_break_paramz(M1.continuation_mark_set_first(false, M0.__rjs_quoted__.break_enabled_key));
  };
  var call_with_break_parameterization = function(paramz3066, thunk3067) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (break_paramz_p(paramz3066) !== false) {
      var if_res2015 = M1.rvoid();
    } else {
      var if_res2015 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-break-parameterization"), $rjs_core.UString.make("break-parameterization?"), 0, paramz3066, thunk3067);
    }
    if_res2015;
    if (M1.procedure_p(thunk3067) !== false) {
      var if_res2016 = M1.procedure_arity_includes_p(thunk3067, 0);
    } else {
      var if_res2016 = false;
    }
    if (if_res2016 !== false) {
      var if_res2017 = M1.rvoid();
    } else {
      var if_res2017 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.make("(-> any)"), 1, paramz3066, thunk3067);
    }
    if_res2017;
    var __context2019 = $rjs_core.Marks.getFrames();
    var __context2020;
    try {
      __context2020 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, break_paramz_ref(paramz3066, 0));
      M0.check_for_break();
      var __wcm_result2021 = thunk3067();
    } finally {
      $rjs_core.Marks.updateFrame(__context2019, __context2020);
    }
    var begin_res2018 = __wcm_result2021;
    M0.check_for_break();
    return begin_res2018;
  };
  var select_handler_by_no_breaks = function(e3068, bpz3069, l3070) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2030 = $rjs_core.Marks.getFrames();
    var __context2031;
    try {
      __context2031 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, M1.make_thread_cell(false));
      var loop3071 = function(l3072) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(l3072) !== false) {
          var if_res2029 = M1.raise(e3068);
        } else {
          if (M1.caar(l3072)(e3068) !== false) {
            var begin_res2023 = M1.cdar(l3072)(e3068);
            var __context2024 = $rjs_core.Marks.getFrames();
            var __context2025;
            try {
              __context2025 = $rjs_core.Marks.enterFrame();
              $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3069);
              var __wcm_result2026 = M0.check_for_break();
            } finally {
              $rjs_core.Marks.updateFrame(__context2024, __context2025);
            }
            __wcm_result2026;
            var if_res2028 = begin_res2023;
          } else {
            var if_res2028 = loop3071(M1.cdr(l3072));
          }
          var if_res2029 = if_res2028;
        }
        return if_res2029;
      };
      var __wcm_result2032 = loop3071(l3070);
    } finally {
      $rjs_core.Marks.updateFrame(__context2030, __context2031);
    }
    return __wcm_result2032;
  };
  var select_handler_by_breaks_as_is = function(e3073, bpz3074, l3075) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(l3075) !== false) {
      var if_res2039 = M1.raise(e3073);
    } else {
      if (M1.caar(l3075)(e3073) !== false) {
        var __context2034 = $rjs_core.Marks.getFrames();
        var __context2035;
        try {
          __context2035 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3074);
          M0.check_for_break();
          var __wcm_result2036 = M1.cdar(l3075)(e3073);
        } finally {
          $rjs_core.Marks.updateFrame(__context2034, __context2035);
        }
        var if_res2038 = __wcm_result2036;
      } else {
        var if_res2038 = select_handler_by_breaks_as_is(e3073, bpz3074, M1.cdr(l3075));
      }
      var if_res2039 = if_res2038;
    }
    return if_res2039;
  };
  var false_thread_cell = M1.make_thread_cell(false);
  var check_with_handlers_in_context = function(handler_prompt_key3076) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.continuation_prompt_available_p(handler_prompt_key3076) !== false) {
      var if_res2040 = M1.rvoid();
    } else {
      var if_res2040 = M1.error($rjs_core.Symbol.make("with-handlers"), $rjs_core.UString.make("exception handler used out of context"));
    }
    return if_res2040;
  };
  var handler_prompt_key = M1.make_continuation_prompt_tag();
  var call_handled_body = function(bpz3077, handle_proc3078, body_thunk3079) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2049 = $rjs_core.Marks.getFrames();
    var __context2050;
    try {
      __context2050 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, false_thread_cell);
      var __wcm_result2051 = M1.call_with_continuation_prompt(function(bpz3080, body_thunk3081) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var __context2045 = $rjs_core.Marks.getFrames();
        var __context2046;
        try {
          __context2046 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3080);
          var __context2041 = $rjs_core.Marks.getFrames();
          var __context2042;
          try {
            __context2042 = __context2041;
            $rjs_core.Marks.setMark(M0.exception_handler_key, function(e3082) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M1.abort_current_continuation(handler_prompt_key, e3082);
            });
            var __wcm_result2043 = body_thunk3081();
          } finally {
            $rjs_core.Marks.updateFrame(__context2041, __context2042);
          }
          var __wcm_result2047 = __wcm_result2043;
        } finally {
          $rjs_core.Marks.updateFrame(__context2045, __context2046);
        }
        return __wcm_result2047;
      }, handler_prompt_key, handle_proc3078, bpz3077, body_thunk3079);
    } finally {
      $rjs_core.Marks.updateFrame(__context2049, __context2050);
    }
    return __wcm_result2051;
  };
  var call_with_exception_handler = function(exnh3083, thunk3084) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2054 = $rjs_core.Marks.getFrames();
    var __context2055;
    try {
      __context2055 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.exception_handler_key, exnh3083);
      var __wcm_result2056 = thunk3084();
    } finally {
      $rjs_core.Marks.updateFrame(__context2054, __context2055);
    }
    var begin_res2053 = __wcm_result2056;
    M1.rvoid();
    return begin_res2053;
  };
  var call_by_cc = M1.__rjs_quoted__.call_with_current_continuation;
  var not_there3085 = M1.gensym();
  var up3086 = function(who3087, mut_p3088, set3089, ht3090, key3091, xform3092, default3093) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3090) !== false) {
      if (mut_p3088 !== false) {
        var if_res2058 = M1.not(M1.immutable_p(ht3090));
      } else {
        var if_res2058 = M1.immutable_p(ht3090);
      }
      var if_res2059 = if_res2058;
    } else {
      var if_res2059 = false;
    }
    if (if_res2059 !== false) {
      var if_res2061 = M1.rvoid();
    } else {
      if (mut_p3088 !== false) {
        var if_res2060 = $rjs_core.UString.make("(and/c hash? (not/c immutable?))");
      } else {
        var if_res2060 = $rjs_core.UString.make("(and/c hash? immutable?)");
      }
      var if_res2061 = M1.raise_argument_error(who3087, if_res2060, ht3090);
    }
    if_res2061;
    if (M1.procedure_p(xform3092) !== false) {
      var if_res2062 = M1.procedure_arity_includes_p(xform3092, 1);
    } else {
      var if_res2062 = false;
    }
    if (if_res2062 !== false) {
      var if_res2063 = M1.rvoid();
    } else {
      var if_res2063 = M1.raise_argument_error(who3087, $rjs_core.UString.make("(any/c . -> . any/c)"), xform3092);
    }
    if_res2063;
    var v3094 = M1.hash_ref(ht3090, key3091, default3093);
    if (M1.eq_p(v3094, not_there3085) !== false) {
      var if_res2064 = M1.raise_mismatch_error(who3087, $rjs_core.UString.make("no value found for key: "), key3091);
    } else {
      var if_res2064 = set3089(ht3090, key3091, xform3092(v3094));
    }
    return if_res2064;
  };
  var cl2065 = function(ht3099, key3100, xform3101, default3102) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3086($rjs_core.Symbol.make("hash-update"), false, M1.hash_set, ht3099, key3100, xform3101, default3102);
  };
  var cl2066 = function(ht3103, key3104, xform3105) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update(ht3103, key3104, xform3105, not_there3085);
  };
  var hash_update3095 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2067 = {
      '4': cl2065,
      '3': cl2066
    }[arguments.length];
    if (fixed_lam2067 !== undefined) {
      return fixed_lam2067.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var cl2068 = function(ht3106, key3107, xform3108, default3109) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3086($rjs_core.Symbol.make("hash-update!"), true, M1.hash_set_bang_, ht3106, key3107, xform3108, default3109);
  };
  var cl2069 = function(ht3110, key3111, xform3112) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update_bang_(ht3110, key3111, xform3112, not_there3085);
  };
  var hash_update_bang_3096 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2070 = {
      '4': cl2068,
      '3': cl2069
    }[arguments.length];
    if (fixed_lam2070 !== undefined) {
      return fixed_lam2070.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var hash_has_key_p3097 = function(ht3113, key3114) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3113) !== false) {
      var if_res2071 = M1.rvoid();
    } else {
      var if_res2071 = M1.raise_argument_error($rjs_core.Symbol.make("hash-has-key?"), $rjs_core.UString.make("hash?"), 0, ht3113, key3114);
    }
    if_res2071;
    return M1.not(M1.eq_p(not_there3085, M1.hash_ref(ht3113, key3114, not_there3085)));
  };
  var hash_ref_bang_3098 = function(ht3115, key3116, new3117) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3115) !== false) {
      var if_res2072 = M1.not(M1.immutable_p(ht3115));
    } else {
      var if_res2072 = false;
    }
    if (if_res2072 !== false) {
      var if_res2073 = M1.rvoid();
    } else {
      var if_res2073 = M1.raise_argument_error($rjs_core.Symbol.make("hash-ref!"), $rjs_core.UString.make("(and/c hash? (not/c immutable?))"), 0, ht3115, key3116, new3117);
    }
    if_res2073;
    var v3118 = M1.hash_ref(ht3115, key3116, not_there3085);
    if (M1.eq_p(not_there3085, v3118) !== false) {
      if (M1.procedure_p(new3117) !== false) {
        var if_res2074 = new3117();
      } else {
        var if_res2074 = new3117;
      }
      var n3119 = if_res2074;
      M1.hash_set_bang_(ht3115, key3116, n3119);
      var if_res2075 = n3119;
    } else {
      var if_res2075 = v3118;
    }
    return if_res2075;
  };
  var let_result2076 = M1.values(hash_update3095, hash_update_bang_3096, hash_has_key_p3097, hash_ref_bang_3098);
  var hash_update = let_result2076.getAt(0);
  var hash_update_bang_ = let_result2076.getAt(1);
  var hash_has_key_p = let_result2076.getAt(2);
  var hash_ref_bang_ = let_result2076.getAt(3);
  var __rjs_quoted__ = {};
  __rjs_quoted__.select_handler_by_breaks_as_is = select_handler_by_breaks_as_is;
  __rjs_quoted__.call_by_cc = call_by_cc;
  __rjs_quoted__.select_handler_by_no_breaks = select_handler_by_no_breaks;
  __rjs_quoted__.call_handled_body = call_handled_body;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get hash_update_bang_() {
      return hash_update_bang_;
    },
    get hash_update() {
      return hash_update;
    },
    get hash_has_key_p() {
      return hash_has_key_p;
    },
    get hash_ref_bang_() {
      return hash_ref_bang_;
    },
    get call_by_cc() {
      return call_by_cc;
    },
    get call_with_exception_handler() {
      return call_with_exception_handler;
    },
    get break_parameterization_p() {
      return break_paramz_p;
    },
    get call_with_break_parameterization() {
      return call_with_break_parameterization;
    },
    get current_break_parameterization() {
      return current_break_parameterization;
    },
    get call_with_parameterization() {
      return call_with_parameterization;
    },
    get current_parameterization() {
      return current_parameterization;
    }
  };
})();
var $__runtime_47_flfxnum_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/flfxnum.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__runtime_47_unsafe_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/unsafe.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var unsafe_fx_plus_ = function(a17, b18) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a17 + b18) | 0;
  };
  var unsafe_fx_ = function(a19, b20) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a19 - b20) | 0;
  };
  var unsafe_fx_times_ = function(a21, b22) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a21 * b22) | 0;
  };
  var unsafe_fxquotient = function(a23, b24) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a23 / b24) | 0;
  };
  var unsafe_fxremainder = function(a25, b26) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a25 % b26) | 0;
  };
  var unsafe_fxmodulo = function(a27, b28) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var remainder29 = a27 % b28;
    if ((remainder29 >= 0) !== false) {
      var if_res7 = remainder29;
    } else {
      var if_res7 = remainder29 + b28;
    }
    return Math.floor(if_res7);
  };
  var unsafe_fxabs = function(a30) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.abs(a30);
  };
  var unsafe_fx_eq_ = function(a31, b32) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a31 === b32;
  };
  var unsafe_fx_lt_ = function(a33, b34) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a33 < b34;
  };
  var unsafe_fx_lt__eq_ = function(a35, b36) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a35 <= b36;
  };
  var unsafe_fx_gt_ = function(a37, b38) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a37 > b38;
  };
  var unsafe_fx_gt__eq_ = function(a39, b40) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a39 >= b40;
  };
  var unsafe_fxmin = function(a41, b42) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a41 < b42) !== false) {
      var if_res8 = a41;
    } else {
      var if_res8 = b42;
    }
    return if_res8;
  };
  var unsafe_fxmax = function(a43, b44) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a43 > b44) !== false) {
      var if_res9 = b44;
    } else {
      var if_res9 = a43;
    }
    return if_res9;
  };
  var unsafe_fxrshift = function(a45, b46) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a45 >> b46) | 0;
  };
  var unsafe_fxlshift = function(a47, b48) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a47 << b48) | 0;
  };
  var unsafe_fxand = function(a49, b50) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a49 && b50) | 0;
  };
  var unsafe_fxior = function(a51, b52) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a51 || b52) | 0;
  };
  var unsafe_fxxor = function(a53, b54) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a53 ^ b54) | 0;
  };
  var unsafe_fxnot = Core.bitwiseNot;
  var unsafe_car = function(v55) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v55.hd;
  };
  var unsafe_cdr = function(v56) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v56.tl;
  };
  var unsafe_mcar = function(v57) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v57.hd;
  };
  var unsafe_mcdr = function(v58) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v58.tl;
  };
  var unsafe_set_mcar_bang_ = function(p59, v60) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p59.setCar(v60);
  };
  var unsafe_set_mcdr_bang_ = function(p61, v62) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p61.setCdr(v62);
  };
  var unsafe_cons_list = function(v63, rest64) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Core.Pair.make(v63, rest64);
  };
  var unsafe_struct_ref = function(v65, k66) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v65._fields[k66];
  };
  var unsafe_vector_ref = function(v67, k68) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v67.ref(k68);
  };
  var unsafe_vector_set_bang_ = function(v69, k70, val71) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v69.set(k70, val71);
  };
  var unsafe_vector_length = function(v72) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v72.length();
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get unsafe_fx_plus_() {
      return unsafe_fx_plus_;
    },
    get unsafe_fx_() {
      return unsafe_fx_;
    },
    get unsafe_fx_times_() {
      return unsafe_fx_times_;
    },
    get unsafe_fxquotient() {
      return unsafe_fxquotient;
    },
    get unsafe_fxremainder() {
      return unsafe_fxremainder;
    },
    get unsafe_fxmodulo() {
      return unsafe_fxmodulo;
    },
    get unsafe_fxabs() {
      return unsafe_fxabs;
    },
    get unsafe_fx_eq_() {
      return unsafe_fx_eq_;
    },
    get unsafe_fx_lt_() {
      return unsafe_fx_lt_;
    },
    get unsafe_fx_lt__eq_() {
      return unsafe_fx_lt__eq_;
    },
    get unsafe_fx_gt_() {
      return unsafe_fx_gt_;
    },
    get unsafe_fx_gt__eq_() {
      return unsafe_fx_gt__eq_;
    },
    get unsafe_fxmin() {
      return unsafe_fxmin;
    },
    get unsafe_fxmax() {
      return unsafe_fxmax;
    },
    get unsafe_fxrshift() {
      return unsafe_fxrshift;
    },
    get unsafe_fxlshift() {
      return unsafe_fxlshift;
    },
    get unsafe_fxand() {
      return unsafe_fxand;
    },
    get unsafe_fxior() {
      return unsafe_fxior;
    },
    get unsafe_fxxor() {
      return unsafe_fxxor;
    },
    get unsafe_fxnot() {
      return unsafe_fxnot;
    },
    get unsafe_car() {
      return unsafe_car;
    },
    get unsafe_cdr() {
      return unsafe_cdr;
    },
    get unsafe_mcar() {
      return unsafe_mcar;
    },
    get unsafe_mcdr() {
      return unsafe_mcdr;
    },
    get unsafe_set_mcar_bang_() {
      return unsafe_set_mcar_bang_;
    },
    get unsafe_set_mcdr_bang_() {
      return unsafe_set_mcdr_bang_;
    },
    get unsafe_cons_list() {
      return unsafe_cons_list;
    },
    get unsafe_struct_ref() {
      return unsafe_struct_ref;
    },
    get unsafe_vector_ref() {
      return unsafe_vector_ref;
    },
    get unsafe_vector_set_bang_() {
      return unsafe_vector_set_bang_;
    },
    get unsafe_vector_length() {
      return unsafe_vector_length;
    }
  };
})();
var $__collects_47_racket_47_private_47_sort_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/sort.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sorts3489 = M0.make_hasheq();
  var sort_proc3490 = function(A3491, n3492) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3493 = M1.unsafe_fxrshift(n3492, 1);
    var n_by_2_plus_3494 = M1.unsafe_fx_(n3492, n_by_2_3493);
    var copying_mergesort3495 = function(Alo3496, Blo3497, n3498) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3498, 1) !== false) {
        var if_res2365 = M1.unsafe_vector_set_bang_(A3491, Blo3497, M1.unsafe_vector_ref(A3491, Alo3496));
      } else {
        if (M1.unsafe_fx_eq_(n3498, 2) !== false) {
          var x3499 = M1.unsafe_vector_ref(A3491, Alo3496);
          var y3500 = M1.unsafe_vector_ref(A3491, M1.unsafe_fx_plus_(Alo3496, 1));
          if (false !== false) {
            var if_res2350 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3500), false(x3499));
          } else {
            var if_res2350 = M1.__rjs_quoted__.unsafe_fl_lt_(y3500, x3499);
          }
          if (if_res2350 !== false) {
            M1.unsafe_vector_set_bang_(A3491, Blo3497, y3500);
            var if_res2351 = M1.unsafe_vector_set_bang_(A3491, M1.unsafe_fx_plus_(Blo3497, 1), x3499);
          } else {
            M1.unsafe_vector_set_bang_(A3491, Blo3497, x3499);
            var if_res2351 = M1.unsafe_vector_set_bang_(A3491, M1.unsafe_fx_plus_(Blo3497, 1), y3500);
          }
          var if_res2364 = if_res2351;
        } else {
          if (M1.unsafe_fx_lt_(n3498, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3491, Blo3497, M1.unsafe_vector_ref(A3491, Alo3496));
            var iloop3501 = function(i3502) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3502, n3498) !== false) {
                var ref_i3503 = M1.unsafe_vector_ref(A3491, M1.unsafe_fx_plus_(Alo3496, i3502));
                var jloop3504 = function(j3505) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13506 = M1.unsafe_vector_ref(A3491, M1.unsafe_fx_(j3505, 1));
                  if (M1.unsafe_fx_lt_(Blo3497, j3505) !== false) {
                    if (false !== false) {
                      var if_res2352 = M1.__rjs_quoted__.unsafe_fl_lt_(false(ref_i3503), false(ref_j_13506));
                    } else {
                      var if_res2352 = M1.__rjs_quoted__.unsafe_fl_lt_(ref_i3503, ref_j_13506);
                    }
                    var if_res2353 = if_res2352;
                  } else {
                    var if_res2353 = false;
                  }
                  if (if_res2353 !== false) {
                    M1.unsafe_vector_set_bang_(A3491, j3505, ref_j_13506);
                    var if_res2354 = jloop3504(M1.unsafe_fx_(j3505, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3491, j3505, ref_i3503);
                    var if_res2354 = iloop3501(M1.unsafe_fx_plus_(i3502, 1));
                  }
                  return if_res2354;
                };
                var if_res2355 = jloop3504(M1.unsafe_fx_plus_(Blo3497, i3502));
              } else {
                var if_res2355 = M0.rvoid();
              }
              return if_res2355;
            };
            var if_res2363 = iloop3501(1);
          } else {
            var n_by_2_3507 = M1.unsafe_fxrshift(n3498, 1);
            var n_by_2_plus_3508 = M1.unsafe_fx_(n3498, n_by_2_3507);
            var Amid13509 = M1.unsafe_fx_plus_(Alo3496, n_by_2_3507);
            var Amid23510 = M1.unsafe_fx_plus_(Alo3496, n_by_2_plus_3508);
            var Bmid13511 = M1.unsafe_fx_plus_(Blo3497, n_by_2_3507);
            copying_mergesort3495(Amid13509, Bmid13511, n_by_2_plus_3508);
            copying_mergesort3495(Alo3496, Amid23510, n_by_2_3507);
            var b23512 = M1.unsafe_fx_plus_(Blo3497, n3498);
            var loop3513 = function(a13514, b13515, c13516) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3517 = M1.unsafe_vector_ref(A3491, a13514);
              var y3518 = M1.unsafe_vector_ref(A3491, b13515);
              if (true !== false) {
                if (false !== false) {
                  var if_res2356 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3518), false(x3517));
                } else {
                  var if_res2356 = M1.__rjs_quoted__.unsafe_fl_lt_(y3518, x3517);
                }
                var if_res2358 = M0.not(if_res2356);
              } else {
                if (false !== false) {
                  var if_res2357 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3517), false(y3518));
                } else {
                  var if_res2357 = M1.__rjs_quoted__.unsafe_fl_lt_(x3517, y3518);
                }
                var if_res2358 = if_res2357;
              }
              if (if_res2358 !== false) {
                M1.unsafe_vector_set_bang_(A3491, c13516, x3517);
                var a13519 = M1.unsafe_fx_plus_(a13514, 1);
                var c13520 = M1.unsafe_fx_plus_(c13516, 1);
                if (M1.unsafe_fx_lt_(c13520, b13515) !== false) {
                  var if_res2359 = loop3513(a13519, b13515, c13520);
                } else {
                  var if_res2359 = M0.rvoid();
                }
                var if_res2362 = if_res2359;
              } else {
                M1.unsafe_vector_set_bang_(A3491, c13516, y3518);
                var b13521 = M1.unsafe_fx_plus_(b13515, 1);
                var c13522 = M1.unsafe_fx_plus_(c13516, 1);
                if (M1.unsafe_fx_lt__eq_(b23512, b13521) !== false) {
                  var loop3523 = function(a13524, c13525) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13525, b13521) !== false) {
                      M1.unsafe_vector_set_bang_(A3491, c13525, M1.unsafe_vector_ref(A3491, a13524));
                      var if_res2360 = loop3523(M1.unsafe_fx_plus_(a13524, 1), M1.unsafe_fx_plus_(c13525, 1));
                    } else {
                      var if_res2360 = M0.rvoid();
                    }
                    return if_res2360;
                  };
                  var if_res2361 = loop3523(a13514, c13522);
                } else {
                  var if_res2361 = loop3513(a13514, b13521, c13522);
                }
                var if_res2362 = if_res2361;
              }
              return if_res2362;
            };
            var if_res2363 = loop3513(Amid23510, Bmid13511, Blo3497);
          }
          var if_res2364 = if_res2363;
        }
        var if_res2365 = if_res2364;
      }
      return if_res2365;
    };
    var Alo3526 = 0;
    var Amid13527 = n_by_2_3493;
    var Amid23528 = n_by_2_plus_3494;
    var Ahi3529 = n3492;
    var B1lo3530 = n3492;
    copying_mergesort3495(Amid13527, B1lo3530, n_by_2_plus_3494);
    if (M0.zero_p(n_by_2_3493) !== false) {
      var if_res2366 = M0.rvoid();
    } else {
      var if_res2366 = copying_mergesort3495(Alo3526, Amid23528, n_by_2_3493);
    }
    if_res2366;
    var b23531 = Ahi3529;
    var loop3532 = function(a13533, b13534, c13535) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3536 = M1.unsafe_vector_ref(A3491, a13533);
      var y3537 = M1.unsafe_vector_ref(A3491, b13534);
      if (false !== false) {
        if (false !== false) {
          var if_res2367 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3537), false(x3536));
        } else {
          var if_res2367 = M1.__rjs_quoted__.unsafe_fl_lt_(y3537, x3536);
        }
        var if_res2369 = M0.not(if_res2367);
      } else {
        if (false !== false) {
          var if_res2368 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3536), false(y3537));
        } else {
          var if_res2368 = M1.__rjs_quoted__.unsafe_fl_lt_(x3536, y3537);
        }
        var if_res2369 = if_res2368;
      }
      if (if_res2369 !== false) {
        M1.unsafe_vector_set_bang_(A3491, c13535, x3536);
        var a13538 = M1.unsafe_fx_plus_(a13533, 1);
        var c13539 = M1.unsafe_fx_plus_(c13535, 1);
        if (M1.unsafe_fx_lt_(c13539, b13534) !== false) {
          var if_res2370 = loop3532(a13538, b13534, c13539);
        } else {
          var if_res2370 = M0.rvoid();
        }
        var if_res2373 = if_res2370;
      } else {
        M1.unsafe_vector_set_bang_(A3491, c13535, y3537);
        var b13540 = M1.unsafe_fx_plus_(b13534, 1);
        var c13541 = M1.unsafe_fx_plus_(c13535, 1);
        if (M1.unsafe_fx_lt__eq_(b23531, b13540) !== false) {
          var loop3542 = function(a13543, c13544) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13544, b13540) !== false) {
              M1.unsafe_vector_set_bang_(A3491, c13544, M1.unsafe_vector_ref(A3491, a13543));
              var if_res2371 = loop3542(M1.unsafe_fx_plus_(a13543, 1), M1.unsafe_fx_plus_(c13544, 1));
            } else {
              var if_res2371 = M0.rvoid();
            }
            return if_res2371;
          };
          var if_res2372 = loop3542(a13533, c13541);
        } else {
          var if_res2372 = loop3532(a13533, b13540, c13541);
        }
        var if_res2373 = if_res2372;
      }
      return if_res2373;
    };
    return loop3532(B1lo3530, Amid23528, Alo3526);
  };
  M0.hash_set_bang_(sorts3489, M1.__rjs_quoted__.unsafe_fl_lt_, sort_proc3490);
  M0.hash_set_bang_(sorts3489, M1.__rjs_quoted__.unsafe_fl_lt__eq_, sort_proc3490);
  var sort_proc3545 = function(A3546, n3547) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3548 = M1.unsafe_fxrshift(n3547, 1);
    var n_by_2_plus_3549 = M1.unsafe_fx_(n3547, n_by_2_3548);
    var copying_mergesort3550 = function(Alo3551, Blo3552, n3553) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3553, 1) !== false) {
        var if_res2389 = M1.unsafe_vector_set_bang_(A3546, Blo3552, M1.unsafe_vector_ref(A3546, Alo3551));
      } else {
        if (M1.unsafe_fx_eq_(n3553, 2) !== false) {
          var x3554 = M1.unsafe_vector_ref(A3546, Alo3551);
          var y3555 = M1.unsafe_vector_ref(A3546, M1.unsafe_fx_plus_(Alo3551, 1));
          if (false !== false) {
            var if_res2374 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3555), false(x3554));
          } else {
            var if_res2374 = M1.__rjs_quoted__.unsafe_fl_gt_(y3555, x3554);
          }
          if (if_res2374 !== false) {
            M1.unsafe_vector_set_bang_(A3546, Blo3552, y3555);
            var if_res2375 = M1.unsafe_vector_set_bang_(A3546, M1.unsafe_fx_plus_(Blo3552, 1), x3554);
          } else {
            M1.unsafe_vector_set_bang_(A3546, Blo3552, x3554);
            var if_res2375 = M1.unsafe_vector_set_bang_(A3546, M1.unsafe_fx_plus_(Blo3552, 1), y3555);
          }
          var if_res2388 = if_res2375;
        } else {
          if (M1.unsafe_fx_lt_(n3553, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3546, Blo3552, M1.unsafe_vector_ref(A3546, Alo3551));
            var iloop3556 = function(i3557) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3557, n3553) !== false) {
                var ref_i3558 = M1.unsafe_vector_ref(A3546, M1.unsafe_fx_plus_(Alo3551, i3557));
                var jloop3559 = function(j3560) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13561 = M1.unsafe_vector_ref(A3546, M1.unsafe_fx_(j3560, 1));
                  if (M1.unsafe_fx_lt_(Blo3552, j3560) !== false) {
                    if (false !== false) {
                      var if_res2376 = M1.__rjs_quoted__.unsafe_fl_gt_(false(ref_i3558), false(ref_j_13561));
                    } else {
                      var if_res2376 = M1.__rjs_quoted__.unsafe_fl_gt_(ref_i3558, ref_j_13561);
                    }
                    var if_res2377 = if_res2376;
                  } else {
                    var if_res2377 = false;
                  }
                  if (if_res2377 !== false) {
                    M1.unsafe_vector_set_bang_(A3546, j3560, ref_j_13561);
                    var if_res2378 = jloop3559(M1.unsafe_fx_(j3560, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3546, j3560, ref_i3558);
                    var if_res2378 = iloop3556(M1.unsafe_fx_plus_(i3557, 1));
                  }
                  return if_res2378;
                };
                var if_res2379 = jloop3559(M1.unsafe_fx_plus_(Blo3552, i3557));
              } else {
                var if_res2379 = M0.rvoid();
              }
              return if_res2379;
            };
            var if_res2387 = iloop3556(1);
          } else {
            var n_by_2_3562 = M1.unsafe_fxrshift(n3553, 1);
            var n_by_2_plus_3563 = M1.unsafe_fx_(n3553, n_by_2_3562);
            var Amid13564 = M1.unsafe_fx_plus_(Alo3551, n_by_2_3562);
            var Amid23565 = M1.unsafe_fx_plus_(Alo3551, n_by_2_plus_3563);
            var Bmid13566 = M1.unsafe_fx_plus_(Blo3552, n_by_2_3562);
            copying_mergesort3550(Amid13564, Bmid13566, n_by_2_plus_3563);
            copying_mergesort3550(Alo3551, Amid23565, n_by_2_3562);
            var b23567 = M1.unsafe_fx_plus_(Blo3552, n3553);
            var loop3568 = function(a13569, b13570, c13571) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3572 = M1.unsafe_vector_ref(A3546, a13569);
              var y3573 = M1.unsafe_vector_ref(A3546, b13570);
              if (true !== false) {
                if (false !== false) {
                  var if_res2380 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3573), false(x3572));
                } else {
                  var if_res2380 = M1.__rjs_quoted__.unsafe_fl_gt_(y3573, x3572);
                }
                var if_res2382 = M0.not(if_res2380);
              } else {
                if (false !== false) {
                  var if_res2381 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3572), false(y3573));
                } else {
                  var if_res2381 = M1.__rjs_quoted__.unsafe_fl_gt_(x3572, y3573);
                }
                var if_res2382 = if_res2381;
              }
              if (if_res2382 !== false) {
                M1.unsafe_vector_set_bang_(A3546, c13571, x3572);
                var a13574 = M1.unsafe_fx_plus_(a13569, 1);
                var c13575 = M1.unsafe_fx_plus_(c13571, 1);
                if (M1.unsafe_fx_lt_(c13575, b13570) !== false) {
                  var if_res2383 = loop3568(a13574, b13570, c13575);
                } else {
                  var if_res2383 = M0.rvoid();
                }
                var if_res2386 = if_res2383;
              } else {
                M1.unsafe_vector_set_bang_(A3546, c13571, y3573);
                var b13576 = M1.unsafe_fx_plus_(b13570, 1);
                var c13577 = M1.unsafe_fx_plus_(c13571, 1);
                if (M1.unsafe_fx_lt__eq_(b23567, b13576) !== false) {
                  var loop3578 = function(a13579, c13580) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13580, b13576) !== false) {
                      M1.unsafe_vector_set_bang_(A3546, c13580, M1.unsafe_vector_ref(A3546, a13579));
                      var if_res2384 = loop3578(M1.unsafe_fx_plus_(a13579, 1), M1.unsafe_fx_plus_(c13580, 1));
                    } else {
                      var if_res2384 = M0.rvoid();
                    }
                    return if_res2384;
                  };
                  var if_res2385 = loop3578(a13569, c13577);
                } else {
                  var if_res2385 = loop3568(a13569, b13576, c13577);
                }
                var if_res2386 = if_res2385;
              }
              return if_res2386;
            };
            var if_res2387 = loop3568(Amid23565, Bmid13566, Blo3552);
          }
          var if_res2388 = if_res2387;
        }
        var if_res2389 = if_res2388;
      }
      return if_res2389;
    };
    var Alo3581 = 0;
    var Amid13582 = n_by_2_3548;
    var Amid23583 = n_by_2_plus_3549;
    var Ahi3584 = n3547;
    var B1lo3585 = n3547;
    copying_mergesort3550(Amid13582, B1lo3585, n_by_2_plus_3549);
    if (M0.zero_p(n_by_2_3548) !== false) {
      var if_res2390 = M0.rvoid();
    } else {
      var if_res2390 = copying_mergesort3550(Alo3581, Amid23583, n_by_2_3548);
    }
    if_res2390;
    var b23586 = Ahi3584;
    var loop3587 = function(a13588, b13589, c13590) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3591 = M1.unsafe_vector_ref(A3546, a13588);
      var y3592 = M1.unsafe_vector_ref(A3546, b13589);
      if (false !== false) {
        if (false !== false) {
          var if_res2391 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3592), false(x3591));
        } else {
          var if_res2391 = M1.__rjs_quoted__.unsafe_fl_gt_(y3592, x3591);
        }
        var if_res2393 = M0.not(if_res2391);
      } else {
        if (false !== false) {
          var if_res2392 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3591), false(y3592));
        } else {
          var if_res2392 = M1.__rjs_quoted__.unsafe_fl_gt_(x3591, y3592);
        }
        var if_res2393 = if_res2392;
      }
      if (if_res2393 !== false) {
        M1.unsafe_vector_set_bang_(A3546, c13590, x3591);
        var a13593 = M1.unsafe_fx_plus_(a13588, 1);
        var c13594 = M1.unsafe_fx_plus_(c13590, 1);
        if (M1.unsafe_fx_lt_(c13594, b13589) !== false) {
          var if_res2394 = loop3587(a13593, b13589, c13594);
        } else {
          var if_res2394 = M0.rvoid();
        }
        var if_res2397 = if_res2394;
      } else {
        M1.unsafe_vector_set_bang_(A3546, c13590, y3592);
        var b13595 = M1.unsafe_fx_plus_(b13589, 1);
        var c13596 = M1.unsafe_fx_plus_(c13590, 1);
        if (M1.unsafe_fx_lt__eq_(b23586, b13595) !== false) {
          var loop3597 = function(a13598, c13599) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13599, b13595) !== false) {
              M1.unsafe_vector_set_bang_(A3546, c13599, M1.unsafe_vector_ref(A3546, a13598));
              var if_res2395 = loop3597(M1.unsafe_fx_plus_(a13598, 1), M1.unsafe_fx_plus_(c13599, 1));
            } else {
              var if_res2395 = M0.rvoid();
            }
            return if_res2395;
          };
          var if_res2396 = loop3597(a13588, c13596);
        } else {
          var if_res2396 = loop3587(a13588, b13595, c13596);
        }
        var if_res2397 = if_res2396;
      }
      return if_res2397;
    };
    return loop3587(B1lo3585, Amid23583, Alo3581);
  };
  M0.hash_set_bang_(sorts3489, M1.__rjs_quoted__.unsafe_fl_gt_, sort_proc3545);
  M0.hash_set_bang_(sorts3489, M1.__rjs_quoted__.unsafe_fl_gt__eq_, sort_proc3545);
  var sort_proc3600 = function(A3601, n3602) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3603 = M1.unsafe_fxrshift(n3602, 1);
    var n_by_2_plus_3604 = M1.unsafe_fx_(n3602, n_by_2_3603);
    var copying_mergesort3605 = function(Alo3606, Blo3607, n3608) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3608, 1) !== false) {
        var if_res2413 = M1.unsafe_vector_set_bang_(A3601, Blo3607, M1.unsafe_vector_ref(A3601, Alo3606));
      } else {
        if (M1.unsafe_fx_eq_(n3608, 2) !== false) {
          var x3609 = M1.unsafe_vector_ref(A3601, Alo3606);
          var y3610 = M1.unsafe_vector_ref(A3601, M1.unsafe_fx_plus_(Alo3606, 1));
          if (false !== false) {
            var if_res2398 = M1.unsafe_fx_lt_(false(y3610), false(x3609));
          } else {
            var if_res2398 = M1.unsafe_fx_lt_(y3610, x3609);
          }
          if (if_res2398 !== false) {
            M1.unsafe_vector_set_bang_(A3601, Blo3607, y3610);
            var if_res2399 = M1.unsafe_vector_set_bang_(A3601, M1.unsafe_fx_plus_(Blo3607, 1), x3609);
          } else {
            M1.unsafe_vector_set_bang_(A3601, Blo3607, x3609);
            var if_res2399 = M1.unsafe_vector_set_bang_(A3601, M1.unsafe_fx_plus_(Blo3607, 1), y3610);
          }
          var if_res2412 = if_res2399;
        } else {
          if (M1.unsafe_fx_lt_(n3608, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3601, Blo3607, M1.unsafe_vector_ref(A3601, Alo3606));
            var iloop3611 = function(i3612) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3612, n3608) !== false) {
                var ref_i3613 = M1.unsafe_vector_ref(A3601, M1.unsafe_fx_plus_(Alo3606, i3612));
                var jloop3614 = function(j3615) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13616 = M1.unsafe_vector_ref(A3601, M1.unsafe_fx_(j3615, 1));
                  if (M1.unsafe_fx_lt_(Blo3607, j3615) !== false) {
                    if (false !== false) {
                      var if_res2400 = M1.unsafe_fx_lt_(false(ref_i3613), false(ref_j_13616));
                    } else {
                      var if_res2400 = M1.unsafe_fx_lt_(ref_i3613, ref_j_13616);
                    }
                    var if_res2401 = if_res2400;
                  } else {
                    var if_res2401 = false;
                  }
                  if (if_res2401 !== false) {
                    M1.unsafe_vector_set_bang_(A3601, j3615, ref_j_13616);
                    var if_res2402 = jloop3614(M1.unsafe_fx_(j3615, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3601, j3615, ref_i3613);
                    var if_res2402 = iloop3611(M1.unsafe_fx_plus_(i3612, 1));
                  }
                  return if_res2402;
                };
                var if_res2403 = jloop3614(M1.unsafe_fx_plus_(Blo3607, i3612));
              } else {
                var if_res2403 = M0.rvoid();
              }
              return if_res2403;
            };
            var if_res2411 = iloop3611(1);
          } else {
            var n_by_2_3617 = M1.unsafe_fxrshift(n3608, 1);
            var n_by_2_plus_3618 = M1.unsafe_fx_(n3608, n_by_2_3617);
            var Amid13619 = M1.unsafe_fx_plus_(Alo3606, n_by_2_3617);
            var Amid23620 = M1.unsafe_fx_plus_(Alo3606, n_by_2_plus_3618);
            var Bmid13621 = M1.unsafe_fx_plus_(Blo3607, n_by_2_3617);
            copying_mergesort3605(Amid13619, Bmid13621, n_by_2_plus_3618);
            copying_mergesort3605(Alo3606, Amid23620, n_by_2_3617);
            var b23622 = M1.unsafe_fx_plus_(Blo3607, n3608);
            var loop3623 = function(a13624, b13625, c13626) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3627 = M1.unsafe_vector_ref(A3601, a13624);
              var y3628 = M1.unsafe_vector_ref(A3601, b13625);
              if (true !== false) {
                if (false !== false) {
                  var if_res2404 = M1.unsafe_fx_lt_(false(y3628), false(x3627));
                } else {
                  var if_res2404 = M1.unsafe_fx_lt_(y3628, x3627);
                }
                var if_res2406 = M0.not(if_res2404);
              } else {
                if (false !== false) {
                  var if_res2405 = M1.unsafe_fx_lt_(false(x3627), false(y3628));
                } else {
                  var if_res2405 = M1.unsafe_fx_lt_(x3627, y3628);
                }
                var if_res2406 = if_res2405;
              }
              if (if_res2406 !== false) {
                M1.unsafe_vector_set_bang_(A3601, c13626, x3627);
                var a13629 = M1.unsafe_fx_plus_(a13624, 1);
                var c13630 = M1.unsafe_fx_plus_(c13626, 1);
                if (M1.unsafe_fx_lt_(c13630, b13625) !== false) {
                  var if_res2407 = loop3623(a13629, b13625, c13630);
                } else {
                  var if_res2407 = M0.rvoid();
                }
                var if_res2410 = if_res2407;
              } else {
                M1.unsafe_vector_set_bang_(A3601, c13626, y3628);
                var b13631 = M1.unsafe_fx_plus_(b13625, 1);
                var c13632 = M1.unsafe_fx_plus_(c13626, 1);
                if (M1.unsafe_fx_lt__eq_(b23622, b13631) !== false) {
                  var loop3633 = function(a13634, c13635) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13635, b13631) !== false) {
                      M1.unsafe_vector_set_bang_(A3601, c13635, M1.unsafe_vector_ref(A3601, a13634));
                      var if_res2408 = loop3633(M1.unsafe_fx_plus_(a13634, 1), M1.unsafe_fx_plus_(c13635, 1));
                    } else {
                      var if_res2408 = M0.rvoid();
                    }
                    return if_res2408;
                  };
                  var if_res2409 = loop3633(a13624, c13632);
                } else {
                  var if_res2409 = loop3623(a13624, b13631, c13632);
                }
                var if_res2410 = if_res2409;
              }
              return if_res2410;
            };
            var if_res2411 = loop3623(Amid23620, Bmid13621, Blo3607);
          }
          var if_res2412 = if_res2411;
        }
        var if_res2413 = if_res2412;
      }
      return if_res2413;
    };
    var Alo3636 = 0;
    var Amid13637 = n_by_2_3603;
    var Amid23638 = n_by_2_plus_3604;
    var Ahi3639 = n3602;
    var B1lo3640 = n3602;
    copying_mergesort3605(Amid13637, B1lo3640, n_by_2_plus_3604);
    if (M0.zero_p(n_by_2_3603) !== false) {
      var if_res2414 = M0.rvoid();
    } else {
      var if_res2414 = copying_mergesort3605(Alo3636, Amid23638, n_by_2_3603);
    }
    if_res2414;
    var b23641 = Ahi3639;
    var loop3642 = function(a13643, b13644, c13645) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3646 = M1.unsafe_vector_ref(A3601, a13643);
      var y3647 = M1.unsafe_vector_ref(A3601, b13644);
      if (false !== false) {
        if (false !== false) {
          var if_res2415 = M1.unsafe_fx_lt_(false(y3647), false(x3646));
        } else {
          var if_res2415 = M1.unsafe_fx_lt_(y3647, x3646);
        }
        var if_res2417 = M0.not(if_res2415);
      } else {
        if (false !== false) {
          var if_res2416 = M1.unsafe_fx_lt_(false(x3646), false(y3647));
        } else {
          var if_res2416 = M1.unsafe_fx_lt_(x3646, y3647);
        }
        var if_res2417 = if_res2416;
      }
      if (if_res2417 !== false) {
        M1.unsafe_vector_set_bang_(A3601, c13645, x3646);
        var a13648 = M1.unsafe_fx_plus_(a13643, 1);
        var c13649 = M1.unsafe_fx_plus_(c13645, 1);
        if (M1.unsafe_fx_lt_(c13649, b13644) !== false) {
          var if_res2418 = loop3642(a13648, b13644, c13649);
        } else {
          var if_res2418 = M0.rvoid();
        }
        var if_res2421 = if_res2418;
      } else {
        M1.unsafe_vector_set_bang_(A3601, c13645, y3647);
        var b13650 = M1.unsafe_fx_plus_(b13644, 1);
        var c13651 = M1.unsafe_fx_plus_(c13645, 1);
        if (M1.unsafe_fx_lt__eq_(b23641, b13650) !== false) {
          var loop3652 = function(a13653, c13654) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13654, b13650) !== false) {
              M1.unsafe_vector_set_bang_(A3601, c13654, M1.unsafe_vector_ref(A3601, a13653));
              var if_res2419 = loop3652(M1.unsafe_fx_plus_(a13653, 1), M1.unsafe_fx_plus_(c13654, 1));
            } else {
              var if_res2419 = M0.rvoid();
            }
            return if_res2419;
          };
          var if_res2420 = loop3652(a13643, c13651);
        } else {
          var if_res2420 = loop3642(a13643, b13650, c13651);
        }
        var if_res2421 = if_res2420;
      }
      return if_res2421;
    };
    return loop3642(B1lo3640, Amid23638, Alo3636);
  };
  M0.hash_set_bang_(sorts3489, M1.unsafe_fx_lt_, sort_proc3600);
  M0.hash_set_bang_(sorts3489, M1.unsafe_fx_lt__eq_, sort_proc3600);
  var sort_proc3655 = function(A3656, n3657) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3658 = M1.unsafe_fxrshift(n3657, 1);
    var n_by_2_plus_3659 = M1.unsafe_fx_(n3657, n_by_2_3658);
    var copying_mergesort3660 = function(Alo3661, Blo3662, n3663) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3663, 1) !== false) {
        var if_res2437 = M1.unsafe_vector_set_bang_(A3656, Blo3662, M1.unsafe_vector_ref(A3656, Alo3661));
      } else {
        if (M1.unsafe_fx_eq_(n3663, 2) !== false) {
          var x3664 = M1.unsafe_vector_ref(A3656, Alo3661);
          var y3665 = M1.unsafe_vector_ref(A3656, M1.unsafe_fx_plus_(Alo3661, 1));
          if (false !== false) {
            var if_res2422 = M1.unsafe_fx_gt_(false(y3665), false(x3664));
          } else {
            var if_res2422 = M1.unsafe_fx_gt_(y3665, x3664);
          }
          if (if_res2422 !== false) {
            M1.unsafe_vector_set_bang_(A3656, Blo3662, y3665);
            var if_res2423 = M1.unsafe_vector_set_bang_(A3656, M1.unsafe_fx_plus_(Blo3662, 1), x3664);
          } else {
            M1.unsafe_vector_set_bang_(A3656, Blo3662, x3664);
            var if_res2423 = M1.unsafe_vector_set_bang_(A3656, M1.unsafe_fx_plus_(Blo3662, 1), y3665);
          }
          var if_res2436 = if_res2423;
        } else {
          if (M1.unsafe_fx_lt_(n3663, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3656, Blo3662, M1.unsafe_vector_ref(A3656, Alo3661));
            var iloop3666 = function(i3667) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3667, n3663) !== false) {
                var ref_i3668 = M1.unsafe_vector_ref(A3656, M1.unsafe_fx_plus_(Alo3661, i3667));
                var jloop3669 = function(j3670) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13671 = M1.unsafe_vector_ref(A3656, M1.unsafe_fx_(j3670, 1));
                  if (M1.unsafe_fx_lt_(Blo3662, j3670) !== false) {
                    if (false !== false) {
                      var if_res2424 = M1.unsafe_fx_gt_(false(ref_i3668), false(ref_j_13671));
                    } else {
                      var if_res2424 = M1.unsafe_fx_gt_(ref_i3668, ref_j_13671);
                    }
                    var if_res2425 = if_res2424;
                  } else {
                    var if_res2425 = false;
                  }
                  if (if_res2425 !== false) {
                    M1.unsafe_vector_set_bang_(A3656, j3670, ref_j_13671);
                    var if_res2426 = jloop3669(M1.unsafe_fx_(j3670, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3656, j3670, ref_i3668);
                    var if_res2426 = iloop3666(M1.unsafe_fx_plus_(i3667, 1));
                  }
                  return if_res2426;
                };
                var if_res2427 = jloop3669(M1.unsafe_fx_plus_(Blo3662, i3667));
              } else {
                var if_res2427 = M0.rvoid();
              }
              return if_res2427;
            };
            var if_res2435 = iloop3666(1);
          } else {
            var n_by_2_3672 = M1.unsafe_fxrshift(n3663, 1);
            var n_by_2_plus_3673 = M1.unsafe_fx_(n3663, n_by_2_3672);
            var Amid13674 = M1.unsafe_fx_plus_(Alo3661, n_by_2_3672);
            var Amid23675 = M1.unsafe_fx_plus_(Alo3661, n_by_2_plus_3673);
            var Bmid13676 = M1.unsafe_fx_plus_(Blo3662, n_by_2_3672);
            copying_mergesort3660(Amid13674, Bmid13676, n_by_2_plus_3673);
            copying_mergesort3660(Alo3661, Amid23675, n_by_2_3672);
            var b23677 = M1.unsafe_fx_plus_(Blo3662, n3663);
            var loop3678 = function(a13679, b13680, c13681) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3682 = M1.unsafe_vector_ref(A3656, a13679);
              var y3683 = M1.unsafe_vector_ref(A3656, b13680);
              if (true !== false) {
                if (false !== false) {
                  var if_res2428 = M1.unsafe_fx_gt_(false(y3683), false(x3682));
                } else {
                  var if_res2428 = M1.unsafe_fx_gt_(y3683, x3682);
                }
                var if_res2430 = M0.not(if_res2428);
              } else {
                if (false !== false) {
                  var if_res2429 = M1.unsafe_fx_gt_(false(x3682), false(y3683));
                } else {
                  var if_res2429 = M1.unsafe_fx_gt_(x3682, y3683);
                }
                var if_res2430 = if_res2429;
              }
              if (if_res2430 !== false) {
                M1.unsafe_vector_set_bang_(A3656, c13681, x3682);
                var a13684 = M1.unsafe_fx_plus_(a13679, 1);
                var c13685 = M1.unsafe_fx_plus_(c13681, 1);
                if (M1.unsafe_fx_lt_(c13685, b13680) !== false) {
                  var if_res2431 = loop3678(a13684, b13680, c13685);
                } else {
                  var if_res2431 = M0.rvoid();
                }
                var if_res2434 = if_res2431;
              } else {
                M1.unsafe_vector_set_bang_(A3656, c13681, y3683);
                var b13686 = M1.unsafe_fx_plus_(b13680, 1);
                var c13687 = M1.unsafe_fx_plus_(c13681, 1);
                if (M1.unsafe_fx_lt__eq_(b23677, b13686) !== false) {
                  var loop3688 = function(a13689, c13690) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13690, b13686) !== false) {
                      M1.unsafe_vector_set_bang_(A3656, c13690, M1.unsafe_vector_ref(A3656, a13689));
                      var if_res2432 = loop3688(M1.unsafe_fx_plus_(a13689, 1), M1.unsafe_fx_plus_(c13690, 1));
                    } else {
                      var if_res2432 = M0.rvoid();
                    }
                    return if_res2432;
                  };
                  var if_res2433 = loop3688(a13679, c13687);
                } else {
                  var if_res2433 = loop3678(a13679, b13686, c13687);
                }
                var if_res2434 = if_res2433;
              }
              return if_res2434;
            };
            var if_res2435 = loop3678(Amid23675, Bmid13676, Blo3662);
          }
          var if_res2436 = if_res2435;
        }
        var if_res2437 = if_res2436;
      }
      return if_res2437;
    };
    var Alo3691 = 0;
    var Amid13692 = n_by_2_3658;
    var Amid23693 = n_by_2_plus_3659;
    var Ahi3694 = n3657;
    var B1lo3695 = n3657;
    copying_mergesort3660(Amid13692, B1lo3695, n_by_2_plus_3659);
    if (M0.zero_p(n_by_2_3658) !== false) {
      var if_res2438 = M0.rvoid();
    } else {
      var if_res2438 = copying_mergesort3660(Alo3691, Amid23693, n_by_2_3658);
    }
    if_res2438;
    var b23696 = Ahi3694;
    var loop3697 = function(a13698, b13699, c13700) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3701 = M1.unsafe_vector_ref(A3656, a13698);
      var y3702 = M1.unsafe_vector_ref(A3656, b13699);
      if (false !== false) {
        if (false !== false) {
          var if_res2439 = M1.unsafe_fx_gt_(false(y3702), false(x3701));
        } else {
          var if_res2439 = M1.unsafe_fx_gt_(y3702, x3701);
        }
        var if_res2441 = M0.not(if_res2439);
      } else {
        if (false !== false) {
          var if_res2440 = M1.unsafe_fx_gt_(false(x3701), false(y3702));
        } else {
          var if_res2440 = M1.unsafe_fx_gt_(x3701, y3702);
        }
        var if_res2441 = if_res2440;
      }
      if (if_res2441 !== false) {
        M1.unsafe_vector_set_bang_(A3656, c13700, x3701);
        var a13703 = M1.unsafe_fx_plus_(a13698, 1);
        var c13704 = M1.unsafe_fx_plus_(c13700, 1);
        if (M1.unsafe_fx_lt_(c13704, b13699) !== false) {
          var if_res2442 = loop3697(a13703, b13699, c13704);
        } else {
          var if_res2442 = M0.rvoid();
        }
        var if_res2445 = if_res2442;
      } else {
        M1.unsafe_vector_set_bang_(A3656, c13700, y3702);
        var b13705 = M1.unsafe_fx_plus_(b13699, 1);
        var c13706 = M1.unsafe_fx_plus_(c13700, 1);
        if (M1.unsafe_fx_lt__eq_(b23696, b13705) !== false) {
          var loop3707 = function(a13708, c13709) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13709, b13705) !== false) {
              M1.unsafe_vector_set_bang_(A3656, c13709, M1.unsafe_vector_ref(A3656, a13708));
              var if_res2443 = loop3707(M1.unsafe_fx_plus_(a13708, 1), M1.unsafe_fx_plus_(c13709, 1));
            } else {
              var if_res2443 = M0.rvoid();
            }
            return if_res2443;
          };
          var if_res2444 = loop3707(a13698, c13706);
        } else {
          var if_res2444 = loop3697(a13698, b13705, c13706);
        }
        var if_res2445 = if_res2444;
      }
      return if_res2445;
    };
    return loop3697(B1lo3695, Amid23693, Alo3691);
  };
  M0.hash_set_bang_(sorts3489, M1.unsafe_fx_gt_, sort_proc3655);
  M0.hash_set_bang_(sorts3489, M1.unsafe_fx_gt__eq_, sort_proc3655);
  var sort_proc3710 = function(A3711, n3712) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3713 = M1.unsafe_fxrshift(n3712, 1);
    var n_by_2_plus_3714 = M1.unsafe_fx_(n3712, n_by_2_3713);
    var copying_mergesort3715 = function(Alo3716, Blo3717, n3718) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3718, 1) !== false) {
        var if_res2461 = M1.unsafe_vector_set_bang_(A3711, Blo3717, M1.unsafe_vector_ref(A3711, Alo3716));
      } else {
        if (M1.unsafe_fx_eq_(n3718, 2) !== false) {
          var x3719 = M1.unsafe_vector_ref(A3711, Alo3716);
          var y3720 = M1.unsafe_vector_ref(A3711, M1.unsafe_fx_plus_(Alo3716, 1));
          if (false !== false) {
            var if_res2446 = M0.__lt_(false(y3720), false(x3719));
          } else {
            var if_res2446 = M0.__lt_(y3720, x3719);
          }
          if (if_res2446 !== false) {
            M1.unsafe_vector_set_bang_(A3711, Blo3717, y3720);
            var if_res2447 = M1.unsafe_vector_set_bang_(A3711, M1.unsafe_fx_plus_(Blo3717, 1), x3719);
          } else {
            M1.unsafe_vector_set_bang_(A3711, Blo3717, x3719);
            var if_res2447 = M1.unsafe_vector_set_bang_(A3711, M1.unsafe_fx_plus_(Blo3717, 1), y3720);
          }
          var if_res2460 = if_res2447;
        } else {
          if (M1.unsafe_fx_lt_(n3718, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3711, Blo3717, M1.unsafe_vector_ref(A3711, Alo3716));
            var iloop3721 = function(i3722) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3722, n3718) !== false) {
                var ref_i3723 = M1.unsafe_vector_ref(A3711, M1.unsafe_fx_plus_(Alo3716, i3722));
                var jloop3724 = function(j3725) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13726 = M1.unsafe_vector_ref(A3711, M1.unsafe_fx_(j3725, 1));
                  if (M1.unsafe_fx_lt_(Blo3717, j3725) !== false) {
                    if (false !== false) {
                      var if_res2448 = M0.__lt_(false(ref_i3723), false(ref_j_13726));
                    } else {
                      var if_res2448 = M0.__lt_(ref_i3723, ref_j_13726);
                    }
                    var if_res2449 = if_res2448;
                  } else {
                    var if_res2449 = false;
                  }
                  if (if_res2449 !== false) {
                    M1.unsafe_vector_set_bang_(A3711, j3725, ref_j_13726);
                    var if_res2450 = jloop3724(M1.unsafe_fx_(j3725, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3711, j3725, ref_i3723);
                    var if_res2450 = iloop3721(M1.unsafe_fx_plus_(i3722, 1));
                  }
                  return if_res2450;
                };
                var if_res2451 = jloop3724(M1.unsafe_fx_plus_(Blo3717, i3722));
              } else {
                var if_res2451 = M0.rvoid();
              }
              return if_res2451;
            };
            var if_res2459 = iloop3721(1);
          } else {
            var n_by_2_3727 = M1.unsafe_fxrshift(n3718, 1);
            var n_by_2_plus_3728 = M1.unsafe_fx_(n3718, n_by_2_3727);
            var Amid13729 = M1.unsafe_fx_plus_(Alo3716, n_by_2_3727);
            var Amid23730 = M1.unsafe_fx_plus_(Alo3716, n_by_2_plus_3728);
            var Bmid13731 = M1.unsafe_fx_plus_(Blo3717, n_by_2_3727);
            copying_mergesort3715(Amid13729, Bmid13731, n_by_2_plus_3728);
            copying_mergesort3715(Alo3716, Amid23730, n_by_2_3727);
            var b23732 = M1.unsafe_fx_plus_(Blo3717, n3718);
            var loop3733 = function(a13734, b13735, c13736) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3737 = M1.unsafe_vector_ref(A3711, a13734);
              var y3738 = M1.unsafe_vector_ref(A3711, b13735);
              if (true !== false) {
                if (false !== false) {
                  var if_res2452 = M0.__lt_(false(y3738), false(x3737));
                } else {
                  var if_res2452 = M0.__lt_(y3738, x3737);
                }
                var if_res2454 = M0.not(if_res2452);
              } else {
                if (false !== false) {
                  var if_res2453 = M0.__lt_(false(x3737), false(y3738));
                } else {
                  var if_res2453 = M0.__lt_(x3737, y3738);
                }
                var if_res2454 = if_res2453;
              }
              if (if_res2454 !== false) {
                M1.unsafe_vector_set_bang_(A3711, c13736, x3737);
                var a13739 = M1.unsafe_fx_plus_(a13734, 1);
                var c13740 = M1.unsafe_fx_plus_(c13736, 1);
                if (M1.unsafe_fx_lt_(c13740, b13735) !== false) {
                  var if_res2455 = loop3733(a13739, b13735, c13740);
                } else {
                  var if_res2455 = M0.rvoid();
                }
                var if_res2458 = if_res2455;
              } else {
                M1.unsafe_vector_set_bang_(A3711, c13736, y3738);
                var b13741 = M1.unsafe_fx_plus_(b13735, 1);
                var c13742 = M1.unsafe_fx_plus_(c13736, 1);
                if (M1.unsafe_fx_lt__eq_(b23732, b13741) !== false) {
                  var loop3743 = function(a13744, c13745) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13745, b13741) !== false) {
                      M1.unsafe_vector_set_bang_(A3711, c13745, M1.unsafe_vector_ref(A3711, a13744));
                      var if_res2456 = loop3743(M1.unsafe_fx_plus_(a13744, 1), M1.unsafe_fx_plus_(c13745, 1));
                    } else {
                      var if_res2456 = M0.rvoid();
                    }
                    return if_res2456;
                  };
                  var if_res2457 = loop3743(a13734, c13742);
                } else {
                  var if_res2457 = loop3733(a13734, b13741, c13742);
                }
                var if_res2458 = if_res2457;
              }
              return if_res2458;
            };
            var if_res2459 = loop3733(Amid23730, Bmid13731, Blo3717);
          }
          var if_res2460 = if_res2459;
        }
        var if_res2461 = if_res2460;
      }
      return if_res2461;
    };
    var Alo3746 = 0;
    var Amid13747 = n_by_2_3713;
    var Amid23748 = n_by_2_plus_3714;
    var Ahi3749 = n3712;
    var B1lo3750 = n3712;
    copying_mergesort3715(Amid13747, B1lo3750, n_by_2_plus_3714);
    if (M0.zero_p(n_by_2_3713) !== false) {
      var if_res2462 = M0.rvoid();
    } else {
      var if_res2462 = copying_mergesort3715(Alo3746, Amid23748, n_by_2_3713);
    }
    if_res2462;
    var b23751 = Ahi3749;
    var loop3752 = function(a13753, b13754, c13755) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3756 = M1.unsafe_vector_ref(A3711, a13753);
      var y3757 = M1.unsafe_vector_ref(A3711, b13754);
      if (false !== false) {
        if (false !== false) {
          var if_res2463 = M0.__lt_(false(y3757), false(x3756));
        } else {
          var if_res2463 = M0.__lt_(y3757, x3756);
        }
        var if_res2465 = M0.not(if_res2463);
      } else {
        if (false !== false) {
          var if_res2464 = M0.__lt_(false(x3756), false(y3757));
        } else {
          var if_res2464 = M0.__lt_(x3756, y3757);
        }
        var if_res2465 = if_res2464;
      }
      if (if_res2465 !== false) {
        M1.unsafe_vector_set_bang_(A3711, c13755, x3756);
        var a13758 = M1.unsafe_fx_plus_(a13753, 1);
        var c13759 = M1.unsafe_fx_plus_(c13755, 1);
        if (M1.unsafe_fx_lt_(c13759, b13754) !== false) {
          var if_res2466 = loop3752(a13758, b13754, c13759);
        } else {
          var if_res2466 = M0.rvoid();
        }
        var if_res2469 = if_res2466;
      } else {
        M1.unsafe_vector_set_bang_(A3711, c13755, y3757);
        var b13760 = M1.unsafe_fx_plus_(b13754, 1);
        var c13761 = M1.unsafe_fx_plus_(c13755, 1);
        if (M1.unsafe_fx_lt__eq_(b23751, b13760) !== false) {
          var loop3762 = function(a13763, c13764) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13764, b13760) !== false) {
              M1.unsafe_vector_set_bang_(A3711, c13764, M1.unsafe_vector_ref(A3711, a13763));
              var if_res2467 = loop3762(M1.unsafe_fx_plus_(a13763, 1), M1.unsafe_fx_plus_(c13764, 1));
            } else {
              var if_res2467 = M0.rvoid();
            }
            return if_res2467;
          };
          var if_res2468 = loop3762(a13753, c13761);
        } else {
          var if_res2468 = loop3752(a13753, b13760, c13761);
        }
        var if_res2469 = if_res2468;
      }
      return if_res2469;
    };
    return loop3752(B1lo3750, Amid23748, Alo3746);
  };
  M0.hash_set_bang_(sorts3489, M0.__lt_, sort_proc3710);
  M0.hash_set_bang_(sorts3489, M0.__lt__eq_, sort_proc3710);
  var sort_proc3765 = function(A3766, n3767) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3768 = M1.unsafe_fxrshift(n3767, 1);
    var n_by_2_plus_3769 = M1.unsafe_fx_(n3767, n_by_2_3768);
    var copying_mergesort3770 = function(Alo3771, Blo3772, n3773) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3773, 1) !== false) {
        var if_res2485 = M1.unsafe_vector_set_bang_(A3766, Blo3772, M1.unsafe_vector_ref(A3766, Alo3771));
      } else {
        if (M1.unsafe_fx_eq_(n3773, 2) !== false) {
          var x3774 = M1.unsafe_vector_ref(A3766, Alo3771);
          var y3775 = M1.unsafe_vector_ref(A3766, M1.unsafe_fx_plus_(Alo3771, 1));
          if (false !== false) {
            var if_res2470 = M0.__gt_(false(y3775), false(x3774));
          } else {
            var if_res2470 = M0.__gt_(y3775, x3774);
          }
          if (if_res2470 !== false) {
            M1.unsafe_vector_set_bang_(A3766, Blo3772, y3775);
            var if_res2471 = M1.unsafe_vector_set_bang_(A3766, M1.unsafe_fx_plus_(Blo3772, 1), x3774);
          } else {
            M1.unsafe_vector_set_bang_(A3766, Blo3772, x3774);
            var if_res2471 = M1.unsafe_vector_set_bang_(A3766, M1.unsafe_fx_plus_(Blo3772, 1), y3775);
          }
          var if_res2484 = if_res2471;
        } else {
          if (M1.unsafe_fx_lt_(n3773, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3766, Blo3772, M1.unsafe_vector_ref(A3766, Alo3771));
            var iloop3776 = function(i3777) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3777, n3773) !== false) {
                var ref_i3778 = M1.unsafe_vector_ref(A3766, M1.unsafe_fx_plus_(Alo3771, i3777));
                var jloop3779 = function(j3780) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13781 = M1.unsafe_vector_ref(A3766, M1.unsafe_fx_(j3780, 1));
                  if (M1.unsafe_fx_lt_(Blo3772, j3780) !== false) {
                    if (false !== false) {
                      var if_res2472 = M0.__gt_(false(ref_i3778), false(ref_j_13781));
                    } else {
                      var if_res2472 = M0.__gt_(ref_i3778, ref_j_13781);
                    }
                    var if_res2473 = if_res2472;
                  } else {
                    var if_res2473 = false;
                  }
                  if (if_res2473 !== false) {
                    M1.unsafe_vector_set_bang_(A3766, j3780, ref_j_13781);
                    var if_res2474 = jloop3779(M1.unsafe_fx_(j3780, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3766, j3780, ref_i3778);
                    var if_res2474 = iloop3776(M1.unsafe_fx_plus_(i3777, 1));
                  }
                  return if_res2474;
                };
                var if_res2475 = jloop3779(M1.unsafe_fx_plus_(Blo3772, i3777));
              } else {
                var if_res2475 = M0.rvoid();
              }
              return if_res2475;
            };
            var if_res2483 = iloop3776(1);
          } else {
            var n_by_2_3782 = M1.unsafe_fxrshift(n3773, 1);
            var n_by_2_plus_3783 = M1.unsafe_fx_(n3773, n_by_2_3782);
            var Amid13784 = M1.unsafe_fx_plus_(Alo3771, n_by_2_3782);
            var Amid23785 = M1.unsafe_fx_plus_(Alo3771, n_by_2_plus_3783);
            var Bmid13786 = M1.unsafe_fx_plus_(Blo3772, n_by_2_3782);
            copying_mergesort3770(Amid13784, Bmid13786, n_by_2_plus_3783);
            copying_mergesort3770(Alo3771, Amid23785, n_by_2_3782);
            var b23787 = M1.unsafe_fx_plus_(Blo3772, n3773);
            var loop3788 = function(a13789, b13790, c13791) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3792 = M1.unsafe_vector_ref(A3766, a13789);
              var y3793 = M1.unsafe_vector_ref(A3766, b13790);
              if (true !== false) {
                if (false !== false) {
                  var if_res2476 = M0.__gt_(false(y3793), false(x3792));
                } else {
                  var if_res2476 = M0.__gt_(y3793, x3792);
                }
                var if_res2478 = M0.not(if_res2476);
              } else {
                if (false !== false) {
                  var if_res2477 = M0.__gt_(false(x3792), false(y3793));
                } else {
                  var if_res2477 = M0.__gt_(x3792, y3793);
                }
                var if_res2478 = if_res2477;
              }
              if (if_res2478 !== false) {
                M1.unsafe_vector_set_bang_(A3766, c13791, x3792);
                var a13794 = M1.unsafe_fx_plus_(a13789, 1);
                var c13795 = M1.unsafe_fx_plus_(c13791, 1);
                if (M1.unsafe_fx_lt_(c13795, b13790) !== false) {
                  var if_res2479 = loop3788(a13794, b13790, c13795);
                } else {
                  var if_res2479 = M0.rvoid();
                }
                var if_res2482 = if_res2479;
              } else {
                M1.unsafe_vector_set_bang_(A3766, c13791, y3793);
                var b13796 = M1.unsafe_fx_plus_(b13790, 1);
                var c13797 = M1.unsafe_fx_plus_(c13791, 1);
                if (M1.unsafe_fx_lt__eq_(b23787, b13796) !== false) {
                  var loop3798 = function(a13799, c13800) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13800, b13796) !== false) {
                      M1.unsafe_vector_set_bang_(A3766, c13800, M1.unsafe_vector_ref(A3766, a13799));
                      var if_res2480 = loop3798(M1.unsafe_fx_plus_(a13799, 1), M1.unsafe_fx_plus_(c13800, 1));
                    } else {
                      var if_res2480 = M0.rvoid();
                    }
                    return if_res2480;
                  };
                  var if_res2481 = loop3798(a13789, c13797);
                } else {
                  var if_res2481 = loop3788(a13789, b13796, c13797);
                }
                var if_res2482 = if_res2481;
              }
              return if_res2482;
            };
            var if_res2483 = loop3788(Amid23785, Bmid13786, Blo3772);
          }
          var if_res2484 = if_res2483;
        }
        var if_res2485 = if_res2484;
      }
      return if_res2485;
    };
    var Alo3801 = 0;
    var Amid13802 = n_by_2_3768;
    var Amid23803 = n_by_2_plus_3769;
    var Ahi3804 = n3767;
    var B1lo3805 = n3767;
    copying_mergesort3770(Amid13802, B1lo3805, n_by_2_plus_3769);
    if (M0.zero_p(n_by_2_3768) !== false) {
      var if_res2486 = M0.rvoid();
    } else {
      var if_res2486 = copying_mergesort3770(Alo3801, Amid23803, n_by_2_3768);
    }
    if_res2486;
    var b23806 = Ahi3804;
    var loop3807 = function(a13808, b13809, c13810) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3811 = M1.unsafe_vector_ref(A3766, a13808);
      var y3812 = M1.unsafe_vector_ref(A3766, b13809);
      if (false !== false) {
        if (false !== false) {
          var if_res2487 = M0.__gt_(false(y3812), false(x3811));
        } else {
          var if_res2487 = M0.__gt_(y3812, x3811);
        }
        var if_res2489 = M0.not(if_res2487);
      } else {
        if (false !== false) {
          var if_res2488 = M0.__gt_(false(x3811), false(y3812));
        } else {
          var if_res2488 = M0.__gt_(x3811, y3812);
        }
        var if_res2489 = if_res2488;
      }
      if (if_res2489 !== false) {
        M1.unsafe_vector_set_bang_(A3766, c13810, x3811);
        var a13813 = M1.unsafe_fx_plus_(a13808, 1);
        var c13814 = M1.unsafe_fx_plus_(c13810, 1);
        if (M1.unsafe_fx_lt_(c13814, b13809) !== false) {
          var if_res2490 = loop3807(a13813, b13809, c13814);
        } else {
          var if_res2490 = M0.rvoid();
        }
        var if_res2493 = if_res2490;
      } else {
        M1.unsafe_vector_set_bang_(A3766, c13810, y3812);
        var b13815 = M1.unsafe_fx_plus_(b13809, 1);
        var c13816 = M1.unsafe_fx_plus_(c13810, 1);
        if (M1.unsafe_fx_lt__eq_(b23806, b13815) !== false) {
          var loop3817 = function(a13818, c13819) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13819, b13815) !== false) {
              M1.unsafe_vector_set_bang_(A3766, c13819, M1.unsafe_vector_ref(A3766, a13818));
              var if_res2491 = loop3817(M1.unsafe_fx_plus_(a13818, 1), M1.unsafe_fx_plus_(c13819, 1));
            } else {
              var if_res2491 = M0.rvoid();
            }
            return if_res2491;
          };
          var if_res2492 = loop3817(a13808, c13816);
        } else {
          var if_res2492 = loop3807(a13808, b13815, c13816);
        }
        var if_res2493 = if_res2492;
      }
      return if_res2493;
    };
    return loop3807(B1lo3805, Amid23803, Alo3801);
  };
  M0.hash_set_bang_(sorts3489, M0.__gt_, sort_proc3765);
  M0.hash_set_bang_(sorts3489, M0.__gt__eq_, sort_proc3765);
  var sort_proc3820 = function(A3821, n3822) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3823 = M1.unsafe_fxrshift(n3822, 1);
    var n_by_2_plus_3824 = M1.unsafe_fx_(n3822, n_by_2_3823);
    var copying_mergesort3825 = function(Alo3826, Blo3827, n3828) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3828, 1) !== false) {
        var if_res2509 = M1.unsafe_vector_set_bang_(A3821, Blo3827, M1.unsafe_vector_ref(A3821, Alo3826));
      } else {
        if (M1.unsafe_fx_eq_(n3828, 2) !== false) {
          var x3829 = M1.unsafe_vector_ref(A3821, Alo3826);
          var y3830 = M1.unsafe_vector_ref(A3821, M1.unsafe_fx_plus_(Alo3826, 1));
          if (false !== false) {
            var if_res2494 = M0.string_lt__p(false(y3830), false(x3829));
          } else {
            var if_res2494 = M0.string_lt__p(y3830, x3829);
          }
          if (if_res2494 !== false) {
            M1.unsafe_vector_set_bang_(A3821, Blo3827, y3830);
            var if_res2495 = M1.unsafe_vector_set_bang_(A3821, M1.unsafe_fx_plus_(Blo3827, 1), x3829);
          } else {
            M1.unsafe_vector_set_bang_(A3821, Blo3827, x3829);
            var if_res2495 = M1.unsafe_vector_set_bang_(A3821, M1.unsafe_fx_plus_(Blo3827, 1), y3830);
          }
          var if_res2508 = if_res2495;
        } else {
          if (M1.unsafe_fx_lt_(n3828, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3821, Blo3827, M1.unsafe_vector_ref(A3821, Alo3826));
            var iloop3831 = function(i3832) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3832, n3828) !== false) {
                var ref_i3833 = M1.unsafe_vector_ref(A3821, M1.unsafe_fx_plus_(Alo3826, i3832));
                var jloop3834 = function(j3835) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13836 = M1.unsafe_vector_ref(A3821, M1.unsafe_fx_(j3835, 1));
                  if (M1.unsafe_fx_lt_(Blo3827, j3835) !== false) {
                    if (false !== false) {
                      var if_res2496 = M0.string_lt__p(false(ref_i3833), false(ref_j_13836));
                    } else {
                      var if_res2496 = M0.string_lt__p(ref_i3833, ref_j_13836);
                    }
                    var if_res2497 = if_res2496;
                  } else {
                    var if_res2497 = false;
                  }
                  if (if_res2497 !== false) {
                    M1.unsafe_vector_set_bang_(A3821, j3835, ref_j_13836);
                    var if_res2498 = jloop3834(M1.unsafe_fx_(j3835, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3821, j3835, ref_i3833);
                    var if_res2498 = iloop3831(M1.unsafe_fx_plus_(i3832, 1));
                  }
                  return if_res2498;
                };
                var if_res2499 = jloop3834(M1.unsafe_fx_plus_(Blo3827, i3832));
              } else {
                var if_res2499 = M0.rvoid();
              }
              return if_res2499;
            };
            var if_res2507 = iloop3831(1);
          } else {
            var n_by_2_3837 = M1.unsafe_fxrshift(n3828, 1);
            var n_by_2_plus_3838 = M1.unsafe_fx_(n3828, n_by_2_3837);
            var Amid13839 = M1.unsafe_fx_plus_(Alo3826, n_by_2_3837);
            var Amid23840 = M1.unsafe_fx_plus_(Alo3826, n_by_2_plus_3838);
            var Bmid13841 = M1.unsafe_fx_plus_(Blo3827, n_by_2_3837);
            copying_mergesort3825(Amid13839, Bmid13841, n_by_2_plus_3838);
            copying_mergesort3825(Alo3826, Amid23840, n_by_2_3837);
            var b23842 = M1.unsafe_fx_plus_(Blo3827, n3828);
            var loop3843 = function(a13844, b13845, c13846) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3847 = M1.unsafe_vector_ref(A3821, a13844);
              var y3848 = M1.unsafe_vector_ref(A3821, b13845);
              if (true !== false) {
                if (false !== false) {
                  var if_res2500 = M0.string_lt__p(false(y3848), false(x3847));
                } else {
                  var if_res2500 = M0.string_lt__p(y3848, x3847);
                }
                var if_res2502 = M0.not(if_res2500);
              } else {
                if (false !== false) {
                  var if_res2501 = M0.string_lt__p(false(x3847), false(y3848));
                } else {
                  var if_res2501 = M0.string_lt__p(x3847, y3848);
                }
                var if_res2502 = if_res2501;
              }
              if (if_res2502 !== false) {
                M1.unsafe_vector_set_bang_(A3821, c13846, x3847);
                var a13849 = M1.unsafe_fx_plus_(a13844, 1);
                var c13850 = M1.unsafe_fx_plus_(c13846, 1);
                if (M1.unsafe_fx_lt_(c13850, b13845) !== false) {
                  var if_res2503 = loop3843(a13849, b13845, c13850);
                } else {
                  var if_res2503 = M0.rvoid();
                }
                var if_res2506 = if_res2503;
              } else {
                M1.unsafe_vector_set_bang_(A3821, c13846, y3848);
                var b13851 = M1.unsafe_fx_plus_(b13845, 1);
                var c13852 = M1.unsafe_fx_plus_(c13846, 1);
                if (M1.unsafe_fx_lt__eq_(b23842, b13851) !== false) {
                  var loop3853 = function(a13854, c13855) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13855, b13851) !== false) {
                      M1.unsafe_vector_set_bang_(A3821, c13855, M1.unsafe_vector_ref(A3821, a13854));
                      var if_res2504 = loop3853(M1.unsafe_fx_plus_(a13854, 1), M1.unsafe_fx_plus_(c13855, 1));
                    } else {
                      var if_res2504 = M0.rvoid();
                    }
                    return if_res2504;
                  };
                  var if_res2505 = loop3853(a13844, c13852);
                } else {
                  var if_res2505 = loop3843(a13844, b13851, c13852);
                }
                var if_res2506 = if_res2505;
              }
              return if_res2506;
            };
            var if_res2507 = loop3843(Amid23840, Bmid13841, Blo3827);
          }
          var if_res2508 = if_res2507;
        }
        var if_res2509 = if_res2508;
      }
      return if_res2509;
    };
    var Alo3856 = 0;
    var Amid13857 = n_by_2_3823;
    var Amid23858 = n_by_2_plus_3824;
    var Ahi3859 = n3822;
    var B1lo3860 = n3822;
    copying_mergesort3825(Amid13857, B1lo3860, n_by_2_plus_3824);
    if (M0.zero_p(n_by_2_3823) !== false) {
      var if_res2510 = M0.rvoid();
    } else {
      var if_res2510 = copying_mergesort3825(Alo3856, Amid23858, n_by_2_3823);
    }
    if_res2510;
    var b23861 = Ahi3859;
    var loop3862 = function(a13863, b13864, c13865) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3866 = M1.unsafe_vector_ref(A3821, a13863);
      var y3867 = M1.unsafe_vector_ref(A3821, b13864);
      if (false !== false) {
        if (false !== false) {
          var if_res2511 = M0.string_lt__p(false(y3867), false(x3866));
        } else {
          var if_res2511 = M0.string_lt__p(y3867, x3866);
        }
        var if_res2513 = M0.not(if_res2511);
      } else {
        if (false !== false) {
          var if_res2512 = M0.string_lt__p(false(x3866), false(y3867));
        } else {
          var if_res2512 = M0.string_lt__p(x3866, y3867);
        }
        var if_res2513 = if_res2512;
      }
      if (if_res2513 !== false) {
        M1.unsafe_vector_set_bang_(A3821, c13865, x3866);
        var a13868 = M1.unsafe_fx_plus_(a13863, 1);
        var c13869 = M1.unsafe_fx_plus_(c13865, 1);
        if (M1.unsafe_fx_lt_(c13869, b13864) !== false) {
          var if_res2514 = loop3862(a13868, b13864, c13869);
        } else {
          var if_res2514 = M0.rvoid();
        }
        var if_res2517 = if_res2514;
      } else {
        M1.unsafe_vector_set_bang_(A3821, c13865, y3867);
        var b13870 = M1.unsafe_fx_plus_(b13864, 1);
        var c13871 = M1.unsafe_fx_plus_(c13865, 1);
        if (M1.unsafe_fx_lt__eq_(b23861, b13870) !== false) {
          var loop3872 = function(a13873, c13874) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13874, b13870) !== false) {
              M1.unsafe_vector_set_bang_(A3821, c13874, M1.unsafe_vector_ref(A3821, a13873));
              var if_res2515 = loop3872(M1.unsafe_fx_plus_(a13873, 1), M1.unsafe_fx_plus_(c13874, 1));
            } else {
              var if_res2515 = M0.rvoid();
            }
            return if_res2515;
          };
          var if_res2516 = loop3872(a13863, c13871);
        } else {
          var if_res2516 = loop3862(a13863, b13870, c13871);
        }
        var if_res2517 = if_res2516;
      }
      return if_res2517;
    };
    return loop3862(B1lo3860, Amid23858, Alo3856);
  };
  M0.hash_set_bang_(sorts3489, M0.string_lt__p, sort_proc3820);
  M0.hash_set_bang_(sorts3489, M0.string_lt__eq__p, sort_proc3820);
  var sort_proc3875 = function(A3876, n3877) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3878 = M1.unsafe_fxrshift(n3877, 1);
    var n_by_2_plus_3879 = M1.unsafe_fx_(n3877, n_by_2_3878);
    var copying_mergesort3880 = function(Alo3881, Blo3882, n3883) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3883, 1) !== false) {
        var if_res2533 = M1.unsafe_vector_set_bang_(A3876, Blo3882, M1.unsafe_vector_ref(A3876, Alo3881));
      } else {
        if (M1.unsafe_fx_eq_(n3883, 2) !== false) {
          var x3884 = M1.unsafe_vector_ref(A3876, Alo3881);
          var y3885 = M1.unsafe_vector_ref(A3876, M1.unsafe_fx_plus_(Alo3881, 1));
          if (false !== false) {
            var if_res2518 = M0.string_gt__p(false(y3885), false(x3884));
          } else {
            var if_res2518 = M0.string_gt__p(y3885, x3884);
          }
          if (if_res2518 !== false) {
            M1.unsafe_vector_set_bang_(A3876, Blo3882, y3885);
            var if_res2519 = M1.unsafe_vector_set_bang_(A3876, M1.unsafe_fx_plus_(Blo3882, 1), x3884);
          } else {
            M1.unsafe_vector_set_bang_(A3876, Blo3882, x3884);
            var if_res2519 = M1.unsafe_vector_set_bang_(A3876, M1.unsafe_fx_plus_(Blo3882, 1), y3885);
          }
          var if_res2532 = if_res2519;
        } else {
          if (M1.unsafe_fx_lt_(n3883, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3876, Blo3882, M1.unsafe_vector_ref(A3876, Alo3881));
            var iloop3886 = function(i3887) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3887, n3883) !== false) {
                var ref_i3888 = M1.unsafe_vector_ref(A3876, M1.unsafe_fx_plus_(Alo3881, i3887));
                var jloop3889 = function(j3890) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13891 = M1.unsafe_vector_ref(A3876, M1.unsafe_fx_(j3890, 1));
                  if (M1.unsafe_fx_lt_(Blo3882, j3890) !== false) {
                    if (false !== false) {
                      var if_res2520 = M0.string_gt__p(false(ref_i3888), false(ref_j_13891));
                    } else {
                      var if_res2520 = M0.string_gt__p(ref_i3888, ref_j_13891);
                    }
                    var if_res2521 = if_res2520;
                  } else {
                    var if_res2521 = false;
                  }
                  if (if_res2521 !== false) {
                    M1.unsafe_vector_set_bang_(A3876, j3890, ref_j_13891);
                    var if_res2522 = jloop3889(M1.unsafe_fx_(j3890, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3876, j3890, ref_i3888);
                    var if_res2522 = iloop3886(M1.unsafe_fx_plus_(i3887, 1));
                  }
                  return if_res2522;
                };
                var if_res2523 = jloop3889(M1.unsafe_fx_plus_(Blo3882, i3887));
              } else {
                var if_res2523 = M0.rvoid();
              }
              return if_res2523;
            };
            var if_res2531 = iloop3886(1);
          } else {
            var n_by_2_3892 = M1.unsafe_fxrshift(n3883, 1);
            var n_by_2_plus_3893 = M1.unsafe_fx_(n3883, n_by_2_3892);
            var Amid13894 = M1.unsafe_fx_plus_(Alo3881, n_by_2_3892);
            var Amid23895 = M1.unsafe_fx_plus_(Alo3881, n_by_2_plus_3893);
            var Bmid13896 = M1.unsafe_fx_plus_(Blo3882, n_by_2_3892);
            copying_mergesort3880(Amid13894, Bmid13896, n_by_2_plus_3893);
            copying_mergesort3880(Alo3881, Amid23895, n_by_2_3892);
            var b23897 = M1.unsafe_fx_plus_(Blo3882, n3883);
            var loop3898 = function(a13899, b13900, c13901) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3902 = M1.unsafe_vector_ref(A3876, a13899);
              var y3903 = M1.unsafe_vector_ref(A3876, b13900);
              if (true !== false) {
                if (false !== false) {
                  var if_res2524 = M0.string_gt__p(false(y3903), false(x3902));
                } else {
                  var if_res2524 = M0.string_gt__p(y3903, x3902);
                }
                var if_res2526 = M0.not(if_res2524);
              } else {
                if (false !== false) {
                  var if_res2525 = M0.string_gt__p(false(x3902), false(y3903));
                } else {
                  var if_res2525 = M0.string_gt__p(x3902, y3903);
                }
                var if_res2526 = if_res2525;
              }
              if (if_res2526 !== false) {
                M1.unsafe_vector_set_bang_(A3876, c13901, x3902);
                var a13904 = M1.unsafe_fx_plus_(a13899, 1);
                var c13905 = M1.unsafe_fx_plus_(c13901, 1);
                if (M1.unsafe_fx_lt_(c13905, b13900) !== false) {
                  var if_res2527 = loop3898(a13904, b13900, c13905);
                } else {
                  var if_res2527 = M0.rvoid();
                }
                var if_res2530 = if_res2527;
              } else {
                M1.unsafe_vector_set_bang_(A3876, c13901, y3903);
                var b13906 = M1.unsafe_fx_plus_(b13900, 1);
                var c13907 = M1.unsafe_fx_plus_(c13901, 1);
                if (M1.unsafe_fx_lt__eq_(b23897, b13906) !== false) {
                  var loop3908 = function(a13909, c13910) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13910, b13906) !== false) {
                      M1.unsafe_vector_set_bang_(A3876, c13910, M1.unsafe_vector_ref(A3876, a13909));
                      var if_res2528 = loop3908(M1.unsafe_fx_plus_(a13909, 1), M1.unsafe_fx_plus_(c13910, 1));
                    } else {
                      var if_res2528 = M0.rvoid();
                    }
                    return if_res2528;
                  };
                  var if_res2529 = loop3908(a13899, c13907);
                } else {
                  var if_res2529 = loop3898(a13899, b13906, c13907);
                }
                var if_res2530 = if_res2529;
              }
              return if_res2530;
            };
            var if_res2531 = loop3898(Amid23895, Bmid13896, Blo3882);
          }
          var if_res2532 = if_res2531;
        }
        var if_res2533 = if_res2532;
      }
      return if_res2533;
    };
    var Alo3911 = 0;
    var Amid13912 = n_by_2_3878;
    var Amid23913 = n_by_2_plus_3879;
    var Ahi3914 = n3877;
    var B1lo3915 = n3877;
    copying_mergesort3880(Amid13912, B1lo3915, n_by_2_plus_3879);
    if (M0.zero_p(n_by_2_3878) !== false) {
      var if_res2534 = M0.rvoid();
    } else {
      var if_res2534 = copying_mergesort3880(Alo3911, Amid23913, n_by_2_3878);
    }
    if_res2534;
    var b23916 = Ahi3914;
    var loop3917 = function(a13918, b13919, c13920) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3921 = M1.unsafe_vector_ref(A3876, a13918);
      var y3922 = M1.unsafe_vector_ref(A3876, b13919);
      if (false !== false) {
        if (false !== false) {
          var if_res2535 = M0.string_gt__p(false(y3922), false(x3921));
        } else {
          var if_res2535 = M0.string_gt__p(y3922, x3921);
        }
        var if_res2537 = M0.not(if_res2535);
      } else {
        if (false !== false) {
          var if_res2536 = M0.string_gt__p(false(x3921), false(y3922));
        } else {
          var if_res2536 = M0.string_gt__p(x3921, y3922);
        }
        var if_res2537 = if_res2536;
      }
      if (if_res2537 !== false) {
        M1.unsafe_vector_set_bang_(A3876, c13920, x3921);
        var a13923 = M1.unsafe_fx_plus_(a13918, 1);
        var c13924 = M1.unsafe_fx_plus_(c13920, 1);
        if (M1.unsafe_fx_lt_(c13924, b13919) !== false) {
          var if_res2538 = loop3917(a13923, b13919, c13924);
        } else {
          var if_res2538 = M0.rvoid();
        }
        var if_res2541 = if_res2538;
      } else {
        M1.unsafe_vector_set_bang_(A3876, c13920, y3922);
        var b13925 = M1.unsafe_fx_plus_(b13919, 1);
        var c13926 = M1.unsafe_fx_plus_(c13920, 1);
        if (M1.unsafe_fx_lt__eq_(b23916, b13925) !== false) {
          var loop3927 = function(a13928, c13929) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13929, b13925) !== false) {
              M1.unsafe_vector_set_bang_(A3876, c13929, M1.unsafe_vector_ref(A3876, a13928));
              var if_res2539 = loop3927(M1.unsafe_fx_plus_(a13928, 1), M1.unsafe_fx_plus_(c13929, 1));
            } else {
              var if_res2539 = M0.rvoid();
            }
            return if_res2539;
          };
          var if_res2540 = loop3927(a13918, c13926);
        } else {
          var if_res2540 = loop3917(a13918, b13925, c13926);
        }
        var if_res2541 = if_res2540;
      }
      return if_res2541;
    };
    return loop3917(B1lo3915, Amid23913, Alo3911);
  };
  M0.hash_set_bang_(sorts3489, M0.string_gt__p, sort_proc3875);
  M0.hash_set_bang_(sorts3489, M0.string_gt__eq__p, sort_proc3875);
  var sort_proc3930 = function(A3931, n3932) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3933 = M1.unsafe_fxrshift(n3932, 1);
    var n_by_2_plus_3934 = M1.unsafe_fx_(n3932, n_by_2_3933);
    var copying_mergesort3935 = function(Alo3936, Blo3937, n3938) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3938, 1) !== false) {
        var if_res2557 = M1.unsafe_vector_set_bang_(A3931, Blo3937, M1.unsafe_vector_ref(A3931, Alo3936));
      } else {
        if (M1.unsafe_fx_eq_(n3938, 2) !== false) {
          var x3939 = M1.unsafe_vector_ref(A3931, Alo3936);
          var y3940 = M1.unsafe_vector_ref(A3931, M1.unsafe_fx_plus_(Alo3936, 1));
          if (false !== false) {
            var if_res2542 = M0.__rjs_quoted__.string_ci_lt__p(false(y3940), false(x3939));
          } else {
            var if_res2542 = M0.__rjs_quoted__.string_ci_lt__p(y3940, x3939);
          }
          if (if_res2542 !== false) {
            M1.unsafe_vector_set_bang_(A3931, Blo3937, y3940);
            var if_res2543 = M1.unsafe_vector_set_bang_(A3931, M1.unsafe_fx_plus_(Blo3937, 1), x3939);
          } else {
            M1.unsafe_vector_set_bang_(A3931, Blo3937, x3939);
            var if_res2543 = M1.unsafe_vector_set_bang_(A3931, M1.unsafe_fx_plus_(Blo3937, 1), y3940);
          }
          var if_res2556 = if_res2543;
        } else {
          if (M1.unsafe_fx_lt_(n3938, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3931, Blo3937, M1.unsafe_vector_ref(A3931, Alo3936));
            var iloop3941 = function(i3942) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3942, n3938) !== false) {
                var ref_i3943 = M1.unsafe_vector_ref(A3931, M1.unsafe_fx_plus_(Alo3936, i3942));
                var jloop3944 = function(j3945) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13946 = M1.unsafe_vector_ref(A3931, M1.unsafe_fx_(j3945, 1));
                  if (M1.unsafe_fx_lt_(Blo3937, j3945) !== false) {
                    if (false !== false) {
                      var if_res2544 = M0.__rjs_quoted__.string_ci_lt__p(false(ref_i3943), false(ref_j_13946));
                    } else {
                      var if_res2544 = M0.__rjs_quoted__.string_ci_lt__p(ref_i3943, ref_j_13946);
                    }
                    var if_res2545 = if_res2544;
                  } else {
                    var if_res2545 = false;
                  }
                  if (if_res2545 !== false) {
                    M1.unsafe_vector_set_bang_(A3931, j3945, ref_j_13946);
                    var if_res2546 = jloop3944(M1.unsafe_fx_(j3945, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3931, j3945, ref_i3943);
                    var if_res2546 = iloop3941(M1.unsafe_fx_plus_(i3942, 1));
                  }
                  return if_res2546;
                };
                var if_res2547 = jloop3944(M1.unsafe_fx_plus_(Blo3937, i3942));
              } else {
                var if_res2547 = M0.rvoid();
              }
              return if_res2547;
            };
            var if_res2555 = iloop3941(1);
          } else {
            var n_by_2_3947 = M1.unsafe_fxrshift(n3938, 1);
            var n_by_2_plus_3948 = M1.unsafe_fx_(n3938, n_by_2_3947);
            var Amid13949 = M1.unsafe_fx_plus_(Alo3936, n_by_2_3947);
            var Amid23950 = M1.unsafe_fx_plus_(Alo3936, n_by_2_plus_3948);
            var Bmid13951 = M1.unsafe_fx_plus_(Blo3937, n_by_2_3947);
            copying_mergesort3935(Amid13949, Bmid13951, n_by_2_plus_3948);
            copying_mergesort3935(Alo3936, Amid23950, n_by_2_3947);
            var b23952 = M1.unsafe_fx_plus_(Blo3937, n3938);
            var loop3953 = function(a13954, b13955, c13956) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3957 = M1.unsafe_vector_ref(A3931, a13954);
              var y3958 = M1.unsafe_vector_ref(A3931, b13955);
              if (true !== false) {
                if (false !== false) {
                  var if_res2548 = M0.__rjs_quoted__.string_ci_lt__p(false(y3958), false(x3957));
                } else {
                  var if_res2548 = M0.__rjs_quoted__.string_ci_lt__p(y3958, x3957);
                }
                var if_res2550 = M0.not(if_res2548);
              } else {
                if (false !== false) {
                  var if_res2549 = M0.__rjs_quoted__.string_ci_lt__p(false(x3957), false(y3958));
                } else {
                  var if_res2549 = M0.__rjs_quoted__.string_ci_lt__p(x3957, y3958);
                }
                var if_res2550 = if_res2549;
              }
              if (if_res2550 !== false) {
                M1.unsafe_vector_set_bang_(A3931, c13956, x3957);
                var a13959 = M1.unsafe_fx_plus_(a13954, 1);
                var c13960 = M1.unsafe_fx_plus_(c13956, 1);
                if (M1.unsafe_fx_lt_(c13960, b13955) !== false) {
                  var if_res2551 = loop3953(a13959, b13955, c13960);
                } else {
                  var if_res2551 = M0.rvoid();
                }
                var if_res2554 = if_res2551;
              } else {
                M1.unsafe_vector_set_bang_(A3931, c13956, y3958);
                var b13961 = M1.unsafe_fx_plus_(b13955, 1);
                var c13962 = M1.unsafe_fx_plus_(c13956, 1);
                if (M1.unsafe_fx_lt__eq_(b23952, b13961) !== false) {
                  var loop3963 = function(a13964, c13965) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13965, b13961) !== false) {
                      M1.unsafe_vector_set_bang_(A3931, c13965, M1.unsafe_vector_ref(A3931, a13964));
                      var if_res2552 = loop3963(M1.unsafe_fx_plus_(a13964, 1), M1.unsafe_fx_plus_(c13965, 1));
                    } else {
                      var if_res2552 = M0.rvoid();
                    }
                    return if_res2552;
                  };
                  var if_res2553 = loop3963(a13954, c13962);
                } else {
                  var if_res2553 = loop3953(a13954, b13961, c13962);
                }
                var if_res2554 = if_res2553;
              }
              return if_res2554;
            };
            var if_res2555 = loop3953(Amid23950, Bmid13951, Blo3937);
          }
          var if_res2556 = if_res2555;
        }
        var if_res2557 = if_res2556;
      }
      return if_res2557;
    };
    var Alo3966 = 0;
    var Amid13967 = n_by_2_3933;
    var Amid23968 = n_by_2_plus_3934;
    var Ahi3969 = n3932;
    var B1lo3970 = n3932;
    copying_mergesort3935(Amid13967, B1lo3970, n_by_2_plus_3934);
    if (M0.zero_p(n_by_2_3933) !== false) {
      var if_res2558 = M0.rvoid();
    } else {
      var if_res2558 = copying_mergesort3935(Alo3966, Amid23968, n_by_2_3933);
    }
    if_res2558;
    var b23971 = Ahi3969;
    var loop3972 = function(a13973, b13974, c13975) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3976 = M1.unsafe_vector_ref(A3931, a13973);
      var y3977 = M1.unsafe_vector_ref(A3931, b13974);
      if (false !== false) {
        if (false !== false) {
          var if_res2559 = M0.__rjs_quoted__.string_ci_lt__p(false(y3977), false(x3976));
        } else {
          var if_res2559 = M0.__rjs_quoted__.string_ci_lt__p(y3977, x3976);
        }
        var if_res2561 = M0.not(if_res2559);
      } else {
        if (false !== false) {
          var if_res2560 = M0.__rjs_quoted__.string_ci_lt__p(false(x3976), false(y3977));
        } else {
          var if_res2560 = M0.__rjs_quoted__.string_ci_lt__p(x3976, y3977);
        }
        var if_res2561 = if_res2560;
      }
      if (if_res2561 !== false) {
        M1.unsafe_vector_set_bang_(A3931, c13975, x3976);
        var a13978 = M1.unsafe_fx_plus_(a13973, 1);
        var c13979 = M1.unsafe_fx_plus_(c13975, 1);
        if (M1.unsafe_fx_lt_(c13979, b13974) !== false) {
          var if_res2562 = loop3972(a13978, b13974, c13979);
        } else {
          var if_res2562 = M0.rvoid();
        }
        var if_res2565 = if_res2562;
      } else {
        M1.unsafe_vector_set_bang_(A3931, c13975, y3977);
        var b13980 = M1.unsafe_fx_plus_(b13974, 1);
        var c13981 = M1.unsafe_fx_plus_(c13975, 1);
        if (M1.unsafe_fx_lt__eq_(b23971, b13980) !== false) {
          var loop3982 = function(a13983, c13984) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13984, b13980) !== false) {
              M1.unsafe_vector_set_bang_(A3931, c13984, M1.unsafe_vector_ref(A3931, a13983));
              var if_res2563 = loop3982(M1.unsafe_fx_plus_(a13983, 1), M1.unsafe_fx_plus_(c13984, 1));
            } else {
              var if_res2563 = M0.rvoid();
            }
            return if_res2563;
          };
          var if_res2564 = loop3982(a13973, c13981);
        } else {
          var if_res2564 = loop3972(a13973, b13980, c13981);
        }
        var if_res2565 = if_res2564;
      }
      return if_res2565;
    };
    return loop3972(B1lo3970, Amid23968, Alo3966);
  };
  M0.hash_set_bang_(sorts3489, M0.__rjs_quoted__.string_ci_lt__p, sort_proc3930);
  M0.hash_set_bang_(sorts3489, M0.__rjs_quoted__.string_ci_lt__eq__p, sort_proc3930);
  var sort_proc3985 = function(A3986, n3987) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3988 = M1.unsafe_fxrshift(n3987, 1);
    var n_by_2_plus_3989 = M1.unsafe_fx_(n3987, n_by_2_3988);
    var copying_mergesort3990 = function(Alo3991, Blo3992, n3993) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3993, 1) !== false) {
        var if_res2581 = M1.unsafe_vector_set_bang_(A3986, Blo3992, M1.unsafe_vector_ref(A3986, Alo3991));
      } else {
        if (M1.unsafe_fx_eq_(n3993, 2) !== false) {
          var x3994 = M1.unsafe_vector_ref(A3986, Alo3991);
          var y3995 = M1.unsafe_vector_ref(A3986, M1.unsafe_fx_plus_(Alo3991, 1));
          if (false !== false) {
            var if_res2566 = M0.__rjs_quoted__.string_ci_gt__p(false(y3995), false(x3994));
          } else {
            var if_res2566 = M0.__rjs_quoted__.string_ci_gt__p(y3995, x3994);
          }
          if (if_res2566 !== false) {
            M1.unsafe_vector_set_bang_(A3986, Blo3992, y3995);
            var if_res2567 = M1.unsafe_vector_set_bang_(A3986, M1.unsafe_fx_plus_(Blo3992, 1), x3994);
          } else {
            M1.unsafe_vector_set_bang_(A3986, Blo3992, x3994);
            var if_res2567 = M1.unsafe_vector_set_bang_(A3986, M1.unsafe_fx_plus_(Blo3992, 1), y3995);
          }
          var if_res2580 = if_res2567;
        } else {
          if (M1.unsafe_fx_lt_(n3993, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3986, Blo3992, M1.unsafe_vector_ref(A3986, Alo3991));
            var iloop3996 = function(i3997) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3997, n3993) !== false) {
                var ref_i3998 = M1.unsafe_vector_ref(A3986, M1.unsafe_fx_plus_(Alo3991, i3997));
                var jloop3999 = function(j4000) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14001 = M1.unsafe_vector_ref(A3986, M1.unsafe_fx_(j4000, 1));
                  if (M1.unsafe_fx_lt_(Blo3992, j4000) !== false) {
                    if (false !== false) {
                      var if_res2568 = M0.__rjs_quoted__.string_ci_gt__p(false(ref_i3998), false(ref_j_14001));
                    } else {
                      var if_res2568 = M0.__rjs_quoted__.string_ci_gt__p(ref_i3998, ref_j_14001);
                    }
                    var if_res2569 = if_res2568;
                  } else {
                    var if_res2569 = false;
                  }
                  if (if_res2569 !== false) {
                    M1.unsafe_vector_set_bang_(A3986, j4000, ref_j_14001);
                    var if_res2570 = jloop3999(M1.unsafe_fx_(j4000, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3986, j4000, ref_i3998);
                    var if_res2570 = iloop3996(M1.unsafe_fx_plus_(i3997, 1));
                  }
                  return if_res2570;
                };
                var if_res2571 = jloop3999(M1.unsafe_fx_plus_(Blo3992, i3997));
              } else {
                var if_res2571 = M0.rvoid();
              }
              return if_res2571;
            };
            var if_res2579 = iloop3996(1);
          } else {
            var n_by_2_4002 = M1.unsafe_fxrshift(n3993, 1);
            var n_by_2_plus_4003 = M1.unsafe_fx_(n3993, n_by_2_4002);
            var Amid14004 = M1.unsafe_fx_plus_(Alo3991, n_by_2_4002);
            var Amid24005 = M1.unsafe_fx_plus_(Alo3991, n_by_2_plus_4003);
            var Bmid14006 = M1.unsafe_fx_plus_(Blo3992, n_by_2_4002);
            copying_mergesort3990(Amid14004, Bmid14006, n_by_2_plus_4003);
            copying_mergesort3990(Alo3991, Amid24005, n_by_2_4002);
            var b24007 = M1.unsafe_fx_plus_(Blo3992, n3993);
            var loop4008 = function(a14009, b14010, c14011) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4012 = M1.unsafe_vector_ref(A3986, a14009);
              var y4013 = M1.unsafe_vector_ref(A3986, b14010);
              if (true !== false) {
                if (false !== false) {
                  var if_res2572 = M0.__rjs_quoted__.string_ci_gt__p(false(y4013), false(x4012));
                } else {
                  var if_res2572 = M0.__rjs_quoted__.string_ci_gt__p(y4013, x4012);
                }
                var if_res2574 = M0.not(if_res2572);
              } else {
                if (false !== false) {
                  var if_res2573 = M0.__rjs_quoted__.string_ci_gt__p(false(x4012), false(y4013));
                } else {
                  var if_res2573 = M0.__rjs_quoted__.string_ci_gt__p(x4012, y4013);
                }
                var if_res2574 = if_res2573;
              }
              if (if_res2574 !== false) {
                M1.unsafe_vector_set_bang_(A3986, c14011, x4012);
                var a14014 = M1.unsafe_fx_plus_(a14009, 1);
                var c14015 = M1.unsafe_fx_plus_(c14011, 1);
                if (M1.unsafe_fx_lt_(c14015, b14010) !== false) {
                  var if_res2575 = loop4008(a14014, b14010, c14015);
                } else {
                  var if_res2575 = M0.rvoid();
                }
                var if_res2578 = if_res2575;
              } else {
                M1.unsafe_vector_set_bang_(A3986, c14011, y4013);
                var b14016 = M1.unsafe_fx_plus_(b14010, 1);
                var c14017 = M1.unsafe_fx_plus_(c14011, 1);
                if (M1.unsafe_fx_lt__eq_(b24007, b14016) !== false) {
                  var loop4018 = function(a14019, c14020) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14020, b14016) !== false) {
                      M1.unsafe_vector_set_bang_(A3986, c14020, M1.unsafe_vector_ref(A3986, a14019));
                      var if_res2576 = loop4018(M1.unsafe_fx_plus_(a14019, 1), M1.unsafe_fx_plus_(c14020, 1));
                    } else {
                      var if_res2576 = M0.rvoid();
                    }
                    return if_res2576;
                  };
                  var if_res2577 = loop4018(a14009, c14017);
                } else {
                  var if_res2577 = loop4008(a14009, b14016, c14017);
                }
                var if_res2578 = if_res2577;
              }
              return if_res2578;
            };
            var if_res2579 = loop4008(Amid24005, Bmid14006, Blo3992);
          }
          var if_res2580 = if_res2579;
        }
        var if_res2581 = if_res2580;
      }
      return if_res2581;
    };
    var Alo4021 = 0;
    var Amid14022 = n_by_2_3988;
    var Amid24023 = n_by_2_plus_3989;
    var Ahi4024 = n3987;
    var B1lo4025 = n3987;
    copying_mergesort3990(Amid14022, B1lo4025, n_by_2_plus_3989);
    if (M0.zero_p(n_by_2_3988) !== false) {
      var if_res2582 = M0.rvoid();
    } else {
      var if_res2582 = copying_mergesort3990(Alo4021, Amid24023, n_by_2_3988);
    }
    if_res2582;
    var b24026 = Ahi4024;
    var loop4027 = function(a14028, b14029, c14030) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4031 = M1.unsafe_vector_ref(A3986, a14028);
      var y4032 = M1.unsafe_vector_ref(A3986, b14029);
      if (false !== false) {
        if (false !== false) {
          var if_res2583 = M0.__rjs_quoted__.string_ci_gt__p(false(y4032), false(x4031));
        } else {
          var if_res2583 = M0.__rjs_quoted__.string_ci_gt__p(y4032, x4031);
        }
        var if_res2585 = M0.not(if_res2583);
      } else {
        if (false !== false) {
          var if_res2584 = M0.__rjs_quoted__.string_ci_gt__p(false(x4031), false(y4032));
        } else {
          var if_res2584 = M0.__rjs_quoted__.string_ci_gt__p(x4031, y4032);
        }
        var if_res2585 = if_res2584;
      }
      if (if_res2585 !== false) {
        M1.unsafe_vector_set_bang_(A3986, c14030, x4031);
        var a14033 = M1.unsafe_fx_plus_(a14028, 1);
        var c14034 = M1.unsafe_fx_plus_(c14030, 1);
        if (M1.unsafe_fx_lt_(c14034, b14029) !== false) {
          var if_res2586 = loop4027(a14033, b14029, c14034);
        } else {
          var if_res2586 = M0.rvoid();
        }
        var if_res2589 = if_res2586;
      } else {
        M1.unsafe_vector_set_bang_(A3986, c14030, y4032);
        var b14035 = M1.unsafe_fx_plus_(b14029, 1);
        var c14036 = M1.unsafe_fx_plus_(c14030, 1);
        if (M1.unsafe_fx_lt__eq_(b24026, b14035) !== false) {
          var loop4037 = function(a14038, c14039) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14039, b14035) !== false) {
              M1.unsafe_vector_set_bang_(A3986, c14039, M1.unsafe_vector_ref(A3986, a14038));
              var if_res2587 = loop4037(M1.unsafe_fx_plus_(a14038, 1), M1.unsafe_fx_plus_(c14039, 1));
            } else {
              var if_res2587 = M0.rvoid();
            }
            return if_res2587;
          };
          var if_res2588 = loop4037(a14028, c14036);
        } else {
          var if_res2588 = loop4027(a14028, b14035, c14036);
        }
        var if_res2589 = if_res2588;
      }
      return if_res2589;
    };
    return loop4027(B1lo4025, Amid24023, Alo4021);
  };
  M0.hash_set_bang_(sorts3489, M0.__rjs_quoted__.string_ci_gt__p, sort_proc3985);
  M0.hash_set_bang_(sorts3489, M0.__rjs_quoted__.string_ci_gt__eq__p, sort_proc3985);
  var sort_proc4040 = function(A4041, n4042) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4043 = M1.unsafe_fxrshift(n4042, 1);
    var n_by_2_plus_4044 = M1.unsafe_fx_(n4042, n_by_2_4043);
    var copying_mergesort4045 = function(Alo4046, Blo4047, n4048) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4048, 1) !== false) {
        var if_res2605 = M1.unsafe_vector_set_bang_(A4041, Blo4047, M1.unsafe_vector_ref(A4041, Alo4046));
      } else {
        if (M1.unsafe_fx_eq_(n4048, 2) !== false) {
          var x4049 = M1.unsafe_vector_ref(A4041, Alo4046);
          var y4050 = M1.unsafe_vector_ref(A4041, M1.unsafe_fx_plus_(Alo4046, 1));
          if (false !== false) {
            var if_res2590 = M0.char_lt__p(false(y4050), false(x4049));
          } else {
            var if_res2590 = M0.char_lt__p(y4050, x4049);
          }
          if (if_res2590 !== false) {
            M1.unsafe_vector_set_bang_(A4041, Blo4047, y4050);
            var if_res2591 = M1.unsafe_vector_set_bang_(A4041, M1.unsafe_fx_plus_(Blo4047, 1), x4049);
          } else {
            M1.unsafe_vector_set_bang_(A4041, Blo4047, x4049);
            var if_res2591 = M1.unsafe_vector_set_bang_(A4041, M1.unsafe_fx_plus_(Blo4047, 1), y4050);
          }
          var if_res2604 = if_res2591;
        } else {
          if (M1.unsafe_fx_lt_(n4048, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4041, Blo4047, M1.unsafe_vector_ref(A4041, Alo4046));
            var iloop4051 = function(i4052) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4052, n4048) !== false) {
                var ref_i4053 = M1.unsafe_vector_ref(A4041, M1.unsafe_fx_plus_(Alo4046, i4052));
                var jloop4054 = function(j4055) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14056 = M1.unsafe_vector_ref(A4041, M1.unsafe_fx_(j4055, 1));
                  if (M1.unsafe_fx_lt_(Blo4047, j4055) !== false) {
                    if (false !== false) {
                      var if_res2592 = M0.char_lt__p(false(ref_i4053), false(ref_j_14056));
                    } else {
                      var if_res2592 = M0.char_lt__p(ref_i4053, ref_j_14056);
                    }
                    var if_res2593 = if_res2592;
                  } else {
                    var if_res2593 = false;
                  }
                  if (if_res2593 !== false) {
                    M1.unsafe_vector_set_bang_(A4041, j4055, ref_j_14056);
                    var if_res2594 = jloop4054(M1.unsafe_fx_(j4055, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4041, j4055, ref_i4053);
                    var if_res2594 = iloop4051(M1.unsafe_fx_plus_(i4052, 1));
                  }
                  return if_res2594;
                };
                var if_res2595 = jloop4054(M1.unsafe_fx_plus_(Blo4047, i4052));
              } else {
                var if_res2595 = M0.rvoid();
              }
              return if_res2595;
            };
            var if_res2603 = iloop4051(1);
          } else {
            var n_by_2_4057 = M1.unsafe_fxrshift(n4048, 1);
            var n_by_2_plus_4058 = M1.unsafe_fx_(n4048, n_by_2_4057);
            var Amid14059 = M1.unsafe_fx_plus_(Alo4046, n_by_2_4057);
            var Amid24060 = M1.unsafe_fx_plus_(Alo4046, n_by_2_plus_4058);
            var Bmid14061 = M1.unsafe_fx_plus_(Blo4047, n_by_2_4057);
            copying_mergesort4045(Amid14059, Bmid14061, n_by_2_plus_4058);
            copying_mergesort4045(Alo4046, Amid24060, n_by_2_4057);
            var b24062 = M1.unsafe_fx_plus_(Blo4047, n4048);
            var loop4063 = function(a14064, b14065, c14066) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4067 = M1.unsafe_vector_ref(A4041, a14064);
              var y4068 = M1.unsafe_vector_ref(A4041, b14065);
              if (true !== false) {
                if (false !== false) {
                  var if_res2596 = M0.char_lt__p(false(y4068), false(x4067));
                } else {
                  var if_res2596 = M0.char_lt__p(y4068, x4067);
                }
                var if_res2598 = M0.not(if_res2596);
              } else {
                if (false !== false) {
                  var if_res2597 = M0.char_lt__p(false(x4067), false(y4068));
                } else {
                  var if_res2597 = M0.char_lt__p(x4067, y4068);
                }
                var if_res2598 = if_res2597;
              }
              if (if_res2598 !== false) {
                M1.unsafe_vector_set_bang_(A4041, c14066, x4067);
                var a14069 = M1.unsafe_fx_plus_(a14064, 1);
                var c14070 = M1.unsafe_fx_plus_(c14066, 1);
                if (M1.unsafe_fx_lt_(c14070, b14065) !== false) {
                  var if_res2599 = loop4063(a14069, b14065, c14070);
                } else {
                  var if_res2599 = M0.rvoid();
                }
                var if_res2602 = if_res2599;
              } else {
                M1.unsafe_vector_set_bang_(A4041, c14066, y4068);
                var b14071 = M1.unsafe_fx_plus_(b14065, 1);
                var c14072 = M1.unsafe_fx_plus_(c14066, 1);
                if (M1.unsafe_fx_lt__eq_(b24062, b14071) !== false) {
                  var loop4073 = function(a14074, c14075) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14075, b14071) !== false) {
                      M1.unsafe_vector_set_bang_(A4041, c14075, M1.unsafe_vector_ref(A4041, a14074));
                      var if_res2600 = loop4073(M1.unsafe_fx_plus_(a14074, 1), M1.unsafe_fx_plus_(c14075, 1));
                    } else {
                      var if_res2600 = M0.rvoid();
                    }
                    return if_res2600;
                  };
                  var if_res2601 = loop4073(a14064, c14072);
                } else {
                  var if_res2601 = loop4063(a14064, b14071, c14072);
                }
                var if_res2602 = if_res2601;
              }
              return if_res2602;
            };
            var if_res2603 = loop4063(Amid24060, Bmid14061, Blo4047);
          }
          var if_res2604 = if_res2603;
        }
        var if_res2605 = if_res2604;
      }
      return if_res2605;
    };
    var Alo4076 = 0;
    var Amid14077 = n_by_2_4043;
    var Amid24078 = n_by_2_plus_4044;
    var Ahi4079 = n4042;
    var B1lo4080 = n4042;
    copying_mergesort4045(Amid14077, B1lo4080, n_by_2_plus_4044);
    if (M0.zero_p(n_by_2_4043) !== false) {
      var if_res2606 = M0.rvoid();
    } else {
      var if_res2606 = copying_mergesort4045(Alo4076, Amid24078, n_by_2_4043);
    }
    if_res2606;
    var b24081 = Ahi4079;
    var loop4082 = function(a14083, b14084, c14085) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4086 = M1.unsafe_vector_ref(A4041, a14083);
      var y4087 = M1.unsafe_vector_ref(A4041, b14084);
      if (false !== false) {
        if (false !== false) {
          var if_res2607 = M0.char_lt__p(false(y4087), false(x4086));
        } else {
          var if_res2607 = M0.char_lt__p(y4087, x4086);
        }
        var if_res2609 = M0.not(if_res2607);
      } else {
        if (false !== false) {
          var if_res2608 = M0.char_lt__p(false(x4086), false(y4087));
        } else {
          var if_res2608 = M0.char_lt__p(x4086, y4087);
        }
        var if_res2609 = if_res2608;
      }
      if (if_res2609 !== false) {
        M1.unsafe_vector_set_bang_(A4041, c14085, x4086);
        var a14088 = M1.unsafe_fx_plus_(a14083, 1);
        var c14089 = M1.unsafe_fx_plus_(c14085, 1);
        if (M1.unsafe_fx_lt_(c14089, b14084) !== false) {
          var if_res2610 = loop4082(a14088, b14084, c14089);
        } else {
          var if_res2610 = M0.rvoid();
        }
        var if_res2613 = if_res2610;
      } else {
        M1.unsafe_vector_set_bang_(A4041, c14085, y4087);
        var b14090 = M1.unsafe_fx_plus_(b14084, 1);
        var c14091 = M1.unsafe_fx_plus_(c14085, 1);
        if (M1.unsafe_fx_lt__eq_(b24081, b14090) !== false) {
          var loop4092 = function(a14093, c14094) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14094, b14090) !== false) {
              M1.unsafe_vector_set_bang_(A4041, c14094, M1.unsafe_vector_ref(A4041, a14093));
              var if_res2611 = loop4092(M1.unsafe_fx_plus_(a14093, 1), M1.unsafe_fx_plus_(c14094, 1));
            } else {
              var if_res2611 = M0.rvoid();
            }
            return if_res2611;
          };
          var if_res2612 = loop4092(a14083, c14091);
        } else {
          var if_res2612 = loop4082(a14083, b14090, c14091);
        }
        var if_res2613 = if_res2612;
      }
      return if_res2613;
    };
    return loop4082(B1lo4080, Amid24078, Alo4076);
  };
  M0.hash_set_bang_(sorts3489, M0.char_lt__p, sort_proc4040);
  M0.hash_set_bang_(sorts3489, M0.char_lt__eq__p, sort_proc4040);
  var sort_proc4095 = function(A4096, n4097) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4098 = M1.unsafe_fxrshift(n4097, 1);
    var n_by_2_plus_4099 = M1.unsafe_fx_(n4097, n_by_2_4098);
    var copying_mergesort4100 = function(Alo4101, Blo4102, n4103) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4103, 1) !== false) {
        var if_res2629 = M1.unsafe_vector_set_bang_(A4096, Blo4102, M1.unsafe_vector_ref(A4096, Alo4101));
      } else {
        if (M1.unsafe_fx_eq_(n4103, 2) !== false) {
          var x4104 = M1.unsafe_vector_ref(A4096, Alo4101);
          var y4105 = M1.unsafe_vector_ref(A4096, M1.unsafe_fx_plus_(Alo4101, 1));
          if (false !== false) {
            var if_res2614 = M0.char_gt__p(false(y4105), false(x4104));
          } else {
            var if_res2614 = M0.char_gt__p(y4105, x4104);
          }
          if (if_res2614 !== false) {
            M1.unsafe_vector_set_bang_(A4096, Blo4102, y4105);
            var if_res2615 = M1.unsafe_vector_set_bang_(A4096, M1.unsafe_fx_plus_(Blo4102, 1), x4104);
          } else {
            M1.unsafe_vector_set_bang_(A4096, Blo4102, x4104);
            var if_res2615 = M1.unsafe_vector_set_bang_(A4096, M1.unsafe_fx_plus_(Blo4102, 1), y4105);
          }
          var if_res2628 = if_res2615;
        } else {
          if (M1.unsafe_fx_lt_(n4103, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4096, Blo4102, M1.unsafe_vector_ref(A4096, Alo4101));
            var iloop4106 = function(i4107) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4107, n4103) !== false) {
                var ref_i4108 = M1.unsafe_vector_ref(A4096, M1.unsafe_fx_plus_(Alo4101, i4107));
                var jloop4109 = function(j4110) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14111 = M1.unsafe_vector_ref(A4096, M1.unsafe_fx_(j4110, 1));
                  if (M1.unsafe_fx_lt_(Blo4102, j4110) !== false) {
                    if (false !== false) {
                      var if_res2616 = M0.char_gt__p(false(ref_i4108), false(ref_j_14111));
                    } else {
                      var if_res2616 = M0.char_gt__p(ref_i4108, ref_j_14111);
                    }
                    var if_res2617 = if_res2616;
                  } else {
                    var if_res2617 = false;
                  }
                  if (if_res2617 !== false) {
                    M1.unsafe_vector_set_bang_(A4096, j4110, ref_j_14111);
                    var if_res2618 = jloop4109(M1.unsafe_fx_(j4110, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4096, j4110, ref_i4108);
                    var if_res2618 = iloop4106(M1.unsafe_fx_plus_(i4107, 1));
                  }
                  return if_res2618;
                };
                var if_res2619 = jloop4109(M1.unsafe_fx_plus_(Blo4102, i4107));
              } else {
                var if_res2619 = M0.rvoid();
              }
              return if_res2619;
            };
            var if_res2627 = iloop4106(1);
          } else {
            var n_by_2_4112 = M1.unsafe_fxrshift(n4103, 1);
            var n_by_2_plus_4113 = M1.unsafe_fx_(n4103, n_by_2_4112);
            var Amid14114 = M1.unsafe_fx_plus_(Alo4101, n_by_2_4112);
            var Amid24115 = M1.unsafe_fx_plus_(Alo4101, n_by_2_plus_4113);
            var Bmid14116 = M1.unsafe_fx_plus_(Blo4102, n_by_2_4112);
            copying_mergesort4100(Amid14114, Bmid14116, n_by_2_plus_4113);
            copying_mergesort4100(Alo4101, Amid24115, n_by_2_4112);
            var b24117 = M1.unsafe_fx_plus_(Blo4102, n4103);
            var loop4118 = function(a14119, b14120, c14121) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4122 = M1.unsafe_vector_ref(A4096, a14119);
              var y4123 = M1.unsafe_vector_ref(A4096, b14120);
              if (true !== false) {
                if (false !== false) {
                  var if_res2620 = M0.char_gt__p(false(y4123), false(x4122));
                } else {
                  var if_res2620 = M0.char_gt__p(y4123, x4122);
                }
                var if_res2622 = M0.not(if_res2620);
              } else {
                if (false !== false) {
                  var if_res2621 = M0.char_gt__p(false(x4122), false(y4123));
                } else {
                  var if_res2621 = M0.char_gt__p(x4122, y4123);
                }
                var if_res2622 = if_res2621;
              }
              if (if_res2622 !== false) {
                M1.unsafe_vector_set_bang_(A4096, c14121, x4122);
                var a14124 = M1.unsafe_fx_plus_(a14119, 1);
                var c14125 = M1.unsafe_fx_plus_(c14121, 1);
                if (M1.unsafe_fx_lt_(c14125, b14120) !== false) {
                  var if_res2623 = loop4118(a14124, b14120, c14125);
                } else {
                  var if_res2623 = M0.rvoid();
                }
                var if_res2626 = if_res2623;
              } else {
                M1.unsafe_vector_set_bang_(A4096, c14121, y4123);
                var b14126 = M1.unsafe_fx_plus_(b14120, 1);
                var c14127 = M1.unsafe_fx_plus_(c14121, 1);
                if (M1.unsafe_fx_lt__eq_(b24117, b14126) !== false) {
                  var loop4128 = function(a14129, c14130) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14130, b14126) !== false) {
                      M1.unsafe_vector_set_bang_(A4096, c14130, M1.unsafe_vector_ref(A4096, a14129));
                      var if_res2624 = loop4128(M1.unsafe_fx_plus_(a14129, 1), M1.unsafe_fx_plus_(c14130, 1));
                    } else {
                      var if_res2624 = M0.rvoid();
                    }
                    return if_res2624;
                  };
                  var if_res2625 = loop4128(a14119, c14127);
                } else {
                  var if_res2625 = loop4118(a14119, b14126, c14127);
                }
                var if_res2626 = if_res2625;
              }
              return if_res2626;
            };
            var if_res2627 = loop4118(Amid24115, Bmid14116, Blo4102);
          }
          var if_res2628 = if_res2627;
        }
        var if_res2629 = if_res2628;
      }
      return if_res2629;
    };
    var Alo4131 = 0;
    var Amid14132 = n_by_2_4098;
    var Amid24133 = n_by_2_plus_4099;
    var Ahi4134 = n4097;
    var B1lo4135 = n4097;
    copying_mergesort4100(Amid14132, B1lo4135, n_by_2_plus_4099);
    if (M0.zero_p(n_by_2_4098) !== false) {
      var if_res2630 = M0.rvoid();
    } else {
      var if_res2630 = copying_mergesort4100(Alo4131, Amid24133, n_by_2_4098);
    }
    if_res2630;
    var b24136 = Ahi4134;
    var loop4137 = function(a14138, b14139, c14140) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4141 = M1.unsafe_vector_ref(A4096, a14138);
      var y4142 = M1.unsafe_vector_ref(A4096, b14139);
      if (false !== false) {
        if (false !== false) {
          var if_res2631 = M0.char_gt__p(false(y4142), false(x4141));
        } else {
          var if_res2631 = M0.char_gt__p(y4142, x4141);
        }
        var if_res2633 = M0.not(if_res2631);
      } else {
        if (false !== false) {
          var if_res2632 = M0.char_gt__p(false(x4141), false(y4142));
        } else {
          var if_res2632 = M0.char_gt__p(x4141, y4142);
        }
        var if_res2633 = if_res2632;
      }
      if (if_res2633 !== false) {
        M1.unsafe_vector_set_bang_(A4096, c14140, x4141);
        var a14143 = M1.unsafe_fx_plus_(a14138, 1);
        var c14144 = M1.unsafe_fx_plus_(c14140, 1);
        if (M1.unsafe_fx_lt_(c14144, b14139) !== false) {
          var if_res2634 = loop4137(a14143, b14139, c14144);
        } else {
          var if_res2634 = M0.rvoid();
        }
        var if_res2637 = if_res2634;
      } else {
        M1.unsafe_vector_set_bang_(A4096, c14140, y4142);
        var b14145 = M1.unsafe_fx_plus_(b14139, 1);
        var c14146 = M1.unsafe_fx_plus_(c14140, 1);
        if (M1.unsafe_fx_lt__eq_(b24136, b14145) !== false) {
          var loop4147 = function(a14148, c14149) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14149, b14145) !== false) {
              M1.unsafe_vector_set_bang_(A4096, c14149, M1.unsafe_vector_ref(A4096, a14148));
              var if_res2635 = loop4147(M1.unsafe_fx_plus_(a14148, 1), M1.unsafe_fx_plus_(c14149, 1));
            } else {
              var if_res2635 = M0.rvoid();
            }
            return if_res2635;
          };
          var if_res2636 = loop4147(a14138, c14146);
        } else {
          var if_res2636 = loop4137(a14138, b14145, c14146);
        }
        var if_res2637 = if_res2636;
      }
      return if_res2637;
    };
    return loop4137(B1lo4135, Amid24133, Alo4131);
  };
  M0.hash_set_bang_(sorts3489, M0.char_gt__p, sort_proc4095);
  M0.hash_set_bang_(sorts3489, M0.char_gt__eq__p, sort_proc4095);
  var sort_proc4150 = function(A4151, n4152) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4153 = M1.unsafe_fxrshift(n4152, 1);
    var n_by_2_plus_4154 = M1.unsafe_fx_(n4152, n_by_2_4153);
    var copying_mergesort4155 = function(Alo4156, Blo4157, n4158) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4158, 1) !== false) {
        var if_res2653 = M1.unsafe_vector_set_bang_(A4151, Blo4157, M1.unsafe_vector_ref(A4151, Alo4156));
      } else {
        if (M1.unsafe_fx_eq_(n4158, 2) !== false) {
          var x4159 = M1.unsafe_vector_ref(A4151, Alo4156);
          var y4160 = M1.unsafe_vector_ref(A4151, M1.unsafe_fx_plus_(Alo4156, 1));
          if (false !== false) {
            var if_res2638 = M0.__rjs_quoted__.keyword_lt__p(false(y4160), false(x4159));
          } else {
            var if_res2638 = M0.__rjs_quoted__.keyword_lt__p(y4160, x4159);
          }
          if (if_res2638 !== false) {
            M1.unsafe_vector_set_bang_(A4151, Blo4157, y4160);
            var if_res2639 = M1.unsafe_vector_set_bang_(A4151, M1.unsafe_fx_plus_(Blo4157, 1), x4159);
          } else {
            M1.unsafe_vector_set_bang_(A4151, Blo4157, x4159);
            var if_res2639 = M1.unsafe_vector_set_bang_(A4151, M1.unsafe_fx_plus_(Blo4157, 1), y4160);
          }
          var if_res2652 = if_res2639;
        } else {
          if (M1.unsafe_fx_lt_(n4158, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4151, Blo4157, M1.unsafe_vector_ref(A4151, Alo4156));
            var iloop4161 = function(i4162) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4162, n4158) !== false) {
                var ref_i4163 = M1.unsafe_vector_ref(A4151, M1.unsafe_fx_plus_(Alo4156, i4162));
                var jloop4164 = function(j4165) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14166 = M1.unsafe_vector_ref(A4151, M1.unsafe_fx_(j4165, 1));
                  if (M1.unsafe_fx_lt_(Blo4157, j4165) !== false) {
                    if (false !== false) {
                      var if_res2640 = M0.__rjs_quoted__.keyword_lt__p(false(ref_i4163), false(ref_j_14166));
                    } else {
                      var if_res2640 = M0.__rjs_quoted__.keyword_lt__p(ref_i4163, ref_j_14166);
                    }
                    var if_res2641 = if_res2640;
                  } else {
                    var if_res2641 = false;
                  }
                  if (if_res2641 !== false) {
                    M1.unsafe_vector_set_bang_(A4151, j4165, ref_j_14166);
                    var if_res2642 = jloop4164(M1.unsafe_fx_(j4165, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4151, j4165, ref_i4163);
                    var if_res2642 = iloop4161(M1.unsafe_fx_plus_(i4162, 1));
                  }
                  return if_res2642;
                };
                var if_res2643 = jloop4164(M1.unsafe_fx_plus_(Blo4157, i4162));
              } else {
                var if_res2643 = M0.rvoid();
              }
              return if_res2643;
            };
            var if_res2651 = iloop4161(1);
          } else {
            var n_by_2_4167 = M1.unsafe_fxrshift(n4158, 1);
            var n_by_2_plus_4168 = M1.unsafe_fx_(n4158, n_by_2_4167);
            var Amid14169 = M1.unsafe_fx_plus_(Alo4156, n_by_2_4167);
            var Amid24170 = M1.unsafe_fx_plus_(Alo4156, n_by_2_plus_4168);
            var Bmid14171 = M1.unsafe_fx_plus_(Blo4157, n_by_2_4167);
            copying_mergesort4155(Amid14169, Bmid14171, n_by_2_plus_4168);
            copying_mergesort4155(Alo4156, Amid24170, n_by_2_4167);
            var b24172 = M1.unsafe_fx_plus_(Blo4157, n4158);
            var loop4173 = function(a14174, b14175, c14176) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4177 = M1.unsafe_vector_ref(A4151, a14174);
              var y4178 = M1.unsafe_vector_ref(A4151, b14175);
              if (true !== false) {
                if (false !== false) {
                  var if_res2644 = M0.__rjs_quoted__.keyword_lt__p(false(y4178), false(x4177));
                } else {
                  var if_res2644 = M0.__rjs_quoted__.keyword_lt__p(y4178, x4177);
                }
                var if_res2646 = M0.not(if_res2644);
              } else {
                if (false !== false) {
                  var if_res2645 = M0.__rjs_quoted__.keyword_lt__p(false(x4177), false(y4178));
                } else {
                  var if_res2645 = M0.__rjs_quoted__.keyword_lt__p(x4177, y4178);
                }
                var if_res2646 = if_res2645;
              }
              if (if_res2646 !== false) {
                M1.unsafe_vector_set_bang_(A4151, c14176, x4177);
                var a14179 = M1.unsafe_fx_plus_(a14174, 1);
                var c14180 = M1.unsafe_fx_plus_(c14176, 1);
                if (M1.unsafe_fx_lt_(c14180, b14175) !== false) {
                  var if_res2647 = loop4173(a14179, b14175, c14180);
                } else {
                  var if_res2647 = M0.rvoid();
                }
                var if_res2650 = if_res2647;
              } else {
                M1.unsafe_vector_set_bang_(A4151, c14176, y4178);
                var b14181 = M1.unsafe_fx_plus_(b14175, 1);
                var c14182 = M1.unsafe_fx_plus_(c14176, 1);
                if (M1.unsafe_fx_lt__eq_(b24172, b14181) !== false) {
                  var loop4183 = function(a14184, c14185) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14185, b14181) !== false) {
                      M1.unsafe_vector_set_bang_(A4151, c14185, M1.unsafe_vector_ref(A4151, a14184));
                      var if_res2648 = loop4183(M1.unsafe_fx_plus_(a14184, 1), M1.unsafe_fx_plus_(c14185, 1));
                    } else {
                      var if_res2648 = M0.rvoid();
                    }
                    return if_res2648;
                  };
                  var if_res2649 = loop4183(a14174, c14182);
                } else {
                  var if_res2649 = loop4173(a14174, b14181, c14182);
                }
                var if_res2650 = if_res2649;
              }
              return if_res2650;
            };
            var if_res2651 = loop4173(Amid24170, Bmid14171, Blo4157);
          }
          var if_res2652 = if_res2651;
        }
        var if_res2653 = if_res2652;
      }
      return if_res2653;
    };
    var Alo4186 = 0;
    var Amid14187 = n_by_2_4153;
    var Amid24188 = n_by_2_plus_4154;
    var Ahi4189 = n4152;
    var B1lo4190 = n4152;
    copying_mergesort4155(Amid14187, B1lo4190, n_by_2_plus_4154);
    if (M0.zero_p(n_by_2_4153) !== false) {
      var if_res2654 = M0.rvoid();
    } else {
      var if_res2654 = copying_mergesort4155(Alo4186, Amid24188, n_by_2_4153);
    }
    if_res2654;
    var b24191 = Ahi4189;
    var loop4192 = function(a14193, b14194, c14195) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4196 = M1.unsafe_vector_ref(A4151, a14193);
      var y4197 = M1.unsafe_vector_ref(A4151, b14194);
      if (false !== false) {
        if (false !== false) {
          var if_res2655 = M0.__rjs_quoted__.keyword_lt__p(false(y4197), false(x4196));
        } else {
          var if_res2655 = M0.__rjs_quoted__.keyword_lt__p(y4197, x4196);
        }
        var if_res2657 = M0.not(if_res2655);
      } else {
        if (false !== false) {
          var if_res2656 = M0.__rjs_quoted__.keyword_lt__p(false(x4196), false(y4197));
        } else {
          var if_res2656 = M0.__rjs_quoted__.keyword_lt__p(x4196, y4197);
        }
        var if_res2657 = if_res2656;
      }
      if (if_res2657 !== false) {
        M1.unsafe_vector_set_bang_(A4151, c14195, x4196);
        var a14198 = M1.unsafe_fx_plus_(a14193, 1);
        var c14199 = M1.unsafe_fx_plus_(c14195, 1);
        if (M1.unsafe_fx_lt_(c14199, b14194) !== false) {
          var if_res2658 = loop4192(a14198, b14194, c14199);
        } else {
          var if_res2658 = M0.rvoid();
        }
        var if_res2661 = if_res2658;
      } else {
        M1.unsafe_vector_set_bang_(A4151, c14195, y4197);
        var b14200 = M1.unsafe_fx_plus_(b14194, 1);
        var c14201 = M1.unsafe_fx_plus_(c14195, 1);
        if (M1.unsafe_fx_lt__eq_(b24191, b14200) !== false) {
          var loop4202 = function(a14203, c14204) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14204, b14200) !== false) {
              M1.unsafe_vector_set_bang_(A4151, c14204, M1.unsafe_vector_ref(A4151, a14203));
              var if_res2659 = loop4202(M1.unsafe_fx_plus_(a14203, 1), M1.unsafe_fx_plus_(c14204, 1));
            } else {
              var if_res2659 = M0.rvoid();
            }
            return if_res2659;
          };
          var if_res2660 = loop4202(a14193, c14201);
        } else {
          var if_res2660 = loop4192(a14193, b14200, c14201);
        }
        var if_res2661 = if_res2660;
      }
      return if_res2661;
    };
    return loop4192(B1lo4190, Amid24188, Alo4186);
  };
  M0.hash_set_bang_(sorts3489, M0.__rjs_quoted__.keyword_lt__p, sort_proc4150);
  var precompiled_sorts3488 = M0.make_immutable_hasheq(M0.hash_map(sorts3489, M0.cons));
  var generic_sort4205 = function(A4206, less_than_p4207, n4208) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4209 = M1.unsafe_fxrshift(n4208, 1);
    var n_by_2_plus_4210 = M1.unsafe_fx_(n4208, n_by_2_4209);
    var copying_mergesort4211 = function(Alo4212, Blo4213, n4214) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4214, 1) !== false) {
        var if_res2677 = M1.unsafe_vector_set_bang_(A4206, Blo4213, M1.unsafe_vector_ref(A4206, Alo4212));
      } else {
        if (M1.unsafe_fx_eq_(n4214, 2) !== false) {
          var x4215 = M1.unsafe_vector_ref(A4206, Alo4212);
          var y4216 = M1.unsafe_vector_ref(A4206, M1.unsafe_fx_plus_(Alo4212, 1));
          if (false !== false) {
            var if_res2662 = less_than_p4207(false(y4216), false(x4215));
          } else {
            var if_res2662 = less_than_p4207(y4216, x4215);
          }
          if (if_res2662 !== false) {
            M1.unsafe_vector_set_bang_(A4206, Blo4213, y4216);
            var if_res2663 = M1.unsafe_vector_set_bang_(A4206, M1.unsafe_fx_plus_(Blo4213, 1), x4215);
          } else {
            M1.unsafe_vector_set_bang_(A4206, Blo4213, x4215);
            var if_res2663 = M1.unsafe_vector_set_bang_(A4206, M1.unsafe_fx_plus_(Blo4213, 1), y4216);
          }
          var if_res2676 = if_res2663;
        } else {
          if (M1.unsafe_fx_lt_(n4214, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4206, Blo4213, M1.unsafe_vector_ref(A4206, Alo4212));
            var iloop4217 = function(i4218) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4218, n4214) !== false) {
                var ref_i4219 = M1.unsafe_vector_ref(A4206, M1.unsafe_fx_plus_(Alo4212, i4218));
                var jloop4220 = function(j4221) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14222 = M1.unsafe_vector_ref(A4206, M1.unsafe_fx_(j4221, 1));
                  if (M1.unsafe_fx_lt_(Blo4213, j4221) !== false) {
                    if (false !== false) {
                      var if_res2664 = less_than_p4207(false(ref_i4219), false(ref_j_14222));
                    } else {
                      var if_res2664 = less_than_p4207(ref_i4219, ref_j_14222);
                    }
                    var if_res2665 = if_res2664;
                  } else {
                    var if_res2665 = false;
                  }
                  if (if_res2665 !== false) {
                    M1.unsafe_vector_set_bang_(A4206, j4221, ref_j_14222);
                    var if_res2666 = jloop4220(M1.unsafe_fx_(j4221, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4206, j4221, ref_i4219);
                    var if_res2666 = iloop4217(M1.unsafe_fx_plus_(i4218, 1));
                  }
                  return if_res2666;
                };
                var if_res2667 = jloop4220(M1.unsafe_fx_plus_(Blo4213, i4218));
              } else {
                var if_res2667 = M0.rvoid();
              }
              return if_res2667;
            };
            var if_res2675 = iloop4217(1);
          } else {
            var n_by_2_4223 = M1.unsafe_fxrshift(n4214, 1);
            var n_by_2_plus_4224 = M1.unsafe_fx_(n4214, n_by_2_4223);
            var Amid14225 = M1.unsafe_fx_plus_(Alo4212, n_by_2_4223);
            var Amid24226 = M1.unsafe_fx_plus_(Alo4212, n_by_2_plus_4224);
            var Bmid14227 = M1.unsafe_fx_plus_(Blo4213, n_by_2_4223);
            copying_mergesort4211(Amid14225, Bmid14227, n_by_2_plus_4224);
            copying_mergesort4211(Alo4212, Amid24226, n_by_2_4223);
            var b24228 = M1.unsafe_fx_plus_(Blo4213, n4214);
            var loop4229 = function(a14230, b14231, c14232) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4233 = M1.unsafe_vector_ref(A4206, a14230);
              var y4234 = M1.unsafe_vector_ref(A4206, b14231);
              if (true !== false) {
                if (false !== false) {
                  var if_res2668 = less_than_p4207(false(y4234), false(x4233));
                } else {
                  var if_res2668 = less_than_p4207(y4234, x4233);
                }
                var if_res2670 = M0.not(if_res2668);
              } else {
                if (false !== false) {
                  var if_res2669 = less_than_p4207(false(x4233), false(y4234));
                } else {
                  var if_res2669 = less_than_p4207(x4233, y4234);
                }
                var if_res2670 = if_res2669;
              }
              if (if_res2670 !== false) {
                M1.unsafe_vector_set_bang_(A4206, c14232, x4233);
                var a14235 = M1.unsafe_fx_plus_(a14230, 1);
                var c14236 = M1.unsafe_fx_plus_(c14232, 1);
                if (M1.unsafe_fx_lt_(c14236, b14231) !== false) {
                  var if_res2671 = loop4229(a14235, b14231, c14236);
                } else {
                  var if_res2671 = M0.rvoid();
                }
                var if_res2674 = if_res2671;
              } else {
                M1.unsafe_vector_set_bang_(A4206, c14232, y4234);
                var b14237 = M1.unsafe_fx_plus_(b14231, 1);
                var c14238 = M1.unsafe_fx_plus_(c14232, 1);
                if (M1.unsafe_fx_lt__eq_(b24228, b14237) !== false) {
                  var loop4239 = function(a14240, c14241) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14241, b14237) !== false) {
                      M1.unsafe_vector_set_bang_(A4206, c14241, M1.unsafe_vector_ref(A4206, a14240));
                      var if_res2672 = loop4239(M1.unsafe_fx_plus_(a14240, 1), M1.unsafe_fx_plus_(c14241, 1));
                    } else {
                      var if_res2672 = M0.rvoid();
                    }
                    return if_res2672;
                  };
                  var if_res2673 = loop4239(a14230, c14238);
                } else {
                  var if_res2673 = loop4229(a14230, b14237, c14238);
                }
                var if_res2674 = if_res2673;
              }
              return if_res2674;
            };
            var if_res2675 = loop4229(Amid24226, Bmid14227, Blo4213);
          }
          var if_res2676 = if_res2675;
        }
        var if_res2677 = if_res2676;
      }
      return if_res2677;
    };
    var Alo4242 = 0;
    var Amid14243 = n_by_2_4209;
    var Amid24244 = n_by_2_plus_4210;
    var Ahi4245 = n4208;
    var B1lo4246 = n4208;
    copying_mergesort4211(Amid14243, B1lo4246, n_by_2_plus_4210);
    if (M0.zero_p(n_by_2_4209) !== false) {
      var if_res2678 = M0.rvoid();
    } else {
      var if_res2678 = copying_mergesort4211(Alo4242, Amid24244, n_by_2_4209);
    }
    if_res2678;
    var b24247 = Ahi4245;
    var loop4248 = function(a14249, b14250, c14251) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4252 = M1.unsafe_vector_ref(A4206, a14249);
      var y4253 = M1.unsafe_vector_ref(A4206, b14250);
      if (false !== false) {
        if (false !== false) {
          var if_res2679 = less_than_p4207(false(y4253), false(x4252));
        } else {
          var if_res2679 = less_than_p4207(y4253, x4252);
        }
        var if_res2681 = M0.not(if_res2679);
      } else {
        if (false !== false) {
          var if_res2680 = less_than_p4207(false(x4252), false(y4253));
        } else {
          var if_res2680 = less_than_p4207(x4252, y4253);
        }
        var if_res2681 = if_res2680;
      }
      if (if_res2681 !== false) {
        M1.unsafe_vector_set_bang_(A4206, c14251, x4252);
        var a14254 = M1.unsafe_fx_plus_(a14249, 1);
        var c14255 = M1.unsafe_fx_plus_(c14251, 1);
        if (M1.unsafe_fx_lt_(c14255, b14250) !== false) {
          var if_res2682 = loop4248(a14254, b14250, c14255);
        } else {
          var if_res2682 = M0.rvoid();
        }
        var if_res2685 = if_res2682;
      } else {
        M1.unsafe_vector_set_bang_(A4206, c14251, y4253);
        var b14256 = M1.unsafe_fx_plus_(b14250, 1);
        var c14257 = M1.unsafe_fx_plus_(c14251, 1);
        if (M1.unsafe_fx_lt__eq_(b24247, b14256) !== false) {
          var loop4258 = function(a14259, c14260) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14260, b14256) !== false) {
              M1.unsafe_vector_set_bang_(A4206, c14260, M1.unsafe_vector_ref(A4206, a14259));
              var if_res2683 = loop4258(M1.unsafe_fx_plus_(a14259, 1), M1.unsafe_fx_plus_(c14260, 1));
            } else {
              var if_res2683 = M0.rvoid();
            }
            return if_res2683;
          };
          var if_res2684 = loop4258(a14249, c14257);
        } else {
          var if_res2684 = loop4248(a14249, b14256, c14257);
        }
        var if_res2685 = if_res2684;
      }
      return if_res2685;
    };
    return loop4248(B1lo4246, Amid24244, Alo4242);
  };
  var generic_sort_by_key4261 = function(A4262, less_than_p4263, n4264, key4265) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4266 = M1.unsafe_fxrshift(n4264, 1);
    var n_by_2_plus_4267 = M1.unsafe_fx_(n4264, n_by_2_4266);
    var copying_mergesort4268 = function(Alo4269, Blo4270, n4271) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4271, 1) !== false) {
        var if_res2701 = M1.unsafe_vector_set_bang_(A4262, Blo4270, M1.unsafe_vector_ref(A4262, Alo4269));
      } else {
        if (M1.unsafe_fx_eq_(n4271, 2) !== false) {
          var x4272 = M1.unsafe_vector_ref(A4262, Alo4269);
          var y4273 = M1.unsafe_vector_ref(A4262, M1.unsafe_fx_plus_(Alo4269, 1));
          if (key4265 !== false) {
            var if_res2686 = less_than_p4263(key4265(y4273), key4265(x4272));
          } else {
            var if_res2686 = less_than_p4263(y4273, x4272);
          }
          if (if_res2686 !== false) {
            M1.unsafe_vector_set_bang_(A4262, Blo4270, y4273);
            var if_res2687 = M1.unsafe_vector_set_bang_(A4262, M1.unsafe_fx_plus_(Blo4270, 1), x4272);
          } else {
            M1.unsafe_vector_set_bang_(A4262, Blo4270, x4272);
            var if_res2687 = M1.unsafe_vector_set_bang_(A4262, M1.unsafe_fx_plus_(Blo4270, 1), y4273);
          }
          var if_res2700 = if_res2687;
        } else {
          if (M1.unsafe_fx_lt_(n4271, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4262, Blo4270, M1.unsafe_vector_ref(A4262, Alo4269));
            var iloop4274 = function(i4275) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4275, n4271) !== false) {
                var ref_i4276 = M1.unsafe_vector_ref(A4262, M1.unsafe_fx_plus_(Alo4269, i4275));
                var jloop4277 = function(j4278) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14279 = M1.unsafe_vector_ref(A4262, M1.unsafe_fx_(j4278, 1));
                  if (M1.unsafe_fx_lt_(Blo4270, j4278) !== false) {
                    if (key4265 !== false) {
                      var if_res2688 = less_than_p4263(key4265(ref_i4276), key4265(ref_j_14279));
                    } else {
                      var if_res2688 = less_than_p4263(ref_i4276, ref_j_14279);
                    }
                    var if_res2689 = if_res2688;
                  } else {
                    var if_res2689 = false;
                  }
                  if (if_res2689 !== false) {
                    M1.unsafe_vector_set_bang_(A4262, j4278, ref_j_14279);
                    var if_res2690 = jloop4277(M1.unsafe_fx_(j4278, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4262, j4278, ref_i4276);
                    var if_res2690 = iloop4274(M1.unsafe_fx_plus_(i4275, 1));
                  }
                  return if_res2690;
                };
                var if_res2691 = jloop4277(M1.unsafe_fx_plus_(Blo4270, i4275));
              } else {
                var if_res2691 = M0.rvoid();
              }
              return if_res2691;
            };
            var if_res2699 = iloop4274(1);
          } else {
            var n_by_2_4280 = M1.unsafe_fxrshift(n4271, 1);
            var n_by_2_plus_4281 = M1.unsafe_fx_(n4271, n_by_2_4280);
            var Amid14282 = M1.unsafe_fx_plus_(Alo4269, n_by_2_4280);
            var Amid24283 = M1.unsafe_fx_plus_(Alo4269, n_by_2_plus_4281);
            var Bmid14284 = M1.unsafe_fx_plus_(Blo4270, n_by_2_4280);
            copying_mergesort4268(Amid14282, Bmid14284, n_by_2_plus_4281);
            copying_mergesort4268(Alo4269, Amid24283, n_by_2_4280);
            var b24285 = M1.unsafe_fx_plus_(Blo4270, n4271);
            var loop4286 = function(a14287, b14288, c14289) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4290 = M1.unsafe_vector_ref(A4262, a14287);
              var y4291 = M1.unsafe_vector_ref(A4262, b14288);
              if (true !== false) {
                if (key4265 !== false) {
                  var if_res2692 = less_than_p4263(key4265(y4291), key4265(x4290));
                } else {
                  var if_res2692 = less_than_p4263(y4291, x4290);
                }
                var if_res2694 = M0.not(if_res2692);
              } else {
                if (key4265 !== false) {
                  var if_res2693 = less_than_p4263(key4265(x4290), key4265(y4291));
                } else {
                  var if_res2693 = less_than_p4263(x4290, y4291);
                }
                var if_res2694 = if_res2693;
              }
              if (if_res2694 !== false) {
                M1.unsafe_vector_set_bang_(A4262, c14289, x4290);
                var a14292 = M1.unsafe_fx_plus_(a14287, 1);
                var c14293 = M1.unsafe_fx_plus_(c14289, 1);
                if (M1.unsafe_fx_lt_(c14293, b14288) !== false) {
                  var if_res2695 = loop4286(a14292, b14288, c14293);
                } else {
                  var if_res2695 = M0.rvoid();
                }
                var if_res2698 = if_res2695;
              } else {
                M1.unsafe_vector_set_bang_(A4262, c14289, y4291);
                var b14294 = M1.unsafe_fx_plus_(b14288, 1);
                var c14295 = M1.unsafe_fx_plus_(c14289, 1);
                if (M1.unsafe_fx_lt__eq_(b24285, b14294) !== false) {
                  var loop4296 = function(a14297, c14298) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14298, b14294) !== false) {
                      M1.unsafe_vector_set_bang_(A4262, c14298, M1.unsafe_vector_ref(A4262, a14297));
                      var if_res2696 = loop4296(M1.unsafe_fx_plus_(a14297, 1), M1.unsafe_fx_plus_(c14298, 1));
                    } else {
                      var if_res2696 = M0.rvoid();
                    }
                    return if_res2696;
                  };
                  var if_res2697 = loop4296(a14287, c14295);
                } else {
                  var if_res2697 = loop4286(a14287, b14294, c14295);
                }
                var if_res2698 = if_res2697;
              }
              return if_res2698;
            };
            var if_res2699 = loop4286(Amid24283, Bmid14284, Blo4270);
          }
          var if_res2700 = if_res2699;
        }
        var if_res2701 = if_res2700;
      }
      return if_res2701;
    };
    var Alo4299 = 0;
    var Amid14300 = n_by_2_4266;
    var Amid24301 = n_by_2_plus_4267;
    var Ahi4302 = n4264;
    var B1lo4303 = n4264;
    copying_mergesort4268(Amid14300, B1lo4303, n_by_2_plus_4267);
    if (M0.zero_p(n_by_2_4266) !== false) {
      var if_res2702 = M0.rvoid();
    } else {
      var if_res2702 = copying_mergesort4268(Alo4299, Amid24301, n_by_2_4266);
    }
    if_res2702;
    var b24304 = Ahi4302;
    var loop4305 = function(a14306, b14307, c14308) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4309 = M1.unsafe_vector_ref(A4262, a14306);
      var y4310 = M1.unsafe_vector_ref(A4262, b14307);
      if (false !== false) {
        if (key4265 !== false) {
          var if_res2703 = less_than_p4263(key4265(y4310), key4265(x4309));
        } else {
          var if_res2703 = less_than_p4263(y4310, x4309);
        }
        var if_res2705 = M0.not(if_res2703);
      } else {
        if (key4265 !== false) {
          var if_res2704 = less_than_p4263(key4265(x4309), key4265(y4310));
        } else {
          var if_res2704 = less_than_p4263(x4309, y4310);
        }
        var if_res2705 = if_res2704;
      }
      if (if_res2705 !== false) {
        M1.unsafe_vector_set_bang_(A4262, c14308, x4309);
        var a14311 = M1.unsafe_fx_plus_(a14306, 1);
        var c14312 = M1.unsafe_fx_plus_(c14308, 1);
        if (M1.unsafe_fx_lt_(c14312, b14307) !== false) {
          var if_res2706 = loop4305(a14311, b14307, c14312);
        } else {
          var if_res2706 = M0.rvoid();
        }
        var if_res2709 = if_res2706;
      } else {
        M1.unsafe_vector_set_bang_(A4262, c14308, y4310);
        var b14313 = M1.unsafe_fx_plus_(b14307, 1);
        var c14314 = M1.unsafe_fx_plus_(c14308, 1);
        if (M1.unsafe_fx_lt__eq_(b24304, b14313) !== false) {
          var loop4315 = function(a14316, c14317) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14317, b14313) !== false) {
              M1.unsafe_vector_set_bang_(A4262, c14317, M1.unsafe_vector_ref(A4262, a14316));
              var if_res2707 = loop4315(M1.unsafe_fx_plus_(a14316, 1), M1.unsafe_fx_plus_(c14317, 1));
            } else {
              var if_res2707 = M0.rvoid();
            }
            return if_res2707;
          };
          var if_res2708 = loop4315(a14306, c14314);
        } else {
          var if_res2708 = loop4305(a14306, b14313, c14314);
        }
        var if_res2709 = if_res2708;
      }
      return if_res2709;
    };
    return loop4305(B1lo4303, Amid24301, Alo4299);
  };
  var cl2819 = function(lst4318, less_than_p4319) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4320 = M0.length(lst4318);
    if (M1.unsafe_fx_eq_(n4320, 0) !== false) {
      var if_res2844 = lst4318;
    } else {
      if (false !== false) {
        var vec4321 = M0.make_vector(n4320 + M0.ceiling(n4320 / 2));
        var loop4322 = function(i4323, lst4324) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.pair_p(lst4324) !== false) {
            var x4325 = M0.car(lst4324);
            M1.unsafe_vector_set_bang_(vec4321, i4323, M0.cons(false(x4325), x4325));
            var if_res2823 = loop4322(M1.unsafe_fx_plus_(i4323, 1), M0.cdr(lst4324));
          } else {
            var if_res2823 = M0.rvoid();
          }
          return if_res2823;
        };
        loop4322(0, lst4318);
        generic_sort_by_key4261(vec4321, less_than_p4319, n4320, M1.unsafe_car);
        var loop4326 = function(i4327, r4328) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var i4329 = M1.unsafe_fx_(i4327, 1);
          if (M1.unsafe_fx_lt_(i4329, 0) !== false) {
            var if_res2824 = r4328;
          } else {
            var if_res2824 = loop4326(i4329, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4321, i4329)), r4328));
          }
          return if_res2824;
        };
        var if_res2843 = loop4326(n4320, $rjs_core.Pair.makeList());
      } else {
        var loop4330 = function(last4331, next4332) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4333 = M0.null_p(next4332);
          if (or_part4333 !== false) {
            var if_res2827 = or_part4333;
          } else {
            if (false !== false) {
              var if_res2825 = less_than_p4319(false(M1.unsafe_car(next4332)), false(last4331));
            } else {
              var if_res2825 = less_than_p4319(M1.unsafe_car(next4332), last4331);
            }
            if (M0.not(if_res2825) !== false) {
              var if_res2826 = loop4330(M1.unsafe_car(next4332), M1.unsafe_cdr(next4332));
            } else {
              var if_res2826 = false;
            }
            var if_res2827 = if_res2826;
          }
          return if_res2827;
        };
        if (loop4330(M0.car(lst4318), M0.cdr(lst4318)) !== false) {
          var if_res2842 = lst4318;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4320, 3) !== false) {
            if (M1.unsafe_fx_eq_(n4320, 1) !== false) {
              var if_res2837 = lst4318;
            } else {
              if (M1.unsafe_fx_eq_(n4320, 2) !== false) {
                var if_res2836 = M0.list(M0.cadr(lst4318), M0.car(lst4318));
              } else {
                var a4334 = M0.car(lst4318);
                var b4335 = M0.cadr(lst4318);
                var c4336 = M0.caddr(lst4318);
                if (false !== false) {
                  var if_res2828 = less_than_p4319(false(b4335), false(a4334));
                } else {
                  var if_res2828 = less_than_p4319(b4335, a4334);
                }
                if (if_res2828 !== false) {
                  if (false !== false) {
                    var if_res2829 = less_than_p4319(false(c4336), false(b4335));
                  } else {
                    var if_res2829 = less_than_p4319(c4336, b4335);
                  }
                  if (if_res2829 !== false) {
                    var if_res2832 = M0.list(c4336, b4335, a4334);
                  } else {
                    if (false !== false) {
                      var if_res2830 = less_than_p4319(false(c4336), false(a4334));
                    } else {
                      var if_res2830 = less_than_p4319(c4336, a4334);
                    }
                    if (if_res2830 !== false) {
                      var if_res2831 = M0.list(b4335, c4336, a4334);
                    } else {
                      var if_res2831 = M0.list(b4335, a4334, c4336);
                    }
                    var if_res2832 = if_res2831;
                  }
                  var if_res2835 = if_res2832;
                } else {
                  if (false !== false) {
                    var if_res2833 = less_than_p4319(false(c4336), false(a4334));
                  } else {
                    var if_res2833 = less_than_p4319(c4336, a4334);
                  }
                  if (if_res2833 !== false) {
                    var if_res2834 = M0.list(c4336, a4334, b4335);
                  } else {
                    var if_res2834 = M0.list(a4334, c4336, b4335);
                  }
                  var if_res2835 = if_res2834;
                }
                var if_res2836 = if_res2835;
              }
              var if_res2837 = if_res2836;
            }
            var if_res2841 = if_res2837;
          } else {
            var vec4337 = M0.make_vector(n4320 + M0.ceiling(n4320 / 2));
            var loop4338 = function(i4339, lst4340) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.pair_p(lst4340) !== false) {
                M0.vector_set_bang_(vec4337, i4339, M0.car(lst4340));
                var if_res2838 = loop4338(M0.add1(i4339), M0.cdr(lst4340));
              } else {
                var if_res2838 = M0.rvoid();
              }
              return if_res2838;
            };
            loop4338(0, lst4318);
            var precomp4341 = M0.hash_ref(precompiled_sorts3488, less_than_p4319, false);
            if (precomp4341 !== false) {
              var if_res2839 = precomp4341(vec4337, n4320);
            } else {
              var if_res2839 = generic_sort4205(vec4337, less_than_p4319, n4320);
            }
            if_res2839;
            var loop4342 = function(i4343, r4344) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var i4345 = M0.sub1(i4343);
              if (M0.__lt_(i4345, 0) !== false) {
                var if_res2840 = r4344;
              } else {
                var if_res2840 = loop4342(i4345, M0.cons(M0.vector_ref(vec4337, i4345), r4344));
              }
              return if_res2840;
            };
            var if_res2841 = loop4342(n4320, $rjs_core.Pair.makeList());
          }
          var if_res2842 = if_res2841;
        }
        var if_res2843 = if_res2842;
      }
      var if_res2844 = if_res2843;
    }
    return if_res2844;
  };
  var cl2820 = function(lst4346, less_than_p4347, getkey4348) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4348 !== false) {
      var if_res2845 = M0.not(M0.eq_p(M0.values, getkey4348));
    } else {
      var if_res2845 = false;
    }
    if (if_res2845 !== false) {
      var if_res2846 = sort(lst4346, less_than_p4347, getkey4348, false);
    } else {
      var if_res2846 = sort(lst4346, less_than_p4347);
    }
    return if_res2846;
  };
  var cl2821 = function(lst4349, less_than_p4350, getkey4351, cache_keys_p4352) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4351 !== false) {
      var if_res2847 = M0.not(M0.eq_p(M0.values, getkey4351));
    } else {
      var if_res2847 = false;
    }
    if (if_res2847 !== false) {
      var n4353 = M0.length(lst4349);
      if (M1.unsafe_fx_eq_(n4353, 0) !== false) {
        var if_res2868 = lst4349;
      } else {
        if (cache_keys_p4352 !== false) {
          var vec4354 = M0.make_vector(n4353 + M0.ceiling(n4353 / 2));
          var loop4355 = function(i4356, lst4357) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.pair_p(lst4357) !== false) {
              var x4358 = M0.car(lst4357);
              M1.unsafe_vector_set_bang_(vec4354, i4356, M0.cons(getkey4351(x4358), x4358));
              var if_res2848 = loop4355(M1.unsafe_fx_plus_(i4356, 1), M0.cdr(lst4357));
            } else {
              var if_res2848 = M0.rvoid();
            }
            return if_res2848;
          };
          loop4355(0, lst4349);
          generic_sort_by_key4261(vec4354, less_than_p4350, n4353, M1.unsafe_car);
          var loop4359 = function(i4360, r4361) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var i4362 = M1.unsafe_fx_(i4360, 1);
            if (M1.unsafe_fx_lt_(i4362, 0) !== false) {
              var if_res2849 = r4361;
            } else {
              var if_res2849 = loop4359(i4362, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4354, i4362)), r4361));
            }
            return if_res2849;
          };
          var if_res2867 = loop4359(n4353, $rjs_core.Pair.makeList());
        } else {
          var loop4363 = function(last4364, next4365) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4366 = M0.null_p(next4365);
            if (or_part4366 !== false) {
              var if_res2852 = or_part4366;
            } else {
              if (getkey4351 !== false) {
                var if_res2850 = less_than_p4350(getkey4351(M1.unsafe_car(next4365)), getkey4351(last4364));
              } else {
                var if_res2850 = less_than_p4350(M1.unsafe_car(next4365), last4364);
              }
              if (M0.not(if_res2850) !== false) {
                var if_res2851 = loop4363(M1.unsafe_car(next4365), M1.unsafe_cdr(next4365));
              } else {
                var if_res2851 = false;
              }
              var if_res2852 = if_res2851;
            }
            return if_res2852;
          };
          if (loop4363(M0.car(lst4349), M0.cdr(lst4349)) !== false) {
            var if_res2866 = lst4349;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4353, 3) !== false) {
              if (M1.unsafe_fx_eq_(n4353, 1) !== false) {
                var if_res2862 = lst4349;
              } else {
                if (M1.unsafe_fx_eq_(n4353, 2) !== false) {
                  var if_res2861 = M0.list(M0.cadr(lst4349), M0.car(lst4349));
                } else {
                  var a4367 = M0.car(lst4349);
                  var b4368 = M0.cadr(lst4349);
                  var c4369 = M0.caddr(lst4349);
                  if (getkey4351 !== false) {
                    var if_res2853 = less_than_p4350(getkey4351(b4368), getkey4351(a4367));
                  } else {
                    var if_res2853 = less_than_p4350(b4368, a4367);
                  }
                  if (if_res2853 !== false) {
                    if (getkey4351 !== false) {
                      var if_res2854 = less_than_p4350(getkey4351(c4369), getkey4351(b4368));
                    } else {
                      var if_res2854 = less_than_p4350(c4369, b4368);
                    }
                    if (if_res2854 !== false) {
                      var if_res2857 = M0.list(c4369, b4368, a4367);
                    } else {
                      if (getkey4351 !== false) {
                        var if_res2855 = less_than_p4350(getkey4351(c4369), getkey4351(a4367));
                      } else {
                        var if_res2855 = less_than_p4350(c4369, a4367);
                      }
                      if (if_res2855 !== false) {
                        var if_res2856 = M0.list(b4368, c4369, a4367);
                      } else {
                        var if_res2856 = M0.list(b4368, a4367, c4369);
                      }
                      var if_res2857 = if_res2856;
                    }
                    var if_res2860 = if_res2857;
                  } else {
                    if (getkey4351 !== false) {
                      var if_res2858 = less_than_p4350(getkey4351(c4369), getkey4351(a4367));
                    } else {
                      var if_res2858 = less_than_p4350(c4369, a4367);
                    }
                    if (if_res2858 !== false) {
                      var if_res2859 = M0.list(c4369, a4367, b4368);
                    } else {
                      var if_res2859 = M0.list(a4367, c4369, b4368);
                    }
                    var if_res2860 = if_res2859;
                  }
                  var if_res2861 = if_res2860;
                }
                var if_res2862 = if_res2861;
              }
              var if_res2865 = if_res2862;
            } else {
              var vec4370 = M0.make_vector(n4353 + M0.ceiling(n4353 / 2));
              var loop4371 = function(i4372, lst4373) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M0.pair_p(lst4373) !== false) {
                  M0.vector_set_bang_(vec4370, i4372, M0.car(lst4373));
                  var if_res2863 = loop4371(M0.add1(i4372), M0.cdr(lst4373));
                } else {
                  var if_res2863 = M0.rvoid();
                }
                return if_res2863;
              };
              loop4371(0, lst4349);
              generic_sort_by_key4261(vec4370, less_than_p4350, n4353, getkey4351);
              var loop4374 = function(i4375, r4376) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var i4377 = M0.sub1(i4375);
                if (M0.__lt_(i4377, 0) !== false) {
                  var if_res2864 = r4376;
                } else {
                  var if_res2864 = loop4374(i4377, M0.cons(M0.vector_ref(vec4370, i4377), r4376));
                }
                return if_res2864;
              };
              var if_res2865 = loop4374(n4353, $rjs_core.Pair.makeList());
            }
            var if_res2866 = if_res2865;
          }
          var if_res2867 = if_res2866;
        }
        var if_res2868 = if_res2867;
      }
      var if_res2869 = if_res2868;
    } else {
      var if_res2869 = sort(lst4349, less_than_p4350);
    }
    return if_res2869;
  };
  var temp2870 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2822 = {
      '2': cl2819,
      '3': cl2820,
      '4': cl2821
    }[arguments.length];
    if (fixed_lam2822 !== undefined) {
      return fixed_lam2822.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3, 4]);
  var cl2764 = function(vec4378, less_than_p4379, start4380, end4381) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4382 = end4381 - start4380;
    if (true !== false) {
      var if_res2767 = M0.make_vector(n4382);
    } else {
      var if_res2767 = vec4378;
    }
    var dst_vec4383 = if_res2767;
    if (true !== false) {
      var if_res2768 = 0;
    } else {
      var if_res2768 = start4380;
    }
    var dst_start4384 = if_res2768;
    if (M1.unsafe_fx_eq_(n4382, 0) !== false) {
      var if_res2790 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4385 = M0.make_vector(n4382 + M0.ceiling(n4382 / 2), true);
        var loop4386 = function(i4387) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4387, n4382) !== false) {
            var x4388 = M1.unsafe_vector_ref(vec4378, M1.unsafe_fx_plus_(i4387, start4380));
            M1.unsafe_vector_set_bang_(work_vec4385, i4387, M0.cons(false(x4388), x4388));
            var if_res2769 = loop4386(M1.unsafe_fx_plus_(i4387, 1));
          } else {
            var if_res2769 = M0.rvoid();
          }
          return if_res2769;
        };
        loop4386(0);
        generic_sort_by_key4261(work_vec4385, less_than_p4379, n4382, M1.unsafe_car);
        var loop4389 = function(i4390) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4390, n4382) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(i4390, dst_start4384), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4385, i4390)));
            var if_res2770 = loop4389(M1.unsafe_fx_plus_(i4390, 1));
          } else {
            var if_res2770 = M0.rvoid();
          }
          return if_res2770;
        };
        var if_res2789 = loop4389(0);
      } else {
        var loop4391 = function(prev_val4392, next_index4393) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4394 = M1.unsafe_fx_eq_(next_index4393, end4381);
          if (or_part4394 !== false) {
            var if_res2773 = or_part4394;
          } else {
            var next_val4395 = M1.unsafe_vector_ref(vec4378, next_index4393);
            if (false !== false) {
              var if_res2771 = less_than_p4379(false(next_val4395), false(prev_val4392));
            } else {
              var if_res2771 = less_than_p4379(next_val4395, prev_val4392);
            }
            if (M0.not(if_res2771) !== false) {
              var if_res2772 = loop4391(next_val4395, M1.unsafe_fx_plus_(next_index4393, 1));
            } else {
              var if_res2772 = false;
            }
            var if_res2773 = if_res2772;
          }
          return if_res2773;
        };
        if (loop4391(M1.unsafe_vector_ref(vec4378, start4380), M1.unsafe_fx_plus_(start4380, 1)) !== false) {
          if (true !== false) {
            var if_res2774 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4383, dst_start4384, vec4378, start4380, end4381);
          } else {
            var if_res2774 = M0.rvoid();
          }
          var if_res2788 = if_res2774;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4382, 3) !== false) {
            if (true !== false) {
              var if_res2775 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4383, dst_start4384, vec4378, start4380, end4381);
            } else {
              var if_res2775 = M0.rvoid();
            }
            if_res2775;
            if (M1.unsafe_fx_eq_(n4382, 1) !== false) {
              var if_res2785 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4382, 2) !== false) {
                var tmp4396 = M1.unsafe_vector_ref(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0));
                M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0), M1.unsafe_vector_ref(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1)));
                var if_res2784 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1), tmp4396);
              } else {
                var a4397 = M1.unsafe_vector_ref(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0));
                var b4398 = M1.unsafe_vector_ref(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1));
                var c4399 = M1.unsafe_vector_ref(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 2));
                if (false !== false) {
                  var if_res2776 = less_than_p4379(false(b4398), false(a4397));
                } else {
                  var if_res2776 = less_than_p4379(b4398, a4397);
                }
                if (if_res2776 !== false) {
                  if (false !== false) {
                    var if_res2777 = less_than_p4379(false(c4399), false(b4398));
                  } else {
                    var if_res2777 = less_than_p4379(c4399, b4398);
                  }
                  if (if_res2777 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0), c4399);
                    var if_res2780 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 2), a4397);
                  } else {
                    if (false !== false) {
                      var if_res2778 = less_than_p4379(false(c4399), false(a4397));
                    } else {
                      var if_res2778 = less_than_p4379(c4399, a4397);
                    }
                    if (if_res2778 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0), b4398);
                      M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1), c4399);
                      var if_res2779 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 2), a4397);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0), b4398);
                      var if_res2779 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1), a4397);
                    }
                    var if_res2780 = if_res2779;
                  }
                  var if_res2783 = if_res2780;
                } else {
                  if (false !== false) {
                    var if_res2781 = less_than_p4379(false(c4399), false(a4397));
                  } else {
                    var if_res2781 = less_than_p4379(c4399, a4397);
                  }
                  if (if_res2781 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 0), c4399);
                    M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1), a4397);
                    var if_res2782 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 2), b4398);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 1), c4399);
                    var if_res2782 = M1.unsafe_vector_set_bang_(dst_vec4383, M1.unsafe_fx_plus_(dst_start4384, 2), b4398);
                  }
                  var if_res2783 = if_res2782;
                }
                var if_res2784 = if_res2783;
              }
              var if_res2785 = if_res2784;
            }
            var if_res2787 = if_res2785;
          } else {
            var work_vec4400 = M0.make_vector(n4382 + M0.ceiling(n4382 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4400, 0, vec4378, start4380, end4381);
            var precomp4401 = M0.hash_ref(precompiled_sorts3488, less_than_p4379, false);
            if (precomp4401 !== false) {
              var if_res2786 = precomp4401(work_vec4400, n4382);
            } else {
              var if_res2786 = generic_sort4205(work_vec4400, less_than_p4379, n4382);
            }
            if_res2786;
            var if_res2787 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4383, dst_start4384, work_vec4400, 0, n4382);
          }
          var if_res2788 = if_res2787;
        }
        var if_res2789 = if_res2788;
      }
      var if_res2790 = if_res2789;
    }
    if_res2790;
    if (true !== false) {
      var if_res2791 = dst_vec4383;
    } else {
      var if_res2791 = M0.rvoid();
    }
    return if_res2791;
  };
  var cl2765 = function(vec4402, less_than_p4403, start4404, end4405, getkey4406, cache_keys_p4407) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4406 !== false) {
      var if_res2792 = M0.not(M0.eq_p(M0.values, getkey4406));
    } else {
      var if_res2792 = false;
    }
    if (if_res2792 !== false) {
      var n4408 = end4405 - start4404;
      if (true !== false) {
        var if_res2793 = M0.make_vector(n4408);
      } else {
        var if_res2793 = vec4402;
      }
      var dst_vec4409 = if_res2793;
      if (true !== false) {
        var if_res2794 = 0;
      } else {
        var if_res2794 = start4404;
      }
      var dst_start4410 = if_res2794;
      if (M1.unsafe_fx_eq_(n4408, 0) !== false) {
        var if_res2815 = M0.rvoid();
      } else {
        if (cache_keys_p4407 !== false) {
          var work_vec4411 = M0.make_vector(n4408 + M0.ceiling(n4408 / 2), true);
          var loop4412 = function(i4413) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4413, n4408) !== false) {
              var x4414 = M1.unsafe_vector_ref(vec4402, M1.unsafe_fx_plus_(i4413, start4404));
              M1.unsafe_vector_set_bang_(work_vec4411, i4413, M0.cons(getkey4406(x4414), x4414));
              var if_res2795 = loop4412(M1.unsafe_fx_plus_(i4413, 1));
            } else {
              var if_res2795 = M0.rvoid();
            }
            return if_res2795;
          };
          loop4412(0);
          generic_sort_by_key4261(work_vec4411, less_than_p4403, n4408, M1.unsafe_car);
          var loop4415 = function(i4416) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4416, n4408) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(i4416, dst_start4410), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4411, i4416)));
              var if_res2796 = loop4415(M1.unsafe_fx_plus_(i4416, 1));
            } else {
              var if_res2796 = M0.rvoid();
            }
            return if_res2796;
          };
          var if_res2814 = loop4415(0);
        } else {
          var loop4417 = function(prev_val4418, next_index4419) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4420 = M1.unsafe_fx_eq_(next_index4419, end4405);
            if (or_part4420 !== false) {
              var if_res2799 = or_part4420;
            } else {
              var next_val4421 = M1.unsafe_vector_ref(vec4402, next_index4419);
              if (getkey4406 !== false) {
                var if_res2797 = less_than_p4403(getkey4406(next_val4421), getkey4406(prev_val4418));
              } else {
                var if_res2797 = less_than_p4403(next_val4421, prev_val4418);
              }
              if (M0.not(if_res2797) !== false) {
                var if_res2798 = loop4417(next_val4421, M1.unsafe_fx_plus_(next_index4419, 1));
              } else {
                var if_res2798 = false;
              }
              var if_res2799 = if_res2798;
            }
            return if_res2799;
          };
          if (loop4417(M1.unsafe_vector_ref(vec4402, start4404), M1.unsafe_fx_plus_(start4404, 1)) !== false) {
            if (true !== false) {
              var if_res2800 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4409, dst_start4410, vec4402, start4404, end4405);
            } else {
              var if_res2800 = M0.rvoid();
            }
            var if_res2813 = if_res2800;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4408, 3) !== false) {
              if (true !== false) {
                var if_res2801 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4409, dst_start4410, vec4402, start4404, end4405);
              } else {
                var if_res2801 = M0.rvoid();
              }
              if_res2801;
              if (M1.unsafe_fx_eq_(n4408, 1) !== false) {
                var if_res2811 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4408, 2) !== false) {
                  var tmp4422 = M1.unsafe_vector_ref(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0), M1.unsafe_vector_ref(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1)));
                  var if_res2810 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1), tmp4422);
                } else {
                  var a4423 = M1.unsafe_vector_ref(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0));
                  var b4424 = M1.unsafe_vector_ref(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1));
                  var c4425 = M1.unsafe_vector_ref(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 2));
                  if (getkey4406 !== false) {
                    var if_res2802 = less_than_p4403(getkey4406(b4424), getkey4406(a4423));
                  } else {
                    var if_res2802 = less_than_p4403(b4424, a4423);
                  }
                  if (if_res2802 !== false) {
                    if (getkey4406 !== false) {
                      var if_res2803 = less_than_p4403(getkey4406(c4425), getkey4406(b4424));
                    } else {
                      var if_res2803 = less_than_p4403(c4425, b4424);
                    }
                    if (if_res2803 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0), c4425);
                      var if_res2806 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 2), a4423);
                    } else {
                      if (getkey4406 !== false) {
                        var if_res2804 = less_than_p4403(getkey4406(c4425), getkey4406(a4423));
                      } else {
                        var if_res2804 = less_than_p4403(c4425, a4423);
                      }
                      if (if_res2804 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0), b4424);
                        M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1), c4425);
                        var if_res2805 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 2), a4423);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0), b4424);
                        var if_res2805 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1), a4423);
                      }
                      var if_res2806 = if_res2805;
                    }
                    var if_res2809 = if_res2806;
                  } else {
                    if (getkey4406 !== false) {
                      var if_res2807 = less_than_p4403(getkey4406(c4425), getkey4406(a4423));
                    } else {
                      var if_res2807 = less_than_p4403(c4425, a4423);
                    }
                    if (if_res2807 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 0), c4425);
                      M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1), a4423);
                      var if_res2808 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 2), b4424);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 1), c4425);
                      var if_res2808 = M1.unsafe_vector_set_bang_(dst_vec4409, M1.unsafe_fx_plus_(dst_start4410, 2), b4424);
                    }
                    var if_res2809 = if_res2808;
                  }
                  var if_res2810 = if_res2809;
                }
                var if_res2811 = if_res2810;
              }
              var if_res2812 = if_res2811;
            } else {
              var work_vec4426 = M0.make_vector(n4408 + M0.ceiling(n4408 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4426, 0, vec4402, start4404, end4405);
              generic_sort_by_key4261(work_vec4426, less_than_p4403, n4408, getkey4406);
              var if_res2812 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4409, dst_start4410, work_vec4426, 0, n4408);
            }
            var if_res2813 = if_res2812;
          }
          var if_res2814 = if_res2813;
        }
        var if_res2815 = if_res2814;
      }
      if_res2815;
      if (true !== false) {
        var if_res2816 = dst_vec4409;
      } else {
        var if_res2816 = M0.rvoid();
      }
      var if_res2817 = if_res2816;
    } else {
      var if_res2817 = vector_sort(vec4402, less_than_p4403, start4404, end4405);
    }
    return if_res2817;
  };
  var temp2818 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2766 = {
      '4': cl2764,
      '6': cl2765
    }[arguments.length];
    if (fixed_lam2766 !== undefined) {
      return fixed_lam2766.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4, 6]);
  var cl2710 = function(vec4427, less_than_p4428, start4429, end4430) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4431 = end4430 - start4429;
    if (false !== false) {
      var if_res2713 = M0.make_vector(n4431);
    } else {
      var if_res2713 = vec4427;
    }
    var dst_vec4432 = if_res2713;
    if (false !== false) {
      var if_res2714 = 0;
    } else {
      var if_res2714 = start4429;
    }
    var dst_start4433 = if_res2714;
    if (M1.unsafe_fx_eq_(n4431, 0) !== false) {
      var if_res2736 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4434 = M0.make_vector(n4431 + M0.ceiling(n4431 / 2), true);
        var loop4435 = function(i4436) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4436, n4431) !== false) {
            var x4437 = M1.unsafe_vector_ref(vec4427, M1.unsafe_fx_plus_(i4436, start4429));
            M1.unsafe_vector_set_bang_(work_vec4434, i4436, M0.cons(false(x4437), x4437));
            var if_res2715 = loop4435(M1.unsafe_fx_plus_(i4436, 1));
          } else {
            var if_res2715 = M0.rvoid();
          }
          return if_res2715;
        };
        loop4435(0);
        generic_sort_by_key4261(work_vec4434, less_than_p4428, n4431, M1.unsafe_car);
        var loop4438 = function(i4439) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4439, n4431) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(i4439, dst_start4433), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4434, i4439)));
            var if_res2716 = loop4438(M1.unsafe_fx_plus_(i4439, 1));
          } else {
            var if_res2716 = M0.rvoid();
          }
          return if_res2716;
        };
        var if_res2735 = loop4438(0);
      } else {
        var loop4440 = function(prev_val4441, next_index4442) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4443 = M1.unsafe_fx_eq_(next_index4442, end4430);
          if (or_part4443 !== false) {
            var if_res2719 = or_part4443;
          } else {
            var next_val4444 = M1.unsafe_vector_ref(vec4427, next_index4442);
            if (false !== false) {
              var if_res2717 = less_than_p4428(false(next_val4444), false(prev_val4441));
            } else {
              var if_res2717 = less_than_p4428(next_val4444, prev_val4441);
            }
            if (M0.not(if_res2717) !== false) {
              var if_res2718 = loop4440(next_val4444, M1.unsafe_fx_plus_(next_index4442, 1));
            } else {
              var if_res2718 = false;
            }
            var if_res2719 = if_res2718;
          }
          return if_res2719;
        };
        if (loop4440(M1.unsafe_vector_ref(vec4427, start4429), M1.unsafe_fx_plus_(start4429, 1)) !== false) {
          if (false !== false) {
            var if_res2720 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4432, dst_start4433, vec4427, start4429, end4430);
          } else {
            var if_res2720 = M0.rvoid();
          }
          var if_res2734 = if_res2720;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4431, 3) !== false) {
            if (false !== false) {
              var if_res2721 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4432, dst_start4433, vec4427, start4429, end4430);
            } else {
              var if_res2721 = M0.rvoid();
            }
            if_res2721;
            if (M1.unsafe_fx_eq_(n4431, 1) !== false) {
              var if_res2731 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4431, 2) !== false) {
                var tmp4445 = M1.unsafe_vector_ref(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0));
                M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0), M1.unsafe_vector_ref(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1)));
                var if_res2730 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1), tmp4445);
              } else {
                var a4446 = M1.unsafe_vector_ref(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0));
                var b4447 = M1.unsafe_vector_ref(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1));
                var c4448 = M1.unsafe_vector_ref(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 2));
                if (false !== false) {
                  var if_res2722 = less_than_p4428(false(b4447), false(a4446));
                } else {
                  var if_res2722 = less_than_p4428(b4447, a4446);
                }
                if (if_res2722 !== false) {
                  if (false !== false) {
                    var if_res2723 = less_than_p4428(false(c4448), false(b4447));
                  } else {
                    var if_res2723 = less_than_p4428(c4448, b4447);
                  }
                  if (if_res2723 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0), c4448);
                    var if_res2726 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 2), a4446);
                  } else {
                    if (false !== false) {
                      var if_res2724 = less_than_p4428(false(c4448), false(a4446));
                    } else {
                      var if_res2724 = less_than_p4428(c4448, a4446);
                    }
                    if (if_res2724 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0), b4447);
                      M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1), c4448);
                      var if_res2725 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 2), a4446);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0), b4447);
                      var if_res2725 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1), a4446);
                    }
                    var if_res2726 = if_res2725;
                  }
                  var if_res2729 = if_res2726;
                } else {
                  if (false !== false) {
                    var if_res2727 = less_than_p4428(false(c4448), false(a4446));
                  } else {
                    var if_res2727 = less_than_p4428(c4448, a4446);
                  }
                  if (if_res2727 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 0), c4448);
                    M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1), a4446);
                    var if_res2728 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 2), b4447);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 1), c4448);
                    var if_res2728 = M1.unsafe_vector_set_bang_(dst_vec4432, M1.unsafe_fx_plus_(dst_start4433, 2), b4447);
                  }
                  var if_res2729 = if_res2728;
                }
                var if_res2730 = if_res2729;
              }
              var if_res2731 = if_res2730;
            }
            var if_res2733 = if_res2731;
          } else {
            var work_vec4449 = M0.make_vector(n4431 + M0.ceiling(n4431 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4449, 0, vec4427, start4429, end4430);
            var precomp4450 = M0.hash_ref(precompiled_sorts3488, less_than_p4428, false);
            if (precomp4450 !== false) {
              var if_res2732 = precomp4450(work_vec4449, n4431);
            } else {
              var if_res2732 = generic_sort4205(work_vec4449, less_than_p4428, n4431);
            }
            if_res2732;
            var if_res2733 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4432, dst_start4433, work_vec4449, 0, n4431);
          }
          var if_res2734 = if_res2733;
        }
        var if_res2735 = if_res2734;
      }
      var if_res2736 = if_res2735;
    }
    if_res2736;
    if (false !== false) {
      var if_res2737 = dst_vec4432;
    } else {
      var if_res2737 = M0.rvoid();
    }
    return if_res2737;
  };
  var cl2711 = function(vec4451, less_than_p4452, start4453, end4454, getkey4455, cache_keys_p4456) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4455 !== false) {
      var if_res2738 = M0.not(M0.eq_p(M0.values, getkey4455));
    } else {
      var if_res2738 = false;
    }
    if (if_res2738 !== false) {
      var n4457 = end4454 - start4453;
      if (false !== false) {
        var if_res2739 = M0.make_vector(n4457);
      } else {
        var if_res2739 = vec4451;
      }
      var dst_vec4458 = if_res2739;
      if (false !== false) {
        var if_res2740 = 0;
      } else {
        var if_res2740 = start4453;
      }
      var dst_start4459 = if_res2740;
      if (M1.unsafe_fx_eq_(n4457, 0) !== false) {
        var if_res2761 = M0.rvoid();
      } else {
        if (cache_keys_p4456 !== false) {
          var work_vec4460 = M0.make_vector(n4457 + M0.ceiling(n4457 / 2), true);
          var loop4461 = function(i4462) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4462, n4457) !== false) {
              var x4463 = M1.unsafe_vector_ref(vec4451, M1.unsafe_fx_plus_(i4462, start4453));
              M1.unsafe_vector_set_bang_(work_vec4460, i4462, M0.cons(getkey4455(x4463), x4463));
              var if_res2741 = loop4461(M1.unsafe_fx_plus_(i4462, 1));
            } else {
              var if_res2741 = M0.rvoid();
            }
            return if_res2741;
          };
          loop4461(0);
          generic_sort_by_key4261(work_vec4460, less_than_p4452, n4457, M1.unsafe_car);
          var loop4464 = function(i4465) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4465, n4457) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(i4465, dst_start4459), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4460, i4465)));
              var if_res2742 = loop4464(M1.unsafe_fx_plus_(i4465, 1));
            } else {
              var if_res2742 = M0.rvoid();
            }
            return if_res2742;
          };
          var if_res2760 = loop4464(0);
        } else {
          var loop4466 = function(prev_val4467, next_index4468) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4469 = M1.unsafe_fx_eq_(next_index4468, end4454);
            if (or_part4469 !== false) {
              var if_res2745 = or_part4469;
            } else {
              var next_val4470 = M1.unsafe_vector_ref(vec4451, next_index4468);
              if (getkey4455 !== false) {
                var if_res2743 = less_than_p4452(getkey4455(next_val4470), getkey4455(prev_val4467));
              } else {
                var if_res2743 = less_than_p4452(next_val4470, prev_val4467);
              }
              if (M0.not(if_res2743) !== false) {
                var if_res2744 = loop4466(next_val4470, M1.unsafe_fx_plus_(next_index4468, 1));
              } else {
                var if_res2744 = false;
              }
              var if_res2745 = if_res2744;
            }
            return if_res2745;
          };
          if (loop4466(M1.unsafe_vector_ref(vec4451, start4453), M1.unsafe_fx_plus_(start4453, 1)) !== false) {
            if (false !== false) {
              var if_res2746 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4458, dst_start4459, vec4451, start4453, end4454);
            } else {
              var if_res2746 = M0.rvoid();
            }
            var if_res2759 = if_res2746;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4457, 3) !== false) {
              if (false !== false) {
                var if_res2747 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4458, dst_start4459, vec4451, start4453, end4454);
              } else {
                var if_res2747 = M0.rvoid();
              }
              if_res2747;
              if (M1.unsafe_fx_eq_(n4457, 1) !== false) {
                var if_res2757 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4457, 2) !== false) {
                  var tmp4471 = M1.unsafe_vector_ref(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0), M1.unsafe_vector_ref(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1)));
                  var if_res2756 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1), tmp4471);
                } else {
                  var a4472 = M1.unsafe_vector_ref(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0));
                  var b4473 = M1.unsafe_vector_ref(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1));
                  var c4474 = M1.unsafe_vector_ref(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 2));
                  if (getkey4455 !== false) {
                    var if_res2748 = less_than_p4452(getkey4455(b4473), getkey4455(a4472));
                  } else {
                    var if_res2748 = less_than_p4452(b4473, a4472);
                  }
                  if (if_res2748 !== false) {
                    if (getkey4455 !== false) {
                      var if_res2749 = less_than_p4452(getkey4455(c4474), getkey4455(b4473));
                    } else {
                      var if_res2749 = less_than_p4452(c4474, b4473);
                    }
                    if (if_res2749 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0), c4474);
                      var if_res2752 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 2), a4472);
                    } else {
                      if (getkey4455 !== false) {
                        var if_res2750 = less_than_p4452(getkey4455(c4474), getkey4455(a4472));
                      } else {
                        var if_res2750 = less_than_p4452(c4474, a4472);
                      }
                      if (if_res2750 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0), b4473);
                        M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1), c4474);
                        var if_res2751 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 2), a4472);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0), b4473);
                        var if_res2751 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1), a4472);
                      }
                      var if_res2752 = if_res2751;
                    }
                    var if_res2755 = if_res2752;
                  } else {
                    if (getkey4455 !== false) {
                      var if_res2753 = less_than_p4452(getkey4455(c4474), getkey4455(a4472));
                    } else {
                      var if_res2753 = less_than_p4452(c4474, a4472);
                    }
                    if (if_res2753 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 0), c4474);
                      M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1), a4472);
                      var if_res2754 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 2), b4473);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 1), c4474);
                      var if_res2754 = M1.unsafe_vector_set_bang_(dst_vec4458, M1.unsafe_fx_plus_(dst_start4459, 2), b4473);
                    }
                    var if_res2755 = if_res2754;
                  }
                  var if_res2756 = if_res2755;
                }
                var if_res2757 = if_res2756;
              }
              var if_res2758 = if_res2757;
            } else {
              var work_vec4475 = M0.make_vector(n4457 + M0.ceiling(n4457 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4475, 0, vec4451, start4453, end4454);
              generic_sort_by_key4261(work_vec4475, less_than_p4452, n4457, getkey4455);
              var if_res2758 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4458, dst_start4459, work_vec4475, 0, n4457);
            }
            var if_res2759 = if_res2758;
          }
          var if_res2760 = if_res2759;
        }
        var if_res2761 = if_res2760;
      }
      if_res2761;
      if (false !== false) {
        var if_res2762 = dst_vec4458;
      } else {
        var if_res2762 = M0.rvoid();
      }
      var if_res2763 = if_res2762;
    } else {
      var if_res2763 = vector_sort_bang_(vec4451, less_than_p4452, start4453, end4454);
    }
    return if_res2763;
  };
  var let_result2871 = M0.values(temp2870, temp2818, $rjs_core.attachProcedureArity(function() {
    var fixed_lam2712 = {
      '4': cl2710,
      '6': cl2711
    }[arguments.length];
    if (fixed_lam2712 !== undefined) {
      return fixed_lam2712.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4, 6]));
  var sort = let_result2871.getAt(0);
  var vector_sort = let_result2871.getAt(1);
  var vector_sort_bang_ = let_result2871.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get vector_sort_bang_() {
      return vector_sort_bang_;
    },
    get vector_sort() {
      return vector_sort;
    },
    get sort() {
      return sort;
    }
  };
})();
var $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/reverse.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  if (M0.eval_jit_enabled() !== false) {
    var reverse692 = function(l693) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.list_p(l693) !== false) {
        var if_res371 = M0.rvoid();
      } else {
        var if_res371 = M0.raise_argument_error($rjs_core.Symbol.make("reverse"), $rjs_core.UString.make("list?"), l693);
      }
      if_res371;
      var loop694 = function(a695, l696) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l696) !== false) {
          var if_res372 = a695;
        } else {
          var if_res372 = loop694(M0.cons(M0.car(l696), a695), M0.cdr(l696));
        }
        return if_res372;
      };
      return loop694(M0.rnull, l693);
    };
    var if_res373 = reverse692;
  } else {
    var if_res373 = M0.reverse;
  }
  var alt_reverse = if_res373;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get alt_reverse() {
      return alt_reverse;
    }
  };
})();
var $__collects_47_racket_47_private_47_for_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/for.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_flfxnum_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1675 = M2.make_struct_type($rjs_core.Symbol.make("sequence"), false, 1, 0, false);
  var struct_do_sequence = let_result1675.getAt(0);
  var make_do_sequence = let_result1675.getAt(1);
  var do_sequence_p = let_result1675.getAt(2);
  var do_sequence_ref = let_result1675.getAt(3);
  var do_sequence_set_bang_ = let_result1675.getAt(4);
  var let_result1684 = M2.make_struct_type_property($rjs_core.Symbol.make("stream"), function(v2551, si2552) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.vector_p(v2551) !== false) {
      if (M2.__eq_(3, M2.vector_length(v2551)) !== false) {
        if (M2.procedure_p(M2.vector_ref(v2551, 0)) !== false) {
          if (M2.procedure_arity_includes_p(M2.vector_ref(v2551, 0), 1) !== false) {
            if (M2.procedure_p(M2.vector_ref(v2551, 1)) !== false) {
              if (M2.procedure_arity_includes_p(M2.vector_ref(v2551, 1), 1) !== false) {
                if (M2.procedure_p(M2.vector_ref(v2551, 2)) !== false) {
                  var if_res1676 = M2.procedure_arity_includes_p(M2.vector_ref(v2551, 2), 1);
                } else {
                  var if_res1676 = false;
                }
                var if_res1677 = if_res1676;
              } else {
                var if_res1677 = false;
              }
              var if_res1678 = if_res1677;
            } else {
              var if_res1678 = false;
            }
            var if_res1679 = if_res1678;
          } else {
            var if_res1679 = false;
          }
          var if_res1680 = if_res1679;
        } else {
          var if_res1680 = false;
        }
        var if_res1681 = if_res1680;
      } else {
        var if_res1681 = false;
      }
      var if_res1682 = if_res1681;
    } else {
      var if_res1682 = false;
    }
    if (if_res1682 !== false) {
      var if_res1683 = M2.rvoid();
    } else {
      var if_res1683 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:stream"), M2.string_append($rjs_core.UString.make("(vector/c (procedure-arity-includes/c 1)\n"), $rjs_core.UString.make("          (procedure-arity-includes/c 1)\n"), $rjs_core.UString.make("          (procedure-arity-includes/c 1))")), v2551);
    }
    if_res1683;
    return M2.vector__gt_immutable_vector(v2551);
  });
  var prop_stream = let_result1684.getAt(0);
  var stream_via_prop_p = let_result1684.getAt(1);
  var stream_ref = let_result1684.getAt(2);
  var let_result1687 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2553, si2554) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2553) !== false) {
      var if_res1685 = M2.procedure_arity_includes_p(v2553, 1);
    } else {
      var if_res1685 = false;
    }
    if (if_res1685 !== false) {
      var if_res1686 = M2.rvoid();
    } else {
      var if_res1686 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:sequence"), $rjs_core.UString.make("(procedure-arity-includes/c 1)"), v2553);
    }
    if_res1686;
    return v2553;
  });
  var prop_gen_sequence = let_result1687.getAt(0);
  var sequence_via_prop_p = let_result1687.getAt(1);
  var sequence_ref = let_result1687.getAt(2);
  var let_result1691 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2555, sinfo2556) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2555) !== false) {
      var if_res1688 = M2.procedure_arity_includes_p(v2555, 1);
    } else {
      var if_res1688 = false;
    }
    if (if_res1688 !== false) {
      var if_res1689 = M2.rvoid();
    } else {
      var if_res1689 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-property-guard"), $rjs_core.UString.make("(procedure-arity-includes/c 1)"), v2555);
    }
    if_res1689;
    return function(self2557) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var s2558 = v2555(self2557);
      if (sequence_p(s2558) !== false) {
        var if_res1690 = M2.rvoid();
      } else {
        var if_res1690 = M2.raise_mismatch_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.make("procedure (value of prop:sequence) produced a non-sequence: "), s2558);
      }
      if_res1690;
      return s2558;
    };
  });
  var prop_sequence = let_result1691.getAt(0);
  var __sequence_p = let_result1691.getAt(1);
  var __sequence_ref = let_result1691.getAt(2);
  var stream_p = function(v2559) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2560 = M2.list_p(v2559);
    if (or_part2560 !== false) {
      var if_res1692 = or_part2560;
    } else {
      var if_res1692 = stream_via_prop_p(v2559);
    }
    return if_res1692;
  };
  var unsafe_stream_not_empty_p = function(v2561) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.null_p(v2561) !== false) {
      var if_res1694 = false;
    } else {
      var or_part2562 = M2.pair_p(v2561);
      if (or_part2562 !== false) {
        var if_res1693 = or_part2562;
      } else {
        var if_res1693 = M2.not(M5.unsafe_vector_ref(stream_ref(v2561), 0)(v2561));
      }
      var if_res1694 = if_res1693;
    }
    return if_res1694;
  };
  var stream_empty_p = function(v2563) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2564 = M2.null_p(v2563);
    if (or_part2564 !== false) {
      var if_res1697 = or_part2564;
    } else {
      if (stream_p(v2563) !== false) {
        if (M2.pair_p(v2563) !== false) {
          var if_res1695 = false;
        } else {
          var if_res1695 = M5.unsafe_vector_ref(stream_ref(v2563), 0)(v2563);
        }
        var if_res1696 = if_res1695;
      } else {
        var if_res1696 = M2.raise_argument_error($rjs_core.Symbol.make("stream-empty?"), $rjs_core.UString.make("stream?"), v2563);
      }
      var if_res1697 = if_res1696;
    }
    return if_res1697;
  };
  var unsafe_stream_first = function(v2565) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2565) !== false) {
      var if_res1698 = M2.car(v2565);
    } else {
      var if_res1698 = M5.unsafe_vector_ref(stream_ref(v2565), 1)(v2565);
    }
    return if_res1698;
  };
  var stream_first = function(v2566) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2566) !== false) {
      var if_res1699 = M2.not(stream_empty_p(v2566));
    } else {
      var if_res1699 = false;
    }
    if (if_res1699 !== false) {
      var if_res1700 = unsafe_stream_first(v2566);
    } else {
      var if_res1700 = M2.raise_argument_error($rjs_core.Symbol.make("stream-first"), $rjs_core.UString.make("(and/c stream? (not/c stream-empty?))"), v2566);
    }
    return if_res1700;
  };
  var unsafe_stream_rest = function(v2567) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2567) !== false) {
      var if_res1702 = M2.cdr(v2567);
    } else {
      var r2568 = M5.unsafe_vector_ref(stream_ref(v2567), 2)(v2567);
      if (stream_p(r2568) !== false) {
        var if_res1701 = M2.rvoid();
      } else {
        var if_res1701 = M2.raise_mismatch_error($rjs_core.Symbol.make("stream-rest-guard"), $rjs_core.UString.make("result is not a stream: "), r2568);
      }
      if_res1701;
      var if_res1702 = r2568;
    }
    return if_res1702;
  };
  var stream_rest = function(v2569) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2569) !== false) {
      var if_res1703 = M2.not(stream_empty_p(v2569));
    } else {
      var if_res1703 = false;
    }
    if (if_res1703 !== false) {
      var if_res1704 = unsafe_stream_rest(v2569);
    } else {
      var if_res1704 = M2.raise_argument_error($rjs_core.Symbol.make("stream-rest"), $rjs_core.UString.make("(and/c stream? (not/c stream-empty?))"), v2569);
    }
    return if_res1704;
  };
  var sequence_p = function(v2570) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2571 = M2.exact_nonnegative_integer_p(v2570);
    if (or_part2571 !== false) {
      var if_res1717 = or_part2571;
    } else {
      var or_part2572 = do_sequence_p(v2570);
      if (or_part2572 !== false) {
        var if_res1716 = or_part2572;
      } else {
        var or_part2573 = sequence_via_prop_p(v2570);
        if (or_part2573 !== false) {
          var if_res1715 = or_part2573;
        } else {
          var or_part2574 = stream_p(v2570);
          if (or_part2574 !== false) {
            var if_res1714 = or_part2574;
          } else {
            var or_part2575 = M2.mpair_p(v2570);
            if (or_part2575 !== false) {
              var if_res1713 = or_part2575;
            } else {
              var or_part2576 = M2.vector_p(v2570);
              if (or_part2576 !== false) {
                var if_res1712 = or_part2576;
              } else {
                var or_part2577 = M1.__rjs_quoted__.flvector_p(v2570);
                if (or_part2577 !== false) {
                  var if_res1711 = or_part2577;
                } else {
                  var or_part2578 = M1.__rjs_quoted__.fxvector_p(v2570);
                  if (or_part2578 !== false) {
                    var if_res1710 = or_part2578;
                  } else {
                    var or_part2579 = M2.string_p(v2570);
                    if (or_part2579 !== false) {
                      var if_res1709 = or_part2579;
                    } else {
                      var or_part2580 = M2.bytes_p(v2570);
                      if (or_part2580 !== false) {
                        var if_res1708 = or_part2580;
                      } else {
                        var or_part2581 = M2.input_port_p(v2570);
                        if (or_part2581 !== false) {
                          var if_res1707 = or_part2581;
                        } else {
                          var or_part2582 = M2.hash_p(v2570);
                          if (or_part2582 !== false) {
                            var if_res1706 = or_part2582;
                          } else {
                            if (__sequence_p(v2570) !== false) {
                              var if_res1705 = M2.not(M2.struct_type_p(v2570));
                            } else {
                              var if_res1705 = false;
                            }
                            var if_res1706 = if_res1705;
                          }
                          var if_res1707 = if_res1706;
                        }
                        var if_res1708 = if_res1707;
                      }
                      var if_res1709 = if_res1708;
                    }
                    var if_res1710 = if_res1709;
                  }
                  var if_res1711 = if_res1710;
                }
                var if_res1712 = if_res1711;
              }
              var if_res1713 = if_res1712;
            }
            var if_res1714 = if_res1713;
          }
          var if_res1715 = if_res1714;
        }
        var if_res1716 = if_res1715;
      }
      var if_res1717 = if_res1716;
    }
    return if_res1717;
  };
  var make_sequence = function(who2583, v2584) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(v2584) !== false) {
      var if_res1736 = __integer_gen(v2584);
    } else {
      if (do_sequence_p(v2584) !== false) {
        var cl1718 = function(pos__gt_vals2585, pos_next2586, init2587, pos_cont_p2588, val_cont_p2589, all_cont_p2590) {
          if (arguments.length !== 6) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2585, false, pos_next2586, init2587, pos_cont_p2588, val_cont_p2589, all_cont_p2590);
        };
        var cl1719 = function(pos__gt_vals2591, pre_pos_next2592, pos_next2593, init2594, pos_cont_p2595, val_cont_p2596, all_cont_p2597) {
          if (arguments.length !== 7) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2591, pre_pos_next2592, pos_next2593, init2594, pos_cont_p2595, val_cont_p2596, all_cont_p2597);
        };
        var if_res1735 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return do_sequence_ref(v2584, 0)();
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1720 = {
            '6': cl1718,
            '7': cl1719
          }[arguments.length];
          if (fixed_lam1720 !== undefined) {
            return fixed_lam1720.apply(null, arguments);
          } else {
            return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
          }
        }, [6, 7]));
      } else {
        if (M2.mpair_p(v2584) !== false) {
          var if_res1734 = __mlist_gen(v2584);
        } else {
          if (M2.list_p(v2584) !== false) {
            var if_res1733 = __list_gen(v2584);
          } else {
            if (M2.vector_p(v2584) !== false) {
              var if_res1732 = __vector_gen(v2584, 0, M2.vector_length(v2584), 1);
            } else {
              if (M1.__rjs_quoted__.flvector_p(v2584) !== false) {
                var if_res1731 = __flvector_gen(v2584, 0, M1.__rjs_quoted__.flvector_length(v2584), 1);
              } else {
                if (M1.__rjs_quoted__.fxvector_p(v2584) !== false) {
                  var if_res1730 = __fxvector_gen(v2584, 0, M1.__rjs_quoted__.fxvector_length(v2584), 1);
                } else {
                  if (M2.string_p(v2584) !== false) {
                    var if_res1729 = __string_gen(v2584, 0, M2.string_length(v2584), 1);
                  } else {
                    if (M2.bytes_p(v2584) !== false) {
                      var if_res1728 = __bytes_gen(v2584, 0, M2.__rjs_quoted__.bytes_length(v2584), 1);
                    } else {
                      if (M2.input_port_p(v2584) !== false) {
                        var if_res1727 = __input_port_gen(v2584);
                      } else {
                        if (M2.hash_p(v2584) !== false) {
                          var if_res1726 = __hash_gen(v2584, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
                        } else {
                          if (sequence_via_prop_p(v2584) !== false) {
                            var if_res1725 = sequence_ref(v2584)(v2584);
                          } else {
                            if (__sequence_p(v2584) !== false) {
                              var if_res1724 = make_sequence(who2583, __sequence_ref(v2584)(v2584));
                            } else {
                              if (stream_p(v2584) !== false) {
                                var if_res1723 = __stream_gen(v2584);
                              } else {
                                var temp1722 = $rjs_core.UString.make("for: expected a sequence for ~a, got something else: ~v");
                                if (M2.__eq_(1, M2.length(who2583)) !== false) {
                                  var if_res1721 = M2.car(who2583);
                                } else {
                                  var if_res1721 = who2583;
                                }
                                var if_res1723 = M2.raise(M2.__rjs_quoted__.exn_fail_contract(M2.format(temp1722, if_res1721, v2584), M2.current_continuation_marks()));
                              }
                              var if_res1724 = if_res1723;
                            }
                            var if_res1725 = if_res1724;
                          }
                          var if_res1726 = if_res1725;
                        }
                        var if_res1727 = if_res1726;
                      }
                      var if_res1728 = if_res1727;
                    }
                    var if_res1729 = if_res1728;
                  }
                  var if_res1730 = if_res1729;
                }
                var if_res1731 = if_res1730;
              }
              var if_res1732 = if_res1731;
            }
            var if_res1733 = if_res1732;
          }
          var if_res1734 = if_res1733;
        }
        var if_res1735 = if_res1734;
      }
      var if_res1736 = if_res1735;
    }
    return if_res1736;
  };
  var let_result1738 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2598) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cont_p2599 = range_ref(v2598, 2);
    if (cont_p2599 !== false) {
      var if_res1737 = M2.not(cont_p2599(range_ref(v2598, 0)));
    } else {
      var if_res1737 = false;
    }
    return if_res1737;
  }, function(v2600) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range_ref(v2600, 0);
  }, function(v2601) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_range(range_ref(v2601, 1)(range_ref(v2601, 0)), range_ref(v2601, 1), range_ref(v2601, 2));
  })), M2.cons(prop_gen_sequence, function(v2602) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, range_ref(v2602, 1), range_ref(v2602, 0), range_ref(v2602, 2), false, false);
  })));
  var struct_range = let_result1738.getAt(0);
  var make_range = let_result1738.getAt(1);
  var range_p = let_result1738.getAt(2);
  var range_ref = let_result1738.getAt(3);
  var range_set_bang_ = let_result1738.getAt(4);
  var cl1739 = function(b2603) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(0, b2603, 1);
  };
  var cl1740 = function(a2604, b2605) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(a2604, b2605, 1);
  };
  var cl1741 = function(a2606, b2607, step2608) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.real_p(a2606) !== false) {
      var if_res1743 = M2.rvoid();
    } else {
      var if_res1743 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.make("real?"), a2606);
    }
    if_res1743;
    if (M2.real_p(b2607) !== false) {
      var if_res1744 = M2.rvoid();
    } else {
      var if_res1744 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.make("real?"), b2607);
    }
    if_res1744;
    if (M2.real_p(step2608) !== false) {
      var if_res1745 = M2.rvoid();
    } else {
      var if_res1745 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.make("real?"), step2608);
    }
    if_res1745;
    if (M2.__gt__eq_(step2608, 0) !== false) {
      var if_res1746 = function(x2610) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(x2610, b2607);
      };
    } else {
      var if_res1746 = function(x2611) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(x2611, b2607);
      };
    }
    var cont_p2609 = if_res1746;
    var inc2612 = function(x2613) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return x2613 + step2608;
    };
    return make_range(a2606, inc2612, cont_p2609);
  };
  var in_range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1742 = {
      '1': cl1739,
      '2': cl1740,
      '3': cl1741
    }[arguments.length];
    if (fixed_lam1742 !== undefined) {
      return fixed_lam1742.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var __integer_gen = function(v2614) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, M2.add1, 0, function(i2615) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__lt_(i2615, v2614);
    }, false, false);
  };
  var cl1747 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_naturals(0);
  };
  var cl1748 = function(n2616) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.integer_p(n2616) !== false) {
      if (M2.__rjs_quoted__.exact_p(n2616) !== false) {
        var if_res1750 = M2.__gt__eq_(n2616, 0);
      } else {
        var if_res1750 = false;
      }
      var if_res1751 = if_res1750;
    } else {
      var if_res1751 = false;
    }
    if (if_res1751 !== false) {
      var if_res1752 = M2.rvoid();
    } else {
      var if_res1752 = M2.raise_argument_error($rjs_core.Symbol.make("in-naturals"), $rjs_core.UString.make("exact-nonnegative-integer?"), n2616);
    }
    if_res1752;
    return make_range(n2616, M2.add1, false);
  };
  var in_naturals = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1749 = {
      '0': cl1747,
      '1': cl1748
    }[arguments.length];
    if (fixed_lam1749 !== undefined) {
      return fixed_lam1749.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var let_result1753 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 1, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2617) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.pair_p(list_stream_ref(v2617, 0)));
  }, function(v2618) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.car(list_stream_ref(v2618, 0));
  }, function(v2619) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_list_stream(M2.cdr(list_stream_ref(v2619, 0)));
  })), M2.cons(prop_gen_sequence, function(v2620) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, list_stream_ref(v2620, 0), M2.pair_p, false, false);
  })));
  var struct_list_stream = let_result1753.getAt(0);
  var make_list_stream = let_result1753.getAt(1);
  var list_stream_p = let_result1753.getAt(2);
  var list_stream_ref = let_result1753.getAt(3);
  var list_stream_set_bang_ = let_result1753.getAt(4);
  var in_list = function(l2621) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l2621) !== false) {
      var if_res1754 = M2.rvoid();
    } else {
      var if_res1754 = M2.raise_argument_error($rjs_core.Symbol.make("in-list"), $rjs_core.UString.make("list?"), l2621);
    }
    if_res1754;
    return make_list_stream(l2621);
  };
  var __list_gen = function(l2622) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, l2622, M2.pair_p, false, false);
  };
  var in_mlist = function(l2623) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.mpair_p(l2623) !== false) {
      var if_res1755 = M2.rvoid();
    } else {
      var if_res1755 = M2.raise_argument_error($rjs_core.Symbol.make("in-mlist"), $rjs_core.UString.make("mpair?"), l2623);
    }
    if_res1755;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __mlist_gen(l2623);
    });
  };
  var __mlist_gen = function(l2624) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.mcar, false, M2.mcdr, l2624, M2.mpair_p, false, false);
  };
  var in_input_port_bytes = function(p2625) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2625) !== false) {
      var if_res1756 = M2.rvoid();
    } else {
      var if_res1756 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-bytes"), $rjs_core.UString.make("input-port?"), p2625);
    }
    if_res1756;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __input_port_gen(p2625);
    });
  };
  var __input_port_gen = function(p2626) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.__rjs_quoted__.read_byte, false, M2.values, p2626, false, function(x2627) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.not(M2.__rjs_quoted__.eof_object_p(x2627));
    }, false);
  };
  var in_input_port_chars = function(p2628) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2628) !== false) {
      var if_res1757 = M2.rvoid();
    } else {
      var if_res1757 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-chars"), $rjs_core.UString.make("input-port?"), p2628);
    }
    if_res1757;
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_char(p2628);
    }, M2.__rjs_quoted__.eof);
  };
  var check_in_port = function(r2629, p2630) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(r2629) !== false) {
      var if_res1758 = M2.procedure_arity_includes_p(r2629, 1);
    } else {
      var if_res1758 = false;
    }
    if (if_res1758 !== false) {
      var if_res1759 = M2.rvoid();
    } else {
      var if_res1759 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.make("(procedure-arity-includes/c 1)"), r2629);
    }
    if_res1759;
    if (M2.input_port_p(p2630) !== false) {
      var if_res1760 = M2.rvoid();
    } else {
      var if_res1760 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.make("input-port?"), p2630);
    }
    return if_res1760;
  };
  var cl1761 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(M2.__rjs_quoted__.read, M2.__rjs_quoted__.current_input_port());
  };
  var cl1762 = function(r2631) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(r2631, M2.__rjs_quoted__.current_input_port());
  };
  var cl1763 = function(r2632, p2633) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_port(r2632, p2633);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return r2632(p2633);
    }, M2.__rjs_quoted__.eof);
  };
  var in_port = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1764 = {
      '0': cl1761,
      '1': cl1762,
      '2': cl1763
    }[arguments.length];
    if (fixed_lam1764 !== undefined) {
      return fixed_lam1764.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_lines = function(p2634, mode2635) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2634) !== false) {
      var if_res1765 = M2.rvoid();
    } else {
      var if_res1765 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.make("input-port?"), p2634);
    }
    if_res1765;
    if (M0.memq(mode2635, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1766 = M2.rvoid();
    } else {
      var if_res1766 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.make("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2635);
    }
    return if_res1766;
  };
  var cl1767 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1768 = function(p2636) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(p2636, $rjs_core.Symbol.make("any"));
  };
  var cl1769 = function(p2637, mode2638) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_lines(p2637, mode2638);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_line(p2637, mode2638);
    }, M2.__rjs_quoted__.eof);
  };
  var in_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1770 = {
      '0': cl1767,
      '1': cl1768,
      '2': cl1769
    }[arguments.length];
    if (fixed_lam1770 !== undefined) {
      return fixed_lam1770.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_bytes_lines = function(p2639, mode2640) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2639) !== false) {
      var if_res1771 = M2.rvoid();
    } else {
      var if_res1771 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.make("input-port"), p2639);
    }
    if_res1771;
    if (M0.memq(mode2640, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1772 = M2.rvoid();
    } else {
      var if_res1772 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.make("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2640);
    }
    return if_res1772;
  };
  var cl1773 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1774 = function(p2641) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(p2641, $rjs_core.Symbol.make("any"));
  };
  var cl1775 = function(p2642, mode2643) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_bytes_lines(p2642, mode2643);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_bytes_line(p2642, mode2643);
    }, M2.__rjs_quoted__.eof);
  };
  var in_bytes_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1776 = {
      '0': cl1773,
      '1': cl1774,
      '2': cl1775
    }[arguments.length];
    if (fixed_lam1776 !== undefined) {
      return fixed_lam1776.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var in_stream = function(l2644) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(l2644) !== false) {
      var if_res1777 = M2.rvoid();
    } else {
      var if_res1777 = M2.raise_argument_error($rjs_core.Symbol.make("in-stream"), $rjs_core.UString.make("stream?"), l2644);
    }
    if_res1777;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __stream_gen(l2644);
    });
  };
  var __stream_gen = function(l2645) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(unsafe_stream_first, unsafe_stream_rest, M2.values, l2645, unsafe_stream_not_empty_p, false, false);
  };
  var __hash_gen = function(ht2646, __get2647, __first2648, __next2649) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(function(pos2650) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __get2647(ht2646, pos2650);
    }, false, function(pos2651) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __next2649(ht2646, pos2651);
    }, __first2648(ht2646), function(pos2652) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return pos2652;
    }, false, false);
  };
  var mutable_p = function(ht2653) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.immutable_p(ht2653));
  };
  var not_weak_p = function(ht2654) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.__rjs_quoted__.hash_weak_p(ht2654));
  };
  var default_in_hash = function(ht2655) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2656) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2656);
    })(ht2655) !== false) {
      var if_res1778 = M2.rvoid();
    } else {
      var if_res1778 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash"), $rjs_core.UString.make("hash?"), ht2655);
    }
    if_res1778;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2655, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash = function(ht2657) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2658) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2658) !== false) {
        if (mutable_p(ht2658) !== false) {
          var if_res1779 = not_weak_p(ht2658);
        } else {
          var if_res1779 = false;
        }
        var if_res1780 = if_res1779;
      } else {
        var if_res1780 = false;
      }
      return if_res1780;
    })(ht2657) !== false) {
      var if_res1781 = M2.rvoid();
    } else {
      var if_res1781 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash"), $rjs_core.UString.make("(and/c hash? mutable? not-weak?)"), ht2657);
    }
    if_res1781;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2657, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash = function(ht2659) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2660) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2660) !== false) {
        var if_res1782 = M2.immutable_p(ht2660);
      } else {
        var if_res1782 = false;
      }
      return if_res1782;
    })(ht2659) !== false) {
      var if_res1783 = M2.rvoid();
    } else {
      var if_res1783 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash"), $rjs_core.UString.make("(and/c hash? immutable?)"), ht2659);
    }
    if_res1783;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2659, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash = function(ht2661) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2662) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2662) !== false) {
        var if_res1784 = M2.__rjs_quoted__.hash_weak_p(ht2662);
      } else {
        var if_res1784 = false;
      }
      return if_res1784;
    })(ht2661) !== false) {
      var if_res1785 = M2.rvoid();
    } else {
      var if_res1785 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash"), $rjs_core.UString.make("(and/c hash? hash-weak?)"), ht2661);
    }
    if_res1785;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2661, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_keys = function(ht2663) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2664) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2664);
    })(ht2663) !== false) {
      var if_res1786 = M2.rvoid();
    } else {
      var if_res1786 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-keys"), $rjs_core.UString.make("hash?"), ht2663);
    }
    if_res1786;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2663, M2.__rjs_quoted__.hash_iterate_key, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_keys = function(ht2665) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2666) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2666) !== false) {
        if (mutable_p(ht2666) !== false) {
          var if_res1787 = not_weak_p(ht2666);
        } else {
          var if_res1787 = false;
        }
        var if_res1788 = if_res1787;
      } else {
        var if_res1788 = false;
      }
      return if_res1788;
    })(ht2665) !== false) {
      var if_res1789 = M2.rvoid();
    } else {
      var if_res1789 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-keys"), $rjs_core.UString.make("(and/c hash? mutable? not-weak?)"), ht2665);
    }
    if_res1789;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2665, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_keys = function(ht2667) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2668) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2668) !== false) {
        var if_res1790 = M2.immutable_p(ht2668);
      } else {
        var if_res1790 = false;
      }
      return if_res1790;
    })(ht2667) !== false) {
      var if_res1791 = M2.rvoid();
    } else {
      var if_res1791 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-keys"), $rjs_core.UString.make("(and/c hash? immutable?)"), ht2667);
    }
    if_res1791;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2667, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_keys = function(ht2669) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2670) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2670) !== false) {
        var if_res1792 = M2.__rjs_quoted__.hash_weak_p(ht2670);
      } else {
        var if_res1792 = false;
      }
      return if_res1792;
    })(ht2669) !== false) {
      var if_res1793 = M2.rvoid();
    } else {
      var if_res1793 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-keys"), $rjs_core.UString.make("(and/c hash? hash-weak?)"), ht2669);
    }
    if_res1793;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2669, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_values = function(ht2671) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2672) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2672);
    })(ht2671) !== false) {
      var if_res1794 = M2.rvoid();
    } else {
      var if_res1794 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-values"), $rjs_core.UString.make("hash?"), ht2671);
    }
    if_res1794;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2671, M2.__rjs_quoted__.hash_iterate_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_values = function(ht2673) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2674) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2674) !== false) {
        if (mutable_p(ht2674) !== false) {
          var if_res1795 = not_weak_p(ht2674);
        } else {
          var if_res1795 = false;
        }
        var if_res1796 = if_res1795;
      } else {
        var if_res1796 = false;
      }
      return if_res1796;
    })(ht2673) !== false) {
      var if_res1797 = M2.rvoid();
    } else {
      var if_res1797 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-values"), $rjs_core.UString.make("(and/c hash? mutable? not-weak?)"), ht2673);
    }
    if_res1797;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2673, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_values = function(ht2675) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2676) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2676) !== false) {
        var if_res1798 = M2.immutable_p(ht2676);
      } else {
        var if_res1798 = false;
      }
      return if_res1798;
    })(ht2675) !== false) {
      var if_res1799 = M2.rvoid();
    } else {
      var if_res1799 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-values"), $rjs_core.UString.make("(and/c hash? immutable?)"), ht2675);
    }
    if_res1799;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2675, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_values = function(ht2677) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2678) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2678) !== false) {
        var if_res1800 = M2.__rjs_quoted__.hash_weak_p(ht2678);
      } else {
        var if_res1800 = false;
      }
      return if_res1800;
    })(ht2677) !== false) {
      var if_res1801 = M2.rvoid();
    } else {
      var if_res1801 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-values"), $rjs_core.UString.make("(and/c hash? hash-weak?)"), ht2677);
    }
    if_res1801;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2677, M5.__rjs_quoted__.unsafe_weak_hash_iterate_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_pairs = function(ht2679) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2680) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2680);
    })(ht2679) !== false) {
      var if_res1802 = M2.rvoid();
    } else {
      var if_res1802 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-pairs"), $rjs_core.UString.make("hash?"), ht2679);
    }
    if_res1802;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2679, M2.__rjs_quoted__.hash_iterate_pair, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_pairs = function(ht2681) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2682) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2682) !== false) {
        if (mutable_p(ht2682) !== false) {
          var if_res1803 = not_weak_p(ht2682);
        } else {
          var if_res1803 = false;
        }
        var if_res1804 = if_res1803;
      } else {
        var if_res1804 = false;
      }
      return if_res1804;
    })(ht2681) !== false) {
      var if_res1805 = M2.rvoid();
    } else {
      var if_res1805 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-pairs"), $rjs_core.UString.make("(and/c hash? mutable? not-weak?)"), ht2681);
    }
    if_res1805;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2681, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_pairs = function(ht2683) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2684) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2684) !== false) {
        var if_res1806 = M2.immutable_p(ht2684);
      } else {
        var if_res1806 = false;
      }
      return if_res1806;
    })(ht2683) !== false) {
      var if_res1807 = M2.rvoid();
    } else {
      var if_res1807 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-pairs"), $rjs_core.UString.make("(and/c hash? immutable?)"), ht2683);
    }
    if_res1807;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2683, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_pairs = function(ht2685) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2686) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2686) !== false) {
        var if_res1808 = M2.__rjs_quoted__.hash_weak_p(ht2686);
      } else {
        var if_res1808 = false;
      }
      return if_res1808;
    })(ht2685) !== false) {
      var if_res1809 = M2.rvoid();
    } else {
      var if_res1809 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-pairs"), $rjs_core.UString.make("(and/c hash? hash-weak?)"), ht2685);
    }
    if_res1809;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2685, M5.__rjs_quoted__.unsafe_weak_hash_iterate_pair, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var check_ranges = function(who2687, vec2688, start2689, stop2690, step2691, len2692) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(start2689) !== false) {
      var or_part2693 = M2.__lt_(start2689, len2692);
      if (or_part2693 !== false) {
        var if_res1810 = or_part2693;
      } else {
        var if_res1810 = M2.__eq_(len2692, start2689, stop2690);
      }
      var if_res1811 = if_res1810;
    } else {
      var if_res1811 = false;
    }
    if (if_res1811 !== false) {
      var if_res1812 = M2.rvoid();
    } else {
      var if_res1812 = M2.__rjs_quoted__.raise_range_error(who2687, $rjs_core.UString.make("vector"), $rjs_core.UString.make("starting "), start2689, vec2688, 0, M2.sub1(len2692));
    }
    if_res1812;
    if (M2.exact_integer_p(stop2690) !== false) {
      if (M2.__lt__eq_(-1, stop2690) !== false) {
        var if_res1813 = M2.__lt__eq_(stop2690, len2692);
      } else {
        var if_res1813 = false;
      }
      var if_res1814 = if_res1813;
    } else {
      var if_res1814 = false;
    }
    if (if_res1814 !== false) {
      var if_res1815 = M2.rvoid();
    } else {
      var if_res1815 = M2.__rjs_quoted__.raise_range_error(who2687, $rjs_core.UString.make("vector"), $rjs_core.UString.make("stopping "), stop2690, vec2688, -1, len2692);
    }
    if_res1815;
    if (M2.exact_integer_p(step2691) !== false) {
      var if_res1816 = M2.not(M2.zero_p(step2691));
    } else {
      var if_res1816 = false;
    }
    if (if_res1816 !== false) {
      var if_res1817 = M2.rvoid();
    } else {
      var if_res1817 = M2.raise_argument_error(who2687, $rjs_core.UString.make("(and/c exact-integer? (not/c zero?))"), step2691);
    }
    if_res1817;
    if (M2.__lt_(start2689, stop2690) !== false) {
      var if_res1818 = M2.__lt_(step2691, 0);
    } else {
      var if_res1818 = false;
    }
    if (if_res1818 !== false) {
      var if_res1819 = M2.__rjs_quoted__.raise_arguments_error(who2687, $rjs_core.UString.make("starting index less than stopping index, but given a negative step"), $rjs_core.UString.make("starting index"), start2689, $rjs_core.UString.make("stopping index"), stop2690, $rjs_core.UString.make("step"), step2691);
    } else {
      var if_res1819 = M2.rvoid();
    }
    if_res1819;
    if (M2.__lt_(stop2690, start2689) !== false) {
      var if_res1820 = M2.__gt_(step2691, 0);
    } else {
      var if_res1820 = false;
    }
    if (if_res1820 !== false) {
      var if_res1821 = M2.__rjs_quoted__.raise_arguments_error(who2687, $rjs_core.UString.make("starting index more than stopping index, but given a positive step"), $rjs_core.UString.make("starting index"), start2689, $rjs_core.UString.make("stopping index"), stop2690, $rjs_core.UString.make("step"), step2691);
    } else {
      var if_res1821 = M2.rvoid();
    }
    return if_res1821;
  };
  var normalise_inputs = function(who2694, type_name2695, vector_p2696, unsafe_vector_length2697, vec2698, start2699, stop2700, step2701) {
    if (arguments.length !== 8) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (vector_p2696(vec2698) !== false) {
      var if_res1822 = M2.rvoid();
    } else {
      var if_res1822 = M2.raise_argument_error(who2694, type_name2695, vec2698);
    }
    if_res1822;
    var len2702 = unsafe_vector_length2697(vec2698);
    if (stop2700 !== false) {
      var if_res1823 = stop2700;
    } else {
      var if_res1823 = len2702;
    }
    var stop_times_2703 = if_res1823;
    check_ranges(who2694, vec2698, start2699, stop_times_2703, step2701, len2702);
    return M2.values(vec2698, start2699, stop_times_2703, step2701);
  };
  var __vector_gen = function(v2704, start2705, stop2706, step2707) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2707, 1) !== false) {
      var if_res1825 = M2.add1;
    } else {
      var if_res1825 = function(i2709) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2709 + step2707;
      };
    }
    if (M2.__gt_(step2707, 0) !== false) {
      var if_res1824 = function(i2710) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2710, stop2706);
      };
    } else {
      var if_res1824 = function(i2711) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2711, stop2706);
      };
    }
    return M2.values(function(i2708) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.unsafe_vector_ref(v2704, i2708);
    }, false, if_res1825, start2705, if_res1824, false, false);
  };
  var cl1826 = function(v2712) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2712, 0, false, 1);
  };
  var cl1827 = function(v2713, start2714) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2713, start2714, false, 1);
  };
  var cl1828 = function(v2715, start2716, stop2717) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2715, start2716, stop2717, 1);
  };
  var cl1829 = function(v2718, start2719, stop2720, step2721) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1831 = normalise_inputs($rjs_core.Symbol.make("in-vector"), $rjs_core.UString.make("vector"), M2.vector_p, M2.vector_length, v2718, start2719, stop2720, step2721);
    var v2722 = let_result1831.getAt(0);
    var start2723 = let_result1831.getAt(1);
    var stop2724 = let_result1831.getAt(2);
    var step2725 = let_result1831.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __vector_gen(v2722, start2723, stop2724, step2725);
    });
  };
  var in_vector = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1830 = {
      '1': cl1826,
      '2': cl1827,
      '3': cl1828,
      '4': cl1829
    }[arguments.length];
    if (fixed_lam1830 !== undefined) {
      return fixed_lam1830.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __string_gen = function(v2726, start2727, stop2728, step2729) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2729, 1) !== false) {
      var if_res1833 = M2.add1;
    } else {
      var if_res1833 = function(i2731) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2731 + step2729;
      };
    }
    if (M2.__gt_(step2729, 0) !== false) {
      var if_res1832 = function(i2732) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2732, stop2728);
      };
    } else {
      var if_res1832 = function(i2733) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2733, stop2728);
      };
    }
    return M2.values(function(i2730) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.string_ref(v2726, i2730);
    }, false, if_res1833, start2727, if_res1832, false, false);
  };
  var cl1834 = function(v2734) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2734, 0, false, 1);
  };
  var cl1835 = function(v2735, start2736) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2735, start2736, false, 1);
  };
  var cl1836 = function(v2737, start2738, stop2739) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2737, start2738, stop2739, 1);
  };
  var cl1837 = function(v2740, start2741, stop2742, step2743) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1839 = normalise_inputs($rjs_core.Symbol.make("in-string"), $rjs_core.UString.make("string"), M2.string_p, M2.string_length, v2740, start2741, stop2742, step2743);
    var v2744 = let_result1839.getAt(0);
    var start2745 = let_result1839.getAt(1);
    var stop2746 = let_result1839.getAt(2);
    var step2747 = let_result1839.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __string_gen(v2744, start2745, stop2746, step2747);
    });
  };
  var in_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1838 = {
      '1': cl1834,
      '2': cl1835,
      '3': cl1836,
      '4': cl1837
    }[arguments.length];
    if (fixed_lam1838 !== undefined) {
      return fixed_lam1838.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __bytes_gen = function(v2748, start2749, stop2750, step2751) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2751, 1) !== false) {
      var if_res1841 = M2.add1;
    } else {
      var if_res1841 = function(i2753) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2753 + step2751;
      };
    }
    if (M2.__gt_(step2751, 0) !== false) {
      var if_res1840 = function(i2754) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2754, stop2750);
      };
    } else {
      var if_res1840 = function(i2755) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2755, stop2750);
      };
    }
    return M2.values(function(i2752) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_bytes_ref(v2748, i2752);
    }, false, if_res1841, start2749, if_res1840, false, false);
  };
  var cl1842 = function(v2756) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2756, 0, false, 1);
  };
  var cl1843 = function(v2757, start2758) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2757, start2758, false, 1);
  };
  var cl1844 = function(v2759, start2760, stop2761) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2759, start2760, stop2761, 1);
  };
  var cl1845 = function(v2762, start2763, stop2764, step2765) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1847 = normalise_inputs($rjs_core.Symbol.make("in-bytes"), $rjs_core.UString.make("bytes"), M2.bytes_p, M2.__rjs_quoted__.bytes_length, v2762, start2763, stop2764, step2765);
    var v2766 = let_result1847.getAt(0);
    var start2767 = let_result1847.getAt(1);
    var stop2768 = let_result1847.getAt(2);
    var step2769 = let_result1847.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __bytes_gen(v2766, start2767, stop2768, step2769);
    });
  };
  var in_bytes = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1846 = {
      '1': cl1842,
      '2': cl1843,
      '3': cl1844,
      '4': cl1845
    }[arguments.length];
    if (fixed_lam1846 !== undefined) {
      return fixed_lam1846.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __flvector_gen = function(v2770, start2771, stop2772, step2773) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2773, 1) !== false) {
      var if_res1849 = M2.add1;
    } else {
      var if_res1849 = function(i2775) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2775 + step2773;
      };
    }
    if (M2.__gt_(step2773, 0) !== false) {
      var if_res1848 = function(i2776) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2776, stop2772);
      };
    } else {
      var if_res1848 = function(i2777) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2777, stop2772);
      };
    }
    return M2.values(function(i2774) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_flvector_ref(v2770, i2774);
    }, false, if_res1849, start2771, if_res1848, false, false);
  };
  var __fxvector_gen = function(v2778, start2779, stop2780, step2781) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2781, 1) !== false) {
      var if_res1851 = M2.add1;
    } else {
      var if_res1851 = function(i2783) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2783 + step2781;
      };
    }
    if (M2.__gt_(step2781, 0) !== false) {
      var if_res1850 = function(i2784) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2784, stop2780);
      };
    } else {
      var if_res1850 = function(i2785) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2785, stop2780);
      };
    }
    return M2.values(function(i2782) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_fxvector_ref(v2778, i2782);
    }, false, if_res1851, start2779, if_res1850, false, false);
  };
  var stop_before = function(g2786, pred2787) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2786) !== false) {
      var if_res1852 = M2.rvoid();
    } else {
      var if_res1852 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.make("sequence?"), g2786);
    }
    if_res1852;
    if (M2.procedure_p(pred2787) !== false) {
      var if_res1853 = M2.procedure_arity_includes_p(pred2787, 1);
    } else {
      var if_res1853 = false;
    }
    if (if_res1853 !== false) {
      var if_res1854 = M2.rvoid();
    } else {
      var if_res1854 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.make("(procedure-arity-includes/c 1)"), pred2787);
    }
    if_res1854;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1855 = make_sequence(false, g2786);
      var pos__gt_val2788 = let_result1855.getAt(0);
      var pre_pos_next2789 = let_result1855.getAt(1);
      var pos_next2790 = let_result1855.getAt(2);
      var init2791 = let_result1855.getAt(3);
      var pos_cont_p2792 = let_result1855.getAt(4);
      var pre_cont_p2793 = let_result1855.getAt(5);
      var post_cont_p2794 = let_result1855.getAt(6);
      var cl1856 = function(val2795) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pre_cont_p2793 !== false) {
          var if_res1860 = pre_cont_p2793(val2795);
        } else {
          var if_res1860 = true;
        }
        if (if_res1860 !== false) {
          var if_res1861 = M2.not(pred2787(val2795));
        } else {
          var if_res1861 = false;
        }
        return if_res1861;
      };
      var cl1857 = $rjs_core.attachProcedureArity(function() {
        for (var vals27961862 = [],
            $__1 = 0; $__1 < arguments.length; $__1++)
          vals27961862[$__1] = arguments[$__1];
        var vals2796 = $rjs_core.Pair.listFromArray(vals27961862);
        if (pre_cont_p2793 !== false) {
          var if_res1863 = M2.apply(pre_cont_p2793, vals2796);
        } else {
          var if_res1863 = true;
        }
        if (if_res1863 !== false) {
          var if_res1864 = M2.not(M2.apply(pred2787, vals2796));
        } else {
          var if_res1864 = false;
        }
        return if_res1864;
      });
      return M2.values(pos__gt_val2788, pre_pos_next2789, pos_next2790, init2791, pos_cont_p2792, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1858 = {'1': cl1856}[arguments.length];
        if (fixed_lam1858 !== undefined) {
          return fixed_lam1858.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1859 = cl1857.apply(null, arguments);
          } else {
            var if_res1859 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
          }
          return if_res1859;
        }
      }, [M2.make_arity_at_least(0)]), post_cont_p2794);
    });
  };
  var stop_after = function(g2797, pred2798) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2797) !== false) {
      var if_res1865 = M2.rvoid();
    } else {
      var if_res1865 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.make("sequence?"), g2797);
    }
    if_res1865;
    if (M2.procedure_p(pred2798) !== false) {
      var if_res1866 = M2.procedure_arity_includes_p(pred2798, 1);
    } else {
      var if_res1866 = false;
    }
    if (if_res1866 !== false) {
      var if_res1867 = M2.rvoid();
    } else {
      var if_res1867 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.make("(procedure-arity-includes/c 1)"), pred2798);
    }
    if_res1867;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1868 = make_sequence(false, g2797);
      var pos__gt_val2799 = let_result1868.getAt(0);
      var pre_pos_next2800 = let_result1868.getAt(1);
      var pos_next2801 = let_result1868.getAt(2);
      var init2802 = let_result1868.getAt(3);
      var pos_cont_p2803 = let_result1868.getAt(4);
      var pre_cont_p2804 = let_result1868.getAt(5);
      var post_cont_p2805 = let_result1868.getAt(6);
      var cl1869 = function(pos2806, val2807) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (post_cont_p2805 !== false) {
          var if_res1873 = post_cont_p2805(pos2806, val2807);
        } else {
          var if_res1873 = true;
        }
        if (if_res1873 !== false) {
          var if_res1874 = M2.not(pred2798(val2807));
        } else {
          var if_res1874 = false;
        }
        return if_res1874;
      };
      var cl1870 = $rjs_core.attachProcedureArity(function(pos2808) {
        for (var vals28091875 = [],
            $__1 = 1; $__1 < arguments.length; $__1++)
          vals28091875[$__1 - 1] = arguments[$__1];
        if (arguments.length < 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var vals2809 = $rjs_core.Pair.listFromArray(vals28091875);
        if (post_cont_p2805 !== false) {
          var if_res1876 = M2.apply(post_cont_p2805, pos2808, vals2809);
        } else {
          var if_res1876 = true;
        }
        if (if_res1876 !== false) {
          var if_res1877 = M2.not(M2.apply(pred2798, vals2809));
        } else {
          var if_res1877 = false;
        }
        return if_res1877;
      });
      return M2.values(pos__gt_val2799, pre_pos_next2800, pos_next2801, init2802, pos_cont_p2803, pre_cont_p2804, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1871 = {'2': cl1869}[arguments.length];
        if (fixed_lam1871 !== undefined) {
          return fixed_lam1871.apply(null, arguments);
        } else {
          if (M2.__gt__eq_(cl1870.length, 1) !== false) {
            var if_res1872 = cl1870.apply(null, arguments);
          } else {
            var if_res1872 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
          }
          return if_res1872;
        }
      }, [M2.make_arity_at_least(1)]));
    });
  };
  var in_indexed = function(g2810) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2810) !== false) {
      var if_res1878 = M2.rvoid();
    } else {
      var if_res1878 = M2.raise_argument_error($rjs_core.Symbol.make("in-indexed"), $rjs_core.UString.make("sequence?"), g2810);
    }
    if_res1878;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1879 = make_sequence(false, g2810);
      var pos__gt_val2811 = let_result1879.getAt(0);
      var pre_pos_next2812 = let_result1879.getAt(1);
      var pos_next2813 = let_result1879.getAt(2);
      var init2814 = let_result1879.getAt(3);
      var pos_cont_p2815 = let_result1879.getAt(4);
      var pre_cont_p2816 = let_result1879.getAt(5);
      var post_cont_p2817 = let_result1879.getAt(6);
      if (pre_pos_next2812 !== false) {
        var if_res1884 = function(pos2819) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.cons(pre_pos_next2812(M2.car(pos2819)), M2.cdr(pos2819));
        };
      } else {
        var if_res1884 = false;
      }
      var temp1883 = M2.cons(init2814, 0);
      if (pos_cont_p2815 !== false) {
        var if_res1882 = function(pos2821) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos_cont_p2815(M2.car(pos2821));
        };
      } else {
        var if_res1882 = false;
      }
      if (pre_cont_p2816 !== false) {
        var if_res1881 = function(val2822, idx2823) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pre_cont_p2816(val2822);
        };
      } else {
        var if_res1881 = false;
      }
      if (post_cont_p2817 !== false) {
        var if_res1880 = function(pos2824, val2825, idx2826) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return post_cont_p2817(pos2824, val2825);
        };
      } else {
        var if_res1880 = false;
      }
      return M2.values(function(pos2818) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.values(pos__gt_val2811(M2.car(pos2818)), M2.cdr(pos2818));
      }, if_res1884, function(pos2820) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cons(pos_next2813(M2.car(pos2820)), M2.add1(M2.cdr(pos2820)));
      }, temp1883, if_res1882, if_res1881, if_res1880);
    });
  };
  var in_value = function(v2827) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(pos2828) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return v2827;
      }, function(pos2829) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return false;
      }, true, function(pos2830) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return pos2830;
      }, false, false);
    });
  };
  var in_values_sequence = function(g2831) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2831) !== false) {
      var if_res1885 = M2.rvoid();
    } else {
      var if_res1885 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.make("sequence?"), g2831);
    }
    if_res1885;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1886 = make_sequence(false, g2831);
      var pos__gt_val2832 = let_result1886.getAt(0);
      var pre_pos_next2833 = let_result1886.getAt(1);
      var pos_next2834 = let_result1886.getAt(2);
      var init2835 = let_result1886.getAt(3);
      var pos_cont_p2836 = let_result1886.getAt(4);
      var pre_cont_p2837 = let_result1886.getAt(5);
      var post_cont_p2838 = let_result1886.getAt(6);
      if (pre_cont_p2837 !== false) {
        var if_res1888 = function(vals2840) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(pre_cont_p2837, vals2840);
        };
      } else {
        var if_res1888 = false;
      }
      if (post_cont_p2838 !== false) {
        var if_res1887 = function(pos2841, vals2842) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(post_cont_p2838, pos2841, vals2842);
        };
      } else {
        var if_res1887 = false;
      }
      return M2.values(function(pos2839) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2832(pos2839);
        }, M2.list);
      }, pre_pos_next2833, pos_next2834, init2835, pos_cont_p2836, if_res1888, if_res1887);
    });
  };
  var in_values_times__sequence = function(g2843) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2843) !== false) {
      var if_res1889 = M2.rvoid();
    } else {
      var if_res1889 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.make("sequence?"), g2843);
    }
    if_res1889;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1890 = make_sequence(false, g2843);
      var pos__gt_val2844 = let_result1890.getAt(0);
      var pre_pos_next2845 = let_result1890.getAt(1);
      var pos_next2846 = let_result1890.getAt(2);
      var init2847 = let_result1890.getAt(3);
      var pos_cont_p2848 = let_result1890.getAt(4);
      var pre_cont_p2849 = let_result1890.getAt(5);
      var post_cont_p2850 = let_result1890.getAt(6);
      if (pre_cont_p2849 !== false) {
        var if_res1894 = function(vals2854) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2854) !== false) {
            var if_res1893 = M2.apply(pre_cont_p2849, vals2854);
          } else {
            var if_res1893 = pre_cont_p2849(vals2854);
          }
          return if_res1893;
        };
      } else {
        var if_res1894 = false;
      }
      if (post_cont_p2850 !== false) {
        var if_res1892 = function(pos2855, vals2856) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2856) !== false) {
            var if_res1891 = M2.apply(post_cont_p2850, pos2855, vals2856);
          } else {
            var if_res1891 = post_cont_p2850(pos2855, vals2856);
          }
          return if_res1891;
        };
      } else {
        var if_res1892 = false;
      }
      return M2.values(function(pos2851) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var cl1895 = function(v2852) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(v2852) !== false) {
            var if_res1899 = M2.list(v2852);
          } else {
            var if_res1899 = v2852;
          }
          return if_res1899;
        };
        var cl1896 = $rjs_core.attachProcedureArity(function() {
          for (var vs28531900 = [],
              $__1 = 0; $__1 < arguments.length; $__1++)
            vs28531900[$__1] = arguments[$__1];
          var vs2853 = $rjs_core.Pair.listFromArray(vs28531900);
          return vs2853;
        });
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2844(pos2851);
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1897 = {'1': cl1895}[arguments.length];
          if (fixed_lam1897 !== undefined) {
            return fixed_lam1897.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1898 = cl1896.apply(null, arguments);
            } else {
              var if_res1898 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
            }
            return if_res1898;
          }
        }, [M2.make_arity_at_least(0)]));
      }, pre_pos_next2845, pos_next2846, init2847, pos_cont_p2848, if_res1894, if_res1892);
    });
  };
  var append_sequences = function(sequences2857, cyclic_p2858) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var seqs__gt_m_plus_g_plus_r2859 = function(seqs2860) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(seqs2860) !== false) {
        var let_result1901 = sequence_generate(M2.car(seqs2860));
        var more_p2861 = let_result1901.getAt(0);
        var get2862 = let_result1901.getAt(1);
        var seqs2863 = M2.cdr(seqs2860);
        if (more_p2861() !== false) {
          var if_res1902 = M2.list_times_(more_p2861, get2862, seqs2863);
        } else {
          var if_res1902 = seqs__gt_m_plus_g_plus_r2859(seqs2863);
        }
        var if_res1904 = if_res1902;
      } else {
        if (cyclic_p2858 !== false) {
          var if_res1903 = seqs__gt_m_plus_g_plus_r2859(sequences2857);
        } else {
          var if_res1903 = false;
        }
        var if_res1904 = if_res1903;
      }
      return if_res1904;
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(m_plus_g_plus_r2864) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cadr(m_plus_g_plus_r2864)();
      }, function(m_plus_g_plus_r2865) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(m_plus_g_plus_r2865) !== false) {
          var if_res1905 = M2.not(M2.car(m_plus_g_plus_r2865)());
        } else {
          var if_res1905 = false;
        }
        if (if_res1905 !== false) {
          var if_res1906 = seqs__gt_m_plus_g_plus_r2859(M2.cddr(m_plus_g_plus_r2865));
        } else {
          var if_res1906 = m_plus_g_plus_r2865;
        }
        return if_res1906;
      }, seqs__gt_m_plus_g_plus_r2859(sequences2857), M2.values, false, false);
    });
  };
  var check_sequences = function(who2866, sequences2867) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.for_each(function(g2868) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (sequence_p(g2868) !== false) {
        var if_res1907 = M2.rvoid();
      } else {
        var if_res1907 = M2.raise_argument_error(who2866, $rjs_core.UString.make("sequence?"), g2868);
      }
      return if_res1907;
    }, sequences2867);
  };
  var in_sequences = $rjs_core.attachProcedureArity(function() {
    for (var sequences28691908 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      sequences28691908[$__1] = arguments[$__1];
    var sequences2869 = $rjs_core.Pair.listFromArray(sequences28691908);
    check_sequences($rjs_core.Symbol.make("in-sequences"), sequences2869);
    if (M2.pair_p(sequences2869) !== false) {
      var if_res1909 = M2.null_p(M2.cdr(sequences2869));
    } else {
      var if_res1909 = false;
    }
    if (if_res1909 !== false) {
      var if_res1910 = M2.car(sequences2869);
    } else {
      var if_res1910 = append_sequences(sequences2869, false);
    }
    return if_res1910;
  });
  var in_cycle = $rjs_core.attachProcedureArity(function() {
    for (var sequences28701911 = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      sequences28701911[$__2] = arguments[$__2];
    var sequences2870 = $rjs_core.Pair.listFromArray(sequences28701911);
    check_sequences($rjs_core.Symbol.make("in-cycle"), sequences2870);
    return append_sequences(sequences2870, true);
  });
  var in_parallel = $rjs_core.attachProcedureArity(function() {
    for (var sequences28711912 = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      sequences28711912[$__3] = arguments[$__3];
    var sequences2871 = $rjs_core.Pair.listFromArray(sequences28711912);
    check_sequences($rjs_core.Symbol.make("in-parallel"), sequences2871);
    if (M2.__eq_(1, M2.length(sequences2871)) !== false) {
      var if_res1939 = M2.car(sequences2871);
    } else {
      var if_res1939 = make_do_sequence(function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var let_result1913 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("g")), sequences2871);
        var pos__gt_vals2886 = let_result1913.getAt(0);
        var pos_pre_inc2887 = let_result1913.getAt(1);
        var pos_next2888 = let_result1913.getAt(2);
        var init2889 = let_result1913.getAt(3);
        var pos_cont_p2890 = let_result1913.getAt(4);
        var val_cont_p2891 = let_result1913.getAt(5);
        var all_cont_p2892 = let_result1913.getAt(6);
        M2.rvoid();
        var for_loop2893 = function(p__gt_v2894, p_p_n2895, p_n2896, i2897, ps_p2898, pr_p2899, po_p2900, pos2901) {
          if (arguments.length !== 8) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (pos_cont_p2890 !== false) {
            var if_res1914 = pos_cont_p2890(pos2901);
          } else {
            var if_res1914 = true;
          }
          if (if_res1914 !== false) {
            var g2905 = pos__gt_vals2886(pos2901);
            if (all_cont_p2892 !== false) {
              var if_res1915 = function(pos2906) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return all_cont_p2892(pos2906, g2905);
              };
            } else {
              var if_res1915 = false;
            }
            var let_result1916 = M2.values(g2905, if_res1915);
            var g2902 = let_result1916.getAt(0);
            var all_cont_p_by_pos2903 = let_result1916.getAt(1);
            if (pos_pre_inc2887 !== false) {
              var if_res1917 = pos_pre_inc2887(pos2901);
            } else {
              var if_res1917 = pos2901;
            }
            var pos2904 = if_res1917;
            if (val_cont_p2891 !== false) {
              var if_res1918 = val_cont_p2891(g2902);
            } else {
              var if_res1918 = true;
            }
            if (if_res1918 !== false) {
              var p__gt_v2914 = p__gt_v2894;
              var p_p_n2915 = p_p_n2895;
              var p_n2916 = p_n2896;
              var i2917 = i2897;
              var ps_p2918 = ps_p2898;
              var pr_p2919 = pr_p2899;
              var po_p2920 = po_p2900;
              var let_result1919 = make_sequence(false, g2902);
              var p__gt_v12928 = let_result1919.getAt(0);
              var p_p_n22929 = let_result1919.getAt(1);
              var p_n32930 = let_result1919.getAt(2);
              var i42931 = let_result1919.getAt(3);
              var ps_p52932 = let_result1919.getAt(4);
              var pr_p62933 = let_result1919.getAt(5);
              var po_p72934 = let_result1919.getAt(6);
              var let_result1920 = M2.values(M2.cons(p__gt_v12928, p__gt_v2914), M2.cons(p_p_n22929, p_p_n2915), M2.cons(p_n32930, p_n2916), M2.cons(i42931, i2917), M2.cons(ps_p52932, ps_p2918), M2.cons(pr_p62933, pr_p2919), M2.cons(po_p72934, po_p2920));
              var p__gt_v2921 = let_result1920.getAt(0);
              var p_p_n2922 = let_result1920.getAt(1);
              var p_n2923 = let_result1920.getAt(2);
              var i2924 = let_result1920.getAt(3);
              var ps_p2925 = let_result1920.getAt(4);
              var pr_p2926 = let_result1920.getAt(5);
              var po_p2927 = let_result1920.getAt(6);
              var let_result1921 = M2.values(p__gt_v2921, p_p_n2922, p_n2923, i2924, ps_p2925, pr_p2926, po_p2927);
              var p__gt_v2907 = let_result1921.getAt(0);
              var p_p_n2908 = let_result1921.getAt(1);
              var p_n2909 = let_result1921.getAt(2);
              var i2910 = let_result1921.getAt(3);
              var ps_p2911 = let_result1921.getAt(4);
              var pr_p2912 = let_result1921.getAt(5);
              var po_p2913 = let_result1921.getAt(6);
              if (all_cont_p_by_pos2903 !== false) {
                var if_res1922 = all_cont_p_by_pos2903(pos2904);
              } else {
                var if_res1922 = true;
              }
              if (if_res1922 !== false) {
                var if_res1923 = M2.not(false);
              } else {
                var if_res1923 = false;
              }
              if (if_res1923 !== false) {
                var if_res1924 = for_loop2893(p__gt_v2907, p_p_n2908, p_n2909, i2910, ps_p2911, pr_p2912, po_p2913, pos_next2888(pos2904));
              } else {
                var if_res1924 = M2.values(p__gt_v2907, p_p_n2908, p_n2909, i2910, ps_p2911, pr_p2912, po_p2913);
              }
              var if_res1925 = if_res1924;
            } else {
              var if_res1925 = M2.values(p__gt_v2894, p_p_n2895, p_n2896, i2897, ps_p2898, pr_p2899, po_p2900);
            }
            var if_res1926 = if_res1925;
          } else {
            var if_res1926 = M2.values(p__gt_v2894, p_p_n2895, p_n2896, i2897, ps_p2898, pr_p2899, po_p2900);
          }
          return if_res1926;
        };
        var let_result1927 = for_loop2893(M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, init2889);
        var p__gt_v2879 = let_result1927.getAt(0);
        var p_p_n2880 = let_result1927.getAt(1);
        var p_n2881 = let_result1927.getAt(2);
        var i2882 = let_result1927.getAt(3);
        var ps_p2883 = let_result1927.getAt(4);
        var pr_p2884 = let_result1927.getAt(5);
        var po_p2885 = let_result1927.getAt(6);
        var let_result1928 = M2.values(M4.alt_reverse(p__gt_v2879), M4.alt_reverse(p_p_n2880), M4.alt_reverse(p_n2881), M4.alt_reverse(i2882), M4.alt_reverse(ps_p2883), M4.alt_reverse(pr_p2884), M4.alt_reverse(po_p2885));
        var pos__gt_vals2872 = let_result1928.getAt(0);
        var pre_pos_nexts2873 = let_result1928.getAt(1);
        var pos_nexts2874 = let_result1928.getAt(2);
        var inits2875 = let_result1928.getAt(3);
        var pos_cont_ps2876 = let_result1928.getAt(4);
        var pre_cont_ps2877 = let_result1928.getAt(5);
        var post_cont_ps2878 = let_result1928.getAt(6);
        if (M2.ormap(M2.values, pre_pos_nexts2873) !== false) {
          var if_res1938 = function(poses2938) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.map(function(pre_pos_next2939, pos2940) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_pos_next2939 !== false) {
                var if_res1937 = pre_pos_next2939(pos2940);
              } else {
                var if_res1937 = pos2940;
              }
              return if_res1937;
            }, pre_pos_nexts2873, poses2938);
          };
        } else {
          var if_res1938 = false;
        }
        if (M2.ormap(M2.values, pos_cont_ps2876) !== false) {
          var if_res1936 = function(poses2944) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.andmap(function(pos_cont_p2945, pos2946) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pos_cont_p2945 !== false) {
                var if_res1935 = pos_cont_p2945(pos2946);
              } else {
                var if_res1935 = true;
              }
              return if_res1935;
            }, pos_cont_ps2876, poses2944);
          };
        } else {
          var if_res1936 = false;
        }
        if (M2.ormap(M2.values, pre_cont_ps2877) !== false) {
          var if_res1934 = $rjs_core.attachProcedureArity(function() {
            for (var vals29471932 = [],
                $__4 = 0; $__4 < arguments.length; $__4++)
              vals29471932[$__4] = arguments[$__4];
            var vals2947 = $rjs_core.Pair.listFromArray(vals29471932);
            return M2.andmap(function(pre_cont_p2948, val2949) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_cont_p2948 !== false) {
                var if_res1933 = pre_cont_p2948(val2949);
              } else {
                var if_res1933 = true;
              }
              return if_res1933;
            }, pre_cont_ps2877, vals2947);
          });
        } else {
          var if_res1934 = false;
        }
        if (M2.ormap(M2.values, post_cont_ps2878) !== false) {
          var if_res1931 = $rjs_core.attachProcedureArity(function(poses2950) {
            for (var vals29511929 = [],
                $__5 = 1; $__5 < arguments.length; $__5++)
              vals29511929[$__5 - 1] = arguments[$__5];
            if (arguments.length < 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2951 = $rjs_core.Pair.listFromArray(vals29511929);
            return M2.andmap(function(post_cont_p2952, pos2953, val2954) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p2952 !== false) {
                var if_res1930 = post_cont_p2952(pos2953, val2954);
              } else {
                var if_res1930 = true;
              }
              return if_res1930;
            }, post_cont_ps2878, poses2950, vals2951);
          });
        } else {
          var if_res1931 = false;
        }
        return M2.values(function(poses2935) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(M2.values, M2.map(function(pos__gt_val2936, pos2937) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos__gt_val2936(pos2937);
          }, pos__gt_vals2872, poses2935));
        }, if_res1938, function(poses2941) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.map(function(pos_next2942, pos2943) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos_next2942(pos2943);
          }, pos_nexts2874, poses2941);
        }, inits2875, if_res1936, if_res1934, if_res1931);
      });
    }
    return if_res1939;
  });
  var cl1940 = function(producer2955) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values($rjs_core.attachProcedureArity(function() {
        for (var _29561944 = [],
            $__4 = 0; $__4 < arguments.length; $__4++)
          _29561944[$__4] = arguments[$__4];
        var _2956 = $rjs_core.Pair.listFromArray(_29561944);
        return producer2955();
      }), M2.rvoid, M2.rvoid(), false, false, false);
    });
  };
  var cl1941 = $rjs_core.attachProcedureArity(function(producer2957, stop2958) {
    for (var more29591945 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      more29591945[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var more2959 = $rjs_core.Pair.listFromArray(more29591945);
    if (M2.null_p(more2959) !== false) {
      var if_res1946 = function(_2961) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return producer2957();
      };
    } else {
      var if_res1946 = function(_2962) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.apply(producer2957, more2959);
      };
    }
    var produce_bang_2960 = if_res1946;
    if (M2.not(M2.procedure_p(stop2958)) !== false) {
      var if_res1949 = function(x2964) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.not(M2.eq_p(x2964, stop2958));
      };
    } else {
      if (M2.equal_p(1, M2.procedure_arity(stop2958)) !== false) {
        var if_res1948 = function(x2965) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.not(stop2958(x2965));
        };
      } else {
        var if_res1948 = $rjs_core.attachProcedureArity(function() {
          for (var xs29661947 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            xs29661947[$__5] = arguments[$__5];
          var xs2966 = $rjs_core.Pair.listFromArray(xs29661947);
          return M2.not(M2.apply(stop2958, xs2966));
        });
      }
      var if_res1949 = if_res1948;
    }
    var stop_p2963 = if_res1949;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(produce_bang_2960, M2.rvoid, M2.rvoid(), false, stop_p2963, false);
    });
  });
  var in_producer = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1942 = {'1': cl1940}[arguments.length];
    if (fixed_lam1942 !== undefined) {
      return fixed_lam1942.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl1941.length, 1) !== false) {
        var if_res1943 = cl1941.apply(null, arguments);
      } else {
        var if_res1943 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1943;
    }
  }, [1, M2.make_arity_at_least(2)]);
  var let_result1950 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2967) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2967, 0)();
  }, function(v2968) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2968, 1)();
  }, function(v2969) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2969, 2)();
  }))));
  var struct_do_stream = let_result1950.getAt(0);
  var make_do_stream = let_result1950.getAt(1);
  var do_stream_p = let_result1950.getAt(2);
  var do_stream_ref = let_result1950.getAt(3);
  var do_stream_set_bang_ = let_result1950.getAt(4);
  var empty_stream = make_do_stream(function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  }, M2.rvoid, M2.rvoid);
  var sequence__gt_stream = function(s2970) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(s2970) !== false) {
      var if_res1951 = M2.rvoid();
    } else {
      var if_res1951 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.make("sequence?"), s2970);
    }
    if_res1951;
    if (stream_p(s2970) !== false) {
      var if_res1962 = s2970;
    } else {
      var let_result1952 = make_sequence(false, s2970);
      var pos__gt_val2971 = let_result1952.getAt(0);
      var pre_pos_next2972 = let_result1952.getAt(1);
      var pos_next2973 = let_result1952.getAt(2);
      var init2974 = let_result1952.getAt(3);
      var pos_cont_p2975 = let_result1952.getAt(4);
      var pre_cont_p2976 = let_result1952.getAt(5);
      var post_cont_p2977 = let_result1952.getAt(6);
      var gen_stream2978 = function(pos2979) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var done_p2980 = false;
        var vals2981 = false;
        var empty_p2982 = false;
        var next2983 = false;
        var force_bang_2984 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (done_p2980 !== false) {
            var if_res1958 = M2.rvoid();
          } else {
            if (pos_cont_p2975 !== false) {
              var if_res1953 = pos_cont_p2975(pos2979);
            } else {
              var if_res1953 = true;
            }
            if (if_res1953 !== false) {
              vals2981 = M2.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return pos__gt_val2971(pos2979);
              }, M2.list);
              if (pre_pos_next2972 !== false) {
                pos2979 = pre_pos_next2972(pos2979);
                var if_res1954 = null;
              } else {
                var if_res1954 = M2.rvoid();
              }
              if_res1954;
              if (pre_cont_p2976 !== false) {
                var if_res1955 = M2.apply(pre_cont_p2976, vals2981);
              } else {
                var if_res1955 = true;
              }
              if (if_res1955 !== false) {
                var if_res1956 = M2.rvoid();
              } else {
                vals2981 = false;
                empty_p2982 = true;
                var if_res1956 = null;
              }
              var if_res1957 = if_res1956;
            } else {
              empty_p2982 = true;
              var if_res1957 = null;
            }
            if_res1957;
            done_p2980 = true;
            var if_res1958 = null;
          }
          return if_res1958;
        };
        return make_do_stream(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2984();
          return empty_p2982;
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2984();
          return M2.apply(M2.values, vals2981);
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2984();
          if (next2983 !== false) {
            var if_res1961 = next2983;
          } else {
            if (post_cont_p2977 !== false) {
              var if_res1959 = M2.apply(post_cont_p2977, pos2979, vals2981);
            } else {
              var if_res1959 = true;
            }
            if (if_res1959 !== false) {
              next2983 = gen_stream2978(pos_next2973(pos2979));
              var if_res1960 = null;
            } else {
              next2983 = empty_stream;
              var if_res1960 = null;
            }
            if_res1960;
            var if_res1961 = next2983;
          }
          return if_res1961;
        });
      };
      var if_res1962 = gen_stream2978(init2974);
    }
    return if_res1962;
  };
  var no_more = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.raise(M2.__rjs_quoted__.exn_fail_contract($rjs_core.UString.make("sequence has no more values"), M2.current_continuation_marks()));
  };
  var sequence_generate = function(g2985) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2985) !== false) {
      var if_res1963 = M2.rvoid();
    } else {
      var if_res1963 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.make("sequence?"), g2985);
    }
    if_res1963;
    var let_result1964 = make_sequence(false, g2985);
    var pos__gt_val2986 = let_result1964.getAt(0);
    var pre_pos_next2987 = let_result1964.getAt(1);
    var pos_next2988 = let_result1964.getAt(2);
    var init2989 = let_result1964.getAt(3);
    var pos_cont_p2990 = let_result1964.getAt(4);
    var pre_cont_p2991 = let_result1964.getAt(5);
    var post_cont_p2992 = let_result1964.getAt(6);
    var pos2993 = init2989;
    var more_p2994 = false;
    var prep_val_bang_2995 = false;
    var next2996 = false;
    var init_more_p2997 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2995();
      return more_p2994();
    };
    var init_next2998 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2995();
      return next2996();
    };
    var init_prep_val_bang_2999 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2990 !== false) {
        var if_res1965 = pos_cont_p2990(pos2993);
      } else {
        var if_res1965 = true;
      }
      if (if_res1965 !== false) {
        var if_res1973 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1971 = pos__gt_val2986(pos2993);
          if (pre_pos_next2987 !== false) {
            pos2993 = pre_pos_next2987(pos2993);
            var if_res1972 = null;
          } else {
            var if_res1972 = M2.rvoid();
          }
          if_res1972;
          return begin_res1971;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals30001966 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals30001966[$__5] = arguments[$__5];
          var vals3000 = $rjs_core.Pair.listFromArray(vals30001966);
          if (pre_cont_p2991 !== false) {
            var if_res1967 = M2.apply(pre_cont_p2991, vals3000);
          } else {
            var if_res1967 = true;
          }
          if (if_res1967 !== false) {
            more_p2994 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return true;
            };
            next2996 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var v3001 = vals3000;
              prep_val_bang_2995 = function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (post_cont_p2992 !== false) {
                  var if_res1968 = M2.apply(post_cont_p2992, pos2993, vals3000);
                } else {
                  var if_res1968 = true;
                }
                if (if_res1968 !== false) {
                  pos2993 = pos_next2988(pos2993);
                  prep_val_bang_2995 = init_prep_val_bang_2999;
                  var if_res1969 = prep_val_bang_2995();
                } else {
                  more_p2994 = function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return false;
                  };
                  next2996 = no_more;
                  var if_res1969 = null;
                }
                return if_res1969;
              };
              more_p2994 = init_more_p2997;
              next2996 = init_next2998;
              return M2.apply(M2.values, v3001);
            };
            prep_val_bang_2995 = M2.rvoid;
            var if_res1970 = M2.apply(M2.values, vals3000);
          } else {
            more_p2994 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return false;
            };
            next2996 = no_more;
            var if_res1970 = null;
          }
          return if_res1970;
        }));
      } else {
        more_p2994 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return false;
        };
        next2996 = no_more;
        var if_res1973 = null;
      }
      return if_res1973;
    };
    more_p2994 = init_more_p2997;
    prep_val_bang_2995 = init_prep_val_bang_2999;
    next2996 = init_next2998;
    var sequence_more_p3002 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return more_p2994();
    };
    var sequence_next3003 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return next2996();
    };
    return M2.values(sequence_more_p3002, sequence_next3003);
  };
  var sequence_generate_times_ = function(g3004) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g3004) !== false) {
      var if_res1974 = M2.rvoid();
    } else {
      var if_res1974 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate*"), $rjs_core.UString.make("sequence?"), g3004);
    }
    if_res1974;
    var let_result1975 = make_sequence(false, g3004);
    var pos__gt_val3005 = let_result1975.getAt(0);
    var pre_pos_next3006 = let_result1975.getAt(1);
    var pos_next3007 = let_result1975.getAt(2);
    var init3008 = let_result1975.getAt(3);
    var pos_cont_p3009 = let_result1975.getAt(4);
    var pre_cont_p3010 = let_result1975.getAt(5);
    var post_cont_p3011 = let_result1975.getAt(6);
    var next_bang_3012 = function(pos3013) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p3009 !== false) {
        var if_res1976 = pos_cont_p3009(pos3013);
      } else {
        var if_res1976 = true;
      }
      if (if_res1976 !== false) {
        var if_res1984 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1982 = pos__gt_val3005(pos3013);
          if (pre_pos_next3006 !== false) {
            pos3013 = pre_pos_next3006(pos3013);
            var if_res1983 = null;
          } else {
            var if_res1983 = M2.rvoid();
          }
          if_res1983;
          return begin_res1982;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals30141977 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals30141977[$__5] = arguments[$__5];
          var vals3014 = $rjs_core.Pair.listFromArray(vals30141977);
          if (pre_cont_p3010 !== false) {
            var if_res1978 = M2.apply(pre_cont_p3010, vals3014);
          } else {
            var if_res1978 = true;
          }
          if (if_res1978 !== false) {
            var if_res1981 = M2.values(vals3014, function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p3011 !== false) {
                var if_res1979 = M2.apply(post_cont_p3011, pos3013, vals3014);
              } else {
                var if_res1979 = true;
              }
              if (if_res1979 !== false) {
                var if_res1980 = next_bang_3012(pos_next3007(pos3013));
              } else {
                var if_res1980 = M2.values(false, no_more);
              }
              return if_res1980;
            });
          } else {
            var if_res1981 = M2.values(false, no_more);
          }
          return if_res1981;
        }));
      } else {
        var if_res1984 = M2.values(false, no_more);
      }
      return if_res1984;
    };
    return next_bang_3012(init3008);
  };
  var grow_vector = function(vec3015) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n3016 = M2.vector_length(vec3015);
    var new_vec3017 = M2.make_vector(2 * n3016);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec3017, 0, vec3015, 0, n3016);
    return new_vec3017;
  };
  var shrink_vector = function(vec3018, i3019) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var new_vec3020 = M2.make_vector(i3019);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec3020, 0, vec3018, 0, i3019);
    return new_vec3020;
  };
  var dir_list = function(full_d3021, d3022, acc3023) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1985 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("f")), in_list(M2.reverse(M3.sort(M2.__rjs_quoted__.directory_list(full_d3021), M2.__rjs_quoted__.path_lt__p))));
    var pos__gt_vals3024 = let_result1985.getAt(0);
    var pos_pre_inc3025 = let_result1985.getAt(1);
    var pos_next3026 = let_result1985.getAt(2);
    var init3027 = let_result1985.getAt(3);
    var pos_cont_p3028 = let_result1985.getAt(4);
    var val_cont_p3029 = let_result1985.getAt(5);
    var all_cont_p3030 = let_result1985.getAt(6);
    M2.rvoid();
    var for_loop3031 = function(acc3032, pos3033) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p3028 !== false) {
        var if_res1986 = pos_cont_p3028(pos3033);
      } else {
        var if_res1986 = true;
      }
      if (if_res1986 !== false) {
        var f3037 = pos__gt_vals3024(pos3033);
        if (all_cont_p3030 !== false) {
          var if_res1987 = function(pos3038) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p3030(pos3038, f3037);
          };
        } else {
          var if_res1987 = false;
        }
        var let_result1988 = M2.values(f3037, if_res1987);
        var f3034 = let_result1988.getAt(0);
        var all_cont_p_by_pos3035 = let_result1988.getAt(1);
        if (pos_pre_inc3025 !== false) {
          var if_res1989 = pos_pre_inc3025(pos3033);
        } else {
          var if_res1989 = pos3033;
        }
        var pos3036 = if_res1989;
        if (val_cont_p3029 !== false) {
          var if_res1990 = val_cont_p3029(f3034);
        } else {
          var if_res1990 = true;
        }
        if (if_res1990 !== false) {
          var acc3040 = acc3032;
          var acc3041 = M2.cons(M2.__rjs_quoted__.build_path(d3022, f3034), acc3040);
          var acc3039 = M2.values(acc3041);
          if (all_cont_p_by_pos3035 !== false) {
            var if_res1991 = all_cont_p_by_pos3035(pos3036);
          } else {
            var if_res1991 = true;
          }
          if (if_res1991 !== false) {
            var if_res1992 = M2.not(false);
          } else {
            var if_res1992 = false;
          }
          if (if_res1992 !== false) {
            var if_res1993 = for_loop3031(acc3039, pos_next3026(pos3036));
          } else {
            var if_res1993 = acc3039;
          }
          var if_res1994 = if_res1993;
        } else {
          var if_res1994 = acc3032;
        }
        var if_res1995 = if_res1994;
      } else {
        var if_res1995 = acc3032;
      }
      return if_res1995;
    };
    return for_loop3031(acc3023, init3027);
  };
  var next_body = function(l3042, d3043, init_dir3044, use_dir_p3045) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var full_d3046 = M2.__rjs_quoted__.path__gt_complete_path(d3043, init_dir3044);
    if (M2.__rjs_quoted__.directory_exists_p(full_d3046) !== false) {
      var if_res1996 = use_dir_p3045(full_d3046);
    } else {
      var if_res1996 = false;
    }
    if (if_res1996 !== false) {
      var if_res1997 = dir_list(full_d3046, d3043, M2.cdr(l3042));
    } else {
      var if_res1997 = M2.cdr(l3042);
    }
    return if_res1997;
  };
  var initial_state = function(orig_dir3047, init_dir3048) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (orig_dir3047 !== false) {
      var if_res1998 = dir_list(M2.__rjs_quoted__.path__gt_complete_path(orig_dir3047, init_dir3048), orig_dir3047, M2.rnull);
    } else {
      var if_res1998 = M2.__rjs_quoted__.directory_list(init_dir3048);
    }
    return if_res1998;
  };
  var cl1999 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(false, function(d3049) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl2000 = function(orig_dir3050) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(orig_dir3050, function(d3051) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl2001 = function(orig_dir3052, use_dir_p3053) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var init_dir3054 = M2.__rjs_quoted__.current_directory();
    var next3055 = function(l3056) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var d3057 = M2.car(l3056);
      return next_body(l3056, d3057, init_dir3054, use_dir_p3053);
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(M2.car, next3055, initial_state(orig_dir3052, init_dir3054), M2.pair_p, false, false);
    });
  };
  var __times_in_directory = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2002 = {
      '0': cl1999,
      '1': cl2000,
      '2': cl2001
    }[arguments.length];
    if (fixed_lam2002 !== undefined) {
      return fixed_lam2002.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var __rjs_quoted__ = {};
  __rjs_quoted__.default_in_hash_pairs = default_in_hash_pairs;
  __rjs_quoted__.in_naturals = in_naturals;
  __rjs_quoted__.in_vector = in_vector;
  __rjs_quoted__.default_in_hash_values = default_in_hash_values;
  __rjs_quoted__.check_in_bytes_lines = check_in_bytes_lines;
  __rjs_quoted__.default_in_weak_hash_pairs = default_in_weak_hash_pairs;
  __rjs_quoted__.in_input_port_chars = in_input_port_chars;
  __rjs_quoted__.default_in_mutable_hash_values = default_in_mutable_hash_values;
  __rjs_quoted__.next_body = next_body;
  __rjs_quoted__.grow_vector = grow_vector;
  __rjs_quoted__.in_indexed = in_indexed;
  __rjs_quoted__.default_in_immutable_hash_keys = default_in_immutable_hash_keys;
  __rjs_quoted__.in_port = in_port;
  __rjs_quoted__.in_producer = in_producer;
  __rjs_quoted__.default_in_hash_keys = default_in_hash_keys;
  __rjs_quoted__.default_in_mutable_hash_pairs = default_in_mutable_hash_pairs;
  __rjs_quoted__.default_in_immutable_hash = default_in_immutable_hash;
  __rjs_quoted__.default_in_mutable_hash = default_in_mutable_hash;
  __rjs_quoted__.default_in_mutable_hash_keys = default_in_mutable_hash_keys;
  __rjs_quoted__.not_weak_p = not_weak_p;
  __rjs_quoted__.default_in_weak_hash = default_in_weak_hash;
  __rjs_quoted__.initial_state = initial_state;
  __rjs_quoted__.in_lines = in_lines;
  __rjs_quoted__.default_in_immutable_hash_pairs = default_in_immutable_hash_pairs;
  __rjs_quoted__.shrink_vector = shrink_vector;
  __rjs_quoted__.default_in_weak_hash_keys = default_in_weak_hash_keys;
  __rjs_quoted__.in_range = in_range;
  __rjs_quoted__.in_parallel = in_parallel;
  __rjs_quoted__.in_value = in_value;
  __rjs_quoted__.__times_in_directory = __times_in_directory;
  __rjs_quoted__.default_in_immutable_hash_values = default_in_immutable_hash_values;
  __rjs_quoted__.unsafe_stream_rest = unsafe_stream_rest;
  __rjs_quoted__.check_in_port = check_in_port;
  __rjs_quoted__.check_in_lines = check_in_lines;
  __rjs_quoted__.normalise_inputs = normalise_inputs;
  __rjs_quoted__.__hash_gen = __hash_gen;
  __rjs_quoted__.in_string = in_string;
  __rjs_quoted__.make_sequence = make_sequence;
  __rjs_quoted__.unsafe_stream_first = unsafe_stream_first;
  __rjs_quoted__.unsafe_stream_not_empty_p = unsafe_stream_not_empty_p;
  __rjs_quoted__.in_input_port_bytes = in_input_port_bytes;
  __rjs_quoted__.mutable_p = mutable_p;
  __rjs_quoted__.default_in_weak_hash_values = default_in_weak_hash_values;
  __rjs_quoted__.stream_p = stream_p;
  __rjs_quoted__.in_bytes = in_bytes;
  __rjs_quoted__.stop_after = stop_after;
  __rjs_quoted__.default_in_hash = default_in_hash;
  __rjs_quoted__.in_stream = in_stream;
  __rjs_quoted__.make_do_sequence = make_do_sequence;
  __rjs_quoted__.in_mlist = in_mlist;
  __rjs_quoted__.in_bytes_lines = in_bytes_lines;
  __rjs_quoted__.in_list = in_list;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_do_sequence() {
      return make_do_sequence;
    },
    get prop_sequence() {
      return prop_sequence;
    },
    get sequence_generate_times_() {
      return sequence_generate_times_;
    },
    get sequence_generate() {
      return sequence_generate;
    },
    get sequence_p() {
      return sequence_p;
    },
    get make_do_stream() {
      return make_do_stream;
    },
    get empty_stream() {
      return empty_stream;
    },
    get sequence__gt_stream() {
      return sequence__gt_stream;
    },
    get stream_via_prop_p() {
      return stream_via_prop_p;
    },
    get stream_ref() {
      return stream_ref;
    },
    get prop_stream() {
      return prop_stream;
    },
    get stream_rest() {
      return stream_rest;
    },
    get stream_first() {
      return stream_first;
    },
    get stream_empty_p() {
      return stream_empty_p;
    },
    get stream_p() {
      return stream_p;
    },
    get stop_after() {
      return stop_after;
    },
    get stop_before() {
      return stop_before;
    },
    get in_values_times__sequence() {
      return in_values_times__sequence;
    },
    get in_values_sequence() {
      return in_values_sequence;
    },
    get in_parallel() {
      return in_parallel;
    },
    get in_cycle() {
      return in_cycle;
    },
    get in_sequences() {
      return in_sequences;
    }
  };
})();
var $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/qq-and-or.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var qq_append = function(a2549, b2550) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(a2549) !== false) {
      var if_res1674 = M0.append(a2549, b2550);
    } else {
      var if_res1674 = M0.raise_argument_error($rjs_core.Symbol.make("unquote-splicing"), $rjs_core.UString.make("list?"), a2549);
    }
    return if_res1674;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.qq_append = qq_append;
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_map_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/map.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var cl424 = function(f802, l803) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f802) !== false) {
      if (M0.procedure_arity_includes_p(f802, 1) !== false) {
        var if_res429 = M0.list_p(l803);
      } else {
        var if_res429 = false;
      }
      var if_res430 = if_res429;
    } else {
      var if_res430 = false;
    }
    if (if_res430 !== false) {
      var loop804 = function(l805) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l805) !== false) {
          var if_res431 = M0.rnull;
        } else {
          var r806 = M0.cdr(l805);
          var if_res431 = M0.cons(f802(M0.car(l805)), loop804(r806));
        }
        return if_res431;
      };
      var if_res432 = loop804(l803);
    } else {
      var if_res432 = M0.map(f802, l803);
    }
    return if_res432;
  };
  var cl425 = function(f807, l1808, l2809) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f807) !== false) {
      if (M0.procedure_arity_includes_p(f807, 2) !== false) {
        if (M0.list_p(l1808) !== false) {
          if (M0.list_p(l2809) !== false) {
            var if_res433 = M0.__eq_(M0.length(l1808), M0.length(l2809));
          } else {
            var if_res433 = false;
          }
          var if_res434 = if_res433;
        } else {
          var if_res434 = false;
        }
        var if_res435 = if_res434;
      } else {
        var if_res435 = false;
      }
      var if_res436 = if_res435;
    } else {
      var if_res436 = false;
    }
    if (if_res436 !== false) {
      var loop810 = function(l1811, l2812) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1811) !== false) {
          var if_res437 = M0.rnull;
        } else {
          var r1813 = M0.cdr(l1811);
          var r2814 = M0.cdr(l2812);
          var if_res437 = M0.cons(f807(M0.car(l1811), M0.car(l2812)), loop810(r1813, r2814));
        }
        return if_res437;
      };
      var if_res438 = loop810(l1808, l2809);
    } else {
      var if_res438 = M0.map(f807, l1808, l2809);
    }
    return if_res438;
  };
  var cl426 = $rjs_core.attachProcedureArity(function(f815, l816) {
    for (var args817439 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      args817439[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args817 = $rjs_core.Pair.listFromArray(args817439);
    return M0.apply(M0.map, f815, l816, args817);
  });
  var map801 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam427 = {
      '2': cl424,
      '3': cl425
    }[arguments.length];
    if (fixed_lam427 !== undefined) {
      return fixed_lam427.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl426.length, 1) !== false) {
        var if_res428 = cl426.apply(null, arguments);
      } else {
        var if_res428 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res428;
    }
  }, [M0.make_arity_at_least(2)]);
  var map2 = map801;
  var cl440 = function(f819, l820) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f819) !== false) {
      if (M0.procedure_arity_includes_p(f819, 1) !== false) {
        var if_res445 = M0.list_p(l820);
      } else {
        var if_res445 = false;
      }
      var if_res446 = if_res445;
    } else {
      var if_res446 = false;
    }
    if (if_res446 !== false) {
      var loop821 = function(l822) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l822) !== false) {
          var if_res447 = M0.rvoid();
        } else {
          var r823 = M0.cdr(l822);
          f819(M0.car(l822));
          var if_res447 = loop821(r823);
        }
        return if_res447;
      };
      var if_res448 = loop821(l820);
    } else {
      var if_res448 = M0.for_each(f819, l820);
    }
    return if_res448;
  };
  var cl441 = function(f824, l1825, l2826) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f824) !== false) {
      if (M0.procedure_arity_includes_p(f824, 2) !== false) {
        if (M0.list_p(l1825) !== false) {
          if (M0.list_p(l2826) !== false) {
            var if_res449 = M0.__eq_(M0.length(l1825), M0.length(l2826));
          } else {
            var if_res449 = false;
          }
          var if_res450 = if_res449;
        } else {
          var if_res450 = false;
        }
        var if_res451 = if_res450;
      } else {
        var if_res451 = false;
      }
      var if_res452 = if_res451;
    } else {
      var if_res452 = false;
    }
    if (if_res452 !== false) {
      var loop827 = function(l1828, l2829) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1828) !== false) {
          var if_res453 = M0.rvoid();
        } else {
          var r1830 = M0.cdr(l1828);
          var r2831 = M0.cdr(l2829);
          f824(M0.car(l1828), M0.car(l2829));
          var if_res453 = loop827(r1830, r2831);
        }
        return if_res453;
      };
      var if_res454 = loop827(l1825, l2826);
    } else {
      var if_res454 = M0.for_each(f824, l1825, l2826);
    }
    return if_res454;
  };
  var cl442 = $rjs_core.attachProcedureArity(function(f832, l833) {
    for (var args834455 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args834455[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args834 = $rjs_core.Pair.listFromArray(args834455);
    return M0.apply(M0.for_each, f832, l833, args834);
  });
  var for_each818 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam443 = {
      '2': cl440,
      '3': cl441
    }[arguments.length];
    if (fixed_lam443 !== undefined) {
      return fixed_lam443.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl442.length, 1) !== false) {
        var if_res444 = cl442.apply(null, arguments);
      } else {
        var if_res444 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res444;
    }
  }, [M0.make_arity_at_least(2)]);
  var for_each2 = for_each818;
  var cl456 = function(f836, l837) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f836) !== false) {
      if (M0.procedure_arity_includes_p(f836, 1) !== false) {
        var if_res461 = M0.list_p(l837);
      } else {
        var if_res461 = false;
      }
      var if_res462 = if_res461;
    } else {
      var if_res462 = false;
    }
    if (if_res462 !== false) {
      if (M0.null_p(l837) !== false) {
        var if_res465 = true;
      } else {
        var loop838 = function(l839) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l839)) !== false) {
            var if_res464 = f836(M0.car(l839));
          } else {
            var r840 = M0.cdr(l839);
            if (f836(M0.car(l839)) !== false) {
              var if_res463 = loop838(r840);
            } else {
              var if_res463 = false;
            }
            var if_res464 = if_res463;
          }
          return if_res464;
        };
        var if_res465 = loop838(l837);
      }
      var if_res466 = if_res465;
    } else {
      var if_res466 = M0.andmap(f836, l837);
    }
    return if_res466;
  };
  var cl457 = function(f841, l1842, l2843) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f841) !== false) {
      if (M0.procedure_arity_includes_p(f841, 2) !== false) {
        if (M0.list_p(l1842) !== false) {
          if (M0.list_p(l2843) !== false) {
            var if_res467 = M0.__eq_(M0.length(l1842), M0.length(l2843));
          } else {
            var if_res467 = false;
          }
          var if_res468 = if_res467;
        } else {
          var if_res468 = false;
        }
        var if_res469 = if_res468;
      } else {
        var if_res469 = false;
      }
      var if_res470 = if_res469;
    } else {
      var if_res470 = false;
    }
    if (if_res470 !== false) {
      if (M0.null_p(l1842) !== false) {
        var if_res473 = true;
      } else {
        var loop844 = function(l1845, l2846) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1845)) !== false) {
            var if_res472 = f841(M0.car(l1845), M0.car(l2846));
          } else {
            var r1847 = M0.cdr(l1845);
            var r2848 = M0.cdr(l2846);
            if (f841(M0.car(l1845), M0.car(l2846)) !== false) {
              var if_res471 = loop844(r1847, r2848);
            } else {
              var if_res471 = false;
            }
            var if_res472 = if_res471;
          }
          return if_res472;
        };
        var if_res473 = loop844(l1842, l2843);
      }
      var if_res474 = if_res473;
    } else {
      var if_res474 = M0.andmap(f841, l1842, l2843);
    }
    return if_res474;
  };
  var cl458 = $rjs_core.attachProcedureArity(function(f849, l850) {
    for (var args851475 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      args851475[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args851 = $rjs_core.Pair.listFromArray(args851475);
    return M0.apply(M0.andmap, f849, l850, args851);
  });
  var andmap835 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam459 = {
      '2': cl456,
      '3': cl457
    }[arguments.length];
    if (fixed_lam459 !== undefined) {
      return fixed_lam459.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl458.length, 1) !== false) {
        var if_res460 = cl458.apply(null, arguments);
      } else {
        var if_res460 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res460;
    }
  }, [M0.make_arity_at_least(2)]);
  var andmap2 = andmap835;
  var cl476 = function(f853, l854) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f853) !== false) {
      if (M0.procedure_arity_includes_p(f853, 1) !== false) {
        var if_res481 = M0.list_p(l854);
      } else {
        var if_res481 = false;
      }
      var if_res482 = if_res481;
    } else {
      var if_res482 = false;
    }
    if (if_res482 !== false) {
      if (M0.null_p(l854) !== false) {
        var if_res485 = false;
      } else {
        var loop855 = function(l856) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l856)) !== false) {
            var if_res484 = f853(M0.car(l856));
          } else {
            var r857 = M0.cdr(l856);
            var or_part858 = f853(M0.car(l856));
            if (or_part858 !== false) {
              var if_res483 = or_part858;
            } else {
              var if_res483 = loop855(r857);
            }
            var if_res484 = if_res483;
          }
          return if_res484;
        };
        var if_res485 = loop855(l854);
      }
      var if_res486 = if_res485;
    } else {
      var if_res486 = M0.ormap(f853, l854);
    }
    return if_res486;
  };
  var cl477 = function(f859, l1860, l2861) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f859) !== false) {
      if (M0.procedure_arity_includes_p(f859, 2) !== false) {
        if (M0.list_p(l1860) !== false) {
          if (M0.list_p(l2861) !== false) {
            var if_res487 = M0.__eq_(M0.length(l1860), M0.length(l2861));
          } else {
            var if_res487 = false;
          }
          var if_res488 = if_res487;
        } else {
          var if_res488 = false;
        }
        var if_res489 = if_res488;
      } else {
        var if_res489 = false;
      }
      var if_res490 = if_res489;
    } else {
      var if_res490 = false;
    }
    if (if_res490 !== false) {
      if (M0.null_p(l1860) !== false) {
        var if_res493 = false;
      } else {
        var loop862 = function(l1863, l2864) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1863)) !== false) {
            var if_res492 = f859(M0.car(l1863), M0.car(l2864));
          } else {
            var r1865 = M0.cdr(l1863);
            var r2866 = M0.cdr(l2864);
            var or_part867 = f859(M0.car(l1863), M0.car(l2864));
            if (or_part867 !== false) {
              var if_res491 = or_part867;
            } else {
              var if_res491 = loop862(r1865, r2866);
            }
            var if_res492 = if_res491;
          }
          return if_res492;
        };
        var if_res493 = loop862(l1860, l2861);
      }
      var if_res494 = if_res493;
    } else {
      var if_res494 = M0.ormap(f859, l1860, l2861);
    }
    return if_res494;
  };
  var cl478 = $rjs_core.attachProcedureArity(function(f868, l869) {
    for (var args870495 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      args870495[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args870 = $rjs_core.Pair.listFromArray(args870495);
    return M0.apply(M0.ormap, f868, l869, args870);
  });
  var ormap852 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam479 = {
      '2': cl476,
      '3': cl477
    }[arguments.length];
    if (fixed_lam479 !== undefined) {
      return fixed_lam479.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl478.length, 1) !== false) {
        var if_res480 = cl478.apply(null, arguments);
      } else {
        var if_res480 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res480;
    }
  }, [M0.make_arity_at_least(2)]);
  var ormap2 = ormap852;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ormap() {
      return ormap2;
    },
    get andmap() {
      return andmap2;
    },
    get for_each() {
      return for_each2;
    },
    get map() {
      return map2;
    }
  };
})();
var $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/norm-arity.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var procedure_arity4476 = function(p4477) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return normalize_arity(M0.procedure_arity(p4477));
  };
  var norm_procedure_arity = procedure_arity4476;
  var raise_arity_error4478 = $rjs_core.attachProcedureArity(function(name4479, arity_v4480) {
    for (var arg_vs44812872 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      arg_vs44812872[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arg_vs4481 = $rjs_core.Pair.listFromArray(arg_vs44812872);
    var or_part4482 = M0.exact_nonnegative_integer_p(arity_v4480);
    if (or_part4482 !== false) {
      var if_res2876 = or_part4482;
    } else {
      var or_part4483 = M0.arity_at_least_p(arity_v4480);
      if (or_part4483 !== false) {
        var if_res2875 = or_part4483;
      } else {
        if (M0.list_p(arity_v4480) !== false) {
          var if_res2874 = M0.andmap(function(x4484) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4485 = M0.exact_nonnegative_integer_p(x4484);
            if (or_part4485 !== false) {
              var if_res2873 = or_part4485;
            } else {
              var if_res2873 = M0.arity_at_least_p(x4484);
            }
            return if_res2873;
          }, arity_v4480);
        } else {
          var if_res2874 = false;
        }
        var if_res2875 = if_res2874;
      }
      var if_res2876 = if_res2875;
    }
    if (if_res2876 !== false) {
      var if_res2877 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4479, normalize_arity(arity_v4480), arg_vs4481);
    } else {
      var if_res2877 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4479, arity_v4480, arg_vs4481);
    }
    return if_res2877;
  });
  var norm_raise_arity_error = raise_arity_error4478;
  var normalize_arity = function(arity4486) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_arity_p(arity4486) !== false) {
      var if_res2878 = M0.rvoid();
    } else {
      var if_res2878 = M0.raise_argument_error($rjs_core.Symbol.make("normalize-arity"), $rjs_core.UString.make("procedure-arity?"), arity4486);
    }
    if_res2878;
    if (M0.pair_p(arity4486) !== false) {
      var reversed4487 = reverse_sort_arity(arity4486);
      var normalized4488 = normalize_reversed_arity(reversed4487, $rjs_core.Pair.makeList());
      var simplified4489 = normalize_singleton_arity(normalized4488);
      var if_res2879 = simplified4489;
    } else {
      var if_res2879 = arity4486;
    }
    return if_res2879;
  };
  var normalize_singleton_arity = function(arity4490) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4490) !== false) {
      var if_res2880 = M0.null_p(M0.cdr(arity4490));
    } else {
      var if_res2880 = false;
    }
    if (if_res2880 !== false) {
      var if_res2881 = M0.car(arity4490);
    } else {
      var if_res2881 = arity4490;
    }
    return if_res2881;
  };
  var normalize_reversed_arity = function(arity4491, tail4492) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4491) !== false) {
      var if_res2882 = normalize_reversed_arity(M0.cdr(arity4491), arity_insert(M0.car(arity4491), tail4492));
    } else {
      var if_res2882 = tail4492;
    }
    return if_res2882;
  };
  var arity_insert = function(elem4493, arity4494) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4494) !== false) {
      var next4495 = M0.car(arity4494);
      if (M0.arity_at_least_p(next4495) !== false) {
        var next_value4496 = M0.arity_at_least_value(next4495);
        if (M0.arity_at_least_p(elem4493) !== false) {
          var elem_value4497 = M0.arity_at_least_value(elem4493);
          if (M0.__lt_(elem_value4497, next_value4496) !== false) {
            var if_res2883 = M0.cons(elem4493, M0.cdr(arity4494));
          } else {
            var if_res2883 = arity4494;
          }
          var if_res2886 = if_res2883;
        } else {
          if (M0.__lt_(elem4493, next_value4496 - 1) !== false) {
            var if_res2885 = M0.cons(elem4493, arity4494);
          } else {
            if (M0.__eq_(elem4493, next_value4496 - 1) !== false) {
              var if_res2884 = M0.cons(M0.arity_at_least(elem4493), M0.cdr(arity4494));
            } else {
              var if_res2884 = arity4494;
            }
            var if_res2885 = if_res2884;
          }
          var if_res2886 = if_res2885;
        }
        var if_res2888 = if_res2886;
      } else {
        if (M0.__lt_(elem4493, next4495) !== false) {
          var if_res2887 = M0.cons(elem4493, arity4494);
        } else {
          var if_res2887 = arity4494;
        }
        var if_res2888 = if_res2887;
      }
      var if_res2889 = if_res2888;
    } else {
      var if_res2889 = M0.cons(elem4493, arity4494);
    }
    return if_res2889;
  };
  var reverse_sort_arity = function(arity4498) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.sort(arity4498, arity_gt__p);
  };
  var arity_gt__p = function(a4499, b4500) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.arity_at_least_p(a4499) !== false) {
      if (M0.arity_at_least_p(b4500) !== false) {
        var if_res2890 = M0.__gt_(M0.arity_at_least_value(a4499), M0.arity_at_least_value(b4500));
      } else {
        var if_res2890 = true;
      }
      var if_res2892 = if_res2890;
    } else {
      if (M0.arity_at_least_p(b4500) !== false) {
        var if_res2891 = false;
      } else {
        var if_res2891 = M0.__gt_(a4499, b4500);
      }
      var if_res2892 = if_res2891;
    }
    return if_res2892;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get normalize_arity() {
      return normalize_arity;
    },
    get norm_raise_arity_error() {
      return norm_raise_arity_error;
    },
    get norm_procedure_arity() {
      return norm_procedure_arity;
    }
  };
})();
var $__collects_47_racket_47_private_47_path_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/path.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var path_string_p = function(s3433) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3434 = M0.__rjs_quoted__.path_p(s3433);
    if (or_part3434 !== false) {
      var if_res2291 = or_part3434;
    } else {
      if (M0.string_p(s3433) !== false) {
        var or_part3435 = M0.__rjs_quoted__.relative_path_p(s3433);
        if (or_part3435 !== false) {
          var if_res2289 = or_part3435;
        } else {
          var if_res2289 = M0.__rjs_quoted__.absolute_path_p(s3433);
        }
        var if_res2290 = if_res2289;
      } else {
        var if_res2290 = false;
      }
      var if_res2291 = if_res2290;
    }
    return if_res2291;
  };
  var bsbs = M0.string($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(92));
  var normal_case_path = function(s3436) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3437 = M0.__rjs_quoted__.path_for_some_system_p(s3436);
    if (or_part3437 !== false) {
      var if_res2292 = or_part3437;
    } else {
      var if_res2292 = path_string_p(s3436);
    }
    if (if_res2292 !== false) {
      var if_res2293 = M0.rvoid();
    } else {
      var if_res2293 = M0.raise_argument_error($rjs_core.Symbol.make("normal-path-case"), $rjs_core.UString.make("(or/c path-for-some-system? path-string?)"), s3436);
    }
    if_res2293;
    if (M0.__rjs_quoted__.path_for_some_system_p(s3436) !== false) {
      var if_res2294 = M0.eq_p(M0.__rjs_quoted__.path_convention_type(s3436), $rjs_core.Symbol.make("windows"));
    } else {
      var if_res2294 = M0.eq_p(M0.system_type(), $rjs_core.Symbol.make("windows"));
    }
    if (if_res2294 !== false) {
      if (M0.string_p(s3436) !== false) {
        var if_res2295 = s3436;
      } else {
        var if_res2295 = M0.__rjs_quoted__.bytes__gt_string_by_locale(M0.__rjs_quoted__.path__gt_bytes(s3436));
      }
      var str3438 = if_res2295;
      if (M0.__rjs_quoted__.regexp_match_p("/^[\\][\\][?][\\]/", str3438) !== false) {
        if (M0.string_p(s3436) !== false) {
          var if_res2296 = M0.__rjs_quoted__.string__gt_path(s3436);
        } else {
          var if_res2296 = s3436;
        }
        var if_res2298 = if_res2296;
      } else {
        var s3439 = M0.__rjs_quoted__.string_locale_downcase(str3438);
        if (M0.__rjs_quoted__.regexp_match_p("/[\\/\\][. ]+[\\/\\]*$/", s3439) !== false) {
          var if_res2297 = s3439;
        } else {
          var if_res2297 = M0.__rjs_quoted__.regexp_replace_times_("/[ .]+([\\/\\]*)$/", s3439, $rjs_core.UString.make("\\1"));
        }
        var if_res2298 = M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.string__gt_bytes_by_locale(M0.__rjs_quoted__.regexp_replace_times_("/\\//", if_res2297, bsbs)), $rjs_core.Symbol.make("windows"));
      }
      var if_res2300 = if_res2298;
    } else {
      if (M0.string_p(s3436) !== false) {
        var if_res2299 = M0.__rjs_quoted__.string__gt_path(s3436);
      } else {
        var if_res2299 = s3436;
      }
      var if_res2300 = if_res2299;
    }
    return if_res2300;
  };
  var check_extension_call = function(s3440, sfx3441, who3442, sep3443, trust_sep_p3444) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3447 = M0.__rjs_quoted__.path_for_some_system_p(s3440);
    if (or_part3447 !== false) {
      var if_res2301 = or_part3447;
    } else {
      var if_res2301 = path_string_p(s3440);
    }
    if (M0.not(if_res2301) !== false) {
      var if_res2307 = M0.values($rjs_core.UString.make("(or/c path-for-some-system? path-string?)"), 0);
    } else {
      var or_part3448 = M0.string_p(sfx3441);
      if (or_part3448 !== false) {
        var if_res2302 = or_part3448;
      } else {
        var if_res2302 = M0.bytes_p(sfx3441);
      }
      if (M0.not(if_res2302) !== false) {
        var if_res2306 = M0.values($rjs_core.UString.make("(or/c string? bytes?)"), 1);
      } else {
        var or_part3449 = trust_sep_p3444;
        if (or_part3449 !== false) {
          var if_res2304 = or_part3449;
        } else {
          var or_part3450 = M0.string_p(sep3443);
          if (or_part3450 !== false) {
            var if_res2303 = or_part3450;
          } else {
            var if_res2303 = M0.bytes_p(sep3443);
          }
          var if_res2304 = if_res2303;
        }
        if (M0.not(if_res2304) !== false) {
          var if_res2305 = M0.values($rjs_core.UString.make("(or/c string? bytes?)"), 2);
        } else {
          var if_res2305 = M0.values(false, false);
        }
        var if_res2306 = if_res2305;
      }
      var if_res2307 = if_res2306;
    }
    var let_result2308 = if_res2307;
    var err_msg3445 = let_result2308.getAt(0);
    var err_index3446 = let_result2308.getAt(1);
    if (err_msg3445 !== false) {
      if (trust_sep_p3444 !== false) {
        var if_res2309 = M0.raise_argument_error(who3442, err_msg3445, err_index3446, s3440, sfx3441);
      } else {
        var if_res2309 = M0.raise_argument_error(who3442, err_msg3445, err_index3446, s3440, sfx3441, sep3443);
      }
      var if_res2310 = if_res2309;
    } else {
      var if_res2310 = M0.rvoid();
    }
    if_res2310;
    var let_result2311 = M0.__rjs_quoted__.split_path(s3440);
    var base3451 = let_result2311.getAt(0);
    var name3452 = let_result2311.getAt(1);
    var dir_p3453 = let_result2311.getAt(2);
    if (M0.not(base3451) !== false) {
      var if_res2312 = M0.raise_mismatch_error(who3442, $rjs_core.UString.make("cannot add an extension to a root path: "), s3440);
    } else {
      var if_res2312 = M0.rvoid();
    }
    if_res2312;
    return M0.values(base3451, name3452);
  };
  var path_adjust_extension = function(name3454, sep3455, rest_bytes3456, s3457, sfx3458, trust_sep_p3459) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result2313 = check_extension_call(s3457, sfx3458, name3454, sep3455, trust_sep_p3459);
    var base3460 = let_result2313.getAt(0);
    var name3461 = let_result2313.getAt(1);
    var bs3462 = M0.__rjs_quoted__.path_element__gt_bytes(name3461);
    var finish3463 = function(i3464, sep3465, i23466) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp2318 = M0.__rjs_quoted__.subbytes(bs3462, 0, i3464);
      if (M0.string_p(sep3465) !== false) {
        var if_res2317 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sep3465, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2317 = sep3465;
      }
      var temp2316 = rest_bytes3456(bs3462, i23466);
      if (M0.string_p(sfx3458) !== false) {
        var if_res2315 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sfx3458, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2315 = sfx3458;
      }
      var temp2319 = M0.__rjs_quoted__.bytes_append(temp2318, if_res2317, temp2316, if_res2315);
      if (M0.__rjs_quoted__.path_for_some_system_p(s3457) !== false) {
        var if_res2314 = M0.__rjs_quoted__.path_convention_type(s3457);
      } else {
        var if_res2314 = M0.__rjs_quoted__.system_path_convention_type();
      }
      return M0.__rjs_quoted__.bytes__gt_path_element(temp2319, if_res2314);
    };
    var loop3468 = function(i3469) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i3469) !== false) {
        var if_res2322 = finish3463(M0.__rjs_quoted__.bytes_length(bs3462), $rjs_core.Bytes.fromIntArray([]), M0.__rjs_quoted__.bytes_length(bs3462));
      } else {
        var i3470 = M0.sub1(i3469);
        if (M0.not(M0.zero_p(i3470)) !== false) {
          var if_res2320 = M0.eq_p(M0.char__gt_integer($rjs_core.Char.charFromCodepoint(46)), M0.__rjs_quoted__.bytes_ref(bs3462, i3470));
        } else {
          var if_res2320 = false;
        }
        if (if_res2320 !== false) {
          var if_res2321 = finish3463(i3470, sep3455, M0.add1(i3470));
        } else {
          var if_res2321 = loop3468(i3470);
        }
        var if_res2322 = if_res2321;
      }
      return if_res2322;
    };
    var new_name3467 = loop3468(M0.__rjs_quoted__.bytes_length(bs3462));
    if (M0.__rjs_quoted__.path_for_some_system_p(base3460) !== false) {
      var if_res2323 = M0.__rjs_quoted__.build_path(base3460, new_name3467);
    } else {
      var if_res2323 = new_name3467;
    }
    return if_res2323;
  };
  var path_replace_extension = function(s3471, sfx3472) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-replace-extension"), $rjs_core.Bytes.fromIntArray([]), function(bs3473, i3474) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return $rjs_core.Bytes.fromIntArray([]);
    }, s3471, sfx3472, true);
  };
  var cl2324 = function(s3475, sfx3476) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), $rjs_core.Bytes.fromIntArray([95]), M0.__rjs_quoted__.subbytes, s3475, sfx3476, true);
  };
  var cl2325 = function(s3477, sfx3478, sep3479) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), sep3479, M0.__rjs_quoted__.subbytes, s3477, sfx3478, false);
  };
  var path_add_extension = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2326 = {
      '2': cl2324,
      '3': cl2325
    }[arguments.length];
    if (fixed_lam2326 !== undefined) {
      return fixed_lam2326.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var reroot_path = function(p3480, root3481) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3482 = path_string_p(p3480);
    if (or_part3482 !== false) {
      var if_res2327 = or_part3482;
    } else {
      var if_res2327 = M0.__rjs_quoted__.path_for_some_system_p(p3480);
    }
    if (if_res2327 !== false) {
      var if_res2328 = M0.rvoid();
    } else {
      var if_res2328 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.make("(or/c path-string? path-for-some-system?)"), 0, p3480, root3481);
    }
    if_res2328;
    var let_result2329 = M0.values();
    var or_part3483 = path_string_p(root3481);
    if (or_part3483 !== false) {
      var if_res2330 = or_part3483;
    } else {
      var if_res2330 = M0.__rjs_quoted__.path_for_some_system_p(root3481);
    }
    if (if_res2330 !== false) {
      var if_res2331 = M0.rvoid();
    } else {
      var if_res2331 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.make("(or/c path-string? path-for-some-system?)"), 1, p3480, root3481);
    }
    if_res2331;
    var let_result2332 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(p3480) !== false) {
      var if_res2333 = M0.__rjs_quoted__.path_convention_type(p3480);
    } else {
      var if_res2333 = M0.__rjs_quoted__.system_path_convention_type();
    }
    var conv3484 = if_res2333;
    var or_part3485 = M0.__rjs_quoted__.complete_path_p(p3480);
    if (or_part3485 !== false) {
      var if_res2334 = or_part3485;
    } else {
      var if_res2334 = M0.eq_p(M0.__rjs_quoted__.system_path_convention_type(), conv3484);
    }
    if (if_res2334 !== false) {
      var if_res2335 = M0.rvoid();
    } else {
      var if_res2335 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.make("path is not complete and not the platform's convention"), $rjs_core.UString.make("path"), p3480, $rjs_core.UString.make("platform convention type"), M0.__rjs_quoted__.system_path_convention_type());
    }
    if_res2335;
    var let_result2336 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(root3481) !== false) {
      var if_res2337 = M0.__rjs_quoted__.path_convention_type(root3481);
    } else {
      var if_res2337 = M0.__rjs_quoted__.system_path_convention_type();
    }
    if (M0.eq_p(if_res2337, conv3484) !== false) {
      var if_res2338 = M0.rvoid();
    } else {
      var if_res2338 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.make("given paths use different conventions"), $rjs_core.UString.make("path"), p3480, $rjs_core.UString.make("root path"), root3481);
    }
    if_res2338;
    var let_result2339 = M0.values();
    if (M0.__rjs_quoted__.complete_path_p(p3480) !== false) {
      var if_res2340 = p3480;
    } else {
      var if_res2340 = M0.__rjs_quoted__.path__gt_complete_path(p3480);
    }
    var c_p3486 = normal_case_path(M0.__rjs_quoted__.cleanse_path(if_res2340));
    var bstr3487 = M0.__rjs_quoted__.path__gt_bytes(c_p3486);
    if (M0.eq_p(conv3484, $rjs_core.Symbol.make("unix")) !== false) {
      if (M0.bytes_eq__p(bstr3487, $rjs_core.Bytes.fromIntArray([47])) !== false) {
        if (M0.__rjs_quoted__.path_for_some_system_p(root3481) !== false) {
          var if_res2341 = root3481;
        } else {
          var if_res2341 = M0.__rjs_quoted__.string__gt_path(root3481);
        }
        var if_res2342 = if_res2341;
      } else {
        var if_res2342 = M0.__rjs_quoted__.build_path(root3481, M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.subbytes(M0.__rjs_quoted__.path__gt_bytes(c_p3486), 1), conv3484));
      }
      var if_res2349 = if_res2342;
    } else {
      if (M0.eq_p(conv3484, $rjs_core.Symbol.make("windows")) !== false) {
        if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\[a-z]:/", bstr3487) !== false) {
          var if_res2347 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3487, 4, 5), $rjs_core.Bytes.fromIntArray([92]), M0.__rjs_quoted__.subbytes(bstr3487, 6));
        } else {
          if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3487) !== false) {
            var if_res2346 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3487, 4));
          } else {
            if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3487) !== false) {
              var if_res2345 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3487, 4));
            } else {
              if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\/", bstr3487) !== false) {
                var if_res2344 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([85, 78, 67, 92]), M0.__rjs_quoted__.subbytes(bstr3487, 2));
              } else {
                if (M0.__rjs_quoted__.regexp_match_p("/^[a-z]:/", bstr3487) !== false) {
                  var if_res2343 = M0.__rjs_quoted__.bytes_append(M0.__rjs_quoted__.subbytes(bstr3487, 0, 1), M0.__rjs_quoted__.subbytes(bstr3487, 2));
                } else {
                  var if_res2343 = M0.rvoid();
                }
                var if_res2344 = if_res2343;
              }
              var if_res2345 = if_res2344;
            }
            var if_res2346 = if_res2345;
          }
          var if_res2347 = if_res2346;
        }
        var if_res2348 = M0.__rjs_quoted__.build_path(root3481, M0.__rjs_quoted__.bytes__gt_path(if_res2347, conv3484));
      } else {
        var if_res2348 = M0.rvoid();
      }
      var if_res2349 = if_res2348;
    }
    return if_res2349;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get reroot_path() {
      return reroot_path;
    },
    get path_add_extension() {
      return path_add_extension;
    },
    get path_replace_extension() {
      return path_replace_extension;
    },
    get normal_case_path() {
      return normal_case_path;
    },
    get path_string_p() {
      return path_string_p;
    }
  };
})();
var $__runtime_47_utils_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/utils.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_kw_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1090 = M0.make_struct_type_property($rjs_core.Symbol.make("keyword-impersonator"));
  var prop_keyword_impersonator = let_result1090.getAt(0);
  var keyword_impersonator_p = let_result1090.getAt(1);
  var keyword_impersonator_ref = let_result1090.getAt(2);
  var keyword_procedure_impersonator_of = function(v1794) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_impersonator_p(v1794) !== false) {
      var if_res1091 = keyword_impersonator_ref(v1794)(v1794);
    } else {
      var if_res1091 = false;
    }
    return if_res1091;
  };
  var let_result1092 = M0.make_struct_type($rjs_core.Symbol.make("keyword-procedure"), false, 4, 0, false, M0.list(M0.cons(M0.prop_checked_procedure, true), M0.cons(M0.prop_impersonator_of, keyword_procedure_impersonator_of)), M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3));
  var struct_keyword_procedure = let_result1092.getAt(0);
  var mk_kw_proc = let_result1092.getAt(1);
  var keyword_procedure_p = let_result1092.getAt(2);
  var keyword_procedure_ref = let_result1092.getAt(3);
  var keyword_procedure_set_bang_ = let_result1092.getAt(4);
  var keyword_procedure_checker = M0.make_struct_field_accessor(keyword_procedure_ref, 0);
  var keyword_procedure_proc = M0.make_struct_field_accessor(keyword_procedure_ref, 1);
  var keyword_procedure_required = M0.make_struct_field_accessor(keyword_procedure_ref, 2);
  var keyword_procedure_allowed = M0.make_struct_field_accessor(keyword_procedure_ref, 3);
  var let_result1093 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_keyword_method = let_result1093.getAt(0);
  var make_km = let_result1093.getAt(1);
  var keyword_method_p = let_result1093.getAt(2);
  var km_ref = let_result1093.getAt(3);
  var km_set_bang_ = let_result1093.getAt(4);
  var generate_arity_string = function(proc1795) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1094 = procedure_keywords(proc1795);
    var req1796 = let_result1094.getAt(0);
    var allowed1797 = let_result1094.getAt(1);
    var a1798 = M0.procedure_arity(proc1795);
    var keywords_desc1799 = function(opt1801, req1802) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp1100 = $rjs_core.UString.make("~a with keyword~a~a");
      if (M0.null_p(M0.cdr(req1802)) !== false) {
        var if_res1099 = M0.format($rjs_core.UString.make("an ~aargument"), opt1801);
      } else {
        var if_res1099 = M0.format($rjs_core.UString.make("~aarguments"), opt1801);
      }
      if (M0.null_p(M0.cdr(req1802)) !== false) {
        var if_res1098 = $rjs_core.UString.make("");
      } else {
        var if_res1098 = $rjs_core.UString.make("s");
      }
      var tmp1803 = M0.length(req1802);
      if (M0.equal_p(tmp1803, 1) !== false) {
        var if_res1097 = M0.format($rjs_core.UString.make(" ~a"), M0.car(req1802));
      } else {
        if (M0.equal_p(tmp1803, 2) !== false) {
          var if_res1096 = M0.format($rjs_core.UString.make(" ~a and ~a"), M0.car(req1802), M0.cadr(req1802));
        } else {
          var loop1804 = function(req1805) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(M0.cdr(req1805)) !== false) {
              var if_res1095 = M0.format($rjs_core.UString.make(" and ~a"), M0.car(req1805));
            } else {
              var if_res1095 = M0.format($rjs_core.UString.make(" ~a,~a"), M0.car(req1805), loop1804(M0.cdr(req1805)));
            }
            return if_res1095;
          };
          var if_res1096 = loop1804(req1802);
        }
        var if_res1097 = if_res1096;
      }
      return M0.format(temp1100, if_res1099, if_res1098, if_res1097);
    };
    var method_adjust1800 = function(a1806) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part1807 = okm_p(proc1795);
      if (or_part1807 !== false) {
        var if_res1101 = or_part1807;
      } else {
        var if_res1101 = keyword_method_p(proc1795);
      }
      if (if_res1101 !== false) {
        if (M0.zero_p(a1806) !== false) {
          var if_res1102 = 0;
        } else {
          var if_res1102 = M0.sub1(a1806);
        }
        var if_res1103 = if_res1102;
      } else {
        var if_res1103 = a1806;
      }
      return if_res1103;
    };
    if (M0.number_p(a1798) !== false) {
      var a1808 = method_adjust1800(a1798);
      var if_res1110 = M0.format($rjs_core.UString.make("~a"), a1808);
    } else {
      if (M0.arity_at_least_p(a1798) !== false) {
        var a1809 = method_adjust1800(M0.arity_at_least_value(a1798));
        var if_res1109 = M0.format($rjs_core.UString.make("at least ~a"), a1809);
      } else {
        var if_res1109 = $rjs_core.UString.make("a different number");
      }
      var if_res1110 = if_res1109;
    }
    if (M0.null_p(req1796) !== false) {
      var if_res1108 = $rjs_core.UString.make("");
    } else {
      var if_res1108 = M0.format($rjs_core.UString.make(" plus ~a"), keywords_desc1799($rjs_core.UString.make(""), req1796));
    }
    if (allowed1797 !== false) {
      var loop1811 = function(req1812, allowed1813) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(req1812) !== false) {
          var if_res1105 = allowed1813;
        } else {
          if (M0.eq_p(M0.car(req1812), M0.car(allowed1813)) !== false) {
            var if_res1104 = loop1811(M0.cdr(req1812), M0.cdr(allowed1813));
          } else {
            var if_res1104 = M0.cons(M0.car(allowed1813), loop1811(req1812, M0.cdr(allowed1813)));
          }
          var if_res1105 = if_res1104;
        }
        return if_res1105;
      };
      var others1810 = loop1811(req1796, allowed1797);
      if (M0.null_p(others1810) !== false) {
        var if_res1106 = $rjs_core.UString.make("");
      } else {
        var if_res1106 = M0.format($rjs_core.UString.make(" plus ~a"), keywords_desc1799($rjs_core.UString.make("optional "), others1810));
      }
      var if_res1107 = if_res1106;
    } else {
      var if_res1107 = $rjs_core.UString.make(" plus arbitrary keyword arguments");
    }
    return M0.string_append(if_res1110, if_res1108, if_res1107);
  };
  var let_result1111 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string)), M0.current_inspector(), 0);
  var struct_okp = let_result1111.getAt(0);
  var make_optional_keyword_procedure = let_result1111.getAt(1);
  var okp_p = let_result1111.getAt(2);
  var okp_ref = let_result1111.getAt(3);
  var okp_set_bang_ = let_result1111.getAt(4);
  var let_result1112 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_okm = let_result1112.getAt(0);
  var make_optional_keyword_method = let_result1112.getAt(1);
  var okm_p = let_result1112.getAt(2);
  var okm_ref = let_result1112.getAt(3);
  var okm_set_bang_ = let_result1112.getAt(4);
  var let_result1113 = M0.make_struct_type_property($rjs_core.Symbol.make("named-keyword-procedure"));
  var prop_named_keyword_procedure = let_result1113.getAt(0);
  var named_keyword_procedure_p = let_result1113.getAt(1);
  var keyword_procedure_name_plus_fail = let_result1113.getAt(2);
  var let_result1115 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), function(v1814, info_l1815) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(v1814) !== false) {
      var if_res1114 = M0.make_struct_field_accessor(M0.list_ref(info_l1815, 3), v1814);
    } else {
      var if_res1114 = false;
    }
    return if_res1114;
  });
  var prop_procedure_accessor = let_result1115.getAt(0);
  var procedure_accessor_p = let_result1115.getAt(1);
  var procedure_accessor_ref = let_result1115.getAt(2);
  var let_result1116 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), false, M0.list(M0.cons(M0.prop_procedure, M0.values), M0.cons(prop_procedure_accessor, M0.values)), true);
  var new_prop_procedure = let_result1116.getAt(0);
  var new_procedure_p = let_result1116.getAt(1);
  var new_procedure_ref = let_result1116.getAt(2);
  var let_result1117 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1816) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kpp_ref(v1816, 0);
  })));
  var struct_keyword_procedure_impersonator = let_result1117.getAt(0);
  var make_kpp = let_result1117.getAt(1);
  var keyword_procedure_impersonator_p = let_result1117.getAt(2);
  var kpp_ref = let_result1117.getAt(3);
  var kpp_set_bang_ = let_result1117.getAt(4);
  var let_result1118 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1817) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kmp_ref(v1817, 0);
  })));
  var struct_keyword_method_impersonator = let_result1118.getAt(0);
  var make_kmp = let_result1118.getAt(1);
  var keyword_method_impersonator_p = let_result1118.getAt(2);
  var kmp_ref = let_result1118.getAt(3);
  var kmp_set_bang_ = let_result1118.getAt(4);
  var let_result1119 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1818) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okpp_ref(v1818, 0);
  })));
  var struct_okpp = let_result1119.getAt(0);
  var make_optional_keyword_procedure_impersonator = let_result1119.getAt(1);
  var okpp_p = let_result1119.getAt(2);
  var okpp_ref = let_result1119.getAt(3);
  var okpp_set_bang_ = let_result1119.getAt(4);
  var let_result1120 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1819) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okmp_ref(v1819, 0);
  })));
  var struct_okmp = let_result1120.getAt(0);
  var make_optional_keyword_method_impersonator = let_result1120.getAt(1);
  var okmp_p = let_result1120.getAt(2);
  var okmp_ref = let_result1120.getAt(3);
  var okmp_set_bang_ = let_result1120.getAt(4);
  var let_result1121 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_by_arity_error = let_result1121.getAt(0);
  var make_kp_by_ae = let_result1121.getAt(1);
  var kp_by_ae_p = let_result1121.getAt(2);
  var kp_by_ae_ref = let_result1121.getAt(3);
  var kp_by_ae_set_bang_ = let_result1121.getAt(4);
  var let_result1122 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_by_arity_error = let_result1122.getAt(0);
  var make_km_by_ae = let_result1122.getAt(1);
  var km_by_ae_p = let_result1122.getAt(2);
  var km_by_ae_ref = let_result1122.getAt(3);
  var km_by_ae_set_bang_ = let_result1122.getAt(4);
  var let_result1123 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_impersonator_by_arity_error = let_result1123.getAt(0);
  var make_kpi_by_ae = let_result1123.getAt(1);
  var kpi_by_ae_p = let_result1123.getAt(2);
  var kpi_by_ae_ref = let_result1123.getAt(3);
  var kpi_by_ae_set_bang_ = let_result1123.getAt(4);
  var let_result1124 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_impersonator_by_arity_error = let_result1124.getAt(0);
  var make_kmi_by_ae = let_result1124.getAt(1);
  var kmi_by_ae_p = let_result1124.getAt(2);
  var kmi_by_ae_ref = let_result1124.getAt(3);
  var kmi_by_ae_set_bang_ = let_result1124.getAt(4);
  var make_required = function(name1820, fail_proc1821, method_p1822, impersonator_p1823) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part1829 = name1820;
    if (or_part1829 !== false) {
      var if_res1128 = or_part1829;
    } else {
      var if_res1128 = $rjs_core.Symbol.make("unknown");
    }
    if (impersonator_p1823 !== false) {
      if (method_p1822 !== false) {
        var if_res1125 = struct_keyword_method_impersonator_by_arity_error;
      } else {
        var if_res1125 = struct_keyword_procedure_impersonator_by_arity_error;
      }
      var if_res1127 = if_res1125;
    } else {
      if (method_p1822 !== false) {
        var if_res1126 = struct_keyword_method_by_arity_error;
      } else {
        var if_res1126 = struct_keyword_procedure_by_arity_error;
      }
      var if_res1127 = if_res1126;
    }
    var let_result1129 = M0.make_struct_type(if_res1128, if_res1127, 0, 0, false, M0.list(M0.cons(prop_named_keyword_procedure, M0.cons(name1820, fail_proc1821))), M0.current_inspector(), fail_proc1821);
    var s_1824 = let_result1129.getAt(0);
    var mk1825 = let_result1129.getAt(1);
    var __p1826 = let_result1129.getAt(2);
    var __ref1827 = let_result1129.getAt(3);
    var __set_bang_1828 = let_result1129.getAt(4);
    return mk1825;
  };
  var cl1130 = function(proc1830) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_keyword_procedure(proc1830, $rjs_core.attachProcedureArity(function() {
      for (var args18311133 = [],
          $__1 = 0; $__1 < arguments.length; $__1++)
        args18311133[$__1] = arguments[$__1];
      var args1831 = $rjs_core.Pair.listFromArray(args18311133);
      return M0.apply(proc1830, M0.rnull, M0.rnull, args1831);
    }));
  };
  var cl1131 = function(proc1832, plain_proc1833) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_optional_keyword_procedure(make_keyword_checker(M0.rnull, false, M0.procedure_arity(proc1832)), proc1832, M0.rnull, false, plain_proc1833);
  };
  var make_keyword_procedure = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1132 = {
      '1': cl1130,
      '2': cl1131
    }[arguments.length];
    if (fixed_lam1132 !== undefined) {
      return fixed_lam1132.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var keyword_apply = $rjs_core.attachProcedureArity(function(proc1834, kws1835, kw_vals1836, normal_args1837) {
    for (var normal_argss18381134 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      normal_argss18381134[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var normal_argss1838 = $rjs_core.Pair.listFromArray(normal_argss18381134);
    var type_error1839 = function(what1840, which1841) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("keyword-apply"), what1840, which1841, proc1834, kws1835, kw_vals1836, normal_args1837, normal_argss1838);
    };
    if (M0.procedure_p(proc1834) !== false) {
      var if_res1135 = M0.rvoid();
    } else {
      var if_res1135 = type_error1839($rjs_core.UString.make("procedure?"), 0);
    }
    if_res1135;
    var loop1842 = function(ks1843) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ks1843) !== false) {
        var if_res1142 = M0.rvoid();
      } else {
        var or_part1844 = M0.not(M0.pair_p(ks1843));
        if (or_part1844 !== false) {
          var if_res1136 = or_part1844;
        } else {
          var if_res1136 = M0.not(M0.__rjs_quoted__.keyword_p(M0.car(ks1843)));
        }
        if (if_res1136 !== false) {
          var if_res1141 = type_error1839($rjs_core.UString.make("(listof keyword?)"), 1);
        } else {
          if (M0.null_p(M0.cdr(ks1843)) !== false) {
            var if_res1140 = M0.rvoid();
          } else {
            var or_part1845 = M0.not(M0.pair_p(M0.cdr(ks1843)));
            if (or_part1845 !== false) {
              var if_res1137 = or_part1845;
            } else {
              var if_res1137 = M0.not(M0.__rjs_quoted__.keyword_p(M0.cadr(ks1843)));
            }
            if (if_res1137 !== false) {
              var if_res1139 = loop1842(M0.cdr(ks1843));
            } else {
              if (M0.__rjs_quoted__.keyword_lt__p(M0.car(ks1843), M0.cadr(ks1843)) !== false) {
                var if_res1138 = loop1842(M0.cdr(ks1843));
              } else {
                var if_res1138 = type_error1839($rjs_core.UString.make("(and/c (listof? keyword?) sorted? distinct?)"), 1);
              }
              var if_res1139 = if_res1138;
            }
            var if_res1140 = if_res1139;
          }
          var if_res1141 = if_res1140;
        }
        var if_res1142 = if_res1141;
      }
      return if_res1142;
    };
    loop1842(kws1835);
    if (M0.list_p(kw_vals1836) !== false) {
      var if_res1143 = M0.rvoid();
    } else {
      var if_res1143 = type_error1839($rjs_core.UString.make("list?"), 2);
    }
    if_res1143;
    if (M0.__eq_(M0.length(kws1835), M0.length(kw_vals1836)) !== false) {
      var if_res1144 = M0.rvoid();
    } else {
      var if_res1144 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.make("keyword list length does not match value list length"), $rjs_core.UString.make("keyword list length"), M0.length(kws1835), $rjs_core.UString.make("value list length"), M0.length(kw_vals1836), $rjs_core.UString.make("keyword list"), kws1835, $rjs_core.UString.make("value list"), kw_vals1836);
    }
    if_res1144;
    var loop1847 = function(normal_argss1848, pos1849) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(M0.cdr(normal_argss1848)) !== false) {
        var l1850 = M0.car(normal_argss1848);
        if (M0.list_p(l1850) !== false) {
          var if_res1145 = l1850;
        } else {
          var if_res1145 = type_error1839($rjs_core.UString.make("list?"), pos1849);
        }
        var if_res1146 = if_res1145;
      } else {
        var if_res1146 = M0.cons(M0.car(normal_argss1848), loop1847(M0.cdr(normal_argss1848), M0.add1(pos1849)));
      }
      return if_res1146;
    };
    var normal_args1846 = loop1847(M0.cons(normal_args1837, normal_argss1838), 3);
    if (M0.null_p(kws1835) !== false) {
      var if_res1147 = M0.apply(proc1834, normal_args1846);
    } else {
      var if_res1147 = M0.apply(keyword_procedure_extract_by_method(kws1835, 2 + M0.length(normal_args1846), proc1834, 0), kws1835, kw_vals1836, normal_args1846);
    }
    return if_res1147;
  });
  var procedure_keywords = function(p1851) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1851) !== false) {
      var if_res1152 = M0.values(keyword_procedure_required(p1851), keyword_procedure_allowed(p1851));
    } else {
      if (M0.procedure_p(p1851) !== false) {
        if (new_procedure_p(p1851) !== false) {
          var v1852 = new_procedure_ref(p1851);
          if (M0.procedure_p(v1852) !== false) {
            var if_res1149 = procedure_keywords(v1852);
          } else {
            var a1853 = procedure_accessor_ref(p1851);
            if (a1853 !== false) {
              var if_res1148 = procedure_keywords(a1853(p1851));
            } else {
              var if_res1148 = M0.values(M0.rnull, M0.rnull);
            }
            var if_res1149 = if_res1148;
          }
          var if_res1150 = if_res1149;
        } else {
          var if_res1150 = M0.values(M0.rnull, M0.rnull);
        }
        var if_res1151 = if_res1150;
      } else {
        var if_res1151 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-keywords"), $rjs_core.UString.make("procedure?"), p1851);
      }
      var if_res1152 = if_res1151;
    }
    return if_res1152;
  };
  var missing_kw = $rjs_core.attachProcedureArity(function(proc1854) {
    for (var args18551153 = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      args18551153[$__2 - 1] = arguments[$__2];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args1855 = $rjs_core.Pair.listFromArray(args18551153);
    return M0.apply(keyword_procedure_extract_by_method(M0.rnull, 0, proc1854, 0), M0.rnull, M0.rnull, args1855);
  });
  var check_kw_args = function(p1856, kws1857) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1858 = function(kws1859, required1860, allowed1861) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws1859) !== false) {
        if (M0.null_p(required1860) !== false) {
          var if_res1154 = M0.values(false, false);
        } else {
          var if_res1154 = M0.values(M0.car(required1860), false);
        }
        var if_res1163 = if_res1154;
      } else {
        if (M0.pair_p(required1860) !== false) {
          var if_res1155 = M0.eq_p(M0.car(required1860), M0.car(kws1859));
        } else {
          var if_res1155 = false;
        }
        if (if_res1155 !== false) {
          var temp1158 = M0.cdr(kws1859);
          var temp1157 = M0.cdr(required1860);
          if (allowed1861 !== false) {
            var if_res1156 = M0.cdr(allowed1861);
          } else {
            var if_res1156 = false;
          }
          var if_res1162 = loop1858(temp1158, temp1157, if_res1156);
        } else {
          if (M0.not(allowed1861) !== false) {
            var if_res1161 = loop1858(M0.cdr(kws1859), required1860, false);
          } else {
            if (M0.pair_p(allowed1861) !== false) {
              if (M0.eq_p(M0.car(allowed1861), M0.car(kws1859)) !== false) {
                var if_res1159 = loop1858(M0.cdr(kws1859), required1860, M0.cdr(allowed1861));
              } else {
                var if_res1159 = loop1858(kws1859, required1860, M0.cdr(allowed1861));
              }
              var if_res1160 = if_res1159;
            } else {
              var if_res1160 = M0.values(false, M0.car(kws1859));
            }
            var if_res1161 = if_res1160;
          }
          var if_res1162 = if_res1161;
        }
        var if_res1163 = if_res1162;
      }
      return if_res1163;
    };
    return loop1858(kws1857, keyword_procedure_required(p1856), keyword_procedure_allowed(p1856));
  };
  var make_keyword_checker = function(req_kws1862, allowed_kws1863, arity1864) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.not(allowed_kws1863) !== false) {
      if (M0.null_p(req_kws1862) !== false) {
        if (M0.integer_p(arity1864) !== false) {
          var if_res1168 = function(kws1865, a1866) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (true !== false) {
              var if_res1164 = M0.__eq_(a1866, arity1864);
            } else {
              var if_res1164 = false;
            }
            return if_res1164;
          };
        } else {
          if (M0.arity_at_least_p(arity1864) !== false) {
            var arity1867 = M0.arity_at_least_value(arity1864);
            var if_res1167 = function(kws1868, a1869) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1165 = M0.__gt__eq_(a1869, arity1867);
              } else {
                var if_res1165 = false;
              }
              return if_res1165;
            };
          } else {
            var if_res1167 = function(kws1870, a1871) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1166 = arity_includes_p(arity1864, a1871);
              } else {
                var if_res1166 = false;
              }
              return if_res1166;
            };
          }
          var if_res1168 = if_res1167;
        }
        var if_res1174 = if_res1168;
      } else {
        if (M0.integer_p(arity1864) !== false) {
          var if_res1173 = function(kws1872, a1873) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (subset_p(req_kws1862, kws1872) !== false) {
              var if_res1169 = M0.__eq_(a1873, arity1864);
            } else {
              var if_res1169 = false;
            }
            return if_res1169;
          };
        } else {
          if (M0.arity_at_least_p(arity1864) !== false) {
            var arity1874 = M0.arity_at_least_value(arity1864);
            var if_res1172 = function(kws1875, a1876) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1862, kws1875) !== false) {
                var if_res1170 = M0.__gt__eq_(a1876, arity1874);
              } else {
                var if_res1170 = false;
              }
              return if_res1170;
            };
          } else {
            var if_res1172 = function(kws1877, a1878) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1862, kws1877) !== false) {
                var if_res1171 = arity_includes_p(arity1864, a1878);
              } else {
                var if_res1171 = false;
              }
              return if_res1171;
            };
          }
          var if_res1173 = if_res1172;
        }
        var if_res1174 = if_res1173;
      }
      var if_res1207 = if_res1174;
    } else {
      if (M0.null_p(allowed_kws1863) !== false) {
        if (M0.integer_p(arity1864) !== false) {
          var if_res1179 = function(kws1879, a1880) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(kws1879) !== false) {
              var if_res1175 = M0.__eq_(a1880, arity1864);
            } else {
              var if_res1175 = false;
            }
            return if_res1175;
          };
        } else {
          if (M0.arity_at_least_p(arity1864) !== false) {
            var arity1881 = M0.arity_at_least_value(arity1864);
            var if_res1178 = function(kws1882, a1883) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1882) !== false) {
                var if_res1176 = M0.__gt__eq_(a1883, arity1881);
              } else {
                var if_res1176 = false;
              }
              return if_res1176;
            };
          } else {
            var if_res1178 = function(kws1884, a1885) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1884) !== false) {
                var if_res1177 = arity_includes_p(arity1864, a1885);
              } else {
                var if_res1177 = false;
              }
              return if_res1177;
            };
          }
          var if_res1179 = if_res1178;
        }
        var if_res1206 = if_res1179;
      } else {
        if (M0.null_p(req_kws1862) !== false) {
          if (M0.integer_p(arity1864) !== false) {
            var if_res1184 = function(kws1886, a1887) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(kws1886, allowed_kws1863) !== false) {
                var if_res1180 = M0.__eq_(a1887, arity1864);
              } else {
                var if_res1180 = false;
              }
              return if_res1180;
            };
          } else {
            if (M0.arity_at_least_p(arity1864) !== false) {
              var arity1888 = M0.arity_at_least_value(arity1864);
              var if_res1183 = function(kws1889, a1890) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1889, allowed_kws1863) !== false) {
                  var if_res1181 = M0.__gt__eq_(a1890, arity1888);
                } else {
                  var if_res1181 = false;
                }
                return if_res1181;
              };
            } else {
              var if_res1183 = function(kws1891, a1892) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1891, allowed_kws1863) !== false) {
                  var if_res1182 = arity_includes_p(arity1864, a1892);
                } else {
                  var if_res1182 = false;
                }
                return if_res1182;
              };
            }
            var if_res1184 = if_res1183;
          }
          var if_res1205 = if_res1184;
        } else {
          if (M0.equal_p(req_kws1862, allowed_kws1863) !== false) {
            if (M0.integer_p(arity1864) !== false) {
              var if_res1198 = function(kws1893, a1894) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var loop1895 = function(kws1896, req_kws1897) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.null_p(req_kws1897) !== false) {
                    var if_res1187 = M0.null_p(kws1896);
                  } else {
                    if (M0.null_p(kws1896) !== false) {
                      var if_res1186 = false;
                    } else {
                      if (M0.eq_p(M0.car(kws1896), M0.car(req_kws1897)) !== false) {
                        var if_res1185 = loop1895(M0.cdr(kws1896), M0.cdr(req_kws1897));
                      } else {
                        var if_res1185 = false;
                      }
                      var if_res1186 = if_res1185;
                    }
                    var if_res1187 = if_res1186;
                  }
                  return if_res1187;
                };
                if (loop1895(kws1893, req_kws1862) !== false) {
                  var if_res1188 = M0.__eq_(a1894, arity1864);
                } else {
                  var if_res1188 = false;
                }
                return if_res1188;
              };
            } else {
              if (M0.arity_at_least_p(arity1864) !== false) {
                var arity1898 = M0.arity_at_least_value(arity1864);
                var if_res1197 = function(kws1899, a1900) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1901 = function(kws1902, req_kws1903) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1903) !== false) {
                      var if_res1191 = M0.null_p(kws1902);
                    } else {
                      if (M0.null_p(kws1902) !== false) {
                        var if_res1190 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1902), M0.car(req_kws1903)) !== false) {
                          var if_res1189 = loop1901(M0.cdr(kws1902), M0.cdr(req_kws1903));
                        } else {
                          var if_res1189 = false;
                        }
                        var if_res1190 = if_res1189;
                      }
                      var if_res1191 = if_res1190;
                    }
                    return if_res1191;
                  };
                  if (loop1901(kws1899, req_kws1862) !== false) {
                    var if_res1192 = M0.__gt__eq_(a1900, arity1898);
                  } else {
                    var if_res1192 = false;
                  }
                  return if_res1192;
                };
              } else {
                var if_res1197 = function(kws1904, a1905) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1906 = function(kws1907, req_kws1908) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1908) !== false) {
                      var if_res1195 = M0.null_p(kws1907);
                    } else {
                      if (M0.null_p(kws1907) !== false) {
                        var if_res1194 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1907), M0.car(req_kws1908)) !== false) {
                          var if_res1193 = loop1906(M0.cdr(kws1907), M0.cdr(req_kws1908));
                        } else {
                          var if_res1193 = false;
                        }
                        var if_res1194 = if_res1193;
                      }
                      var if_res1195 = if_res1194;
                    }
                    return if_res1195;
                  };
                  if (loop1906(kws1904, req_kws1862) !== false) {
                    var if_res1196 = arity_includes_p(arity1864, a1905);
                  } else {
                    var if_res1196 = false;
                  }
                  return if_res1196;
                };
              }
              var if_res1198 = if_res1197;
            }
            var if_res1204 = if_res1198;
          } else {
            if (M0.integer_p(arity1864) !== false) {
              var if_res1203 = function(kws1909, a1910) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subsets_p(req_kws1862, kws1909, allowed_kws1863) !== false) {
                  var if_res1199 = M0.__eq_(a1910, arity1864);
                } else {
                  var if_res1199 = false;
                }
                return if_res1199;
              };
            } else {
              if (M0.arity_at_least_p(arity1864) !== false) {
                var arity1911 = M0.arity_at_least_value(arity1864);
                var if_res1202 = function(kws1912, a1913) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1862, kws1912, allowed_kws1863) !== false) {
                    var if_res1200 = M0.__gt__eq_(a1913, arity1911);
                  } else {
                    var if_res1200 = false;
                  }
                  return if_res1200;
                };
              } else {
                var if_res1202 = function(kws1914, a1915) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1862, kws1914, allowed_kws1863) !== false) {
                    var if_res1201 = arity_includes_p(arity1864, a1915);
                  } else {
                    var if_res1201 = false;
                  }
                  return if_res1201;
                };
              }
              var if_res1203 = if_res1202;
            }
            var if_res1204 = if_res1203;
          }
          var if_res1205 = if_res1204;
        }
        var if_res1206 = if_res1205;
      }
      var if_res1207 = if_res1206;
    }
    return if_res1207;
  };
  var arity_includes_p = function(arity1916, a1917) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.integer_p(arity1916) !== false) {
      var if_res1209 = M0.__eq_(arity1916, a1917);
    } else {
      if (M0.arity_at_least_p(arity1916) !== false) {
        var if_res1208 = M0.__gt__eq_(a1917, M0.arity_at_least_value(a1917));
      } else {
        var if_res1208 = M0.ormap(function(ar1918) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return arity_includes_p(ar1918, a1917);
        }, arity1916);
      }
      var if_res1209 = if_res1208;
    }
    return if_res1209;
  };
  var subset_p = function(l11919, l21920) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11919) !== false) {
      var if_res1212 = true;
    } else {
      if (M0.null_p(l21920) !== false) {
        var if_res1211 = false;
      } else {
        if (M0.eq_p(M0.car(l11919), M0.car(l21920)) !== false) {
          var if_res1210 = subset_p(M0.cdr(l11919), M0.cdr(l21920));
        } else {
          var if_res1210 = subset_p(l11919, M0.cdr(l21920));
        }
        var if_res1211 = if_res1210;
      }
      var if_res1212 = if_res1211;
    }
    return if_res1212;
  };
  var subsets_p = function(l11921, l21922, l31923) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11921) !== false) {
      var if_res1217 = subset_p(l21922, l31923);
    } else {
      if (M0.null_p(l21922) !== false) {
        var if_res1216 = false;
      } else {
        if (M0.null_p(l31923) !== false) {
          var if_res1215 = false;
        } else {
          var v21924 = M0.car(l21922);
          if (M0.eq_p(M0.car(l11921), v21924) !== false) {
            var if_res1214 = subsets_p(M0.cdr(l11921), M0.cdr(l21922), M0.cdr(l31923));
          } else {
            if (M0.eq_p(v21924, M0.car(l31923)) !== false) {
              var if_res1213 = subsets_p(l11921, M0.cdr(l21922), M0.cdr(l31923));
            } else {
              var if_res1213 = subsets_p(l11921, l21922, M0.cdr(l31923));
            }
            var if_res1214 = if_res1213;
          }
          var if_res1215 = if_res1214;
        }
        var if_res1216 = if_res1215;
      }
      var if_res1217 = if_res1216;
    }
    return if_res1217;
  };
  var keyword_procedure_extract_by_method = function(kws1925, n1926, p1927, method_n1928) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1927) !== false) {
      var if_res1218 = keyword_procedure_checker(p1927)(kws1925, n1926);
    } else {
      var if_res1218 = false;
    }
    if (if_res1218 !== false) {
      var if_res1246 = keyword_procedure_proc(p1927);
    } else {
      if (M0.not(keyword_procedure_p(p1927)) !== false) {
        if (M0.procedure_p(p1927) !== false) {
          if (new_procedure_p(p1927) !== false) {
            var a1931 = procedure_accessor_ref(p1927);
            if (a1931 !== false) {
              var if_res1219 = a1931(p1927);
            } else {
              var if_res1219 = false;
            }
            var if_res1220 = if_res1219;
          } else {
            var if_res1220 = false;
          }
          var or_part1930 = if_res1220;
          if (or_part1930 !== false) {
            var if_res1223 = or_part1930;
          } else {
            var or_part1932 = M0.__rjs_quoted__.procedure_extract_target(p1927);
            if (or_part1932 !== false) {
              var if_res1222 = or_part1932;
            } else {
              if (new_procedure_p(p1927) !== false) {
                var if_res1221 = $rjs_core.Symbol.make("method");
              } else {
                var if_res1221 = false;
              }
              var if_res1222 = if_res1221;
            }
            var if_res1223 = if_res1222;
          }
          var if_res1224 = if_res1223;
        } else {
          var if_res1224 = false;
        }
        var if_res1225 = if_res1224;
      } else {
        var if_res1225 = false;
      }
      var p21929 = if_res1225;
      if (p21929 !== false) {
        if (M0.eq_p(p21929, $rjs_core.Symbol.make("method")) !== false) {
          var p31933 = keyword_procedure_extract_by_method(kws1925, M0.add1(n1926), new_procedure_ref(p1927), M0.add1(method_n1928));
          var if_res1227 = $rjs_core.attachProcedureArity(function(kws1934, kw_args1935) {
            for (var args19361226 = [],
                $__3 = 2; $__3 < arguments.length; $__3++)
              args19361226[$__3 - 2] = arguments[$__3];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var args1936 = $rjs_core.Pair.listFromArray(args19361226);
            return M0.apply(p31933, kws1934, kw_args1935, M0.cons(p1927, args1936));
          });
        } else {
          var if_res1227 = keyword_procedure_extract_by_method(kws1925, n1926, p21929, method_n1928);
        }
        var if_res1245 = if_res1227;
      } else {
        var if_res1245 = $rjs_core.attachProcedureArity(function(kws1937, kw_args1938) {
          for (var args19391228 = [],
              $__4 = 2; $__4 < arguments.length; $__4++)
            args19391228[$__4 - 2] = arguments[$__4];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var args1939 = $rjs_core.Pair.listFromArray(args19391228);
          if (keyword_procedure_p(p1927) !== false) {
            var if_res1229 = check_kw_args(p1927, kws1937);
          } else {
            var if_res1229 = M0.values(false, M0.car(kws1937));
          }
          var let_result1230 = if_res1229;
          var missing_kw1940 = let_result1230.getAt(0);
          var extra_kw1941 = let_result1230.getAt(1);
          var or_part1946 = keyword_method_p(p1927);
          if (or_part1946 !== false) {
            var if_res1231 = or_part1946;
          } else {
            var if_res1231 = okm_p(p1927);
          }
          if (if_res1231 !== false) {
            var if_res1232 = 1;
          } else {
            var if_res1232 = 0;
          }
          var method_n1945 = method_n1928 + if_res1232;
          if (M0.__gt__eq_(n1926, method_n1945) !== false) {
            var if_res1233 = n1926 - method_n1945;
          } else {
            var if_res1233 = n1926;
          }
          var n1942 = if_res1233;
          if (M0.null_p(args1939) !== false) {
            var if_res1234 = M0.null_p(kws1937);
          } else {
            var if_res1234 = false;
          }
          if (if_res1234 !== false) {
            var if_res1235 = $rjs_core.UString.make("");
          } else {
            var if_res1235 = M0.apply(M0.string_append, $rjs_core.UString.make("\n  arguments...:"), M0.append(M0.map(function(v1947) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.make("\n   ~e"), v1947);
            }, args1939), M0.map(function(kw1948, kw_arg1949) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.make("\n   ~a ~e"), kw1948, kw_arg1949);
            }, kws1937, kw_args1938)));
          }
          var args_str1943 = if_res1235;
          var proc_name1944 = function(p1950) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (named_keyword_procedure_p(p1950) !== false) {
              var if_res1236 = M0.car(keyword_procedure_name_plus_fail(p1950));
            } else {
              var if_res1236 = false;
            }
            var or_part1951 = if_res1236;
            if (or_part1951 !== false) {
              var if_res1238 = or_part1951;
            } else {
              var or_part1952 = M0.__rjs_quoted__.object_name(p1950);
              if (or_part1952 !== false) {
                var if_res1237 = or_part1952;
              } else {
                var if_res1237 = p1950;
              }
              var if_res1238 = if_res1237;
            }
            return if_res1238;
          };
          if (extra_kw1941 !== false) {
            if (keyword_procedure_p(p1927) !== false) {
              var if_res1240 = M0.format(M0.string_append($rjs_core.UString.make("application: procedure does not expect an argument with given keyword\n"), $rjs_core.UString.make("  procedure: ~a\n"), $rjs_core.UString.make("  given keyword: ~a"), $rjs_core.UString.make("~a")), proc_name1944(p1927), extra_kw1941, args_str1943);
            } else {
              if (M0.procedure_p(p1927) !== false) {
                var if_res1239 = M0.format(M0.string_append($rjs_core.UString.make("application: procedure does not accept keyword arguments\n"), $rjs_core.UString.make("  procedure: ~a"), $rjs_core.UString.make("~a")), proc_name1944(p1927), args_str1943);
              } else {
                var if_res1239 = M0.format(M0.string_append($rjs_core.UString.make("application: not a procedure;\n"), $rjs_core.UString.make(" expected a procedure that can be applied to arguments\n"), $rjs_core.UString.make("  given: ~e"), $rjs_core.UString.make("~a")), p1927, args_str1943);
              }
              var if_res1240 = if_res1239;
            }
            var if_res1244 = if_res1240;
          } else {
            if (missing_kw1940 !== false) {
              var if_res1243 = M0.format(M0.string_append($rjs_core.UString.make("application: required keyword argument not supplied\n"), $rjs_core.UString.make("  procedure: ~a\n"), $rjs_core.UString.make("  required keyword: ~a"), $rjs_core.UString.make("~a")), proc_name1944(p1927), missing_kw1940, args_str1943);
            } else {
              var temp1242 = M0.string_append($rjs_core.UString.make("application: no case matching ~a non-keyword argument~a\n"), $rjs_core.UString.make("  procedure: ~a"), $rjs_core.UString.make("~a"));
              if (M0.__eq_(1, n1942 - 2) !== false) {
                var if_res1241 = $rjs_core.UString.make("");
              } else {
                var if_res1241 = $rjs_core.UString.make("s");
              }
              var if_res1243 = M0.format(temp1242, n1942 - 2, if_res1241, proc_name1944(p1927), args_str1943);
            }
            var if_res1244 = if_res1243;
          }
          return M0.raise(M0.__rjs_quoted__.exn_fail_contract(if_res1244, M0.current_continuation_marks()));
        });
      }
      var if_res1246 = if_res1245;
    }
    return if_res1246;
  };
  var keyword_procedure_extract = function(p1953, kws1954, n1955) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return keyword_procedure_extract_by_method(kws1954, n1955, p1953, 0);
  };
  var procedure_reduce_keyword_arity = function(proc1956, arity1957, req_kw1958, allowed_kw1959) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (okp_p(proc1956) !== false) {
      var if_res1247 = okp_ref(proc1956, 0);
    } else {
      var if_res1247 = proc1956;
    }
    var plain_proc1960 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1247, arity1957);
    var sorted_p1961 = function(kws1962) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1963 = function(kws1964) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(kws1964) !== false) {
          var if_res1250 = true;
        } else {
          if (M0.null_p(M0.cdr(kws1964)) !== false) {
            var if_res1249 = true;
          } else {
            if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws1964), M0.cadr(kws1964)) !== false) {
              var if_res1248 = loop1963(M0.cdr(kws1964));
            } else {
              var if_res1248 = false;
            }
            var if_res1249 = if_res1248;
          }
          var if_res1250 = if_res1249;
        }
        return if_res1250;
      };
      return loop1963(kws1962);
    };
    if (M0.list_p(req_kw1958) !== false) {
      if (M0.andmap(M0.__rjs_quoted__.keyword_p, req_kw1958) !== false) {
        var if_res1251 = sorted_p1961(req_kw1958);
      } else {
        var if_res1251 = false;
      }
      var if_res1252 = if_res1251;
    } else {
      var if_res1252 = false;
    }
    if (if_res1252 !== false) {
      var if_res1253 = M0.rvoid();
    } else {
      var if_res1253 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("(and/c (listof? keyword?) sorted? distinct?)"), 2, proc1956, arity1957, req_kw1958, allowed_kw1959);
    }
    if_res1253;
    if (allowed_kw1959 !== false) {
      if (M0.list_p(allowed_kw1959) !== false) {
        if (M0.andmap(M0.__rjs_quoted__.keyword_p, allowed_kw1959) !== false) {
          var if_res1254 = sorted_p1961(allowed_kw1959);
        } else {
          var if_res1254 = false;
        }
        var if_res1255 = if_res1254;
      } else {
        var if_res1255 = false;
      }
      if (if_res1255 !== false) {
        var if_res1256 = M0.rvoid();
      } else {
        var if_res1256 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("(or/c (and/c (listof? keyword?) sorted? distinct?) #f)"), 3, proc1956, arity1957, req_kw1958, allowed_kw1959);
      }
      if_res1256;
      if (subset_p(req_kw1958, allowed_kw1959) !== false) {
        var if_res1257 = M0.rvoid();
      } else {
        var if_res1257 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("allowed-keyword list does not include all required keywords"), $rjs_core.UString.make("allowed-keyword list"), allowed_kw1959, $rjs_core.UString.make("required keywords"), req_kw1958);
      }
      var if_res1258 = if_res1257;
    } else {
      var if_res1258 = M0.rvoid();
    }
    if_res1258;
    var let_result1259 = procedure_keywords(proc1956);
    var old_req1965 = let_result1259.getAt(0);
    var old_allowed1966 = let_result1259.getAt(1);
    if (subset_p(old_req1965, req_kw1958) !== false) {
      var if_res1260 = M0.rvoid();
    } else {
      var if_res1260 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("cannot reduce required keyword set"), $rjs_core.UString.make("required keywords"), old_req1965, $rjs_core.UString.make("requested required keywords"), req_kw1958);
    }
    if_res1260;
    if (old_allowed1966 !== false) {
      if (subset_p(req_kw1958, old_allowed1966) !== false) {
        var if_res1261 = M0.rvoid();
      } else {
        var if_res1261 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("cannot require keywords not in original allowed set"), $rjs_core.UString.make("original allowed keywords"), old_allowed1966, $rjs_core.UString.make("requested required keywords"), req_kw1958);
      }
      if_res1261;
      var or_part1967 = M0.not(allowed_kw1959);
      if (or_part1967 !== false) {
        var if_res1262 = or_part1967;
      } else {
        var if_res1262 = subset_p(allowed_kw1959, old_allowed1966);
      }
      if (if_res1262 !== false) {
        var if_res1263 = M0.rvoid();
      } else {
        var if_res1263 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.make("cannot allow keywords not in original allowed set"), $rjs_core.UString.make("original allowed keywords"), old_allowed1966, $rjs_core.UString.make("requested allowed keywords"), allowed_kw1959);
      }
      var if_res1264 = if_res1263;
    } else {
      var if_res1264 = M0.rvoid();
    }
    if_res1264;
    if (M0.null_p(allowed_kw1959) !== false) {
      var if_res1273 = plain_proc1960;
    } else {
      var inc_arity1968 = function(arity1969, delta1970) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var loop1971 = function(a1972) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.integer_p(a1972) !== false) {
            var if_res1266 = a1972 + delta1970;
          } else {
            if (M0.arity_at_least_p(a1972) !== false) {
              var if_res1265 = M0.arity_at_least(M0.arity_at_least_value(a1972) + delta1970);
            } else {
              var if_res1265 = M0.map(loop1971, a1972);
            }
            var if_res1266 = if_res1265;
          }
          return if_res1266;
        };
        return loop1971(arity1969);
      };
      var new_arity1973 = inc_arity1968(arity1957, 2);
      var kw_checker1974 = make_keyword_checker(req_kw1958, allowed_kw1959, new_arity1973);
      var proc1975 = normalize_proc(proc1956);
      var new_kw_proc1976 = M0.__rjs_quoted__.procedure_reduce_arity(keyword_procedure_proc(proc1975), new_arity1973);
      if (M0.null_p(req_kw1958) !== false) {
        if (okm_p(proc1975) !== false) {
          var if_res1267 = make_optional_keyword_method;
        } else {
          var if_res1267 = make_optional_keyword_procedure;
        }
        var if_res1272 = if_res1267(kw_checker1974, new_kw_proc1976, req_kw1958, allowed_kw1959, plain_proc1960);
      } else {
        if (named_keyword_procedure_p(proc1975) !== false) {
          var if_res1270 = M0.car(keyword_procedure_name_plus_fail(proc1975));
        } else {
          var if_res1270 = false;
        }
        var or_part1977 = if_res1270;
        if (or_part1977 !== false) {
          var if_res1271 = or_part1977;
        } else {
          var if_res1271 = M0.__rjs_quoted__.object_name(proc1975);
        }
        var temp1269 = M0.__rjs_quoted__.procedure_reduce_arity(missing_kw, inc_arity1968(arity1957, 1));
        var or_part1978 = okm_p(proc1975);
        if (or_part1978 !== false) {
          var if_res1268 = or_part1978;
        } else {
          var if_res1268 = keyword_method_p(proc1975);
        }
        var if_res1272 = make_required(if_res1271, temp1269, if_res1268, false)(kw_checker1974, new_kw_proc1976, req_kw1958, allowed_kw1959);
      }
      var if_res1273 = if_res1272;
    }
    return if_res1273;
  };
  var procedure_reduce_arity1979 = function(proc1980, arity1981) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc1980) !== false) {
      var let_result1274 = procedure_keywords(proc1980);
      var req1982 = let_result1274.getAt(0);
      var allows1983 = let_result1274.getAt(1);
      if (M0.pair_p(req1982) !== false) {
        var if_res1275 = M0.not(M0.null_p(arity1981));
      } else {
        var if_res1275 = false;
      }
      var if_res1276 = if_res1275;
    } else {
      var if_res1276 = false;
    }
    if (if_res1276 !== false) {
      var if_res1278 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-arity"), $rjs_core.UString.make("procedure has required keyword arguments"), $rjs_core.UString.make("procedure"), proc1980);
    } else {
      if (okm_p(proc1980) !== false) {
        var if_res1277 = M0.__rjs_quoted__.procedure__gt_method(proc1980);
      } else {
        var if_res1277 = proc1980;
      }
      var if_res1278 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1277, arity1981);
    }
    return if_res1278;
  };
  var new_procedure_reduce_arity = procedure_reduce_arity1979;
  var procedure__gt_method1984 = function(proc1985) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proc1986 = normalize_proc(proc1985);
    if (keyword_procedure_p(proc1986) !== false) {
      if (okm_p(proc1986) !== false) {
        var if_res1281 = proc1986;
      } else {
        if (keyword_method_p(proc1986) !== false) {
          var if_res1280 = proc1986;
        } else {
          if (okp_p(proc1986) !== false) {
            var if_res1279 = make_optional_keyword_method(keyword_procedure_checker(proc1986), keyword_procedure_proc(proc1986), keyword_procedure_required(proc1986), keyword_procedure_allowed(proc1986), okp_ref(proc1986, 0));
          } else {
            var name_plus_fail1987 = keyword_procedure_name_plus_fail(proc1986);
            var mk1988 = make_required(M0.car(name_plus_fail1987), M0.cdr(name_plus_fail1987), true, false);
            var if_res1279 = mk1988(keyword_procedure_checker(proc1986), keyword_procedure_proc(proc1986), keyword_procedure_required(proc1986), keyword_procedure_allowed(proc1986));
          }
          var if_res1280 = if_res1279;
        }
        var if_res1281 = if_res1280;
      }
      var if_res1282 = if_res1281;
    } else {
      var if_res1282 = M0.__rjs_quoted__.procedure__gt_method(proc1986);
    }
    return if_res1282;
  };
  var new_procedure__gt_method = procedure__gt_method1984;
  var procedure_rename1989 = function(proc1990, name1991) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc1990) !== false) {
      var if_res1283 = M0.symbol_p(name1991);
    } else {
      var if_res1283 = false;
    }
    if (M0.not(if_res1283) !== false) {
      var if_res1286 = M0.__rjs_quoted__.procedure_rename(proc1990, name1991);
    } else {
      if (okp_p(proc1990) !== false) {
        if (okm_p(proc1990) !== false) {
          var if_res1284 = make_optional_keyword_method;
        } else {
          var if_res1284 = make_optional_keyword_procedure;
        }
        var if_res1285 = if_res1284(keyword_procedure_checker(proc1990), keyword_procedure_proc(proc1990), keyword_procedure_required(proc1990), keyword_procedure_allowed(proc1990), M0.__rjs_quoted__.procedure_rename(okp_ref(proc1990, 0), name1991));
      } else {
        var name_plus_fail1992 = keyword_procedure_name_plus_fail(proc1990);
        var mk1993 = make_required(name1991, M0.cdr(name_plus_fail1992), keyword_method_p(proc1990), false);
        var if_res1285 = mk1993(keyword_procedure_checker(proc1990), keyword_procedure_proc(proc1990), keyword_procedure_required(proc1990), keyword_procedure_allowed(proc1990));
      }
      var if_res1286 = if_res1285;
    }
    return if_res1286;
  };
  var new_procedure_rename = procedure_rename1989;
  var chaperone_procedure1994 = $rjs_core.attachProcedureArity(function(proc1995, wrap_proc1996) {
    for (var props19971287 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      props19971287[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1997 = $rjs_core.Pair.listFromArray(props19971287);
    return do_chaperone_procedure(false, false, M0.__rjs_quoted__.chaperone_procedure, $rjs_core.Symbol.make("chaperone-procedure"), proc1995, wrap_proc1996, props1997);
  });
  var new_chaperone_procedure = chaperone_procedure1994;
  var unsafe_chaperone_procedure1998 = $rjs_core.attachProcedureArity(function(proc1999, wrap_proc2000) {
    for (var props20011288 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      props20011288[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props2001 = $rjs_core.Pair.listFromArray(props20011288);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_chaperone_procedure, $rjs_core.Symbol.make("unsafe-chaperone-procedure"), proc1999, wrap_proc2000, props2001);
  });
  var new_unsafe_chaperone_procedure = unsafe_chaperone_procedure1998;
  var impersonate_procedure2002 = $rjs_core.attachProcedureArity(function(proc2003, wrap_proc2004) {
    for (var props20051289 = [],
        $__5 = 2; $__5 < arguments.length; $__5++)
      props20051289[$__5 - 2] = arguments[$__5];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props2005 = $rjs_core.Pair.listFromArray(props20051289);
    return do_chaperone_procedure(true, false, M0.__rjs_quoted__.impersonate_procedure, $rjs_core.Symbol.make("impersonate-procedure"), proc2003, wrap_proc2004, props2005);
  });
  var new_impersonate_procedure = impersonate_procedure2002;
  var unsafe_impersonate_procedure2006 = $rjs_core.attachProcedureArity(function(proc2007, wrap_proc2008) {
    for (var props20091290 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      props20091290[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props2009 = $rjs_core.Pair.listFromArray(props20091290);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_impersonate_procedure, $rjs_core.Symbol.make("unsafe-impersonate-procedure"), proc2007, wrap_proc2008, props2009);
  });
  var new_unsafe_impersonate_procedure = unsafe_impersonate_procedure2006;
  var chaperone_procedure_times_2010 = $rjs_core.attachProcedureArity(function(proc2011, wrap_proc2012) {
    for (var props20131291 = [],
        $__7 = 2; $__7 < arguments.length; $__7++)
      props20131291[$__7 - 2] = arguments[$__7];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props2013 = $rjs_core.Pair.listFromArray(props20131291);
    return do_chaperone_procedure(false, true, M0.__rjs_quoted__.chaperone_procedure_times_, $rjs_core.Symbol.make("chaperone-procedure"), proc2011, wrap_proc2012, props2013);
  });
  var new_chaperone_procedure_times_ = chaperone_procedure_times_2010;
  var impersonate_procedure_times_2014 = $rjs_core.attachProcedureArity(function(proc2015, wrap_proc2016) {
    for (var props20171292 = [],
        $__8 = 2; $__8 < arguments.length; $__8++)
      props20171292[$__8 - 2] = arguments[$__8];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props2017 = $rjs_core.Pair.listFromArray(props20171292);
    return do_chaperone_procedure(true, true, M0.__rjs_quoted__.impersonate_procedure_times_, $rjs_core.Symbol.make("impersonate-procedure"), proc2015, wrap_proc2016, props2017);
  });
  var new_impersonate_procedure_times_ = impersonate_procedure_times_2014;
  var do_chaperone_procedure = function(is_impersonator_p2018, self_arg_p2019, chaperone_procedure2020, name2021, proc2022, wrap_proc2023, props2024) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc2025 = normalize_proc(proc2022);
    var n_wrap_proc2026 = normalize_proc(wrap_proc2023);
    var or_part2027 = M0.not(keyword_procedure_p(n_proc2025));
    if (or_part2027 !== false) {
      var if_res1294 = or_part2027;
    } else {
      var or_part2028 = M0.not(M0.procedure_p(wrap_proc2023));
      if (or_part2028 !== false) {
        var if_res1293 = or_part2028;
      } else {
        var if_res1293 = bad_props_p(props2024);
      }
      var if_res1294 = if_res1293;
    }
    if (if_res1294 !== false) {
      var if_res1358 = M0.apply(chaperone_procedure2020, proc2022, wrap_proc2023, props2024);
    } else {
      chaperone_arity_match_checking(self_arg_p2019, name2021, proc2022, wrap_proc2023, props2024);
      var p2030 = keyword_procedure_proc(n_wrap_proc2026);
      if (self_arg_p2019 !== false) {
        var cl1295 = $rjs_core.attachProcedureArity(function(self_proc2031, kws2032, args2033) {
          for (var rest20341300 = [],
              $__9 = 3; $__9 < arguments.length; $__9++)
            rest20341300[$__9 - 3] = arguments[$__9];
          if (arguments.length < 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest2034 = $rjs_core.Pair.listFromArray(rest20341300);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p2030, kws2032, args2033, self_proc2031, rest2034);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results20351301 = [],
                $__10 = 0; $__10 < arguments.length; $__10++)
              results20351301[$__10] = arguments[$__10];
            var results2035 = $rjs_core.Pair.listFromArray(results20351301);
            var len2036 = M0.length(results2035);
            var alen2037 = M0.length(rest2034);
            if (M0.__lt_(len2036, alen2037 + 1) !== false) {
              var if_res1302 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.make("wrong number of results from wrapper procedure"), $rjs_core.UString.make("expected minimum number of results"), alen2037 + 1, $rjs_core.UString.make("received number of results"), len2036, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
            } else {
              var if_res1302 = M0.rvoid();
            }
            if_res1302;
            var num_extra2038 = len2036 - (alen2037 + 1);
            var new_args2039 = M0.list_ref(results2035, num_extra2038);
            if (M0.list_p(new_args2039) !== false) {
              var if_res1303 = M0.__eq_(M0.length(new_args2039), M0.length(args2033));
            } else {
              var if_res1303 = false;
            }
            if (if_res1303 !== false) {
              var if_res1307 = M0.rvoid();
            } else {
              var temp1306 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1305 = $rjs_core.UString.make("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len2036, alen2037) !== false) {
                var if_res1304 = $rjs_core.UString.make("");
              } else {
                var if_res1304 = $rjs_core.UString.make(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1307 = M0.__rjs_quoted__.raise_arguments_error(temp1306, M0.format(temp1305, if_res1304), $rjs_core.UString.make("first result"), new_args2039, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
            }
            if_res1307;
            M0.for_each(function(kw2040, new_arg2041, arg2042) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p2018 !== false) {
                var if_res1309 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg2041, arg2042) !== false) {
                  var if_res1308 = M0.rvoid();
                } else {
                  var if_res1308 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.make("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw2040), $rjs_core.UString.make("result"), new_arg2041, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
                }
                var if_res1309 = if_res1308;
              }
              return if_res1309;
            }, kws2032, new_args2039, args2033);
            var tmp2043 = num_extra2038;
            if (M0.equal_p(tmp2043, 0) !== false) {
              var if_res1312 = M0.apply(M0.values, kws2032, results2035);
            } else {
              if (M0.equal_p(tmp2043, 1) !== false) {
                var if_res1311 = M0.apply(M0.values, M0.car(results2035), kws2032, M0.cdr(results2035));
              } else {
                var loop2044 = function(results2045, c2046) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c2046) !== false) {
                    var if_res1310 = M0.cons(kws2032, results2045);
                  } else {
                    var if_res1310 = M0.cons(M0.car(results2045), loop2044(M0.cdr(results2045), M0.sub1(c2046)));
                  }
                  return if_res1310;
                };
                var if_res1311 = M0.apply(M0.values, loop2044(results2035, num_extra2038));
              }
              var if_res1312 = if_res1311;
            }
            return if_res1312;
          }));
        });
        var cl1296 = $rjs_core.attachProcedureArity(function() {
          for (var other20471313 = [],
              $__10 = 0; $__10 < arguments.length; $__10++)
            other20471313[$__10] = arguments[$__10];
          var other2047 = $rjs_core.Pair.listFromArray(other20471313);
          return M0.error($rjs_core.UString.make("shouldn't get here"));
        });
        var if_res1333 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1297 = {}[arguments.length];
          if (fixed_lam1297 !== undefined) {
            return fixed_lam1297.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1295.length, 1) !== false) {
              var if_res1299 = cl1295.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1298 = cl1296.apply(null, arguments);
              } else {
                var if_res1298 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
              }
              var if_res1299 = if_res1298;
            }
            return if_res1299;
          }
        }, [M0.make_arity_at_least(0)]);
      } else {
        var cl1314 = $rjs_core.attachProcedureArity(function(kws2048, args2049) {
          for (var rest20501319 = [],
              $__11 = 2; $__11 < arguments.length; $__11++)
            rest20501319[$__11 - 2] = arguments[$__11];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest2050 = $rjs_core.Pair.listFromArray(rest20501319);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p2030, kws2048, args2049, rest2050);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results20511320 = [],
                $__12 = 0; $__12 < arguments.length; $__12++)
              results20511320[$__12] = arguments[$__12];
            var results2051 = $rjs_core.Pair.listFromArray(results20511320);
            var len2052 = M0.length(results2051);
            var alen2053 = M0.length(rest2050);
            if (M0.__lt_(len2052, alen2053 + 1) !== false) {
              var if_res1321 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.make("wrong number of results from wrapper procedure"), $rjs_core.UString.make("expected minimum number of results"), alen2053 + 1, $rjs_core.UString.make("received number of results"), len2052, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
            } else {
              var if_res1321 = M0.rvoid();
            }
            if_res1321;
            var num_extra2054 = len2052 - (alen2053 + 1);
            var new_args2055 = M0.list_ref(results2051, num_extra2054);
            if (M0.list_p(new_args2055) !== false) {
              var if_res1322 = M0.__eq_(M0.length(new_args2055), M0.length(args2049));
            } else {
              var if_res1322 = false;
            }
            if (if_res1322 !== false) {
              var if_res1326 = M0.rvoid();
            } else {
              var temp1325 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1324 = $rjs_core.UString.make("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len2052, alen2053) !== false) {
                var if_res1323 = $rjs_core.UString.make("");
              } else {
                var if_res1323 = $rjs_core.UString.make(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1326 = M0.__rjs_quoted__.raise_arguments_error(temp1325, M0.format(temp1324, if_res1323), $rjs_core.UString.make("first result"), new_args2055, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
            }
            if_res1326;
            M0.for_each(function(kw2056, new_arg2057, arg2058) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p2018 !== false) {
                var if_res1328 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg2057, arg2058) !== false) {
                  var if_res1327 = M0.rvoid();
                } else {
                  var if_res1327 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.make("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw2056), $rjs_core.UString.make("result"), new_arg2057, $rjs_core.UString.make("wrapper procedure"), wrap_proc2023);
                }
                var if_res1328 = if_res1327;
              }
              return if_res1328;
            }, kws2048, new_args2055, args2049);
            var tmp2059 = num_extra2054;
            if (M0.equal_p(tmp2059, 0) !== false) {
              var if_res1331 = M0.apply(M0.values, kws2048, results2051);
            } else {
              if (M0.equal_p(tmp2059, 1) !== false) {
                var if_res1330 = M0.apply(M0.values, M0.car(results2051), kws2048, M0.cdr(results2051));
              } else {
                var loop2060 = function(results2061, c2062) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c2062) !== false) {
                    var if_res1329 = M0.cons(kws2048, results2061);
                  } else {
                    var if_res1329 = M0.cons(M0.car(results2061), loop2060(M0.cdr(results2061), M0.sub1(c2062)));
                  }
                  return if_res1329;
                };
                var if_res1330 = M0.apply(M0.values, loop2060(results2051, num_extra2054));
              }
              var if_res1331 = if_res1330;
            }
            return if_res1331;
          }));
        });
        var cl1315 = $rjs_core.attachProcedureArity(function() {
          for (var other20631332 = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            other20631332[$__12] = arguments[$__12];
          var other2063 = $rjs_core.Pair.listFromArray(other20631332);
          return M0.error($rjs_core.UString.make("shouldn't get here"));
        });
        var if_res1333 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1316 = {}[arguments.length];
          if (fixed_lam1316 !== undefined) {
            return fixed_lam1316.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1314.length, 1) !== false) {
              var if_res1318 = cl1314.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1317 = cl1315.apply(null, arguments);
              } else {
                var if_res1317 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
              }
              var if_res1318 = if_res1317;
            }
            return if_res1318;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var kw_chaperone2029 = if_res1333;
      var wrap2066 = function(proc2067, n_proc2068) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.not(M0.eq_p(n_proc2068, proc2067)) !== false) {
          var if_res1334 = new_procedure_p(proc2067);
        } else {
          var if_res1334 = false;
        }
        if (if_res1334 !== false) {
          var v2069 = new_procedure_ref(proc2067);
          if (M0.exact_integer_p(v2069) !== false) {
            var acc2070 = procedure_accessor_ref(proc2067);
            var if_res1350 = M0.values(M0.__rjs_quoted__.chaperone_struct(proc2067, acc2070, function(self2071, sub_proc2072) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var let_result1335 = wrap2066(sub_proc2072, normalize_proc(sub_proc2072));
              var f2073 = let_result1335.getAt(0);
              var acc2074 = let_result1335.getAt(1);
              return f2073;
            }), acc2070);
          } else {
            if (is_impersonator_p2018 !== false) {
              var if_res1349 = M0.__rjs_quoted__.impersonate_struct;
            } else {
              var if_res1349 = M0.__rjs_quoted__.chaperone_struct;
            }
            if (okp_p(n_proc2068) !== false) {
              var if_res1348 = chaperone_procedure2020(proc2067, wrap_proc2023);
            } else {
              var if_res1348 = proc2067;
            }
            var new_kw_proc2075 = if_res1349(if_res1348, new_procedure_ref, function(self2076, proc2077) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p2018 !== false) {
                var if_res1347 = new_impersonate_procedure;
              } else {
                var if_res1347 = new_chaperone_procedure;
              }
              if (self_arg_p2019 !== false) {
                var if_res1346 = $rjs_core.attachProcedureArity(function(proc_self2078, kws2079, kw_args2080, self2081) {
                  for (var args20821336 = [],
                      $__13 = 4; $__13 < arguments.length; $__13++)
                    args20821336[$__13 - 4] = arguments[$__13];
                  if (arguments.length < 4) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2082 = $rjs_core.Pair.listFromArray(args20821336);
                  var len2083 = M0.length(args2082);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone2029, proc_self2078, kws2079, kw_args2080, args2082);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20841337 = [],
                        $__14 = 0; $__14 < arguments.length; $__14++)
                      results20841337[$__14] = arguments[$__14];
                    var results2084 = $rjs_core.Pair.listFromArray(results20841337);
                    var r_len2085 = M0.length(results2084);
                    var list_take2086 = function(l2087, n2088) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2088) !== false) {
                        var if_res1338 = M0.rnull;
                      } else {
                        var if_res1338 = M0.cons(M0.car(l2087), list_take2086(M0.cdr(l2087), M0.sub1(n2088)));
                      }
                      return if_res1338;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList($rjs_core.Symbol.make("proc-self"))) !== false) {
                      var if_res1339 = M0.__eq_(r_len2085, 2 + len2083);
                    } else {
                      var if_res1339 = false;
                    }
                    if (if_res1339 !== false) {
                      var if_res1340 = M0.apply(M0.values, M0.cadr(results2084), self2081, M0.cddr(results2084));
                    } else {
                      var skip2089 = r_len2085 - len2083;
                      var if_res1340 = M0.apply(M0.values, M0.append(list_take2086(results2084, skip2089 - 2), M0.list(M0.list_ref(results2084, M0.sub1(skip2089)), self2081), M0.__rjs_quoted__.list_tail(results2084, skip2089)));
                    }
                    return if_res1340;
                  }));
                });
              } else {
                var if_res1346 = $rjs_core.attachProcedureArity(function(kws2090, kw_args2091, self2092) {
                  for (var args20931341 = [],
                      $__14 = 3; $__14 < arguments.length; $__14++)
                    args20931341[$__14 - 3] = arguments[$__14];
                  if (arguments.length < 3) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2093 = $rjs_core.Pair.listFromArray(args20931341);
                  var len2094 = M0.length(args2093);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone2029, kws2090, kw_args2091, args2093);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20951342 = [],
                        $__15 = 0; $__15 < arguments.length; $__15++)
                      results20951342[$__15] = arguments[$__15];
                    var results2095 = $rjs_core.Pair.listFromArray(results20951342);
                    var r_len2096 = M0.length(results2095);
                    var list_take2097 = function(l2098, n2099) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2099) !== false) {
                        var if_res1343 = M0.rnull;
                      } else {
                        var if_res1343 = M0.cons(M0.car(l2098), list_take2097(M0.cdr(l2098), M0.sub1(n2099)));
                      }
                      return if_res1343;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList()) !== false) {
                      var if_res1344 = M0.__eq_(r_len2096, 2 + len2094);
                    } else {
                      var if_res1344 = false;
                    }
                    if (if_res1344 !== false) {
                      var if_res1345 = M0.apply(M0.values, M0.cadr(results2095), self2092, M0.cddr(results2095));
                    } else {
                      var skip2100 = r_len2096 - len2094;
                      var if_res1345 = M0.apply(M0.values, M0.append(list_take2097(results2095, skip2100 - 2), M0.list(M0.list_ref(results2095, M0.sub1(skip2100)), self2092), M0.__rjs_quoted__.list_tail(results2095, skip2100)));
                    }
                    return if_res1345;
                  }));
                });
              }
              return if_res1347(proc2077, make_keyword_procedure(if_res1346));
            });
            var if_res1350 = M0.values(new_kw_proc2075, new_procedure_ref);
          }
          var if_res1355 = if_res1350;
        } else {
          if (okp_p(n_proc2068) !== false) {
            if (is_impersonator_p2018 !== false) {
              if (okm_p(n_proc2068) !== false) {
                var if_res1351 = make_optional_keyword_method_impersonator;
              } else {
                var if_res1351 = make_optional_keyword_procedure_impersonator;
              }
              var if_res1352 = if_res1351(keyword_procedure_checker(n_proc2068), chaperone_procedure2020(keyword_procedure_proc(n_proc2068), kw_chaperone2029), keyword_procedure_required(n_proc2068), keyword_procedure_allowed(n_proc2068), chaperone_procedure2020(okp_ref(n_proc2068, 0), okp_ref(n_wrap_proc2026, 0)), n_proc2068);
            } else {
              var if_res1352 = M0.__rjs_quoted__.chaperone_struct(proc2067, keyword_procedure_proc, function(self2101, proc2102) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure2020(proc2102, kw_chaperone2029);
              }, M0.make_struct_field_accessor(okp_ref, 0), function(self2103, proc2104) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure2020(proc2104, okp_ref(n_wrap_proc2026, 0));
              });
            }
            var if_res1354 = M0.values(if_res1352, keyword_procedure_proc);
          } else {
            if (is_impersonator_p2018 !== false) {
              var name_plus_fail2105 = keyword_procedure_name_plus_fail(n_proc2068);
              var mk2106 = make_required(M0.car(name_plus_fail2105), M0.cdr(name_plus_fail2105), keyword_method_p(n_proc2068), true);
              var if_res1353 = mk2106(keyword_procedure_checker(n_proc2068), chaperone_procedure2020(keyword_procedure_proc(n_proc2068), kw_chaperone2029), keyword_procedure_required(n_proc2068), keyword_procedure_allowed(n_proc2068), n_proc2068);
            } else {
              var if_res1353 = M0.__rjs_quoted__.chaperone_struct(n_proc2068, keyword_procedure_proc, function(self2107, proc2108) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure2020(proc2108, kw_chaperone2029);
              });
            }
            var if_res1354 = M0.values(if_res1353, keyword_procedure_proc);
          }
          var if_res1355 = if_res1354;
        }
        return if_res1355;
      };
      var let_result1356 = wrap2066(proc2022, n_proc2025);
      var new_proc2064 = let_result1356.getAt(0);
      var chap_accessor2065 = let_result1356.getAt(1);
      if (M0.null_p(props2024) !== false) {
        var if_res1357 = new_proc2064;
      } else {
        var if_res1357 = M0.apply(M0.__rjs_quoted__.chaperone_struct, new_proc2064, chap_accessor2065, false, props2024);
      }
      var if_res1358 = if_res1357;
    }
    return if_res1358;
  };
  var do_unsafe_chaperone_procedure = function(unsafe_chaperone_procedure2109, name2110, proc2111, wrap_proc2112, props2113) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc2114 = normalize_proc(proc2111);
    var n_wrap_proc2115 = normalize_proc(wrap_proc2112);
    var or_part2116 = M0.not(keyword_procedure_p(n_proc2114));
    if (or_part2116 !== false) {
      var if_res1360 = or_part2116;
    } else {
      var or_part2117 = M0.not(M0.procedure_p(wrap_proc2112));
      if (or_part2117 !== false) {
        var if_res1359 = or_part2117;
      } else {
        var if_res1359 = bad_props_p(props2113);
      }
      var if_res1360 = if_res1359;
    }
    if (if_res1360 !== false) {
      var if_res1361 = M0.apply(unsafe_chaperone_procedure2109, proc2111, wrap_proc2112, props2113);
    } else {
      chaperone_arity_match_checking(false, name2110, proc2111, wrap_proc2112, props2113);
      var if_res1361 = M0.apply(unsafe_chaperone_procedure2109, proc2111, wrap_proc2112, props2113);
    }
    return if_res1361;
  };
  var bad_props_p = function(props2118) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2119 = function(props2120) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(props2120) !== false) {
        var if_res1364 = false;
      } else {
        if (M0.__rjs_quoted__.impersonator_property_p(M0.car(props2120)) !== false) {
          var props2121 = M0.cdr(props2120);
          var or_part2122 = M0.null_p(props2121);
          if (or_part2122 !== false) {
            var if_res1362 = or_part2122;
          } else {
            var if_res1362 = loop2119(M0.cdr(props2121));
          }
          var if_res1363 = if_res1362;
        } else {
          var if_res1363 = true;
        }
        var if_res1364 = if_res1363;
      }
      return if_res1364;
    };
    return loop2119(props2118);
  };
  var chaperone_arity_match_checking = function(self_arg_p2123, name2124, proc2125, wrap_proc2126, props2127) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a2128 = M0.procedure_arity(proc2125);
    var b2129 = M0.procedure_arity(wrap_proc2126);
    if (self_arg_p2123 !== false) {
      var if_res1365 = 1;
    } else {
      var if_res1365 = 0;
    }
    var d2130 = if_res1365;
    var let_result1366 = procedure_keywords(proc2125);
    var a_req2131 = let_result1366.getAt(0);
    var a_allow2132 = let_result1366.getAt(1);
    var let_result1367 = procedure_keywords(wrap_proc2126);
    var b_req2133 = let_result1367.getAt(0);
    var b_allow2134 = let_result1367.getAt(1);
    var includes_p2135 = function(a2136, b2137) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.number_p(b2137) !== false) {
        if (M0.number_p(a2136) !== false) {
          var if_res1369 = M0.__eq_(b2137, a2136 + d2130);
        } else {
          if (M0.arity_at_least_p(a2136) !== false) {
            var if_res1368 = M0.__gt__eq_(b2137, M0.arity_at_least_value(a2136) + d2130);
          } else {
            var if_res1368 = M0.ormap(function(a2138) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return includes_p2135(a2138, b2137);
            }, a2136);
          }
          var if_res1369 = if_res1368;
        }
        var if_res1373 = if_res1369;
      } else {
        if (M0.arity_at_least_p(b2137) !== false) {
          if (M0.number_p(a2136) !== false) {
            var if_res1371 = false;
          } else {
            if (M0.arity_at_least_p(a2136) !== false) {
              var if_res1370 = M0.__gt__eq_(M0.arity_at_least_value(b2137), M0.arity_at_least_value(a2136) + d2130);
            } else {
              var if_res1370 = M0.ormap(function(a2139) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return includes_p2135(b2137, a2139);
              }, a2136);
            }
            var if_res1371 = if_res1370;
          }
          var if_res1372 = if_res1371;
        } else {
          var if_res1372 = M0.andmap(function(b2140) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return includes_p2135(a2136, b2140);
          }, b2137);
        }
        var if_res1373 = if_res1372;
      }
      return if_res1373;
    };
    if (includes_p2135(b2129, a2128) !== false) {
      var if_res1374 = M0.rvoid();
    } else {
      var if_res1374 = M0.apply(M0.__rjs_quoted__.chaperone_procedure, proc2125, wrap_proc2126, props2127);
    }
    if_res1374;
    if (subset_p(b_req2133, a_req2131) !== false) {
      var if_res1375 = M0.rvoid();
    } else {
      var if_res1375 = M0.__rjs_quoted__.raise_arguments_error(name2124, $rjs_core.UString.make("wrapper procedure requires more keywords than original procedure"), $rjs_core.UString.make("wrapper procedure"), wrap_proc2126, $rjs_core.UString.make("original procedure"), proc2125);
    }
    if_res1375;
    var or_part2141 = M0.not(b_allow2134);
    if (or_part2141 !== false) {
      var if_res1377 = or_part2141;
    } else {
      if (a_allow2132 !== false) {
        var if_res1376 = subset_p(a_allow2132, b_allow2134);
      } else {
        var if_res1376 = false;
      }
      var if_res1377 = if_res1376;
    }
    if (if_res1377 !== false) {
      var if_res1378 = M0.rvoid();
    } else {
      var if_res1378 = M0.__rjs_quoted__.raise_arguments_error(name2124, $rjs_core.UString.make("wrapper procedure does not accept all keywords of original procedure"), $rjs_core.UString.make("wrapper procedure"), wrap_proc2126, $rjs_core.UString.make("original procedure"), proc2125);
    }
    if_res1378;
    return M0.rvoid();
  };
  var normalize_proc = function(proc2142) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc2142) !== false) {
      var if_res1386 = proc2142;
    } else {
      if (new_procedure_p(proc2142) !== false) {
        var let_result1379 = procedure_keywords(proc2142);
        var req_kws2143 = let_result1379.getAt(0);
        var allowed_kws2144 = let_result1379.getAt(1);
        if (M0.null_p(allowed_kws2144) !== false) {
          var if_res1384 = proc2142;
        } else {
          var if_res1384 = make_optional_keyword_procedure(function(given_kws2145, given_argc2146) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.procedure_arity_includes_p(proc2142, given_argc2146 - 2, true) !== false) {
              var or_part2147 = M0.not(allowed_kws2144);
              if (or_part2147 !== false) {
                var if_res1381 = or_part2147;
              } else {
                var if_res1381 = subset_p(given_kws2145, allowed_kws2144);
              }
              if (if_res1381 !== false) {
                var if_res1382 = subset_p(req_kws2143, given_kws2145);
              } else {
                var if_res1382 = false;
              }
              var if_res1383 = if_res1382;
            } else {
              var if_res1383 = false;
            }
            return if_res1383;
          }, $rjs_core.attachProcedureArity(function(kws2148, kw_args2149) {
            for (var vals21501380 = [],
                $__9 = 2; $__9 < arguments.length; $__9++)
              vals21501380[$__9 - 2] = arguments[$__9];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2150 = $rjs_core.Pair.listFromArray(vals21501380);
            return keyword_apply(proc2142, kws2148, kw_args2149, vals2150);
          }), req_kws2143, allowed_kws2144, proc2142);
        }
        var if_res1385 = if_res1384;
      } else {
        var if_res1385 = proc2142;
      }
      var if_res1386 = if_res1385;
    }
    return if_res1386;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.keyword_procedure_extract = keyword_procedure_extract;
  __rjs_quoted__.struct_keyword_method_by_arity_error = struct_keyword_method_by_arity_error;
  __rjs_quoted__.make_optional_keyword_method = make_optional_keyword_method;
  __rjs_quoted__.prop_named_keyword_procedure = prop_named_keyword_procedure;
  __rjs_quoted__.struct_keyword_procedure_by_arity_error = struct_keyword_procedure_by_arity_error;
  __rjs_quoted__.subsets_p = subsets_p;
  __rjs_quoted__.struct_keyword_procedure = struct_keyword_procedure;
  __rjs_quoted__.subset_p = subset_p;
  __rjs_quoted__.missing_kw = missing_kw;
  __rjs_quoted__.make_optional_keyword_procedure = make_optional_keyword_procedure;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get new_impersonate_procedure_times_() {
      return new_impersonate_procedure_times_;
    },
    get new_chaperone_procedure_times_() {
      return new_chaperone_procedure_times_;
    },
    get new_impersonate_procedure() {
      return new_impersonate_procedure;
    },
    get new_chaperone_procedure() {
      return new_chaperone_procedure;
    },
    get new_procedure_rename() {
      return new_procedure_rename;
    },
    get new_procedure__gt_method() {
      return new_procedure__gt_method;
    },
    get new_prop_procedure() {
      return new_prop_procedure;
    },
    get procedure_reduce_keyword_arity() {
      return procedure_reduce_keyword_arity;
    },
    get new_procedure_reduce_arity() {
      return new_procedure_reduce_arity;
    },
    get procedure_keywords() {
      return procedure_keywords;
    },
    get keyword_apply() {
      return keyword_apply;
    },
    get make_keyword_procedure() {
      return make_keyword_procedure;
    }
  };
})();
var $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/pre-base.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M2 = $__runtime_47_utils_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var new_apply_proc = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2151, kw_args2152, proc2153, args2154) {
    for (var rest21551387 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      rest21551387[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2155 = $rjs_core.Pair.listFromArray(rest21551387);
    return M3.keyword_apply(proc2153, kws2151, kw_args2152, M0.apply(M0.list_times_, args2154, rest2155));
  }), M0.apply);
  var new_keyword_apply = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2156, kw_args2157, proc2158, orig_kws2159, orig_kw_args2160, args2161) {
    for (var rest21621388 = [],
        $__2 = 6; $__2 < arguments.length; $__2++)
      rest21621388[$__2 - 6] = arguments[$__2];
    if (arguments.length < 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2162 = $rjs_core.Pair.listFromArray(rest21621388);
    var loop2165 = function(kws2166, kw_args2167, kws22168, kw_args22169, swapped_p2170) {
      if (arguments.length !== 5) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws2166) !== false) {
        var if_res1393 = M0.values(kws22168, kw_args22169);
      } else {
        if (M0.null_p(kws22168) !== false) {
          var if_res1392 = M0.values(kws2166, kw_args2167);
        } else {
          if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws2166), M0.car(kws22168)) !== false) {
            var let_result1389 = loop2165(M0.cdr(kws2166), M0.cdr(kw_args2167), kws22168, kw_args22169, false);
            var res_kws2171 = let_result1389.getAt(0);
            var res_kw_args2172 = let_result1389.getAt(1);
            var if_res1391 = M0.values(M0.cons(M0.car(kws2166), res_kws2171), M0.cons(M0.car(kw_args2167), res_kw_args2172));
          } else {
            if (swapped_p2170 !== false) {
              var if_res1390 = M0.raise_mismatch_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.make("keyword duplicated in list and direct keyword arguments: "), M0.car(kws2166));
            } else {
              var if_res1390 = loop2165(kws22168, kw_args22169, kws2166, kw_args2167, true);
            }
            var if_res1391 = if_res1390;
          }
          var if_res1392 = if_res1391;
        }
        var if_res1393 = if_res1392;
      }
      return if_res1393;
    };
    var let_result1394 = loop2165(kws2156, kw_args2157, orig_kws2159, orig_kw_args2160, false);
    var kws2163 = let_result1394.getAt(0);
    var kw_args2164 = let_result1394.getAt(1);
    return M3.keyword_apply(proc2158, kws2163, kw_args2164, M0.apply(M0.list_times_, args2161, rest2162));
  }), M3.keyword_apply);
  var double_flonum_p = function(x2173) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.__rjs_quoted__.flonum_p(x2173);
  };
  var cl1395 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random();
  };
  var cl1396 = function(x2175) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random(x2175);
  };
  var cl1397 = function(x2176, y2177) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(y2177) !== false) {
      if (M0.exact_integer_p(x2176) !== false) {
        var if_res1400 = M0.rvoid();
      } else {
        var if_res1400 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("exact-integer?"), 0, x2176, y2177);
      }
      if_res1400;
      if (M0.__lt_(x2176, y2177) !== false) {
        var if_res1401 = M0.rvoid();
      } else {
        var if_res1401 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.make("(>/c "), M0.number__gt_string(x2176), $rjs_core.UString.make(")")), 1, x2176, y2177);
      }
      if_res1401;
      var d2178 = y2177 - x2176;
      if (M0.__lt__eq_(d2178, 4294967087) !== false) {
        var if_res1402 = M0.rvoid();
      } else {
        var if_res1402 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("difference between arguments is greater than 4294967087"), $rjs_core.UString.make("min"), x2176, $rjs_core.UString.make("max"), y2177);
      }
      if_res1402;
      var if_res1407 = x2176 + M0.random(d2178);
    } else {
      if (M0.__rjs_quoted__.pseudo_random_generator_p(y2177) !== false) {
        if (M0.exact_integer_p(x2176) !== false) {
          var if_res1403 = M0.__lt__eq_(1, x2176, 4294967087);
        } else {
          var if_res1403 = false;
        }
        if (if_res1403 !== false) {
          var if_res1404 = M0.rvoid();
        } else {
          var if_res1404 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("(integer-in 1 4294967087)"), 0, x2176, y2177);
        }
        if_res1404;
        var if_res1406 = M0.random(x2176, y2177);
      } else {
        if (M0.exact_integer_p(x2176) !== false) {
          var if_res1405 = M0.rvoid();
        } else {
          var if_res1405 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("exact-integer?"), 0, x2176, y2177);
        }
        if_res1405;
        var if_res1406 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("(or/c exact-integer? pseudo-random-generator?)"), 1, x2176, y2177);
      }
      var if_res1407 = if_res1406;
    }
    return if_res1407;
  };
  var cl1398 = function(min2179, max2180, prng2181) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(min2179) !== false) {
      var if_res1408 = M0.rvoid();
    } else {
      var if_res1408 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("exact-integer?"), 0, min2179, max2180, prng2181);
    }
    if_res1408;
    if (M0.exact_integer_p(max2180) !== false) {
      var if_res1409 = M0.rvoid();
    } else {
      var if_res1409 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("exact-integer?"), 1, min2179, max2180, prng2181);
    }
    if_res1409;
    if (M0.__lt_(min2179, max2180) !== false) {
      var if_res1410 = M0.rvoid();
    } else {
      var if_res1410 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.make("(>/c "), M0.number__gt_string(min2179), $rjs_core.UString.make(")")), 1, min2179, max2180, prng2181);
    }
    if_res1410;
    var d2182 = max2180 - min2179;
    if (M0.__lt__eq_(d2182, 4294967087) !== false) {
      var if_res1411 = M0.rvoid();
    } else {
      var if_res1411 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("difference between first and second arguments is greater than 4294967087"), $rjs_core.UString.make("min"), min2179, $rjs_core.UString.make("max"), max2180, $rjs_core.UString.make("rand-gen"), prng2181);
    }
    if_res1411;
    if (M0.__rjs_quoted__.pseudo_random_generator_p(prng2181) !== false) {
      var if_res1412 = M0.rvoid();
    } else {
      var if_res1412 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.make("pseudo-random-generator?"), 2, min2179, max2180, prng2181);
    }
    if_res1412;
    return min2179 + M0.random(d2182, prng2181);
  };
  var random2174 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1399 = {
      '0': cl1395,
      '1': cl1396,
      '2': cl1397,
      '3': cl1398
    }[arguments.length];
    if (fixed_lam1399 !== undefined) {
      return fixed_lam1399.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1, 2, 3]);
  var __random = random2174;
  var core42184 = function(fail12185, fail22186, collection32187, new_rest2188) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collection2189 = collection32187;
    if (fail22186 !== false) {
      var if_res1413 = fail12185;
    } else {
      var if_res1413 = function(s2191) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.make("collection-path: "), s2191), M0.current_continuation_marks()));
      };
    }
    var fail2190 = if_res1413;
    var collections2192 = new_rest2188;
    return M2.collection_path(fail2190, collection2189, collections2192);
  };
  var unpack52193 = function(given_kws2194, given_args2195, collection32196, new_rest2197) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fail22198 = M0.pair_p(given_kws2194);
    if (fail22198 !== false) {
      var if_res1414 = M0.car(given_args2195);
    } else {
      var if_res1414 = M0.rvoid();
    }
    var fail12199 = if_res1414;
    return core42184(fail12199, fail22198, collection32196, new_rest2197);
  };
  var cl1420 = $rjs_core.attachProcedureArity(function(given_kws2204, given_args2205, collection2206) {
    for (var collections22071423 = [],
        $__3 = 3; $__3 < arguments.length; $__3++)
      collections22071423[$__3 - 3] = arguments[$__3];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2207 = $rjs_core.Pair.listFromArray(collections22071423);
    return unpack52193(given_kws2204, given_args2205, collection2206, collections2207);
  });
  var temp1424 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1421 = {}[arguments.length];
    if (fixed_lam1421 !== undefined) {
      return fixed_lam1421.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1420.length, 1) !== false) {
        var if_res1422 = cl1420.apply(null, arguments);
      } else {
        var if_res1422 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1422;
    }
  }, [M0.make_arity_at_least(3)]);
  var temp1419 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("fail"));
  var cl1415 = $rjs_core.attachProcedureArity(function(collection2209) {
    for (var collections22101418 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      collections22101418[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2210 = $rjs_core.Pair.listFromArray(collections22101418);
    return unpack52193(M0.rnull, M0.rnull, collection2209, collections2210);
  });
  var collection_path2208 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1416 = {}[arguments.length];
    if (fixed_lam1416 !== undefined) {
      return fixed_lam1416.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1415.length, 1) !== false) {
        var if_res1417 = cl1415.apply(null, arguments);
      } else {
        var if_res1417 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1417;
    }
  }, [M0.make_arity_at_least(1)]);
  var collection_path2183 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2200, given_argc2201) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2201, 3) !== false) {
      var l12202 = given_kws2200;
      if (M0.null_p(l12202) !== false) {
        var if_res1426 = l12202;
      } else {
        if (M0.eq_p(M0.car(l12202), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1425 = M0.cdr(l12202);
        } else {
          var if_res1425 = l12202;
        }
        var if_res1426 = if_res1425;
      }
      var l12203 = if_res1426;
      var if_res1427 = M0.null_p(l12203);
    } else {
      var if_res1427 = false;
    }
    return if_res1427;
  }, temp1424, M0.rnull, temp1419, collection_path2208);
  var new_collection_path = collection_path2183;
  var core122212 = function(check_compiled_p62213, check_compiled_p82214, fail72215, fail92216, file_name102217, collection112218, new_rest2219) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var file_name2220 = file_name102217;
    var collection2221 = collection112218;
    if (check_compiled_p82214 !== false) {
      var if_res1429 = check_compiled_p62213;
    } else {
      if (M1.path_string_p(file_name2220) !== false) {
        var if_res1428 = M0.__rjs_quoted__.regexp_match_p("/.[.]rkt$/", file_name2220);
      } else {
        var if_res1428 = false;
      }
      var if_res1429 = if_res1428;
    }
    var check_compiled_p2222 = if_res1429;
    if (fail92216 !== false) {
      var if_res1430 = fail72215;
    } else {
      var if_res1430 = function(s2224) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.make("collection-file-path: "), s2224), M0.current_continuation_marks()));
      };
    }
    var fail2223 = if_res1430;
    var collections2225 = new_rest2219;
    return M2.collection_file_path(fail2223, check_compiled_p2222, file_name2220, collection2221, collections2225);
  };
  var unpack132226 = function(given_kws2227, given_args2228, file_name102229, collection112230, new_rest2231) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2227) !== false) {
      var if_res1431 = M0.eq_p($rjs_core.Keyword.make("check-compiled?"), M0.car(given_kws2227));
    } else {
      var if_res1431 = false;
    }
    var check_compiled_p82232 = if_res1431;
    if (check_compiled_p82232 !== false) {
      var if_res1432 = M0.car(given_args2228);
    } else {
      var if_res1432 = M0.rvoid();
    }
    var check_compiled_p62233 = if_res1432;
    if (check_compiled_p82232 !== false) {
      var if_res1433 = M0.cdr(given_kws2227);
    } else {
      var if_res1433 = given_kws2227;
    }
    var given_kws2234 = if_res1433;
    if (check_compiled_p82232 !== false) {
      var if_res1434 = M0.cdr(given_args2228);
    } else {
      var if_res1434 = given_args2228;
    }
    var given_args2235 = if_res1434;
    var fail92236 = M0.pair_p(given_kws2234);
    if (fail92236 !== false) {
      var if_res1435 = M0.car(given_args2235);
    } else {
      var if_res1435 = M0.rvoid();
    }
    var fail72237 = if_res1435;
    return core122212(check_compiled_p62233, check_compiled_p82232, fail72237, fail92236, file_name102229, collection112230, new_rest2231);
  };
  var cl1441 = $rjs_core.attachProcedureArity(function(given_kws2244, given_args2245, file_name2246, collection2247) {
    for (var collections22481444 = [],
        $__5 = 4; $__5 < arguments.length; $__5++)
      collections22481444[$__5 - 4] = arguments[$__5];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2248 = $rjs_core.Pair.listFromArray(collections22481444);
    return unpack132226(given_kws2244, given_args2245, file_name2246, collection2247, collections2248);
  });
  var temp1445 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1442 = {}[arguments.length];
    if (fixed_lam1442 !== undefined) {
      return fixed_lam1442.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1441.length, 1) !== false) {
        var if_res1443 = cl1441.apply(null, arguments);
      } else {
        var if_res1443 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1443;
    }
  }, [M0.make_arity_at_least(4)]);
  var temp1440 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("check-compiled?"), $rjs_core.Keyword.make("fail"));
  var cl1436 = $rjs_core.attachProcedureArity(function(file_name2250, collection2251) {
    for (var collections22521439 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      collections22521439[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2252 = $rjs_core.Pair.listFromArray(collections22521439);
    return unpack132226(M0.rnull, M0.rnull, file_name2250, collection2251, collections2252);
  });
  var collection_file_path2249 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1437 = {}[arguments.length];
    if (fixed_lam1437 !== undefined) {
      return fixed_lam1437.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1436.length, 1) !== false) {
        var if_res1438 = cl1436.apply(null, arguments);
      } else {
        var if_res1438 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1438;
    }
  }, [M0.make_arity_at_least(2)]);
  var collection_file_path2211 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2238, given_argc2239) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2239, 4) !== false) {
      var l12240 = given_kws2238;
      if (M0.null_p(l12240) !== false) {
        var if_res1447 = l12240;
      } else {
        if (M0.eq_p(M0.car(l12240), $rjs_core.Keyword.make("check-compiled?")) !== false) {
          var if_res1446 = M0.cdr(l12240);
        } else {
          var if_res1446 = l12240;
        }
        var if_res1447 = if_res1446;
      }
      var l12241 = if_res1447;
      var l12242 = l12241;
      if (M0.null_p(l12242) !== false) {
        var if_res1449 = l12242;
      } else {
        if (M0.eq_p(M0.car(l12242), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1448 = M0.cdr(l12242);
        } else {
          var if_res1448 = l12242;
        }
        var if_res1449 = if_res1448;
      }
      var l12243 = if_res1449;
      var if_res1450 = M0.null_p(l12243);
    } else {
      var if_res1450 = false;
    }
    return if_res1450;
  }, temp1445, M0.rnull, temp1440, collection_file_path2249);
  var new_collection_file_path = collection_file_path2211;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get random() {
      return __random;
    },
    get double_flonum_p() {
      return double_flonum_p;
    },
    get keyword_apply() {
      return new_keyword_apply;
    },
    get collection_file_path() {
      return new_collection_file_path;
    },
    get collection_path() {
      return new_collection_path;
    },
    get new_apply_proc() {
      return new_apply_proc;
    }
  };
})();
var $__collects_47_racket_47_private_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M7 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sort7 = function(cache_keys_p22253, cache_keys_p42254, key12255, key32256, lst52257, less_p62258) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lst2259 = lst52257;
    var less_p2260 = less_p62258;
    if (key32256 !== false) {
      var if_res1451 = key12255;
    } else {
      var if_res1451 = false;
    }
    var getkey2261 = if_res1451;
    if (cache_keys_p42254 !== false) {
      var if_res1452 = cache_keys_p22253;
    } else {
      var if_res1452 = false;
    }
    var cache_keys_p2262 = if_res1452;
    if (M0.list_p(lst2259) !== false) {
      var if_res1453 = M0.rvoid();
    } else {
      var if_res1453 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.make("list?"), lst2259);
    }
    if_res1453;
    if (M0.procedure_p(less_p2260) !== false) {
      var if_res1454 = M0.procedure_arity_includes_p(less_p2260, 2);
    } else {
      var if_res1454 = false;
    }
    if (if_res1454 !== false) {
      var if_res1455 = M0.rvoid();
    } else {
      var if_res1455 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), less_p2260);
    }
    if_res1455;
    if (getkey2261 !== false) {
      if (M0.procedure_p(getkey2261) !== false) {
        var if_res1456 = M0.procedure_arity_includes_p(getkey2261, 1);
      } else {
        var if_res1456 = false;
      }
      var if_res1457 = M0.not(if_res1456);
    } else {
      var if_res1457 = false;
    }
    if (if_res1457 !== false) {
      var if_res1458 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.make("(any/c . -> . any/c)"), getkey2261);
    } else {
      var if_res1458 = M0.rvoid();
    }
    if_res1458;
    if (getkey2261 !== false) {
      var if_res1459 = M4.sort(lst2259, less_p2260, getkey2261, cache_keys_p2262);
    } else {
      var if_res1459 = M4.sort(lst2259, less_p2260);
    }
    return if_res1459;
  };
  var unpack8 = function(given_kws2263, given_args2264, lst52265, less_p62266) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2263) !== false) {
      var if_res1460 = M0.eq_p($rjs_core.Keyword.make("cache-keys?"), M0.car(given_kws2263));
    } else {
      var if_res1460 = false;
    }
    var cache_keys_p42267 = if_res1460;
    if (cache_keys_p42267 !== false) {
      var if_res1461 = M0.car(given_args2264);
    } else {
      var if_res1461 = M0.rvoid();
    }
    var cache_keys_p22268 = if_res1461;
    if (cache_keys_p42267 !== false) {
      var if_res1462 = M0.cdr(given_kws2263);
    } else {
      var if_res1462 = given_kws2263;
    }
    var given_kws2269 = if_res1462;
    if (cache_keys_p42267 !== false) {
      var if_res1463 = M0.cdr(given_args2264);
    } else {
      var if_res1463 = given_args2264;
    }
    var given_args2270 = if_res1463;
    var key32271 = M0.pair_p(given_kws2269);
    if (key32271 !== false) {
      var if_res1464 = M0.car(given_args2270);
    } else {
      var if_res1464 = M0.rvoid();
    }
    var key12272 = if_res1464;
    return sort7(cache_keys_p22268, cache_keys_p42267, key12272, key32271, lst52265, less_p62266);
  };
  var cl1468 = function(given_kws2279, given_args2280, lst2281, less_p2282) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(given_kws2279, given_args2280, lst2281, less_p2282);
  };
  var temp1470 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1469 = {'4': cl1468}[arguments.length];
    if (fixed_lam1469 !== undefined) {
      return fixed_lam1469.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp1467 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("cache-keys?"), $rjs_core.Keyword.make("key"));
  var cl1465 = function(lst2284, less_p2285) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(M0.rnull, M0.rnull, lst2284, less_p2285);
  };
  var sort2283 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1466 = {'2': cl1465}[arguments.length];
    if (fixed_lam1466 !== undefined) {
      return fixed_lam1466.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var sort9 = M6.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2273, given_argc2274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__eq_(given_argc2274, 4) !== false) {
      var l12275 = given_kws2273;
      if (M0.null_p(l12275) !== false) {
        var if_res1472 = l12275;
      } else {
        if (M0.eq_p(M0.car(l12275), $rjs_core.Keyword.make("cache-keys?")) !== false) {
          var if_res1471 = M0.cdr(l12275);
        } else {
          var if_res1471 = l12275;
        }
        var if_res1472 = if_res1471;
      }
      var l12276 = if_res1472;
      var l12277 = l12276;
      if (M0.null_p(l12277) !== false) {
        var if_res1474 = l12277;
      } else {
        if (M0.eq_p(M0.car(l12277), $rjs_core.Keyword.make("key")) !== false) {
          var if_res1473 = M0.cdr(l12277);
        } else {
          var if_res1473 = l12277;
        }
        var if_res1474 = if_res1473;
      }
      var l12278 = if_res1474;
      var if_res1475 = M0.null_p(l12278);
    } else {
      var if_res1475 = false;
    }
    return if_res1475;
  }, temp1470, M0.rnull, temp1467, sort2283);
  var do_remove = function(who2286, item2287, list2288, equal_p2289) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(list2288) !== false) {
      var if_res1476 = M0.rvoid();
    } else {
      var if_res1476 = M0.raise_argument_error(who2286, $rjs_core.UString.make("list?"), list2288);
    }
    if_res1476;
    var loop2290 = function(list2291) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(list2291) !== false) {
        var if_res1478 = M0.rnull;
      } else {
        if (equal_p2289(item2287, M0.car(list2291)) !== false) {
          var if_res1477 = M0.cdr(list2291);
        } else {
          var if_res1477 = M0.cons(M0.car(list2291), loop2290(M0.cdr(list2291)));
        }
        var if_res1478 = if_res1477;
      }
      return if_res1478;
    };
    return loop2290(list2288);
  };
  var cl1479 = function(item2292, list2293) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remove"), item2292, list2293, M0.equal_p);
  };
  var cl1480 = function(item2294, list2295, equal_p2296) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2296) !== false) {
      var if_res1482 = M0.procedure_arity_includes_p(equal_p2296, 2);
    } else {
      var if_res1482 = false;
    }
    if (if_res1482 !== false) {
      var if_res1483 = M0.rvoid();
    } else {
      var if_res1483 = M0.raise_argument_error($rjs_core.Symbol.make("remove"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), equal_p2296);
    }
    if_res1483;
    return do_remove($rjs_core.Symbol.make("remove"), item2294, list2295, equal_p2296);
  };
  var remove = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1481 = {
      '2': cl1479,
      '3': cl1480
    }[arguments.length];
    if (fixed_lam1481 !== undefined) {
      return fixed_lam1481.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq = function(item2297, list2298) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remq"), item2297, list2298, M0.eq_p);
  };
  var remv = function(item2299, list2300) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remv"), item2299, list2300, M0.eqv_p);
  };
  var do_remove_times_ = function(who2301, l2302, r2303, equal_p2304) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(l2302) !== false) {
      var if_res1484 = M0.rvoid();
    } else {
      var if_res1484 = M0.raise_argument_error(who2301, $rjs_core.UString.make("list?"), l2302);
    }
    if_res1484;
    if (M0.list_p(r2303) !== false) {
      var if_res1485 = M0.rvoid();
    } else {
      var if_res1485 = M0.raise_argument_error(who2301, $rjs_core.UString.make("list?"), r2303);
    }
    if_res1485;
    var rloop2305 = function(r2306) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(r2306) !== false) {
        var if_res1488 = M0.rnull;
      } else {
        var first_r2307 = M0.car(r2306);
        var loop2308 = function(l_rest2309) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(l_rest2309) !== false) {
            var if_res1487 = M0.cons(first_r2307, rloop2305(M0.cdr(r2306)));
          } else {
            if (equal_p2304(M0.car(l_rest2309), first_r2307) !== false) {
              var if_res1486 = rloop2305(M0.cdr(r2306));
            } else {
              var if_res1486 = loop2308(M0.cdr(l_rest2309));
            }
            var if_res1487 = if_res1486;
          }
          return if_res1487;
        };
        var if_res1488 = loop2308(l2302);
      }
      return if_res1488;
    };
    return rloop2305(r2303);
  };
  var cl1489 = function(l2310, r2311) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2310, r2311, M0.equal_p);
  };
  var cl1490 = function(l2312, r2313, equal_p2314) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2314) !== false) {
      var if_res1492 = M0.procedure_arity_includes_p(equal_p2314, 2);
    } else {
      var if_res1492 = false;
    }
    if (if_res1492 !== false) {
      var if_res1493 = M0.rvoid();
    } else {
      var if_res1493 = M0.raise_argument_error($rjs_core.Symbol.make("remove*"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), equal_p2314);
    }
    if_res1493;
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2312, r2313, equal_p2314);
  };
  var remove_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1491 = {
      '2': cl1489,
      '3': cl1490
    }[arguments.length];
    if (fixed_lam1491 !== undefined) {
      return fixed_lam1491.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq_times_ = function(l2315, r2316) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remq*"), l2315, r2316, M0.eq_p);
  };
  var remv_times_ = function(l2317, r2318) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remv*"), l2317, r2318, M0.eqv_p);
  };
  var memf = function(f2319, list2320) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2319) !== false) {
      var if_res1494 = M0.procedure_arity_includes_p(f2319, 1);
    } else {
      var if_res1494 = false;
    }
    if (if_res1494 !== false) {
      var if_res1495 = M0.rvoid();
    } else {
      var if_res1495 = M0.raise_argument_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.make("(any/c . -> any/c)"), f2319);
    }
    if_res1495;
    var loop2321 = function(l2322) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2322) !== false) {
        var if_res1498 = false;
      } else {
        if (M0.not(M0.pair_p(l2322)) !== false) {
          var if_res1497 = M0.raise_mismatch_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.make("not a proper list: "), list2320);
        } else {
          if (f2319(M0.car(l2322)) !== false) {
            var if_res1496 = l2322;
          } else {
            var if_res1496 = loop2321(M0.cdr(l2322));
          }
          var if_res1497 = if_res1496;
        }
        var if_res1498 = if_res1497;
      }
      return if_res1498;
    };
    return loop2321(list2320);
  };
  var findf = function(f2323, list2324) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2323) !== false) {
      var if_res1499 = M0.procedure_arity_includes_p(f2323, 1);
    } else {
      var if_res1499 = false;
    }
    if (if_res1499 !== false) {
      var if_res1500 = M0.rvoid();
    } else {
      var if_res1500 = M0.raise_argument_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.make("(any/c . -> . any/c)"), f2323);
    }
    if_res1500;
    var loop2325 = function(l2326) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2326) !== false) {
        var if_res1503 = false;
      } else {
        if (M0.not(M0.pair_p(l2326)) !== false) {
          var if_res1502 = M0.raise_mismatch_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.make("not a proper list: "), list2324);
        } else {
          var a2327 = M0.car(l2326);
          if (f2323(a2327) !== false) {
            var if_res1501 = a2327;
          } else {
            var if_res1501 = loop2325(M0.cdr(l2326));
          }
          var if_res1502 = if_res1501;
        }
        var if_res1503 = if_res1502;
      }
      return if_res1503;
    };
    return loop2325(list2324);
  };
  var bad_list = function(who2328, orig_l2329) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2328, $rjs_core.UString.make("not a proper list: "), orig_l2329);
  };
  var bad_item = function(who2330, a2331, orig_l2332) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2330, $rjs_core.UString.make("non-pair found in list: "), a2331, $rjs_core.UString.make(" in "), orig_l2332);
  };
  var assq2333 = function(x2337, l2338) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2339 = function(l2340, t2341) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2340) !== false) {
        var a2342 = M7.unsafe_car(l2340);
        if (M0.pair_p(a2342) !== false) {
          if (M0.eq_p(x2337, M7.unsafe_car(a2342)) !== false) {
            var if_res1509 = a2342;
          } else {
            var l2343 = M7.unsafe_cdr(l2340);
            if (M0.pair_p(l2343) !== false) {
              var a2344 = M7.unsafe_car(l2343);
              if (M0.pair_p(a2344) !== false) {
                if (M0.eq_p(x2337, M7.unsafe_car(a2344)) !== false) {
                  var if_res1505 = a2344;
                } else {
                  var t2345 = M7.unsafe_cdr(t2341);
                  var l2346 = M7.unsafe_cdr(l2343);
                  if (M0.eq_p(l2346, t2345) !== false) {
                    var if_res1504 = bad_list($rjs_core.Symbol.make("assq"), l2338);
                  } else {
                    var if_res1504 = loop2339(l2346, t2345);
                  }
                  var if_res1505 = if_res1504;
                }
                var if_res1506 = if_res1505;
              } else {
                var if_res1506 = bad_item($rjs_core.Symbol.make("assq"), a2344, l2338);
              }
              var if_res1508 = if_res1506;
            } else {
              if (M0.null_p(l2343) !== false) {
                var if_res1507 = false;
              } else {
                var if_res1507 = bad_list($rjs_core.Symbol.make("assq"), l2338);
              }
              var if_res1508 = if_res1507;
            }
            var if_res1509 = if_res1508;
          }
          var if_res1510 = if_res1509;
        } else {
          var if_res1510 = bad_item($rjs_core.Symbol.make("assq"), a2342, l2338);
        }
        var if_res1512 = if_res1510;
      } else {
        if (M0.null_p(l2340) !== false) {
          var if_res1511 = false;
        } else {
          var if_res1511 = bad_list($rjs_core.Symbol.make("assq"), l2338);
        }
        var if_res1512 = if_res1511;
      }
      return if_res1512;
    };
    return loop2339(l2338, l2338);
  };
  var assv2334 = function(x2347, l2348) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2349 = function(l2350, t2351) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2350) !== false) {
        var a2352 = M7.unsafe_car(l2350);
        if (M0.pair_p(a2352) !== false) {
          if (M0.eqv_p(x2347, M7.unsafe_car(a2352)) !== false) {
            var if_res1518 = a2352;
          } else {
            var l2353 = M7.unsafe_cdr(l2350);
            if (M0.pair_p(l2353) !== false) {
              var a2354 = M7.unsafe_car(l2353);
              if (M0.pair_p(a2354) !== false) {
                if (M0.eqv_p(x2347, M7.unsafe_car(a2354)) !== false) {
                  var if_res1514 = a2354;
                } else {
                  var t2355 = M7.unsafe_cdr(t2351);
                  var l2356 = M7.unsafe_cdr(l2353);
                  if (M0.eq_p(l2356, t2355) !== false) {
                    var if_res1513 = bad_list($rjs_core.Symbol.make("assv"), l2348);
                  } else {
                    var if_res1513 = loop2349(l2356, t2355);
                  }
                  var if_res1514 = if_res1513;
                }
                var if_res1515 = if_res1514;
              } else {
                var if_res1515 = bad_item($rjs_core.Symbol.make("assv"), a2354, l2348);
              }
              var if_res1517 = if_res1515;
            } else {
              if (M0.null_p(l2353) !== false) {
                var if_res1516 = false;
              } else {
                var if_res1516 = bad_list($rjs_core.Symbol.make("assv"), l2348);
              }
              var if_res1517 = if_res1516;
            }
            var if_res1518 = if_res1517;
          }
          var if_res1519 = if_res1518;
        } else {
          var if_res1519 = bad_item($rjs_core.Symbol.make("assv"), a2352, l2348);
        }
        var if_res1521 = if_res1519;
      } else {
        if (M0.null_p(l2350) !== false) {
          var if_res1520 = false;
        } else {
          var if_res1520 = bad_list($rjs_core.Symbol.make("assv"), l2348);
        }
        var if_res1521 = if_res1520;
      }
      return if_res1521;
    };
    return loop2349(l2348, l2348);
  };
  var cl1522 = function(x2357, l2358) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2359 = function(l2360, t2361) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2360) !== false) {
        var a2362 = M7.unsafe_car(l2360);
        if (M0.pair_p(a2362) !== false) {
          if (M0.equal_p(x2357, M7.unsafe_car(a2362)) !== false) {
            var if_res1530 = a2362;
          } else {
            var l2363 = M7.unsafe_cdr(l2360);
            if (M0.pair_p(l2363) !== false) {
              var a2364 = M7.unsafe_car(l2363);
              if (M0.pair_p(a2364) !== false) {
                if (M0.equal_p(x2357, M7.unsafe_car(a2364)) !== false) {
                  var if_res1526 = a2364;
                } else {
                  var t2365 = M7.unsafe_cdr(t2361);
                  var l2366 = M7.unsafe_cdr(l2363);
                  if (M0.eq_p(l2366, t2365) !== false) {
                    var if_res1525 = bad_list($rjs_core.Symbol.make("assoc"), l2358);
                  } else {
                    var if_res1525 = loop2359(l2366, t2365);
                  }
                  var if_res1526 = if_res1525;
                }
                var if_res1527 = if_res1526;
              } else {
                var if_res1527 = bad_item($rjs_core.Symbol.make("assoc"), a2364, l2358);
              }
              var if_res1529 = if_res1527;
            } else {
              if (M0.null_p(l2363) !== false) {
                var if_res1528 = false;
              } else {
                var if_res1528 = bad_list($rjs_core.Symbol.make("assoc"), l2358);
              }
              var if_res1529 = if_res1528;
            }
            var if_res1530 = if_res1529;
          }
          var if_res1531 = if_res1530;
        } else {
          var if_res1531 = bad_item($rjs_core.Symbol.make("assoc"), a2362, l2358);
        }
        var if_res1533 = if_res1531;
      } else {
        if (M0.null_p(l2360) !== false) {
          var if_res1532 = false;
        } else {
          var if_res1532 = bad_list($rjs_core.Symbol.make("assoc"), l2358);
        }
        var if_res1533 = if_res1532;
      }
      return if_res1533;
    };
    return loop2359(l2358, l2358);
  };
  var cl1523 = function(x2367, l2368, is_equal_p2369) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(is_equal_p2369) !== false) {
      var if_res1534 = M0.procedure_arity_includes_p(is_equal_p2369, 2);
    } else {
      var if_res1534 = false;
    }
    if (if_res1534 !== false) {
      var if_res1535 = M0.rvoid();
    } else {
      var if_res1535 = M0.raise_argument_error($rjs_core.Symbol.make("assoc"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), is_equal_p2369);
    }
    if_res1535;
    var loop2370 = function(l2371, t2372) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2371) !== false) {
        var a2373 = M7.unsafe_car(l2371);
        if (M0.pair_p(a2373) !== false) {
          if (is_equal_p2369(x2367, M7.unsafe_car(a2373)) !== false) {
            var if_res1541 = a2373;
          } else {
            var l2374 = M7.unsafe_cdr(l2371);
            if (M0.pair_p(l2374) !== false) {
              var a2375 = M7.unsafe_car(l2374);
              if (M0.pair_p(a2375) !== false) {
                if (is_equal_p2369(x2367, M7.unsafe_car(a2375)) !== false) {
                  var if_res1537 = a2375;
                } else {
                  var t2376 = M7.unsafe_cdr(t2372);
                  var l2377 = M7.unsafe_cdr(l2374);
                  if (M0.eq_p(l2377, t2376) !== false) {
                    var if_res1536 = bad_list($rjs_core.Symbol.make("assoc"), l2368);
                  } else {
                    var if_res1536 = loop2370(l2377, t2376);
                  }
                  var if_res1537 = if_res1536;
                }
                var if_res1538 = if_res1537;
              } else {
                var if_res1538 = bad_item($rjs_core.Symbol.make("assoc"), a2375, l2368);
              }
              var if_res1540 = if_res1538;
            } else {
              if (M0.null_p(l2374) !== false) {
                var if_res1539 = false;
              } else {
                var if_res1539 = bad_list($rjs_core.Symbol.make("assoc"), l2368);
              }
              var if_res1540 = if_res1539;
            }
            var if_res1541 = if_res1540;
          }
          var if_res1542 = if_res1541;
        } else {
          var if_res1542 = bad_item($rjs_core.Symbol.make("assoc"), a2373, l2368);
        }
        var if_res1544 = if_res1542;
      } else {
        if (M0.null_p(l2371) !== false) {
          var if_res1543 = false;
        } else {
          var if_res1543 = bad_list($rjs_core.Symbol.make("assoc"), l2368);
        }
        var if_res1544 = if_res1543;
      }
      return if_res1544;
    };
    return loop2370(l2368, l2368);
  };
  var assoc2335 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1524 = {
      '2': cl1522,
      '3': cl1523
    }[arguments.length];
    if (fixed_lam1524 !== undefined) {
      return fixed_lam1524.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var assf2336 = function(f2378, l2379) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2378) !== false) {
      var if_res1545 = M0.procedure_arity_includes_p(f2378, 1);
    } else {
      var if_res1545 = false;
    }
    if (if_res1545 !== false) {
      var if_res1546 = M0.rvoid();
    } else {
      var if_res1546 = M0.raise_argument_error($rjs_core.Symbol.make("assf"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), f2378);
    }
    if_res1546;
    var loop2380 = function(l2381, t2382) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2381) !== false) {
        var a2383 = M7.unsafe_car(l2381);
        if (M0.pair_p(a2383) !== false) {
          if ((function(_2384, a2385) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return f2378(a2385);
          })(false, M7.unsafe_car(a2383)) !== false) {
            var if_res1552 = a2383;
          } else {
            var l2386 = M7.unsafe_cdr(l2381);
            if (M0.pair_p(l2386) !== false) {
              var a2387 = M7.unsafe_car(l2386);
              if (M0.pair_p(a2387) !== false) {
                if ((function(_2388, a2389) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return f2378(a2389);
                })(false, M7.unsafe_car(a2387)) !== false) {
                  var if_res1548 = a2387;
                } else {
                  var t2390 = M7.unsafe_cdr(t2382);
                  var l2391 = M7.unsafe_cdr(l2386);
                  if (M0.eq_p(l2391, t2390) !== false) {
                    var if_res1547 = bad_list($rjs_core.Symbol.make("assf"), l2379);
                  } else {
                    var if_res1547 = loop2380(l2391, t2390);
                  }
                  var if_res1548 = if_res1547;
                }
                var if_res1549 = if_res1548;
              } else {
                var if_res1549 = bad_item($rjs_core.Symbol.make("assf"), a2387, l2379);
              }
              var if_res1551 = if_res1549;
            } else {
              if (M0.null_p(l2386) !== false) {
                var if_res1550 = false;
              } else {
                var if_res1550 = bad_list($rjs_core.Symbol.make("assf"), l2379);
              }
              var if_res1551 = if_res1550;
            }
            var if_res1552 = if_res1551;
          }
          var if_res1553 = if_res1552;
        } else {
          var if_res1553 = bad_item($rjs_core.Symbol.make("assf"), a2383, l2379);
        }
        var if_res1555 = if_res1553;
      } else {
        if (M0.null_p(l2381) !== false) {
          var if_res1554 = false;
        } else {
          var if_res1554 = bad_list($rjs_core.Symbol.make("assf"), l2379);
        }
        var if_res1555 = if_res1554;
      }
      return if_res1555;
    };
    return loop2380(l2379, l2379);
  };
  var let_result1556 = M0.values(assq2333, assv2334, assoc2335, assf2336);
  var assq = let_result1556.getAt(0);
  var assv = let_result1556.getAt(1);
  var assoc = let_result1556.getAt(2);
  var assf = let_result1556.getAt(3);
  var mapadd = function(f2392, l2393, last2394) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2395 = function(l2396) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2396) !== false) {
        var if_res1557 = M0.list(last2394);
      } else {
        var if_res1557 = M0.cons(f2392(M0.car(l2396)), loop2395(M0.cdr(l2396)));
      }
      return if_res1557;
    };
    return loop2395(l2393);
  };
  var check_fold = function(name2397, proc2398, init2399, l2400, more2401) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc2398) !== false) {
      var if_res1558 = M0.rvoid();
    } else {
      var if_res1558 = M0.apply(M0.raise_argument_error, name2397, $rjs_core.UString.make("procedure?"), 0, proc2398, init2399, l2400, more2401);
    }
    if_res1558;
    if (M0.list_p(l2400) !== false) {
      var if_res1559 = M0.rvoid();
    } else {
      var if_res1559 = M0.apply(M0.raise_argument_error, name2397, $rjs_core.UString.make("list?"), 2, proc2398, init2399, l2400, more2401);
    }
    if_res1559;
    if (M0.null_p(more2401) !== false) {
      if (M0.procedure_arity_includes_p(proc2398, 2) !== false) {
        var if_res1560 = M0.rvoid();
      } else {
        var if_res1560 = M0.raise_mismatch_error(name2397, $rjs_core.UString.make("given procedure does not accept 2 arguments: "), proc2398);
      }
      var if_res1565 = if_res1560;
    } else {
      var len2402 = M0.length(l2400);
      var loop2403 = function(more2404, n2405) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(more2404) !== false) {
          var if_res1563 = M0.rvoid();
        } else {
          if (M0.list_p(M0.car(more2404)) !== false) {
            var if_res1561 = M0.rvoid();
          } else {
            var if_res1561 = M0.apply(M0.raise_argument_error, name2397, $rjs_core.UString.make("list?"), n2405, proc2398, init2399, l2400, more2404);
          }
          if_res1561;
          if (M0.__eq_(len2402, M0.length(M0.car(more2404))) !== false) {
            var if_res1562 = M0.rvoid();
          } else {
            var if_res1562 = M0.raise_mismatch_error(name2397, $rjs_core.UString.make("given list does not have the same size as the first list: "), M0.car(more2404));
          }
          if_res1562;
          var if_res1563 = loop2403(M0.cdr(more2404), M0.add1(n2405));
        }
        return if_res1563;
      };
      loop2403(more2401, 3);
      if (M0.procedure_arity_includes_p(proc2398, 2 + M0.length(more2401)) !== false) {
        var if_res1564 = M0.rvoid();
      } else {
        var if_res1564 = M0.raise_mismatch_error(name2397, M0.format($rjs_core.UString.make("given procedure does not accept ~a arguments: "), 2 + M0.length(more2401)), proc2398);
      }
      var if_res1565 = if_res1564;
    }
    return if_res1565;
  };
  var cl1566 = function(f2406, init2407, l2408) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldl"), f2406, init2407, l2408, M0.rnull);
    var loop2409 = function(init2410, l2411) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2411) !== false) {
        var if_res1570 = init2410;
      } else {
        var if_res1570 = loop2409(f2406(M0.car(l2411), init2410), M0.cdr(l2411));
      }
      return if_res1570;
    };
    return loop2409(init2407, l2408);
  };
  var cl1567 = $rjs_core.attachProcedureArity(function(f2412, init2413, l2414) {
    for (var ls24151571 = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      ls24151571[$__1 - 3] = arguments[$__1];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2415 = $rjs_core.Pair.listFromArray(ls24151571);
    check_fold($rjs_core.Symbol.make("foldl"), f2412, init2413, l2414, ls2415);
    var loop2416 = function(init2417, ls2418) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2418)) !== false) {
        var if_res1572 = loop2416(M0.apply(f2412, mapadd(M0.car, ls2418, init2417)), M2.map(M0.cdr, ls2418));
      } else {
        var if_res1572 = init2417;
      }
      return if_res1572;
    };
    return loop2416(init2413, M0.cons(l2414, ls2415));
  });
  var foldl = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1568 = {'3': cl1566}[arguments.length];
    if (fixed_lam1568 !== undefined) {
      return fixed_lam1568.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1567.length, 1) !== false) {
        var if_res1569 = cl1567.apply(null, arguments);
      } else {
        var if_res1569 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1569;
    }
  }, [M0.make_arity_at_least(3)]);
  var cl1573 = function(f2419, init2420, l2421) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldr"), f2419, init2420, l2421, M0.rnull);
    var loop2422 = function(init2423, l2424) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2424) !== false) {
        var if_res1577 = init2423;
      } else {
        var if_res1577 = f2419(M0.car(l2424), loop2422(init2423, M0.cdr(l2424)));
      }
      return if_res1577;
    };
    return loop2422(init2420, l2421);
  };
  var cl1574 = $rjs_core.attachProcedureArity(function(f2425, init2426, l2427) {
    for (var ls24281578 = [],
        $__2 = 3; $__2 < arguments.length; $__2++)
      ls24281578[$__2 - 3] = arguments[$__2];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2428 = $rjs_core.Pair.listFromArray(ls24281578);
    check_fold($rjs_core.Symbol.make("foldr"), f2425, init2426, l2427, ls2428);
    var loop2429 = function(ls2430) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2430)) !== false) {
        var if_res1579 = M0.apply(f2425, mapadd(M0.car, ls2430, loop2429(M2.map(M0.cdr, ls2430))));
      } else {
        var if_res1579 = init2426;
      }
      return if_res1579;
    };
    return loop2429(M0.cons(l2427, ls2428));
  });
  var foldr = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1575 = {'3': cl1573}[arguments.length];
    if (fixed_lam1575 !== undefined) {
      return fixed_lam1575.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1574.length, 1) !== false) {
        var if_res1576 = cl1574.apply(null, arguments);
      } else {
        var if_res1576 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1576;
    }
  }, [M0.make_arity_at_least(3)]);
  var filter = function(f2431, list2432) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2431) !== false) {
      var if_res1580 = M0.procedure_arity_includes_p(f2431, 1);
    } else {
      var if_res1580 = false;
    }
    if (if_res1580 !== false) {
      var if_res1581 = M0.rvoid();
    } else {
      var if_res1581 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.make("(any/c . -> . any/c)"), f2431);
    }
    if_res1581;
    if (M0.list_p(list2432) !== false) {
      var if_res1582 = M0.rvoid();
    } else {
      var if_res1582 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.make("list?"), list2432);
    }
    if_res1582;
    var loop2433 = function(l2434, result2435) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2434) !== false) {
        var if_res1585 = M5.alt_reverse(result2435);
      } else {
        var temp1584 = M0.cdr(l2434);
        if (f2431(M0.car(l2434)) !== false) {
          var if_res1583 = M0.cons(M0.car(l2434), result2435);
        } else {
          var if_res1583 = result2435;
        }
        var if_res1585 = loop2433(temp1584, if_res1583);
      }
      return if_res1585;
    };
    return loop2433(list2432, M0.rnull);
  };
  var build_vector = function(n2436, fcn2437) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2436) !== false) {
      var if_res1586 = M0.rvoid();
    } else {
      var if_res1586 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.make("exact-nonnegative-integer?"), n2436);
    }
    if_res1586;
    if (M0.procedure_p(fcn2437) !== false) {
      var if_res1587 = M0.procedure_arity_includes_p(fcn2437, 1);
    } else {
      var if_res1587 = false;
    }
    if (if_res1587 !== false) {
      var if_res1588 = M0.rvoid();
    } else {
      var if_res1588 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.make("(exact-nonnegative-integer? . -> . any/c)"), fcn2437);
    }
    if_res1588;
    var vec2438 = M0.make_vector(n2436);
    var loop2439 = function(i2440) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2440, n2436) !== false) {
        var if_res1589 = vec2438;
      } else {
        M0.vector_set_bang_(vec2438, i2440, fcn2437(i2440));
        var if_res1589 = loop2439(M0.add1(i2440));
      }
      return if_res1589;
    };
    return loop2439(0);
  };
  var build_string = function(n2441, fcn2442) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2441) !== false) {
      var if_res1590 = M0.rvoid();
    } else {
      var if_res1590 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.make("exact-nonnegative-integer?"), n2441);
    }
    if_res1590;
    if (M0.procedure_p(fcn2442) !== false) {
      var if_res1591 = M0.procedure_arity_includes_p(fcn2442, 1);
    } else {
      var if_res1591 = false;
    }
    if (if_res1591 !== false) {
      var if_res1592 = M0.rvoid();
    } else {
      var if_res1592 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.make("(exact-nonnegative-integer? . -> . char?)"), fcn2442);
    }
    if_res1592;
    var str2443 = M0.make_string(n2441);
    var loop2444 = function(i2445) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2445, n2441) !== false) {
        var if_res1593 = str2443;
      } else {
        M0.string_set_bang_(str2443, i2445, fcn2442(i2445));
        var if_res1593 = loop2444(M0.add1(i2445));
      }
      return if_res1593;
    };
    return loop2444(0);
  };
  var build_list = function(n2446, fcn2447) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2446) !== false) {
      var if_res1594 = M0.rvoid();
    } else {
      var if_res1594 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.make("exact-nonnegative-integer?"), n2446);
    }
    if_res1594;
    if (M0.procedure_p(fcn2447) !== false) {
      var if_res1595 = M0.procedure_arity_includes_p(fcn2447, 1);
    } else {
      var if_res1595 = false;
    }
    if (if_res1595 !== false) {
      var if_res1596 = M0.rvoid();
    } else {
      var if_res1596 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.make("(exact-nonnegative-integer? . -> . any/c)"), fcn2447);
    }
    if_res1596;
    var recr2448 = function(j2449, i2450) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i2450) !== false) {
        var if_res1597 = M0.rnull;
      } else {
        var if_res1597 = M0.cons(fcn2447(j2449), recr2448(M0.add1(j2449), M0.sub1(i2450)));
      }
      return if_res1597;
    };
    return recr2448(0, n2446);
  };
  var pipeline12451 = function(f2452, rfuns2453) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(x2454) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop2455 = function(x2456, f2457, rfuns2458) {
        if (arguments.length !== 3) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2458) !== false) {
          var if_res1598 = f2457(x2456);
        } else {
          var if_res1598 = loop2455(f2457(x2456), M0.car(rfuns2458), M0.cdr(rfuns2458));
        }
        return if_res1598;
      };
      return loop2455(x2454, f2452, rfuns2453);
    };
  };
  var pipeline_times_2459 = function(f2460, rfuns2461) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2460)) !== false) {
      var loop2462 = function(f2463, rfuns2464) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2464) !== false) {
          var if_res1600 = f2463;
        } else {
          var fst2465 = M0.car(rfuns2464);
          if (M0.eqv_p(1, M1.norm_procedure_arity(fst2465)) !== false) {
            var if_res1599 = function(x2466) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return fst2465(f2463(x2466));
            };
          } else {
            var if_res1599 = function(x2467) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2463(x2467);
              }, fst2465);
            };
          }
          var if_res1600 = loop2462(if_res1599, M0.cdr(rfuns2464));
        }
        return if_res1600;
      };
      var if_res1607 = loop2462(f2460, rfuns2461);
    } else {
      var funs2468 = M5.alt_reverse(M0.cons(f2460, rfuns2461));
      var loop2469 = function(f2470, funs2471) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(funs2471) !== false) {
          var if_res1606 = f2470;
        } else {
          var fst2472 = M0.car(funs2471);
          if (M0.eqv_p(1, M1.norm_procedure_arity(f2470)) !== false) {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2472)) !== false) {
              var if_res1602 = function(x2473) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2470(fst2472(x2473));
              };
            } else {
              var if_res1602 = $rjs_core.attachProcedureArity(function() {
                for (var xs24741601 = [],
                    $__3 = 0; $__3 < arguments.length; $__3++)
                  xs24741601[$__3] = arguments[$__3];
                var xs2474 = $rjs_core.Pair.listFromArray(xs24741601);
                return f2470(M0.apply(fst2472, xs2474));
              });
            }
            var if_res1605 = if_res1602;
          } else {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2472)) !== false) {
              var if_res1604 = function(x2475) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return fst2472(x2475);
                }, f2470);
              };
            } else {
              var if_res1604 = $rjs_core.attachProcedureArity(function() {
                for (var xs24761603 = [],
                    $__4 = 0; $__4 < arguments.length; $__4++)
                  xs24761603[$__4] = arguments[$__4];
                var xs2476 = $rjs_core.Pair.listFromArray(xs24761603);
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return M0.apply(fst2472, xs2476);
                }, f2470);
              });
            }
            var if_res1605 = if_res1604;
          }
          var if_res1606 = loop2469(if_res1605, M0.cdr(funs2471));
        }
        return if_res1606;
      };
      var if_res1607 = loop2469(M0.car(funs2468), M0.cdr(funs2468));
    }
    return if_res1607;
  };
  var simple_compose2478 = function(f2479, g2480) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arity2481 = M1.norm_procedure_arity(g2480);
    var let_result1608 = M6.procedure_keywords(g2480);
    var required_kwds2482 = let_result1608.getAt(0);
    var allowed_kwds2483 = let_result1608.getAt(1);
    if (M0.eq_p(1, arity2481) !== false) {
      var if_res1615 = function(x2485) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2479(g2480(x2485));
      };
    } else {
      var cl1609 = function(x2486) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2479(g2480(x2486));
      };
      var cl1610 = function(x2487, y2488) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2479(g2480(x2487, y2488));
      };
      var cl1611 = $rjs_core.attachProcedureArity(function() {
        for (var args24891614 = [],
            $__3 = 0; $__3 < arguments.length; $__3++)
          args24891614[$__3] = arguments[$__3];
        var args2489 = $rjs_core.Pair.listFromArray(args24891614);
        return f2479(M0.apply(g2480, args2489));
      });
      var if_res1615 = $rjs_core.attachProcedureArity(function() {
        var fixed_lam1612 = {
          '1': cl1609,
          '2': cl1610
        }[arguments.length];
        if (fixed_lam1612 !== undefined) {
          return fixed_lam1612.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1613 = cl1611.apply(null, arguments);
          } else {
            var if_res1613 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
          }
          return if_res1613;
        }
      }, [M0.make_arity_at_least(0)]);
    }
    var composed2484 = if_res1615;
    if (M0.null_p(allowed_kwds2483) !== false) {
      var if_res1617 = composed2484;
    } else {
      var if_res1617 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2490, kw_args2491) {
        for (var xs24921616 = [],
            $__4 = 2; $__4 < arguments.length; $__4++)
          xs24921616[$__4 - 2] = arguments[$__4];
        if (arguments.length < 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var xs2492 = $rjs_core.Pair.listFromArray(xs24921616);
        return f2479(M3.keyword_apply(g2480, kws2490, kw_args2491, xs2492));
      }), composed2484);
    }
    return if_res1617;
  };
  var cl1618 = function(f2493) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2493) !== false) {
      var if_res1624 = f2493;
    } else {
      var if_res1624 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure?"), 0, f2493);
    }
    return if_res1624;
  };
  var cl1619 = function(f2494, g2495) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2494) !== false) {
      var if_res1625 = M0.rvoid();
    } else {
      var if_res1625 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure?"), 0, f2494, g2495);
    }
    if_res1625;
    if (M0.procedure_p(g2495) !== false) {
      var if_res1626 = M0.rvoid();
    } else {
      var if_res1626 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure?"), 1, f2494, g2495);
    }
    if_res1626;
    if (M0.procedure_arity_includes_p(f2494, 1) !== false) {
      var if_res1627 = M0.rvoid();
    } else {
      var if_res1627 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("(any/c . -> . any/c)"), 0, f2494, $rjs_core.Pair.makeList());
    }
    if_res1627;
    var let_result1628 = M6.procedure_keywords(f2494);
    var req2496 = let_result1628.getAt(0);
    var _2497 = let_result1628.getAt(1);
    if (M0.null_p(req2496) !== false) {
      var if_res1629 = M0.rvoid();
    } else {
      var if_res1629 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure-with-no-required-keywords?"), 0, f2494, $rjs_core.Pair.makeList());
    }
    if_res1629;
    return simple_compose2478(f2494, g2495);
  };
  var cl1620 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1621 = $rjs_core.attachProcedureArity(function(f02498) {
    for (var fs024991630 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      fs024991630[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02499 = $rjs_core.Pair.listFromArray(fs024991630);
    var loop2500 = function(f2501, fs2502, i2503, rfuns2504) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2501) !== false) {
        var if_res1631 = M0.rvoid();
      } else {
        var if_res1631 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure?"), i2503, f02498, fs02499);
      }
      if_res1631;
      if (M0.pair_p(fs2502) !== false) {
        if (M0.procedure_arity_includes_p(f2501, 1) !== false) {
          var if_res1632 = M0.rvoid();
        } else {
          var if_res1632 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("(any/c . -> . any/c)"), i2503, f02498, fs02499);
        }
        if_res1632;
        var let_result1633 = M6.procedure_keywords(f2501);
        var req2505 = let_result1633.getAt(0);
        var _2506 = let_result1633.getAt(1);
        if (M0.null_p(req2505) !== false) {
          var if_res1634 = M0.rvoid();
        } else {
          var if_res1634 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.make("procedure-with-no-required-keywords?"), i2503, f02498, fs02499);
        }
        if_res1634;
        var if_res1635 = loop2500(M0.car(fs2502), M0.cdr(fs2502), M0.add1(i2503), M0.cons(f2501, rfuns2504));
      } else {
        var if_res1635 = simple_compose2478(pipeline12451(M0.car(rfuns2504), M0.cdr(rfuns2504)), f2501);
      }
      return if_res1635;
    };
    return loop2500(f02498, fs02499, 0, $rjs_core.Pair.makeList());
  });
  var compose12477 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1622 = {
      '1': cl1618,
      '2': cl1619,
      '0': cl1620
    }[arguments.length];
    if (fixed_lam1622 !== undefined) {
      return fixed_lam1622.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1621.length, 1) !== false) {
        var if_res1623 = cl1621.apply(null, arguments);
      } else {
        var if_res1623 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1623;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var simple_compose2508 = function(f2509, g2510) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2509)) !== false) {
      var arity2511 = M1.norm_procedure_arity(g2510);
      var let_result1636 = M6.procedure_keywords(g2510);
      var required_kwds2512 = let_result1636.getAt(0);
      var allowed_kwds2513 = let_result1636.getAt(1);
      if (M0.eq_p(1, arity2511) !== false) {
        var if_res1643 = function(x2515) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2509(g2510(x2515));
        };
      } else {
        var cl1637 = function(x2516) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2509(g2510(x2516));
        };
        var cl1638 = function(x2517, y2518) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2509(g2510(x2517, y2518));
        };
        var cl1639 = $rjs_core.attachProcedureArity(function() {
          for (var args25191642 = [],
              $__4 = 0; $__4 < arguments.length; $__4++)
            args25191642[$__4] = arguments[$__4];
          var args2519 = $rjs_core.Pair.listFromArray(args25191642);
          return f2509(M0.apply(g2510, args2519));
        });
        var if_res1643 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1640 = {
            '1': cl1637,
            '2': cl1638
          }[arguments.length];
          if (fixed_lam1640 !== undefined) {
            return fixed_lam1640.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1641 = cl1639.apply(null, arguments);
            } else {
              var if_res1641 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
            }
            return if_res1641;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2514 = if_res1643;
      if (M0.null_p(allowed_kwds2513) !== false) {
        var if_res1645 = composed2514;
      } else {
        var if_res1645 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2520, kw_args2521) {
          for (var xs25221644 = [],
              $__5 = 2; $__5 < arguments.length; $__5++)
            xs25221644[$__5 - 2] = arguments[$__5];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2522 = $rjs_core.Pair.listFromArray(xs25221644);
          return f2509(M3.keyword_apply(g2510, kws2520, kw_args2521, xs2522));
        }), composed2514);
      }
      var if_res1656 = if_res1645;
    } else {
      var arity2523 = M1.norm_procedure_arity(g2510);
      var let_result1646 = M6.procedure_keywords(g2510);
      var required_kwds2524 = let_result1646.getAt(0);
      var allowed_kwds2525 = let_result1646.getAt(1);
      if (M0.eq_p(1, arity2523) !== false) {
        var if_res1653 = function(x2527) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2510(x2527);
          }, f2509);
        };
      } else {
        var cl1647 = function(x2528) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2510(x2528);
          }, f2509);
        };
        var cl1648 = function(x2529, y2530) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2510(x2529, y2530);
          }, f2509);
        };
        var cl1649 = $rjs_core.attachProcedureArity(function() {
          for (var args25311652 = [],
              $__6 = 0; $__6 < arguments.length; $__6++)
            args25311652[$__6] = arguments[$__6];
          var args2531 = $rjs_core.Pair.listFromArray(args25311652);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(g2510, args2531);
          }, f2509);
        });
        var if_res1653 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1650 = {
            '1': cl1647,
            '2': cl1648
          }[arguments.length];
          if (fixed_lam1650 !== undefined) {
            return fixed_lam1650.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1651 = cl1649.apply(null, arguments);
            } else {
              var if_res1651 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
            }
            return if_res1651;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2526 = if_res1653;
      if (M0.null_p(allowed_kwds2525) !== false) {
        var if_res1655 = composed2526;
      } else {
        var if_res1655 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2532, kw_args2533) {
          for (var xs25341654 = [],
              $__7 = 2; $__7 < arguments.length; $__7++)
            xs25341654[$__7 - 2] = arguments[$__7];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2534 = $rjs_core.Pair.listFromArray(xs25341654);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M3.keyword_apply(g2510, kws2532, kw_args2533, xs2534);
          }, f2509);
        }), composed2526);
      }
      var if_res1656 = if_res1655;
    }
    return if_res1656;
  };
  var cl1657 = function(f2535) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2535) !== false) {
      var if_res1663 = f2535;
    } else {
      var if_res1663 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure?"), 0, f2535);
    }
    return if_res1663;
  };
  var cl1658 = function(f2536, g2537) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2536) !== false) {
      var if_res1664 = M0.rvoid();
    } else {
      var if_res1664 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure?"), 0, f2536, g2537);
    }
    if_res1664;
    if (M0.procedure_p(g2537) !== false) {
      var if_res1665 = M0.rvoid();
    } else {
      var if_res1665 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure?"), 1, f2536, g2537);
    }
    if_res1665;
    var let_result1666 = M6.procedure_keywords(f2536);
    var req2538 = let_result1666.getAt(0);
    var _2539 = let_result1666.getAt(1);
    if (M0.null_p(req2538) !== false) {
      var if_res1667 = M0.rvoid();
    } else {
      var if_res1667 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure-with-no-required-keywords?"), 0, f2536, $rjs_core.Pair.makeList());
    }
    if_res1667;
    return simple_compose2508(f2536, g2537);
  };
  var cl1659 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1660 = $rjs_core.attachProcedureArity(function(f02540) {
    for (var fs025411668 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      fs025411668[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02541 = $rjs_core.Pair.listFromArray(fs025411668);
    var loop2542 = function(f2543, fs2544, i2545, rfuns2546) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2543) !== false) {
        var if_res1669 = M0.rvoid();
      } else {
        var if_res1669 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure?"), i2545, f02540, fs02541);
      }
      if_res1669;
      if (M0.pair_p(fs2544) !== false) {
        var let_result1670 = M6.procedure_keywords(f2543);
        var req2547 = let_result1670.getAt(0);
        var _2548 = let_result1670.getAt(1);
        if (M0.null_p(req2547) !== false) {
          var if_res1671 = M0.rvoid();
        } else {
          var if_res1671 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.make("procedure-with-no-required-keywords?"), i2545, f02540, fs02541);
        }
        if_res1671;
        var if_res1672 = loop2542(M0.car(fs2544), M0.cdr(fs2544), M0.add1(i2545), M0.cons(f2543, rfuns2546));
      } else {
        var if_res1672 = simple_compose2508(pipeline_times_2459(M0.car(rfuns2546), M0.cdr(rfuns2546)), f2543);
      }
      return if_res1672;
    };
    return loop2542(f02540, fs02541, 0, $rjs_core.Pair.makeList());
  });
  var compose2507 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1661 = {
      '1': cl1657,
      '2': cl1658,
      '0': cl1659
    }[arguments.length];
    if (fixed_lam1661 !== undefined) {
      return fixed_lam1661.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1660.length, 1) !== false) {
        var if_res1662 = cl1660.apply(null, arguments);
      } else {
        var if_res1662 = M0.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res1662;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var let_result1673 = M0.values(compose12477, compose2507);
  var compose1 = let_result1673.getAt(0);
  var compose = let_result1673.getAt(1);
  var __rjs_quoted__ = {};
  __rjs_quoted__.sort7 = sort7;
  __rjs_quoted__.sort9 = sort9;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get compose1() {
      return compose1;
    },
    get compose() {
      return compose;
    },
    get build_list() {
      return build_list;
    },
    get build_string() {
      return build_string;
    },
    get build_vector() {
      return build_vector;
    },
    get filter() {
      return filter;
    },
    get assoc() {
      return assoc;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get findf() {
      return findf;
    },
    get assf() {
      return assf;
    },
    get memf() {
      return memf;
    },
    get remove_times_() {
      return remove_times_;
    },
    get remq_times_() {
      return remq_times_;
    },
    get remv_times_() {
      return remv_times_;
    },
    get remove() {
      return remove;
    },
    get remq() {
      return remq;
    },
    get remv() {
      return remv;
    },
    get foldr() {
      return foldr;
    },
    get foldl() {
      return foldl;
    }
  };
})();
var $__collects_47_racket_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_for_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M7 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M8 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M9 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M10 = $__runtime_47_unsafe_46_rkt_46_js__;
  var first = function(x871) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(x871) !== false) {
      var if_res496 = M2.list_p(x871);
    } else {
      var if_res496 = false;
    }
    if (if_res496 !== false) {
      var if_res497 = M2.car(x871);
    } else {
      var if_res497 = M2.raise_argument_error($rjs_core.Symbol.make("first"), $rjs_core.UString.make("(and/c list? (not/c empty?))"), x871);
    }
    return if_res497;
  };
  var second = function(l0872) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0872) !== false) {
      var loop873 = function(l874, pos875) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l874) !== false) {
          if (M2.eq_p(pos875, 1) !== false) {
            var if_res498 = M2.car(l874);
          } else {
            var if_res498 = loop873(M2.cdr(l874), M2.sub1(pos875));
          }
          var if_res499 = if_res498;
        } else {
          var if_res499 = M2.raise_arguments_error($rjs_core.Symbol.make("second"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0872);
        }
        return if_res499;
      };
      var if_res500 = loop873(l0872, 2);
    } else {
      var if_res500 = M2.raise_argument_error($rjs_core.Symbol.make("second"), $rjs_core.UString.make("list?"), l0872);
    }
    return if_res500;
  };
  var third = function(l0876) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0876) !== false) {
      var loop877 = function(l878, pos879) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l878) !== false) {
          if (M2.eq_p(pos879, 1) !== false) {
            var if_res501 = M2.car(l878);
          } else {
            var if_res501 = loop877(M2.cdr(l878), M2.sub1(pos879));
          }
          var if_res502 = if_res501;
        } else {
          var if_res502 = M2.raise_arguments_error($rjs_core.Symbol.make("third"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0876);
        }
        return if_res502;
      };
      var if_res503 = loop877(l0876, 3);
    } else {
      var if_res503 = M2.raise_argument_error($rjs_core.Symbol.make("third"), $rjs_core.UString.make("list?"), l0876);
    }
    return if_res503;
  };
  var fourth = function(l0880) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0880) !== false) {
      var loop881 = function(l882, pos883) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l882) !== false) {
          if (M2.eq_p(pos883, 1) !== false) {
            var if_res504 = M2.car(l882);
          } else {
            var if_res504 = loop881(M2.cdr(l882), M2.sub1(pos883));
          }
          var if_res505 = if_res504;
        } else {
          var if_res505 = M2.raise_arguments_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0880);
        }
        return if_res505;
      };
      var if_res506 = loop881(l0880, 4);
    } else {
      var if_res506 = M2.raise_argument_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.make("list?"), l0880);
    }
    return if_res506;
  };
  var fifth = function(l0884) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0884) !== false) {
      var loop885 = function(l886, pos887) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l886) !== false) {
          if (M2.eq_p(pos887, 1) !== false) {
            var if_res507 = M2.car(l886);
          } else {
            var if_res507 = loop885(M2.cdr(l886), M2.sub1(pos887));
          }
          var if_res508 = if_res507;
        } else {
          var if_res508 = M2.raise_arguments_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0884);
        }
        return if_res508;
      };
      var if_res509 = loop885(l0884, 5);
    } else {
      var if_res509 = M2.raise_argument_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.make("list?"), l0884);
    }
    return if_res509;
  };
  var sixth = function(l0888) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0888) !== false) {
      var loop889 = function(l890, pos891) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l890) !== false) {
          if (M2.eq_p(pos891, 1) !== false) {
            var if_res510 = M2.car(l890);
          } else {
            var if_res510 = loop889(M2.cdr(l890), M2.sub1(pos891));
          }
          var if_res511 = if_res510;
        } else {
          var if_res511 = M2.raise_arguments_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0888);
        }
        return if_res511;
      };
      var if_res512 = loop889(l0888, 6);
    } else {
      var if_res512 = M2.raise_argument_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.make("list?"), l0888);
    }
    return if_res512;
  };
  var seventh = function(l0892) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0892) !== false) {
      var loop893 = function(l894, pos895) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l894) !== false) {
          if (M2.eq_p(pos895, 1) !== false) {
            var if_res513 = M2.car(l894);
          } else {
            var if_res513 = loop893(M2.cdr(l894), M2.sub1(pos895));
          }
          var if_res514 = if_res513;
        } else {
          var if_res514 = M2.raise_arguments_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0892);
        }
        return if_res514;
      };
      var if_res515 = loop893(l0892, 7);
    } else {
      var if_res515 = M2.raise_argument_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.make("list?"), l0892);
    }
    return if_res515;
  };
  var eighth = function(l0896) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0896) !== false) {
      var loop897 = function(l898, pos899) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l898) !== false) {
          if (M2.eq_p(pos899, 1) !== false) {
            var if_res516 = M2.car(l898);
          } else {
            var if_res516 = loop897(M2.cdr(l898), M2.sub1(pos899));
          }
          var if_res517 = if_res516;
        } else {
          var if_res517 = M2.raise_arguments_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0896);
        }
        return if_res517;
      };
      var if_res518 = loop897(l0896, 8);
    } else {
      var if_res518 = M2.raise_argument_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.make("list?"), l0896);
    }
    return if_res518;
  };
  var ninth = function(l0900) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0900) !== false) {
      var loop901 = function(l902, pos903) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l902) !== false) {
          if (M2.eq_p(pos903, 1) !== false) {
            var if_res519 = M2.car(l902);
          } else {
            var if_res519 = loop901(M2.cdr(l902), M2.sub1(pos903));
          }
          var if_res520 = if_res519;
        } else {
          var if_res520 = M2.raise_arguments_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0900);
        }
        return if_res520;
      };
      var if_res521 = loop901(l0900, 9);
    } else {
      var if_res521 = M2.raise_argument_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.make("list?"), l0900);
    }
    return if_res521;
  };
  var tenth = function(l0904) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0904) !== false) {
      var loop905 = function(l906, pos907) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l906) !== false) {
          if (M2.eq_p(pos907, 1) !== false) {
            var if_res522 = M2.car(l906);
          } else {
            var if_res522 = loop905(M2.cdr(l906), M2.sub1(pos907));
          }
          var if_res523 = if_res522;
        } else {
          var if_res523 = M2.raise_arguments_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.make("list contains too few elements"), $rjs_core.UString.make("list"), l0904);
        }
        return if_res523;
      };
      var if_res524 = loop905(l0904, 10);
    } else {
      var if_res524 = M2.raise_argument_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.make("list?"), l0904);
    }
    return if_res524;
  };
  var last_pair = function(l908) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l908) !== false) {
      var loop909 = function(l910, x911) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x911) !== false) {
          var if_res525 = loop909(x911, M2.cdr(x911));
        } else {
          var if_res525 = l910;
        }
        return if_res525;
      };
      var if_res526 = loop909(l908, M2.cdr(l908));
    } else {
      var if_res526 = M2.raise_argument_error($rjs_core.Symbol.make("last-pair"), $rjs_core.UString.make("pair?"), l908);
    }
    return if_res526;
  };
  var last = function(l912) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l912) !== false) {
      var if_res527 = M2.list_p(l912);
    } else {
      var if_res527 = false;
    }
    if (if_res527 !== false) {
      var loop913 = function(l914, x915) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x915) !== false) {
          var if_res528 = loop913(x915, M2.cdr(x915));
        } else {
          var if_res528 = M2.car(l914);
        }
        return if_res528;
      };
      var if_res529 = loop913(l912, M2.cdr(l912));
    } else {
      var if_res529 = M2.raise_argument_error($rjs_core.Symbol.make("last"), $rjs_core.UString.make("(and/c list? (not/c empty?))"), l912);
    }
    return if_res529;
  };
  var rest = function(l916) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l916) !== false) {
      var if_res530 = M2.list_p(l916);
    } else {
      var if_res530 = false;
    }
    if (if_res530 !== false) {
      var if_res531 = M2.cdr(l916);
    } else {
      var if_res531 = M2.raise_argument_error($rjs_core.Symbol.make("rest"), $rjs_core.UString.make("(and/c list? (not/c empty?))"), l916);
    }
    return if_res531;
  };
  var cons_p = function(l917) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.pair_p(l917);
  };
  var empty_p = function(l918) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.null_p(l918);
  };
  var empty = $rjs_core.Pair.makeList();
  var make_list = function(n919, x920) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n919) !== false) {
      var if_res532 = M2.rvoid();
    } else {
      var if_res532 = M2.raise_argument_error($rjs_core.Symbol.make("make-list"), $rjs_core.UString.make("exact-nonnegative-integer?"), 0, n919, x920);
    }
    if_res532;
    var loop921 = function(n922, r923) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n922) !== false) {
        var if_res533 = r923;
      } else {
        var if_res533 = loop921(M2.sub1(n922), M2.cons(x920, r923));
      }
      return if_res533;
    };
    return loop921(n919, $rjs_core.Pair.makeList());
  };
  var list_update = function(l924, i925, f926) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l924) !== false) {
      var if_res534 = M2.rvoid();
    } else {
      var if_res534 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.make("list?"), 0, l924, i925, f926);
    }
    if_res534;
    if (M2.exact_nonnegative_integer_p(i925) !== false) {
      var if_res535 = M2.rvoid();
    } else {
      var if_res535 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, l924, i925, f926);
    }
    if_res535;
    if (M2.procedure_p(f926) !== false) {
      var if_res536 = M2.procedure_arity_includes_p(f926, 1);
    } else {
      var if_res536 = false;
    }
    if (if_res536 !== false) {
      var if_res537 = M2.rvoid();
    } else {
      var if_res537 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.make("(-> any/c any/c)"), 2, l924, i925, f926);
    }
    if_res537;
    if (M2.zero_p(i925) !== false) {
      var if_res538 = M2.cons(f926(M2.car(l924)), M2.cdr(l924));
    } else {
      var if_res538 = M2.cons(M2.car(l924), list_update(M2.cdr(l924), M2.sub1(i925), f926));
    }
    return if_res538;
  };
  var list_set = function(l927, k928, v929) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l927) !== false) {
      var if_res539 = M2.rvoid();
    } else {
      var if_res539 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.make("list?"), 0, l927, k928, v929);
    }
    if_res539;
    if (M2.exact_nonnegative_integer_p(k928) !== false) {
      var if_res540 = M2.rvoid();
    } else {
      var if_res540 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, l927, k928, v929);
    }
    if_res540;
    return list_update(l927, k928, function(_930) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return v929;
    });
  };
  var drop_times_ = function(list931, n932) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.zero_p(n932) !== false) {
      var if_res542 = list931;
    } else {
      if (M2.pair_p(list931) !== false) {
        var if_res541 = drop_times_(M2.cdr(list931), M2.sub1(n932));
      } else {
        var if_res541 = false;
      }
      var if_res542 = if_res541;
    }
    return if_res542;
  };
  var too_large = function(who933, list934, n935) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proper_p936 = M2.list_p(list934);
    var temp545 = $rjs_core.UString.make("a ~alist with at least ~a ~a");
    if (proper_p936 !== false) {
      var if_res544 = $rjs_core.UString.make("");
    } else {
      var if_res544 = $rjs_core.UString.make("(possibly improper) ");
    }
    if (proper_p936 !== false) {
      var if_res543 = $rjs_core.UString.make("elements");
    } else {
      var if_res543 = $rjs_core.UString.make("pairs");
    }
    return M2.raise_argument_error(who933, M2.format(temp545, if_res544, n935, if_res543), list934);
  };
  var take = function(list0937, n0938) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0938) !== false) {
      var if_res546 = M2.rvoid();
    } else {
      var if_res546 = M2.raise_argument_error($rjs_core.Symbol.make("take"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list0937, n0938);
    }
    if_res546;
    var loop939 = function(list940, n941) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n941) !== false) {
        var if_res548 = $rjs_core.Pair.makeList();
      } else {
        if (M2.pair_p(list940) !== false) {
          var if_res547 = M2.cons(M2.car(list940), loop939(M2.cdr(list940), M2.sub1(n941)));
        } else {
          var if_res547 = too_large($rjs_core.Symbol.make("take"), list0937, n0938);
        }
        var if_res548 = if_res547;
      }
      return if_res548;
    };
    return loop939(list0937, n0938);
  };
  var drop = function(list942, n943) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n943) !== false) {
      var if_res549 = M2.rvoid();
    } else {
      var if_res549 = M2.raise_argument_error($rjs_core.Symbol.make("drop"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list942, n943);
    }
    if_res549;
    var or_part944 = drop_times_(list942, n943);
    if (or_part944 !== false) {
      var if_res550 = or_part944;
    } else {
      var if_res550 = too_large($rjs_core.Symbol.make("drop"), list942, n943);
    }
    return if_res550;
  };
  var split_at = function(list0945, n0946) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0946) !== false) {
      var if_res551 = M2.rvoid();
    } else {
      var if_res551 = M2.raise_argument_error($rjs_core.Symbol.make("split-at"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list0945, n0946);
    }
    if_res551;
    var loop947 = function(list948, n949, pfx950) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n949) !== false) {
        var if_res553 = M2.values(M8.alt_reverse(pfx950), list948);
      } else {
        if (M2.pair_p(list948) !== false) {
          var if_res552 = loop947(M2.cdr(list948), M2.sub1(n949), M2.cons(M2.car(list948), pfx950));
        } else {
          var if_res552 = too_large($rjs_core.Symbol.make("split-at"), list0945, n0946);
        }
        var if_res553 = if_res552;
      }
      return if_res553;
    };
    return loop947(list0945, n0946, $rjs_core.Pair.makeList());
  };
  var takef = function(list951, pred952) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred952) !== false) {
      var if_res554 = M2.rvoid();
    } else {
      var if_res554 = M2.raise_argument_error($rjs_core.Symbol.make("takef"), $rjs_core.UString.make("procedure?"), 1, list951, pred952);
    }
    if_res554;
    var loop953 = function(list954) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list954) !== false) {
        var x955 = M2.car(list954);
        if (pred952(x955) !== false) {
          var if_res555 = M2.cons(x955, loop953(M2.cdr(list954)));
        } else {
          var if_res555 = $rjs_core.Pair.makeList();
        }
        var if_res556 = if_res555;
      } else {
        var if_res556 = $rjs_core.Pair.makeList();
      }
      return if_res556;
    };
    return loop953(list951);
  };
  var dropf = function(list956, pred957) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred957) !== false) {
      var if_res557 = M2.rvoid();
    } else {
      var if_res557 = M2.raise_argument_error($rjs_core.Symbol.make("dropf"), $rjs_core.UString.make("procedure?"), 1, list956, pred957);
    }
    if_res557;
    var loop958 = function(list959) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list959) !== false) {
        var if_res558 = pred957(M2.car(list959));
      } else {
        var if_res558 = false;
      }
      if (if_res558 !== false) {
        var if_res559 = loop958(M2.cdr(list959));
      } else {
        var if_res559 = list959;
      }
      return if_res559;
    };
    return loop958(list956);
  };
  var splitf_at = function(list960, pred961) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred961) !== false) {
      var if_res560 = M2.rvoid();
    } else {
      var if_res560 = M2.raise_argument_error($rjs_core.Symbol.make("splitf-at"), $rjs_core.UString.make("procedure?"), 1, list960, pred961);
    }
    if_res560;
    var loop962 = function(list963, pfx964) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list963) !== false) {
        var if_res561 = pred961(M2.car(list963));
      } else {
        var if_res561 = false;
      }
      if (if_res561 !== false) {
        var if_res562 = loop962(M2.cdr(list963), M2.cons(M2.car(list963), pfx964));
      } else {
        var if_res562 = M2.values(M8.alt_reverse(pfx964), list963);
      }
      return if_res562;
    };
    return loop962(list960, $rjs_core.Pair.makeList());
  };
  var take_right = function(list965, n966) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n966) !== false) {
      var if_res563 = M2.rvoid();
    } else {
      var if_res563 = M2.raise_argument_error($rjs_core.Symbol.make("take-right"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list965, n966);
    }
    if_res563;
    var loop967 = function(list968, lead969) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead969) !== false) {
        var if_res565 = loop967(M2.cdr(list968), M2.cdr(lead969));
      } else {
        var if_res565 = list968;
      }
      return if_res565;
    };
    var or_part970 = drop_times_(list965, n966);
    if (or_part970 !== false) {
      var if_res564 = or_part970;
    } else {
      var if_res564 = too_large($rjs_core.Symbol.make("take-right"), list965, n966);
    }
    return loop967(list965, if_res564);
  };
  var drop_right = function(list971, n972) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n972) !== false) {
      var if_res566 = M2.rvoid();
    } else {
      var if_res566 = M2.raise_argument_error($rjs_core.Symbol.make("drop-right"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list971, n972);
    }
    if_res566;
    var loop973 = function(list974, lead975) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead975) !== false) {
        var if_res568 = M2.cons(M2.car(list974), loop973(M2.cdr(list974), M2.cdr(lead975)));
      } else {
        var if_res568 = $rjs_core.Pair.makeList();
      }
      return if_res568;
    };
    var or_part976 = drop_times_(list971, n972);
    if (or_part976 !== false) {
      var if_res567 = or_part976;
    } else {
      var if_res567 = too_large($rjs_core.Symbol.make("drop-right"), list971, n972);
    }
    return loop973(list971, if_res567);
  };
  var split_at_right = function(list977, n978) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n978) !== false) {
      var if_res569 = M2.rvoid();
    } else {
      var if_res569 = M2.raise_argument_error($rjs_core.Symbol.make("split-at-right"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, list977, n978);
    }
    if_res569;
    var loop979 = function(list980, lead981, pfx982) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead981) !== false) {
        var if_res571 = loop979(M2.cdr(list980), M2.cdr(lead981), M2.cons(M2.car(list980), pfx982));
      } else {
        var if_res571 = M2.values(M8.alt_reverse(pfx982), list980);
      }
      return if_res571;
    };
    var or_part983 = drop_times_(list977, n978);
    if (or_part983 !== false) {
      var if_res570 = or_part983;
    } else {
      var if_res570 = too_large($rjs_core.Symbol.make("split-at-right"), list977, n978);
    }
    return loop979(list977, if_res570, $rjs_core.Pair.makeList());
  };
  var count_from_right = function(who984, list985, pred986) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred986) !== false) {
      var if_res572 = M2.rvoid();
    } else {
      var if_res572 = M2.raise_argument_error(who984, $rjs_core.UString.make("procedure?"), 0, list985, pred986);
    }
    if_res572;
    var loop987 = function(list988, rev989, n990) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list988) !== false) {
        var if_res575 = loop987(M2.cdr(list988), M2.cons(M2.car(list988), rev989), M2.add1(n990));
      } else {
        var loop991 = function(n992, list993) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(list993) !== false) {
            var if_res573 = pred986(M2.car(list993));
          } else {
            var if_res573 = false;
          }
          if (if_res573 !== false) {
            var if_res574 = loop991(M2.sub1(n992), M2.cdr(list993));
          } else {
            var if_res574 = n992;
          }
          return if_res574;
        };
        var if_res575 = loop991(n990, rev989);
      }
      return if_res575;
    };
    return loop987(list985, $rjs_core.Pair.makeList(), 0);
  };
  var takef_right = function(list994, pred995) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop(list994, count_from_right($rjs_core.Symbol.make("takef-right"), list994, pred995));
  };
  var dropf_right = function(list996, pred997) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take(list996, count_from_right($rjs_core.Symbol.make("dropf-right"), list996, pred997));
  };
  var splitf_at_right = function(list998, pred999) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_at(list998, count_from_right($rjs_core.Symbol.make("splitf-at-right"), list998, pred999));
  };
  var list_prefix_p51000 = function(ls31001, rs41002, same_p11003, same_p21004) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1005 = ls31001;
    var rs1006 = rs41002;
    if (same_p21004 !== false) {
      var if_res576 = same_p11003;
    } else {
      var if_res576 = M2.equal_p;
    }
    var same_p1007 = if_res576;
    if (M2.list_p(ls1005) !== false) {
      var if_res577 = M2.rvoid();
    } else {
      var if_res577 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.make("list?"), 0, ls1005, rs1006);
    }
    if_res577;
    if (M2.list_p(rs1006) !== false) {
      var if_res578 = M2.rvoid();
    } else {
      var if_res578 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.make("list?"), 1, ls1005, rs1006);
    }
    if_res578;
    if (M2.procedure_p(same_p1007) !== false) {
      var if_res579 = M2.procedure_arity_includes_p(same_p1007, 2);
    } else {
      var if_res579 = false;
    }
    if (if_res579 !== false) {
      var if_res580 = M2.rvoid();
    } else {
      var if_res580 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), 2, ls1005, rs1006, same_p1007);
    }
    if_res580;
    var or_part1008 = M2.null_p(ls1005);
    if (or_part1008 !== false) {
      var if_res583 = or_part1008;
    } else {
      if (M2.pair_p(rs1006) !== false) {
        if (same_p1007(M2.car(ls1005), M2.car(rs1006)) !== false) {
          var if_res581 = list_prefix_p(M2.cdr(ls1005), M2.cdr(rs1006));
        } else {
          var if_res581 = false;
        }
        var if_res582 = if_res581;
      } else {
        var if_res582 = false;
      }
      var if_res583 = if_res582;
    }
    return if_res583;
  };
  var cl584 = function(ls1009, rs1010) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p51000(ls1009, rs1010, false, false);
  };
  var cl585 = function(ls1011, rs1012, same_p11013) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p51000(ls1011, rs1012, same_p11013, true);
  };
  var list_prefix_p = $rjs_core.attachProcedureArity(function() {
    var fixed_lam586 = {
      '2': cl584,
      '3': cl585
    }[arguments.length];
    if (fixed_lam586 !== undefined) {
      return fixed_lam586.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var internal_split_common_prefix = function(as1014, bs1015, same_p1016, keep_prefix_p1017, name1018) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(as1014) !== false) {
      var if_res587 = M2.rvoid();
    } else {
      var if_res587 = M2.raise_argument_error(name1018, $rjs_core.UString.make("list?"), 0, as1014, bs1015);
    }
    if_res587;
    if (M2.list_p(bs1015) !== false) {
      var if_res588 = M2.rvoid();
    } else {
      var if_res588 = M2.raise_argument_error(name1018, $rjs_core.UString.make("list?"), 1, as1014, bs1015);
    }
    if_res588;
    if (M2.procedure_p(same_p1016) !== false) {
      var if_res589 = M2.procedure_arity_includes_p(same_p1016, 2);
    } else {
      var if_res589 = false;
    }
    if (if_res589 !== false) {
      var if_res590 = M2.rvoid();
    } else {
      var if_res590 = M2.raise_argument_error(name1018, $rjs_core.UString.make("(any/c any/c . -> . any/c)"), 2, as1014, bs1015, same_p1016);
    }
    if_res590;
    var loop1019 = function(as1020, bs1021) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(as1020) !== false) {
        if (M2.pair_p(bs1021) !== false) {
          var if_res591 = same_p1016(M2.car(as1020), M2.car(bs1021));
        } else {
          var if_res591 = false;
        }
        var if_res592 = if_res591;
      } else {
        var if_res592 = false;
      }
      if (if_res592 !== false) {
        var let_result593 = loop1019(M2.cdr(as1020), M2.cdr(bs1021));
        var prefix1022 = let_result593.getAt(0);
        var atail1023 = let_result593.getAt(1);
        var btail1024 = let_result593.getAt(2);
        if (keep_prefix_p1017 !== false) {
          var if_res594 = M2.cons(M2.car(as1020), prefix1022);
        } else {
          var if_res594 = false;
        }
        var if_res595 = M2.values(if_res594, atail1023, btail1024);
      } else {
        var if_res595 = M2.values(M2.rnull, as1020, bs1021);
      }
      return if_res595;
    };
    return loop1019(as1014, bs1015);
  };
  var split_common_prefix111025 = function(as91026, bs101027, same_p71028, same_p81029) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as1030 = as91026;
    var bs1031 = bs101027;
    if (same_p81029 !== false) {
      var if_res596 = same_p71028;
    } else {
      var if_res596 = M2.equal_p;
    }
    var same_p1032 = if_res596;
    return internal_split_common_prefix(as1030, bs1031, same_p1032, true, $rjs_core.Symbol.make("split-common-prefix"));
  };
  var cl597 = function(as1033, bs1034) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix111025(as1033, bs1034, false, false);
  };
  var cl598 = function(as1035, bs1036, same_p71037) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix111025(as1035, bs1036, same_p71037, true);
  };
  var split_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam599 = {
      '2': cl597,
      '3': cl598
    }[arguments.length];
    if (fixed_lam599 !== undefined) {
      return fixed_lam599.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var take_common_prefix171038 = function(as151039, bs161040, same_p131041, same_p141042) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as1043 = as151039;
    var bs1044 = bs161040;
    if (same_p141042 !== false) {
      var if_res600 = same_p131041;
    } else {
      var if_res600 = M2.equal_p;
    }
    var same_p1045 = if_res600;
    var let_result601 = internal_split_common_prefix(as1043, bs1044, same_p1045, true, $rjs_core.Symbol.make("take-common-prefix"));
    var prefix1046 = let_result601.getAt(0);
    var atail1047 = let_result601.getAt(1);
    var btail1048 = let_result601.getAt(2);
    return prefix1046;
  };
  var cl602 = function(as1049, bs1050) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix171038(as1049, bs1050, false, false);
  };
  var cl603 = function(as1051, bs1052, same_p131053) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix171038(as1051, bs1052, same_p131053, true);
  };
  var take_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam604 = {
      '2': cl602,
      '3': cl603
    }[arguments.length];
    if (fixed_lam604 !== undefined) {
      return fixed_lam604.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var drop_common_prefix231054 = function(as211055, bs221056, same_p191057, same_p201058) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as1059 = as211055;
    var bs1060 = bs221056;
    if (same_p201058 !== false) {
      var if_res605 = same_p191057;
    } else {
      var if_res605 = M2.equal_p;
    }
    var same_p1061 = if_res605;
    var let_result606 = internal_split_common_prefix(as1059, bs1060, same_p1061, false, $rjs_core.Symbol.make("drop-common-prefix"));
    var prefix1062 = let_result606.getAt(0);
    var atail1063 = let_result606.getAt(1);
    var btail1064 = let_result606.getAt(2);
    return M2.values(atail1063, btail1064);
  };
  var cl607 = function(as1065, bs1066) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231054(as1065, bs1066, false, false);
  };
  var cl608 = function(as1067, bs1068, same_p191069) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231054(as1067, bs1068, same_p191069, true);
  };
  var drop_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam609 = {
      '2': cl607,
      '3': cl608
    }[arguments.length];
    if (fixed_lam609 !== undefined) {
      return fixed_lam609.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cl610 = function(ls1070) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, ls1070);
  };
  var cl611 = function(l11071, l21072) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11071, l21072);
  };
  var cl612 = function(l11073, l21074, l31075) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11073, l21074, l31075);
  };
  var cl613 = function(l11076, l21077, l31078, l41079) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11076, l21077, l31078, l41079);
  };
  var cl614 = $rjs_core.attachProcedureArity(function(l1080) {
    for (var lss1081617 = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      lss1081617[$__1 - 1] = arguments[$__1];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lss1081 = $rjs_core.Pair.listFromArray(lss1081617);
    return M2.apply(M7.new_apply_proc, M2.append, l1080, lss1081);
  });
  var append_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam615 = {
      '1': cl610,
      '2': cl611,
      '3': cl612,
      '4': cl613
    }[arguments.length];
    if (fixed_lam615 !== undefined) {
      return fixed_lam615.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl614.length, 1) !== false) {
        var if_res616 = cl614.apply(null, arguments);
      } else {
        var if_res616 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res616;
    }
  }, [M2.make_arity_at_least(1)]);
  var flatten = function(orig_sexp1082) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1083 = function(sexp1084, acc1085) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(sexp1084) !== false) {
        var if_res619 = acc1085;
      } else {
        if (M2.pair_p(sexp1084) !== false) {
          var if_res618 = loop1083(M2.car(sexp1084), loop1083(M2.cdr(sexp1084), acc1085));
        } else {
          var if_res618 = M2.cons(sexp1084, acc1085);
        }
        var if_res619 = if_res618;
      }
      return if_res619;
    };
    return loop1083(orig_sexp1082, M2.rnull);
  };
  var add_between35 = function(after_last281086, after_last321087, before_first261088, before_first301089, before_last271090, before_last311091, splice_p251092, splice_p291093, l331094, x341095) {
    if (arguments.length !== 10) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1096 = l331094;
    var x1097 = x341095;
    if (splice_p291093 !== false) {
      var if_res620 = splice_p251092;
    } else {
      var if_res620 = false;
    }
    var splice_p1098 = if_res620;
    if (before_first301089 !== false) {
      var if_res621 = before_first261088;
    } else {
      var if_res621 = $rjs_core.Pair.makeList();
    }
    var before_first1099 = if_res621;
    if (before_last311091 !== false) {
      var if_res622 = before_last271090;
    } else {
      var if_res622 = x1097;
    }
    var before_last1100 = if_res622;
    if (after_last321087 !== false) {
      var if_res623 = after_last281086;
    } else {
      var if_res623 = $rjs_core.Pair.makeList();
    }
    var after_last1101 = if_res623;
    if (M2.list_p(l1096) !== false) {
      var if_res624 = M2.rvoid();
    } else {
      var if_res624 = M2.raise_argument_error($rjs_core.Symbol.make("add-between"), $rjs_core.UString.make("list?"), 0, l1096, x1097);
    }
    if_res624;
    if (splice_p1098 !== false) {
      var check_list1102 = function(x1103, which1104) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.list_p(x1103) !== false) {
          var if_res625 = M2.rvoid();
        } else {
          var if_res625 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append($rjs_core.UString.make("list needed in splicing mode"), which1104), $rjs_core.UString.make("given"), x1103, $rjs_core.UString.make("given list..."), l1096);
        }
        return if_res625;
      };
      check_list1102(x1097, $rjs_core.UString.make(""));
      check_list1102(before_first1099, $rjs_core.UString.make(" for #:before-first"));
      check_list1102(before_last1100, $rjs_core.UString.make(" for #:before-last"));
      var if_res627 = check_list1102(after_last1101, $rjs_core.UString.make(" for #:after-last"));
    } else {
      var check_not_given1105 = function(x1106, which1107) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.eq_p($rjs_core.Pair.makeList(), x1106) !== false) {
          var if_res626 = M2.rvoid();
        } else {
          var if_res626 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append(which1107, $rjs_core.UString.make(" can only be used in splicing mode")), $rjs_core.UString.make("given"), x1106, $rjs_core.UString.make("given list..."), l1096);
        }
        return if_res626;
      };
      check_not_given1105(before_first1099, $rjs_core.UString.make("#:before-first"));
      var if_res627 = check_not_given1105(after_last1101, $rjs_core.UString.make("#:after-last"));
    }
    if_res627;
    var or_part1108 = M2.null_p(l1096);
    if (or_part1108 !== false) {
      var if_res628 = or_part1108;
    } else {
      var if_res628 = M2.null_p(M2.cdr(l1096));
    }
    if (if_res628 !== false) {
      if (splice_p1098 !== false) {
        var if_res629 = M2.append(before_first1099, l1096, after_last1101);
      } else {
        var if_res629 = l1096;
      }
      var if_res634 = if_res629;
    } else {
      if (splice_p1098 !== false) {
        var x1109 = M8.alt_reverse(x1097);
        var loop1111 = function(i1112, l1113, r1114) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1113) !== false) {
            var if_res630 = loop1111(M2.car(l1113), M2.cdr(l1113), M2.cons(i1112, M2.append(x1109, r1114)));
          } else {
            var if_res630 = M2.cons(i1112, M2.append(M8.alt_reverse(before_last1100), r1114));
          }
          return if_res630;
        };
        var r1110 = loop1111(M2.cadr(l1096), M2.cddr(l1096), $rjs_core.Pair.makeList());
        var r1115 = M8.alt_reverse(M2.append(M8.alt_reverse(after_last1101), r1110));
        var r1116 = M4.__rjs_quoted__.qq_append(before_first1099, M2.list_times_(M2.car(l1096), r1115));
        var if_res633 = r1116;
      } else {
        var temp632 = M2.car(l1096);
        var loop1117 = function(i1118, l1119, r1120) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1119) !== false) {
            var if_res631 = loop1117(M2.car(l1119), M2.cdr(l1119), M2.cons(i1118, M2.cons(x1097, r1120)));
          } else {
            var if_res631 = M2.cons(i1118, M2.cons(before_last1100, r1120));
          }
          return if_res631;
        };
        var if_res633 = M2.cons(temp632, M8.alt_reverse(loop1117(M2.cadr(l1096), M2.cddr(l1096), $rjs_core.Pair.makeList())));
      }
      var if_res634 = if_res633;
    }
    return if_res634;
  };
  var unpack36 = function(given_kws1121, given_args1122, l331123, x341124) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(given_kws1121) !== false) {
      var if_res635 = M2.eq_p($rjs_core.Keyword.make("after-last"), M2.car(given_kws1121));
    } else {
      var if_res635 = false;
    }
    var after_last321125 = if_res635;
    if (after_last321125 !== false) {
      var if_res636 = M2.car(given_args1122);
    } else {
      var if_res636 = M2.rvoid();
    }
    var after_last281126 = if_res636;
    if (after_last321125 !== false) {
      var if_res637 = M2.cdr(given_kws1121);
    } else {
      var if_res637 = given_kws1121;
    }
    var given_kws1127 = if_res637;
    if (after_last321125 !== false) {
      var if_res638 = M2.cdr(given_args1122);
    } else {
      var if_res638 = given_args1122;
    }
    var given_args1128 = if_res638;
    if (M2.pair_p(given_kws1127) !== false) {
      var if_res639 = M2.eq_p($rjs_core.Keyword.make("before-first"), M2.car(given_kws1127));
    } else {
      var if_res639 = false;
    }
    var before_first301129 = if_res639;
    if (before_first301129 !== false) {
      var if_res640 = M2.car(given_args1128);
    } else {
      var if_res640 = M2.rvoid();
    }
    var before_first261130 = if_res640;
    if (before_first301129 !== false) {
      var if_res641 = M2.cdr(given_kws1127);
    } else {
      var if_res641 = given_kws1127;
    }
    var given_kws1131 = if_res641;
    if (before_first301129 !== false) {
      var if_res642 = M2.cdr(given_args1128);
    } else {
      var if_res642 = given_args1128;
    }
    var given_args1132 = if_res642;
    if (M2.pair_p(given_kws1131) !== false) {
      var if_res643 = M2.eq_p($rjs_core.Keyword.make("before-last"), M2.car(given_kws1131));
    } else {
      var if_res643 = false;
    }
    var before_last311133 = if_res643;
    if (before_last311133 !== false) {
      var if_res644 = M2.car(given_args1132);
    } else {
      var if_res644 = M2.rvoid();
    }
    var before_last271134 = if_res644;
    if (before_last311133 !== false) {
      var if_res645 = M2.cdr(given_kws1131);
    } else {
      var if_res645 = given_kws1131;
    }
    var given_kws1135 = if_res645;
    if (before_last311133 !== false) {
      var if_res646 = M2.cdr(given_args1132);
    } else {
      var if_res646 = given_args1132;
    }
    var given_args1136 = if_res646;
    var splice_p291137 = M2.pair_p(given_kws1135);
    if (splice_p291137 !== false) {
      var if_res647 = M2.car(given_args1136);
    } else {
      var if_res647 = M2.rvoid();
    }
    var splice_p251138 = if_res647;
    return add_between35(after_last281126, after_last321125, before_first261130, before_first301129, before_last271134, before_last311133, splice_p251138, splice_p291137, l331123, x341124);
  };
  var cl651 = function(given_kws1149, given_args1150, l1151, x1152) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(given_kws1149, given_args1150, l1151, x1152);
  };
  var temp653 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam652 = {'4': cl651}[arguments.length];
    if (fixed_lam652 !== undefined) {
      return fixed_lam652.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp650 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("after-last"), $rjs_core.Keyword.make("before-first"), $rjs_core.Keyword.make("before-last"), $rjs_core.Keyword.make("splice?"));
  var cl648 = function(l1154, x1155) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(M2.rnull, M2.rnull, l1154, x1155);
  };
  var add_between1153 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam649 = {'2': cl648}[arguments.length];
    if (fixed_lam649 !== undefined) {
      return fixed_lam649.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var add_between37 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1139, given_argc1140) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(given_argc1140, 4) !== false) {
      var l11141 = given_kws1139;
      if (M2.null_p(l11141) !== false) {
        var if_res655 = l11141;
      } else {
        if (M2.eq_p(M2.car(l11141), $rjs_core.Keyword.make("after-last")) !== false) {
          var if_res654 = M2.cdr(l11141);
        } else {
          var if_res654 = l11141;
        }
        var if_res655 = if_res654;
      }
      var l11142 = if_res655;
      var l11143 = l11142;
      if (M2.null_p(l11143) !== false) {
        var if_res657 = l11143;
      } else {
        if (M2.eq_p(M2.car(l11143), $rjs_core.Keyword.make("before-first")) !== false) {
          var if_res656 = M2.cdr(l11143);
        } else {
          var if_res656 = l11143;
        }
        var if_res657 = if_res656;
      }
      var l11144 = if_res657;
      var l11145 = l11144;
      if (M2.null_p(l11145) !== false) {
        var if_res659 = l11145;
      } else {
        if (M2.eq_p(M2.car(l11145), $rjs_core.Keyword.make("before-last")) !== false) {
          var if_res658 = M2.cdr(l11145);
        } else {
          var if_res658 = l11145;
        }
        var if_res659 = if_res658;
      }
      var l11146 = if_res659;
      var l11147 = l11146;
      if (M2.null_p(l11147) !== false) {
        var if_res661 = l11147;
      } else {
        if (M2.eq_p(M2.car(l11147), $rjs_core.Keyword.make("splice?")) !== false) {
          var if_res660 = M2.cdr(l11147);
        } else {
          var if_res660 = l11147;
        }
        var if_res661 = if_res660;
      }
      var l11148 = if_res661;
      var if_res662 = M2.null_p(l11148);
    } else {
      var if_res662 = false;
    }
    return if_res662;
  }, temp653, M2.rnull, temp650, add_between1153);
  var remove_duplicates43 = function(key381156, key391157, l421158, __eq__p401159, __eq__p411160) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1161 = l421158;
    if (__eq__p411160 !== false) {
      var if_res663 = __eq__p401159;
    } else {
      var if_res663 = M2.equal_p;
    }
    var __eq__p1162 = if_res663;
    if (key391157 !== false) {
      var if_res664 = key381156;
    } else {
      var if_res664 = false;
    }
    var key1163 = if_res664;
    if (M2.list_p(l1161) !== false) {
      var if_res665 = M2.rvoid();
    } else {
      var if_res665 = M2.raise_argument_error($rjs_core.Symbol.make("remove-duplicates"), $rjs_core.UString.make("list?"), l1161);
    }
    if_res665;
    var len1164 = M2.length(l1161);
    if (M2.__lt__eq_(len1164, 1) !== false) {
      var if_res669 = true;
    } else {
      if (M2.__lt__eq_(len1164, 40) !== false) {
        var if_res668 = false;
      } else {
        if (M2.eq_p(__eq__p1162, M2.eq_p) !== false) {
          var if_res667 = M2.make_hasheq();
        } else {
          if (M2.eq_p(__eq__p1162, M2.equal_p) !== false) {
            var if_res666 = M2.make_hash();
          } else {
            var if_res666 = false;
          }
          var if_res667 = if_res666;
        }
        var if_res668 = if_res667;
      }
      var if_res669 = if_res668;
    }
    var h1165 = if_res669;
    var tmp1166 = h1165;
    if (M2.equal_p(tmp1166, true) !== false) {
      var if_res688 = l1161;
    } else {
      if (M2.equal_p(tmp1166, false) !== false) {
        var or_part1168 = key1163;
        if (or_part1168 !== false) {
          var if_res670 = or_part1168;
        } else {
          var if_res670 = function(x1169) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return x1169;
          };
        }
        var key1167 = if_res670;
        if (M2.eq_p(__eq__p1162, M2.equal_p) !== false) {
          var loop1170 = function(l1171, seen1172) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1171) !== false) {
              var if_res672 = l1171;
            } else {
              var x1173 = M2.car(l1171);
              var k1174 = key1167(x1173);
              var l1175 = M2.cdr(l1171);
              if (M0.member(k1174, seen1172) !== false) {
                var if_res671 = loop1170(l1175, seen1172);
              } else {
                var if_res671 = M2.cons(x1173, loop1170(l1175, M2.cons(k1174, seen1172)));
              }
              var if_res672 = if_res671;
            }
            return if_res672;
          };
          var if_res681 = loop1170(l1161, M2.rnull);
        } else {
          if (M2.eq_p(__eq__p1162, M2.eq_p) !== false) {
            var loop1176 = function(l1177, seen1178) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.null_p(l1177) !== false) {
                var if_res674 = l1177;
              } else {
                var x1179 = M2.car(l1177);
                var k1180 = key1167(x1179);
                var l1181 = M2.cdr(l1177);
                if (M0.memq(k1180, seen1178) !== false) {
                  var if_res673 = loop1176(l1181, seen1178);
                } else {
                  var if_res673 = M2.cons(x1179, loop1176(l1181, M2.cons(k1180, seen1178)));
                }
                var if_res674 = if_res673;
              }
              return if_res674;
            };
            var if_res680 = loop1176(l1161, M2.rnull);
          } else {
            if (M2.eq_p(__eq__p1162, M2.eqv_p) !== false) {
              var loop1182 = function(l1183, seen1184) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1183) !== false) {
                  var if_res676 = l1183;
                } else {
                  var x1185 = M2.car(l1183);
                  var k1186 = key1167(x1185);
                  var l1187 = M2.cdr(l1183);
                  if (M0.memv(k1186, seen1184) !== false) {
                    var if_res675 = loop1182(l1187, seen1184);
                  } else {
                    var if_res675 = M2.cons(x1185, loop1182(l1187, M2.cons(k1186, seen1184)));
                  }
                  var if_res676 = if_res675;
                }
                return if_res676;
              };
              var if_res679 = loop1182(l1161, M2.rnull);
            } else {
              var loop1188 = function(l1189, seen1190) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1189) !== false) {
                  var if_res678 = l1189;
                } else {
                  var x1191 = M2.car(l1189);
                  var k1192 = key1167(x1191);
                  var l1193 = M2.cdr(l1189);
                  if ((function(x1194, seen1195) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M5.ormap(function(y1196) {
                      if (arguments.length !== 1) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      return __eq__p1162(x1194, y1196);
                    }, seen1195);
                  })(k1192, seen1190) !== false) {
                    var if_res677 = loop1188(l1193, seen1190);
                  } else {
                    var if_res677 = M2.cons(x1191, loop1188(l1193, M2.cons(k1192, seen1190)));
                  }
                  var if_res678 = if_res677;
                }
                return if_res678;
              };
              var if_res679 = loop1188(l1161, M2.rnull);
            }
            var if_res680 = if_res679;
          }
          var if_res681 = if_res680;
        }
        var if_res687 = if_res681;
      } else {
        if (key1163 !== false) {
          var loop1197 = function(l1198) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1198) !== false) {
              var if_res683 = l1198;
            } else {
              var x1199 = M2.car(l1198);
              var k1200 = key1163(x1199);
              var l1201 = M2.cdr(l1198);
              if (M2.hash_ref(h1165, k1200, false) !== false) {
                var if_res682 = loop1197(l1201);
              } else {
                M2.hash_set_bang_(h1165, k1200, true);
                var if_res682 = M2.cons(x1199, loop1197(l1201));
              }
              var if_res683 = if_res682;
            }
            return if_res683;
          };
          var if_res686 = loop1197(l1161);
        } else {
          var loop1202 = function(l1203) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1203) !== false) {
              var if_res685 = l1203;
            } else {
              var x1204 = M2.car(l1203);
              var k1205 = x1204;
              var l1206 = M2.cdr(l1203);
              if (M2.hash_ref(h1165, k1205, false) !== false) {
                var if_res684 = loop1202(l1206);
              } else {
                M2.hash_set_bang_(h1165, k1205, true);
                var if_res684 = M2.cons(x1204, loop1202(l1206));
              }
              var if_res685 = if_res684;
            }
            return if_res685;
          };
          var if_res686 = loop1202(l1161);
        }
        var if_res687 = if_res686;
      }
      var if_res688 = if_res687;
    }
    return if_res688;
  };
  var unpack44 = function(given_kws1207, given_args1208, l421209, __eq__p401210, __eq__p411211) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key391212 = M2.pair_p(given_kws1207);
    if (key391212 !== false) {
      var if_res689 = M2.car(given_args1208);
    } else {
      var if_res689 = M2.rvoid();
    }
    var key381213 = if_res689;
    return remove_duplicates43(key381213, key391212, l421209, __eq__p401210, __eq__p411211);
  };
  var cl694 = function(given_kws1218, given_args1219, l1220) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1218, given_args1219, l1220, false, false);
  };
  var cl695 = function(given_kws1221, given_args1222, l1223, __eq__p401224) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1221, given_args1222, l1223, __eq__p401224, true);
  };
  var temp697 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam696 = {
      '3': cl694,
      '4': cl695
    }[arguments.length];
    if (fixed_lam696 !== undefined) {
      return fixed_lam696.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp693 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl690 = function(l1226) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1226, false, false);
  };
  var cl691 = function(l1227, __eq__p401228) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1227, __eq__p401228, true);
  };
  var remove_duplicates1225 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam692 = {
      '1': cl690,
      '2': cl691
    }[arguments.length];
    if (fixed_lam692 !== undefined) {
      return fixed_lam692.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var remove_duplicates45 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1214, given_argc1215) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1215, 3) !== false) {
      var if_res698 = M2.__lt__eq_(given_argc1215, 4);
    } else {
      var if_res698 = false;
    }
    if (if_res698 !== false) {
      var l11216 = given_kws1214;
      if (M2.null_p(l11216) !== false) {
        var if_res700 = l11216;
      } else {
        if (M2.eq_p(M2.car(l11216), $rjs_core.Keyword.make("key")) !== false) {
          var if_res699 = M2.cdr(l11216);
        } else {
          var if_res699 = l11216;
        }
        var if_res700 = if_res699;
      }
      var l11217 = if_res700;
      var if_res701 = M2.null_p(l11217);
    } else {
      var if_res701 = false;
    }
    return if_res701;
  }, temp697, M2.rnull, temp693, remove_duplicates1225);
  var check_duplicates51 = function(key461229, key471230, items501231, same_p481232, same_p491233) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var items1234 = items501231;
    if (same_p491233 !== false) {
      var if_res702 = same_p481232;
    } else {
      var if_res702 = M2.equal_p;
    }
    var same_p1235 = if_res702;
    if (key471230 !== false) {
      var if_res703 = key461229;
    } else {
      var if_res703 = M2.values;
    }
    var key1236 = if_res703;
    if (M2.list_p(items1234) !== false) {
      var if_res704 = M2.rvoid();
    } else {
      var if_res704 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.make("list?"), 0, items1234);
    }
    if_res704;
    if (M2.procedure_p(key1236) !== false) {
      var if_res705 = M2.procedure_arity_includes_p(key1236, 1);
    } else {
      var if_res705 = false;
    }
    if (if_res705 !== false) {
      var if_res706 = M2.rvoid();
    } else {
      var if_res706 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.make("(-> any/c any/c)"), key1236);
    }
    if_res706;
    if (M2.eq_p(same_p1235, M2.equal_p) !== false) {
      var if_res711 = check_duplicates_by_t(items1234, key1236, M2.make_hash());
    } else {
      if (M2.eq_p(same_p1235, M2.eq_p) !== false) {
        var if_res710 = check_duplicates_by_t(items1234, key1236, M2.make_hasheq());
      } else {
        if (M2.eq_p(same_p1235, M2.eqv_p) !== false) {
          var if_res709 = check_duplicates_by_t(items1234, key1236, M2.make_hasheqv());
        } else {
          if (M2.procedure_p(same_p1235) !== false) {
            var if_res707 = M2.procedure_arity_includes_p(same_p1235, 2);
          } else {
            var if_res707 = false;
          }
          if (if_res707 !== false) {
            var if_res708 = M2.rvoid();
          } else {
            var if_res708 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), 1, items1234, same_p1235);
          }
          if_res708;
          var if_res709 = check_duplicates_by_list(items1234, key1236, same_p1235);
        }
        var if_res710 = if_res709;
      }
      var if_res711 = if_res710;
    }
    return if_res711;
  };
  var unpack52 = function(given_kws1237, given_args1238, items501239, same_p481240, same_p491241) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key471242 = M2.pair_p(given_kws1237);
    if (key471242 !== false) {
      var if_res712 = M2.car(given_args1238);
    } else {
      var if_res712 = M2.rvoid();
    }
    var key461243 = if_res712;
    return check_duplicates51(key461243, key471242, items501239, same_p481240, same_p491241);
  };
  var cl717 = function(given_kws1248, given_args1249, items1250) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1248, given_args1249, items1250, false, false);
  };
  var cl718 = function(given_kws1251, given_args1252, items1253, same_p481254) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1251, given_args1252, items1253, same_p481254, true);
  };
  var temp720 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam719 = {
      '3': cl717,
      '4': cl718
    }[arguments.length];
    if (fixed_lam719 !== undefined) {
      return fixed_lam719.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp716 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl713 = function(items1256) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1256, false, false);
  };
  var cl714 = function(items1257, same_p481258) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1257, same_p481258, true);
  };
  var check_duplicates1255 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam715 = {
      '1': cl713,
      '2': cl714
    }[arguments.length];
    if (fixed_lam715 !== undefined) {
      return fixed_lam715.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var check_duplicates53 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1244, given_argc1245) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1245, 3) !== false) {
      var if_res721 = M2.__lt__eq_(given_argc1245, 4);
    } else {
      var if_res721 = false;
    }
    if (if_res721 !== false) {
      var l11246 = given_kws1244;
      if (M2.null_p(l11246) !== false) {
        var if_res723 = l11246;
      } else {
        if (M2.eq_p(M2.car(l11246), $rjs_core.Keyword.make("key")) !== false) {
          var if_res722 = M2.cdr(l11246);
        } else {
          var if_res722 = l11246;
        }
        var if_res723 = if_res722;
      }
      var l11247 = if_res723;
      var if_res724 = M2.null_p(l11247);
    } else {
      var if_res724 = false;
    }
    return if_res724;
  }, temp720, M2.rnull, temp716, check_duplicates1255);
  var check_duplicates_by_t = function(items1259, key1260, table1261) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1262 = function(items1263) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1263) !== false) {
        var key_item1264 = key1260(M2.car(items1263));
        if (M2.hash_ref(table1261, key_item1264, false) !== false) {
          var if_res725 = M2.car(items1263);
        } else {
          M2.hash_set_bang_(table1261, key_item1264, true);
          var if_res725 = loop1262(M2.cdr(items1263));
        }
        var if_res726 = if_res725;
      } else {
        var if_res726 = false;
      }
      return if_res726;
    };
    return loop1262(items1259);
  };
  var check_duplicates_by_list = function(items1265, key1266, same_p1267) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1268 = function(items1269, sofar1270) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1269) !== false) {
        var key_item1271 = key1266(M2.car(items1269));
        var lst1272 = sofar1270;
        if (M2.list_p(lst1272) !== false) {
          var if_res727 = M2.rvoid();
        } else {
          var if_res727 = M3.__rjs_quoted__.in_list(lst1272);
        }
        if_res727;
        var for_loop1273 = function(result1274, lst1275) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(lst1275) !== false) {
            var prev1276 = M10.unsafe_car(lst1275);
            var rest1277 = M10.unsafe_cdr(lst1275);
            if (true !== false) {
              var result1279 = result1274;
              var result1280 = same_p1267(key_item1271, prev1276);
              var result1278 = M2.values(result1280);
              if (true !== false) {
                var if_res729 = M2.not($rjs_core.attachProcedureArity(function() {
                  for (var x1281728 = [],
                      $__2 = 0; $__2 < arguments.length; $__2++)
                    x1281728[$__2] = arguments[$__2];
                  var x1281 = $rjs_core.Pair.listFromArray(x1281728);
                  return result1278;
                })(prev1276));
              } else {
                var if_res729 = false;
              }
              if (if_res729 !== false) {
                var if_res730 = M2.not(false);
              } else {
                var if_res730 = false;
              }
              if (if_res730 !== false) {
                var if_res731 = for_loop1273(result1278, rest1277);
              } else {
                var if_res731 = result1278;
              }
              var if_res732 = if_res731;
            } else {
              var if_res732 = result1274;
            }
            var if_res733 = if_res732;
          } else {
            var if_res733 = result1274;
          }
          return if_res733;
        };
        if (for_loop1273(false, lst1272) !== false) {
          var if_res734 = M2.car(items1269);
        } else {
          var if_res734 = loop1268(M2.cdr(items1269), M2.cons(key_item1271, sofar1270));
        }
        var if_res735 = if_res734;
      } else {
        var if_res735 = false;
      }
      return if_res735;
    };
    return loop1268(items1265, M2.rnull);
  };
  var check_filter_arguments = function(who1282, f1283, l1284, ls1285) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1283) !== false) {
      var if_res736 = M2.rvoid();
    } else {
      var if_res736 = M2.apply(M2.raise_argument_error, who1282, $rjs_core.UString.make("procedure?"), 0, f1283, l1284, ls1285);
    }
    if_res736;
    if (M2.procedure_arity_includes_p(f1283, M2.add1(M2.length(ls1285))) !== false) {
      var if_res737 = M2.rvoid();
    } else {
      var if_res737 = M2.raise_arguments_error(who1282, $rjs_core.UString.make("mismatch between procedure arity and argument count"), $rjs_core.UString.make("procedure"), f1283, $rjs_core.UString.make("expected arity"), M2.add1(M2.length(ls1285)));
    }
    if_res737;
    if (M2.list_p(l1284) !== false) {
      var if_res738 = M5.andmap(M2.list_p, ls1285);
    } else {
      var if_res738 = false;
    }
    if (if_res738 !== false) {
      var if_res758 = M2.rvoid();
    } else {
      var let_result739 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), M2.cons(l1284, ls1285));
      var pos__gt_vals1286 = let_result739.getAt(0);
      var pos_pre_inc1287 = let_result739.getAt(1);
      var pos_next1288 = let_result739.getAt(2);
      var init1289 = let_result739.getAt(3);
      var pos_cont_p1290 = let_result739.getAt(4);
      var val_cont_p1291 = let_result739.getAt(5);
      var all_cont_p1292 = let_result739.getAt(6);
      var start1293 = 0;
      if (M2.rvoid() !== false) {
        if (M2.exact_nonnegative_integer_p(start1293) !== false) {
          var if_res740 = M2.rvoid();
        } else {
          var if_res740 = M3.__rjs_quoted__.in_naturals(start1293);
        }
        var if_res741 = if_res740;
      } else {
        var if_res741 = false;
      }
      if_res741;
      var for_loop1294 = function(pos1295, pos1296) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pos_cont_p1290 !== false) {
          var if_res742 = pos_cont_p1290(pos1295);
        } else {
          var if_res742 = true;
        }
        if (if_res742 !== false) {
          var if_res743 = true;
        } else {
          var if_res743 = false;
        }
        if (if_res743 !== false) {
          var x1301 = pos__gt_vals1286(pos1295);
          if (all_cont_p1292 !== false) {
            var if_res744 = function(pos1302) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return all_cont_p1292(pos1302, x1301);
            };
          } else {
            var if_res744 = false;
          }
          var let_result745 = M2.values(x1301, if_res744);
          var x1297 = let_result745.getAt(0);
          var all_cont_p_by_pos1298 = let_result745.getAt(1);
          if (pos_pre_inc1287 !== false) {
            var if_res746 = pos_pre_inc1287(pos1295);
          } else {
            var if_res746 = pos1295;
          }
          var pos1299 = if_res746;
          var i1300 = pos1296;
          if (val_cont_p1291 !== false) {
            var if_res747 = val_cont_p1291(x1297);
          } else {
            var if_res747 = true;
          }
          if (if_res747 !== false) {
            var if_res748 = true;
          } else {
            var if_res748 = false;
          }
          if (if_res748 !== false) {
            if (M2.list_p(x1297) !== false) {
              var if_res749 = M2.rvoid();
            } else {
              var if_res749 = M2.apply(M2.raise_argument_error, who1282, $rjs_core.UString.make("list?"), M2.add1(i1300), f1283, l1284, ls1285);
            }
            if_res749;
            var let_result750 = M2.values();
            var let_result751 = M2.values();
            if (all_cont_p_by_pos1298 !== false) {
              var if_res752 = all_cont_p_by_pos1298(pos1299);
            } else {
              var if_res752 = true;
            }
            if (if_res752 !== false) {
              var if_res753 = true;
            } else {
              var if_res753 = false;
            }
            if (if_res753 !== false) {
              var if_res754 = M2.not(false);
            } else {
              var if_res754 = false;
            }
            if (if_res754 !== false) {
              var if_res755 = for_loop1294(pos_next1288(pos1299), pos1296 + 1);
            } else {
              var if_res755 = M2.values();
            }
            var if_res756 = if_res755;
          } else {
            var if_res756 = M2.values();
          }
          var if_res757 = if_res756;
        } else {
          var if_res757 = M2.values();
        }
        return if_res757;
      };
      for_loop1294(init1289, start1293);
      var if_res758 = M2.rvoid();
    }
    return if_res758;
  };
  var filter_map = $rjs_core.attachProcedureArity(function(f1303, l1304) {
    for (var ls1305759 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      ls1305759[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1305 = $rjs_core.Pair.listFromArray(ls1305759);
    check_filter_arguments($rjs_core.Symbol.make("filter-map"), f1303, l1304, ls1305);
    if (M2.pair_p(ls1305) !== false) {
      var len1306 = M2.length(l1304);
      if (M5.andmap(function(l1307) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1306, M2.length(l1307));
      }, ls1305) !== false) {
        var loop1308 = function(l1309, ls1310) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1309) !== false) {
            var if_res761 = M2.rnull;
          } else {
            var x1311 = M2.apply(f1303, M2.car(l1309), M5.map(M2.car, ls1310));
            if (x1311 !== false) {
              var if_res760 = M2.cons(x1311, loop1308(M2.cdr(l1309), M5.map(M2.cdr, ls1310)));
            } else {
              var if_res760 = loop1308(M2.cdr(l1309), M5.map(M2.cdr, ls1310));
            }
            var if_res761 = if_res760;
          }
          return if_res761;
        };
        var if_res762 = loop1308(l1304, ls1305);
      } else {
        var if_res762 = M2.raise_arguments_error($rjs_core.Symbol.make("filter-map"), $rjs_core.UString.make("all lists must have same size"));
      }
      var if_res765 = if_res762;
    } else {
      var loop1312 = function(l1313) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1313) !== false) {
          var if_res764 = M2.rnull;
        } else {
          var x1314 = f1303(M2.car(l1313));
          if (x1314 !== false) {
            var if_res763 = M2.cons(x1314, loop1312(M2.cdr(l1313)));
          } else {
            var if_res763 = loop1312(M2.cdr(l1313));
          }
          var if_res764 = if_res763;
        }
        return if_res764;
      };
      var if_res765 = loop1312(l1304);
    }
    return if_res765;
  });
  var count = $rjs_core.attachProcedureArity(function(f1315, l1316) {
    for (var ls1317766 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      ls1317766[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1317 = $rjs_core.Pair.listFromArray(ls1317766);
    check_filter_arguments($rjs_core.Symbol.make("count"), f1315, l1316, ls1317);
    if (M2.pair_p(ls1317) !== false) {
      var len1318 = M2.length(l1316);
      if (M5.andmap(function(l1319) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1318, M2.length(l1319));
      }, ls1317) !== false) {
        var loop1320 = function(l1321, ls1322, c1323) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1321) !== false) {
            var if_res770 = c1323;
          } else {
            var temp769 = M2.cdr(l1321);
            var temp768 = M5.map(M2.cdr, ls1322);
            if (M2.apply(f1315, M2.car(l1321), M5.map(M2.car, ls1322)) !== false) {
              var if_res767 = M2.add1(c1323);
            } else {
              var if_res767 = c1323;
            }
            var if_res770 = loop1320(temp769, temp768, if_res767);
          }
          return if_res770;
        };
        var if_res771 = loop1320(l1316, ls1317, 0);
      } else {
        var if_res771 = M2.raise_arguments_error($rjs_core.Symbol.make("count"), $rjs_core.UString.make("all lists must have same size"));
      }
      var if_res775 = if_res771;
    } else {
      var loop1324 = function(l1325, c1326) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1325) !== false) {
          var if_res774 = c1326;
        } else {
          var temp773 = M2.cdr(l1325);
          if (f1315(M2.car(l1325)) !== false) {
            var if_res772 = M2.add1(c1326);
          } else {
            var if_res772 = c1326;
          }
          var if_res774 = loop1324(temp773, if_res772);
        }
        return if_res774;
      };
      var if_res775 = loop1324(l1316, 0);
    }
    return if_res775;
  });
  var partition = function(pred1327, l1328) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred1327) !== false) {
      var if_res776 = M2.procedure_arity_includes_p(pred1327, 1);
    } else {
      var if_res776 = false;
    }
    if (if_res776 !== false) {
      var if_res777 = M2.rvoid();
    } else {
      var if_res777 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.make("(any/c . -> . any/c)"), 0, pred1327, l1328);
    }
    if_res777;
    if (M2.list_p(l1328) !== false) {
      var if_res778 = M2.rvoid();
    } else {
      var if_res778 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.make("list?"), 1, pred1327, l1328);
    }
    if_res778;
    var loop1329 = function(l1330, i1331, o1332) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1330) !== false) {
        var if_res780 = M2.values(M8.alt_reverse(i1331), M8.alt_reverse(o1332));
      } else {
        var x1333 = M2.car(l1330);
        var l1334 = M2.cdr(l1330);
        if (pred1327(x1333) !== false) {
          var if_res779 = loop1329(l1334, M2.cons(x1333, i1331), o1332);
        } else {
          var if_res779 = loop1329(l1334, i1331, M2.cons(x1333, o1332));
        }
        var if_res780 = if_res779;
      }
      return if_res780;
    };
    return loop1329(l1328, $rjs_core.Pair.makeList(), $rjs_core.Pair.makeList());
  };
  var cl781 = function(end1336) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1337 = 0;
    var end1338 = end1336;
    var inc1339 = 1;
    if (M2.real_p(start1337) !== false) {
      if (M2.real_p(end1338) !== false) {
        var if_res785 = M2.real_p(inc1339);
      } else {
        var if_res785 = false;
      }
      var if_res786 = if_res785;
    } else {
      var if_res786 = false;
    }
    if (if_res786 !== false) {
      var if_res787 = M2.rvoid();
    } else {
      var if_res787 = M3.__rjs_quoted__.in_range(start1337, end1338, inc1339);
    }
    if_res787;
    var for_loop1340 = function(fold_var1341, pos1342) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1342, end1338) !== false) {
        var i1343 = pos1342;
        if (true !== false) {
          var fold_var1345 = fold_var1341;
          var fold_var1346 = M2.cons(i1343, fold_var1345);
          var fold_var1344 = M2.values(fold_var1346);
          if (true !== false) {
            var if_res788 = M2.not(false);
          } else {
            var if_res788 = false;
          }
          if (if_res788 !== false) {
            var if_res789 = for_loop1340(fold_var1344, pos1342 + inc1339);
          } else {
            var if_res789 = fold_var1344;
          }
          var if_res790 = if_res789;
        } else {
          var if_res790 = fold_var1341;
        }
        var if_res791 = if_res790;
      } else {
        var if_res791 = fold_var1341;
      }
      return if_res791;
    };
    return M8.alt_reverse(for_loop1340(M2.rnull, start1337));
  };
  var cl782 = function(start1347, end1348) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1349 = start1347;
    var end1350 = end1348;
    var inc1351 = 1;
    if (M2.real_p(start1349) !== false) {
      if (M2.real_p(end1350) !== false) {
        var if_res792 = M2.real_p(inc1351);
      } else {
        var if_res792 = false;
      }
      var if_res793 = if_res792;
    } else {
      var if_res793 = false;
    }
    if (if_res793 !== false) {
      var if_res794 = M2.rvoid();
    } else {
      var if_res794 = M3.__rjs_quoted__.in_range(start1349, end1350, inc1351);
    }
    if_res794;
    var for_loop1352 = function(fold_var1353, pos1354) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1354, end1350) !== false) {
        var i1355 = pos1354;
        if (true !== false) {
          var fold_var1357 = fold_var1353;
          var fold_var1358 = M2.cons(i1355, fold_var1357);
          var fold_var1356 = M2.values(fold_var1358);
          if (true !== false) {
            var if_res795 = M2.not(false);
          } else {
            var if_res795 = false;
          }
          if (if_res795 !== false) {
            var if_res796 = for_loop1352(fold_var1356, pos1354 + inc1351);
          } else {
            var if_res796 = fold_var1356;
          }
          var if_res797 = if_res796;
        } else {
          var if_res797 = fold_var1353;
        }
        var if_res798 = if_res797;
      } else {
        var if_res798 = fold_var1353;
      }
      return if_res798;
    };
    return M8.alt_reverse(for_loop1352(M2.rnull, start1349));
  };
  var cl783 = function(start1359, end1360, step1361) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1362 = start1359;
    var end1363 = end1360;
    var inc1364 = step1361;
    if (M2.real_p(start1362) !== false) {
      if (M2.real_p(end1363) !== false) {
        var if_res799 = M2.real_p(inc1364);
      } else {
        var if_res799 = false;
      }
      var if_res800 = if_res799;
    } else {
      var if_res800 = false;
    }
    if (if_res800 !== false) {
      var if_res801 = M2.rvoid();
    } else {
      var if_res801 = M3.__rjs_quoted__.in_range(start1362, end1363, inc1364);
    }
    if_res801;
    var for_loop1365 = function(fold_var1366, pos1367) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__gt__eq_(step1361, 0) !== false) {
        var if_res802 = M2.__lt_(pos1367, end1363);
      } else {
        var if_res802 = M2.__gt_(pos1367, end1363);
      }
      if (if_res802 !== false) {
        var i1368 = pos1367;
        if (true !== false) {
          var fold_var1370 = fold_var1366;
          var fold_var1371 = M2.cons(i1368, fold_var1370);
          var fold_var1369 = M2.values(fold_var1371);
          if (true !== false) {
            var if_res803 = M2.not(false);
          } else {
            var if_res803 = false;
          }
          if (if_res803 !== false) {
            var if_res804 = for_loop1365(fold_var1369, pos1367 + inc1364);
          } else {
            var if_res804 = fold_var1369;
          }
          var if_res805 = if_res804;
        } else {
          var if_res805 = fold_var1366;
        }
        var if_res806 = if_res805;
      } else {
        var if_res806 = fold_var1366;
      }
      return if_res806;
    };
    return M8.alt_reverse(for_loop1365(M2.rnull, start1362));
  };
  var range1335 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam784 = {
      '1': cl781,
      '2': cl782,
      '3': cl783
    }[arguments.length];
    if (fixed_lam784 !== undefined) {
      return fixed_lam784.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var range_proc = range1335;
  var cl807 = function(f1372, l1373) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1372, l1373));
  };
  var cl808 = function(f1374, l11375, l21376) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1374, l11375, l21376));
  };
  var cl809 = $rjs_core.attachProcedureArity(function(f1377, l1378) {
    for (var ls1379812 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      ls1379812[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1379 = $rjs_core.Pair.listFromArray(ls1379812);
    return M2.apply(M2.append, M2.apply(M5.map, f1377, l1378, ls1379));
  });
  var append_map = $rjs_core.attachProcedureArity(function() {
    var fixed_lam810 = {
      '2': cl807,
      '3': cl808
    }[arguments.length];
    if (fixed_lam810 !== undefined) {
      return fixed_lam810.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl809.length, 1) !== false) {
        var if_res811 = cl809.apply(null, arguments);
      } else {
        var if_res811 = M2.error($rjs_core.UString.make("case-lambda: invalid case"));
      }
      return if_res811;
    }
  }, [M2.make_arity_at_least(2)]);
  var filter_not = function(f1380, list1381) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1380) !== false) {
      var if_res813 = M2.procedure_arity_includes_p(f1380, 1);
    } else {
      var if_res813 = false;
    }
    if (if_res813 !== false) {
      var if_res814 = M2.rvoid();
    } else {
      var if_res814 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.make("(any/c . -> . any/c)"), 0, f1380, list1381);
    }
    if_res814;
    if (M2.list_p(list1381) !== false) {
      var if_res815 = M2.rvoid();
    } else {
      var if_res815 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.make("list?"), 1, f1380, list1381);
    }
    if_res815;
    var loop1382 = function(l1383, result1384) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1383) !== false) {
        var if_res818 = M8.alt_reverse(result1384);
      } else {
        var temp817 = M2.cdr(l1383);
        if (f1380(M2.car(l1383)) !== false) {
          var if_res816 = result1384;
        } else {
          var if_res816 = M2.cons(M2.car(l1383), result1384);
        }
        var if_res818 = loop1382(temp817, if_res816);
      }
      return if_res818;
    };
    return loop1382(list1381, M2.rnull);
  };
  var shuffle = function(l1385) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a1386 = M2.make_vector(M2.length(l1385));
    var lst1387 = l1385;
    var start1388 = 0;
    if (M2.list_p(lst1387) !== false) {
      var if_res819 = M2.rvoid();
    } else {
      var if_res819 = M3.__rjs_quoted__.in_list(lst1387);
    }
    if_res819;
    if (M2.exact_nonnegative_integer_p(start1388) !== false) {
      var if_res820 = M2.rvoid();
    } else {
      var if_res820 = M3.__rjs_quoted__.in_naturals(start1388);
    }
    if_res820;
    var for_loop1389 = function(lst1390, pos1391) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1390) !== false) {
        var if_res821 = true;
      } else {
        var if_res821 = false;
      }
      if (if_res821 !== false) {
        var x1392 = M10.unsafe_car(lst1390);
        var rest1393 = M10.unsafe_cdr(lst1390);
        var i1394 = pos1391;
        if (true !== false) {
          var if_res822 = true;
        } else {
          var if_res822 = false;
        }
        if (if_res822 !== false) {
          var j1395 = M7.random(M2.add1(i1394));
          if (M2.__eq_(j1395, i1394) !== false) {
            var if_res823 = M2.rvoid();
          } else {
            var if_res823 = M2.vector_set_bang_(a1386, i1394, M2.vector_ref(a1386, j1395));
          }
          if_res823;
          M2.vector_set_bang_(a1386, j1395, x1392);
          var let_result824 = M2.values();
          var let_result825 = M2.values();
          if (true !== false) {
            if (true !== false) {
              var if_res826 = M2.not(false);
            } else {
              var if_res826 = false;
            }
            var if_res827 = if_res826;
          } else {
            var if_res827 = false;
          }
          if (if_res827 !== false) {
            var if_res828 = for_loop1389(rest1393, pos1391 + 1);
          } else {
            var if_res828 = M2.values();
          }
          var if_res829 = if_res828;
        } else {
          var if_res829 = M2.values();
        }
        var if_res830 = if_res829;
      } else {
        var if_res830 = M2.values();
      }
      return if_res830;
    };
    for_loop1389(lst1387, start1388);
    M2.rvoid();
    return M2.vector__gt_list(a1386);
  };
  var combinations571396 = function(l561397, k541398, k551399) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1400 = l561397;
    if (k551399 !== false) {
      var if_res831 = k541398;
    } else {
      var if_res831 = false;
    }
    var k1401 = if_res831;
    var let_result832 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), in_combinations(l1400, k1401));
    var pos__gt_vals1402 = let_result832.getAt(0);
    var pos_pre_inc1403 = let_result832.getAt(1);
    var pos_next1404 = let_result832.getAt(2);
    var init1405 = let_result832.getAt(3);
    var pos_cont_p1406 = let_result832.getAt(4);
    var val_cont_p1407 = let_result832.getAt(5);
    var all_cont_p1408 = let_result832.getAt(6);
    M2.rvoid();
    var for_loop1409 = function(fold_var1410, pos1411) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1406 !== false) {
        var if_res833 = pos_cont_p1406(pos1411);
      } else {
        var if_res833 = true;
      }
      if (if_res833 !== false) {
        var x1415 = pos__gt_vals1402(pos1411);
        if (all_cont_p1408 !== false) {
          var if_res834 = function(pos1416) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1408(pos1416, x1415);
          };
        } else {
          var if_res834 = false;
        }
        var let_result835 = M2.values(x1415, if_res834);
        var x1412 = let_result835.getAt(0);
        var all_cont_p_by_pos1413 = let_result835.getAt(1);
        if (pos_pre_inc1403 !== false) {
          var if_res836 = pos_pre_inc1403(pos1411);
        } else {
          var if_res836 = pos1411;
        }
        var pos1414 = if_res836;
        if (val_cont_p1407 !== false) {
          var if_res837 = val_cont_p1407(x1412);
        } else {
          var if_res837 = true;
        }
        if (if_res837 !== false) {
          var fold_var1418 = fold_var1410;
          var fold_var1419 = M2.cons(x1412, fold_var1418);
          var fold_var1417 = M2.values(fold_var1419);
          if (all_cont_p_by_pos1413 !== false) {
            var if_res838 = all_cont_p_by_pos1413(pos1414);
          } else {
            var if_res838 = true;
          }
          if (if_res838 !== false) {
            var if_res839 = M2.not(false);
          } else {
            var if_res839 = false;
          }
          if (if_res839 !== false) {
            var if_res840 = for_loop1409(fold_var1417, pos_next1404(pos1414));
          } else {
            var if_res840 = fold_var1417;
          }
          var if_res841 = if_res840;
        } else {
          var if_res841 = fold_var1410;
        }
        var if_res842 = if_res841;
      } else {
        var if_res842 = fold_var1410;
      }
      return if_res842;
    };
    return M8.alt_reverse(for_loop1409(M2.rnull, init1405));
  };
  var cl843 = function(l1420) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571396(l1420, false, false);
  };
  var cl844 = function(l1421, k541422) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571396(l1421, k541422, true);
  };
  var combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam845 = {
      '1': cl843,
      '2': cl844
    }[arguments.length];
    if (fixed_lam845 !== undefined) {
      return fixed_lam845.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var in_combinations621423 = function(l611424, k591425, k601426) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1427 = l611424;
    if (k601426 !== false) {
      var if_res846 = k591425;
    } else {
      var if_res846 = false;
    }
    var k1428 = if_res846;
    if (M2.list_p(l1427) !== false) {
      var if_res847 = M2.rvoid();
    } else {
      var if_res847 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.make("list?"), 0, l1427);
    }
    if_res847;
    var let_result848 = M2.values();
    if (k1428 !== false) {
      var if_res849 = M2.not(M2.exact_nonnegative_integer_p(k1428));
    } else {
      var if_res849 = false;
    }
    if (if_res849 !== false) {
      var if_res850 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.make("exact-nonnegative-integer?"), 1, l1427, k1428);
    } else {
      var if_res850 = M2.rvoid();
    }
    if_res850;
    var let_result851 = M2.values();
    var v1429 = M2.list__gt_vector(l1427);
    var N1430 = M2.vector_length(v1429);
    var N_11431 = N1430 - 1;
    var vector_ref_by_bits1432 = function(v1433, b1434) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var start1435 = N_11431;
      var end1436 = -1;
      var inc1437 = -1;
      if (M2.real_p(start1435) !== false) {
        if (M2.real_p(end1436) !== false) {
          var if_res852 = M2.real_p(inc1437);
        } else {
          var if_res852 = false;
        }
        var if_res853 = if_res852;
      } else {
        var if_res853 = false;
      }
      if (if_res853 !== false) {
        var if_res854 = M2.rvoid();
      } else {
        var if_res854 = M3.__rjs_quoted__.in_range(start1435, end1436, inc1437);
      }
      if_res854;
      var for_loop1438 = function(acc1439, pos1440) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.__gt_(pos1440, end1436) !== false) {
          var i1441 = pos1440;
          if (true !== false) {
            var acc1443 = acc1439;
            if (M2.bitwise_bit_set_p(b1434, i1441) !== false) {
              var if_res855 = M2.cons(M2.vector_ref(v1433, i1441), acc1443);
            } else {
              var if_res855 = acc1443;
            }
            var acc1444 = if_res855;
            var acc1442 = M2.values(acc1444);
            if (true !== false) {
              var if_res856 = M2.not(false);
            } else {
              var if_res856 = false;
            }
            if (if_res856 !== false) {
              var if_res857 = for_loop1438(acc1442, pos1440 + inc1437);
            } else {
              var if_res857 = acc1442;
            }
            var if_res858 = if_res857;
          } else {
            var if_res858 = acc1439;
          }
          var if_res859 = if_res858;
        } else {
          var if_res859 = acc1439;
        }
        return if_res859;
      };
      return for_loop1438($rjs_core.Pair.makeList(), start1435);
    };
    if (M2.not(k1428) !== false) {
      var if_res862 = M2.values(0, M2.expt(2, N1430) - 1, M2.add1);
    } else {
      if (M2.__lt_(N1430, k1428) !== false) {
        var if_res861 = M2.values(1, 0, M2.values);
      } else {
        var first1448 = M2.expt(2, k1428) - 1;
        if (M2.zero_p(first1448) !== false) {
          var if_res860 = M2.add1;
        } else {
          var if_res860 = function(n1450) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var u1451 = M2.bitwise_and(n1450, M2.__(n1450));
            var v1452 = u1451 + n1450;
            return v1452 + M2.arithmetic_shift(M2.quotient(M2.bitwise_xor(v1452, n1450), u1451), -2);
          };
        }
        var gospers_hack1449 = if_res860;
        var if_res861 = M2.values(first1448, M2.arithmetic_shift(first1448, N1430 - k1428), gospers_hack1449);
      }
      var if_res862 = if_res861;
    }
    var let_result863 = if_res862;
    var first1445 = let_result863.getAt(0);
    var last1446 = let_result863.getAt(1);
    var incr1447 = let_result863.getAt(2);
    var curr_box1454 = M2.box(first1445);
    var gen_next1453 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var curr1455 = M2.unbox(curr_box1454);
      if (M2.__lt__eq_(curr1455, last1446) !== false) {
        var begin_res864 = vector_ref_by_bits1432(v1429, curr1455);
        M2.set_box_bang_(curr_box1454, incr1447(curr1455));
        var if_res865 = begin_res864;
      } else {
        var if_res865 = false;
      }
      return if_res865;
    };
    return M3.__rjs_quoted__.in_producer(gen_next1453, false);
  };
  var cl866 = function(l1456) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621423(l1456, false, false);
  };
  var cl867 = function(l1457, k591458) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621423(l1457, k591458, true);
  };
  var in_combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam868 = {
      '1': cl866,
      '2': cl867
    }[arguments.length];
    if (fixed_lam868 !== undefined) {
      return fixed_lam868.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var swap_plus_flip = function(l1459, i1460, j1461) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp1462 = j1461;
    if (M2.equal_p(tmp1462, 0) !== false) {
      var if_res876 = M2.list_times_(M2.cadr(l1459), M2.car(l1459), M2.cddr(l1459));
    } else {
      if (M2.equal_p(tmp1462, 1) !== false) {
        var a1463 = M2.car(l1459);
        var b1464 = M2.cadr(l1459);
        var c1465 = M2.caddr(l1459);
        var l1466 = M2.cdddr(l1459);
        var tmp1467 = i1460;
        if (M2.equal_p(tmp1467, 0) !== false) {
          var if_res869 = M2.list_times_(b1464, c1465, a1463, l1466);
        } else {
          var if_res869 = M2.list_times_(c1465, a1463, b1464, l1466);
        }
        var if_res875 = if_res869;
      } else {
        if (M2.equal_p(tmp1462, 2) !== false) {
          var a1468 = M2.car(l1459);
          var b1469 = M2.cadr(l1459);
          var c1470 = M2.caddr(l1459);
          var d1471 = M2.cadddr(l1459);
          var l1472 = M2.cddddr(l1459);
          var tmp1473 = i1460;
          if (M2.equal_p(tmp1473, 0) !== false) {
            var if_res871 = M2.list_times_(c1470, b1469, d1471, a1468, l1472);
          } else {
            if (M2.equal_p(tmp1473, 1) !== false) {
              var if_res870 = M2.list_times_(c1470, d1471, a1468, b1469, l1472);
            } else {
              var if_res870 = M2.list_times_(d1471, b1469, a1468, c1470, l1472);
            }
            var if_res871 = if_res870;
          }
          var if_res874 = if_res871;
        } else {
          var loop1474 = function(n1475, l11476, r11477) {
            if (arguments.length !== 3) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.__gt_(n1475, 0) !== false) {
              var if_res873 = loop1474(M2.sub1(n1475), M2.cons(M2.car(r11477), l11476), M2.cdr(r11477));
            } else {
              var loop1478 = function(n1479, l21480, r21481) {
                if (arguments.length !== 3) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.__gt_(n1479, 0) !== false) {
                  var if_res872 = loop1478(M2.sub1(n1479), M2.cons(M2.car(r21481), l21480), M2.cdr(r21481));
                } else {
                  var if_res872 = M4.__rjs_quoted__.qq_append(l21480, M2.list_times_(M2.car(r21481), M4.__rjs_quoted__.qq_append(l11476, M2.list_times_(M2.car(r11477), M2.cdr(r21481)))));
                }
                return if_res872;
              };
              var if_res873 = loop1478(j1461 - i1460, $rjs_core.Pair.makeList(), M2.cdr(r11477));
            }
            return if_res873;
          };
          var if_res874 = loop1474(i1460, $rjs_core.Pair.makeList(), l1459);
        }
        var if_res875 = if_res874;
      }
      var if_res876 = if_res875;
    }
    return if_res876;
  };
  var permutations = function(l1482) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1482)) !== false) {
      var if_res883 = M2.raise_argument_error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.make("list?"), 0, l1482);
    } else {
      var or_part1483 = M2.null_p(l1482);
      if (or_part1483 !== false) {
        var if_res877 = or_part1483;
      } else {
        var if_res877 = M2.null_p(M2.cdr(l1482));
      }
      if (if_res877 !== false) {
        var if_res882 = M2.list(l1482);
      } else {
        var N1484 = M2.length(l1482) - 2;
        if (M2.__gt_(N1484, 254) !== false) {
          var if_res878 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.make("input list too long: ~e"), l1482);
        } else {
          var if_res878 = M2.rvoid();
        }
        if_res878;
        var let_result879 = M2.values();
        var c1485 = M2.make_bytes(M2.add1(N1484), 0);
        var loop1486 = function(i1487, acc1488) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var ci1489 = M2.bytes_ref(c1485, i1487);
          if (M2.__lt__eq_(ci1489, i1487) !== false) {
            M2.bytes_set_bang_(c1485, i1487, M2.add1(ci1489));
            var if_res881 = loop1486(0, M2.cons(swap_plus_flip(M2.car(acc1488), ci1489, i1487), acc1488));
          } else {
            if (M2.__lt_(i1487, N1484) !== false) {
              M2.bytes_set_bang_(c1485, i1487, 0);
              var if_res880 = loop1486(M2.add1(i1487), acc1488);
            } else {
              var if_res880 = acc1488;
            }
            var if_res881 = if_res880;
          }
          return if_res881;
        };
        var if_res882 = loop1486(0, M2.list(M8.alt_reverse(l1482)));
      }
      var if_res883 = if_res882;
    }
    return if_res883;
  };
  var in_permutations = function(l1490) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1490)) !== false) {
      var if_res892 = M2.raise_argument_error($rjs_core.Symbol.make("in-permutations"), $rjs_core.UString.make("list?"), 0, l1490);
    } else {
      var or_part1491 = M2.null_p(l1490);
      if (or_part1491 !== false) {
        var if_res884 = or_part1491;
      } else {
        var if_res884 = M2.null_p(M2.cdr(l1490));
      }
      if (if_res884 !== false) {
        var if_res891 = M3.__rjs_quoted__.in_value(l1490);
      } else {
        var N1492 = M2.length(l1490) - 2;
        if (M2.__gt_(N1492, 254) !== false) {
          var if_res885 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.make("input list too long: ~e"), l1490);
        } else {
          var if_res885 = M2.rvoid();
        }
        if_res885;
        var let_result886 = M2.values();
        var c1493 = M2.make_bytes(M2.add1(N1492), 0);
        var i1494 = 0;
        var cur1495 = M8.alt_reverse(l1490);
        var next1496 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var r1497 = cur1495;
          var ci1498 = M2.bytes_ref(c1493, i1494);
          if (M2.__lt__eq_(ci1498, i1494) !== false) {
            M2.bytes_set_bang_(c1493, i1494, M2.add1(ci1498));
            var begin_res887 = swap_plus_flip(cur1495, ci1498, i1494);
            i1494 = 0;
            var if_res889 = begin_res887;
          } else {
            if (M2.__lt_(i1494, N1492) !== false) {
              M2.bytes_set_bang_(c1493, i1494, 0);
              i1494 = M2.add1(i1494);
              var if_res888 = next1496();
            } else {
              var if_res888 = false;
            }
            var if_res889 = if_res888;
          }
          return if_res889;
        };
        var if_res891 = M3.__rjs_quoted__.in_producer(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res890 = cur1495;
          cur1495 = next1496();
          return begin_res890;
        }, false);
      }
      var if_res892 = if_res891;
    }
    return if_res892;
  };
  var mk_min = function(cmp1499, name1500, f1501, xs1502) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1501) !== false) {
      var if_res893 = M2.procedure_arity_includes_p(f1501, 1);
    } else {
      var if_res893 = false;
    }
    if (if_res893 !== false) {
      var if_res894 = M2.rvoid();
    } else {
      var if_res894 = M2.raise_argument_error(name1500, $rjs_core.UString.make("(any/c . -> . real?)"), 0, f1501, xs1502);
    }
    if_res894;
    if (M2.list_p(xs1502) !== false) {
      var if_res895 = M2.pair_p(xs1502);
    } else {
      var if_res895 = false;
    }
    if (if_res895 !== false) {
      var if_res896 = M2.rvoid();
    } else {
      var if_res896 = M2.raise_argument_error(name1500, $rjs_core.UString.make("(and/c list? (not/c empty?))"), 1, f1501, xs1502);
    }
    if_res896;
    var init_min_var1503 = f1501(M2.car(xs1502));
    if (M2.real_p(init_min_var1503) !== false) {
      var if_res897 = M2.rvoid();
    } else {
      var if_res897 = M2.raise_result_error(name1500, $rjs_core.UString.make("real?"), init_min_var1503);
    }
    if_res897;
    var loop1504 = function(min1505, min_var1506, xs1507) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(xs1507) !== false) {
        var if_res900 = min1505;
      } else {
        var new_min1508 = f1501(M2.car(xs1507));
        if (M2.real_p(new_min1508) !== false) {
          var if_res898 = M2.rvoid();
        } else {
          var if_res898 = M2.raise_result_error(name1500, $rjs_core.UString.make("real?"), new_min1508);
        }
        if_res898;
        if (cmp1499(new_min1508, min_var1506) !== false) {
          var if_res899 = loop1504(M2.car(xs1507), new_min1508, M2.cdr(xs1507));
        } else {
          var if_res899 = loop1504(min1505, min_var1506, M2.cdr(xs1507));
        }
        var if_res900 = if_res899;
      }
      return if_res900;
    };
    return loop1504(M2.car(xs1502), init_min_var1503, M2.cdr(xs1502));
  };
  var argmin = function(f1509, xs1510) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__lt_, $rjs_core.Symbol.make("argmin"), f1509, xs1510);
  };
  var argmax = function(f1511, xs1512) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__gt_, $rjs_core.Symbol.make("argmax"), f1511, xs1512);
  };
  var group_by681513 = function(key661514, l671515, __eq__p641516, __eq__p651517) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key1518 = key661514;
    var l1519 = l671515;
    if (__eq__p651517 !== false) {
      var if_res901 = __eq__p641516;
    } else {
      var if_res901 = M2.equal_p;
    }
    var __eq__p1520 = if_res901;
    if (M2.procedure_p(key1518) !== false) {
      var if_res902 = M2.procedure_arity_includes_p(key1518, 1);
    } else {
      var if_res902 = false;
    }
    if (if_res902 !== false) {
      var if_res903 = M2.rvoid();
    } else {
      var if_res903 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.make("(-> any/c any/c)"), 0, key1518, l1519);
    }
    if_res903;
    var let_result904 = M2.values();
    if (M2.procedure_p(__eq__p1520) !== false) {
      var if_res905 = M2.procedure_arity_includes_p(__eq__p1520, 2);
    } else {
      var if_res905 = false;
    }
    if (if_res905 !== false) {
      var if_res906 = M2.rvoid();
    } else {
      var if_res906 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.make("(any/c any/c . -> . any/c)"), 2, key1518, l1519, __eq__p1520);
    }
    if_res906;
    var let_result907 = M2.values();
    if (M2.list_p(l1519) !== false) {
      var if_res908 = M2.rvoid();
    } else {
      var if_res908 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.make("list?"), 1, key1518, l1519);
    }
    if_res908;
    var let_result909 = M2.values();
    var alist_update1521 = function(al1522, k1523, up1524, fail1525) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1526 = function(al1527) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(al1527) !== false) {
          var if_res911 = M2.list(M2.cons(k1523, up1524($rjs_core.Pair.makeList())));
        } else {
          if (__eq__p1520(M2.car(M2.car(al1527)), k1523) !== false) {
            var if_res910 = M2.cons(M2.cons(k1523, up1524(M2.cdr(M2.car(al1527)))), M2.cdr(al1527));
          } else {
            var if_res910 = M2.cons(M2.car(al1527), loop1526(M2.cdr(al1527)));
          }
          var if_res911 = if_res910;
        }
        return if_res911;
      };
      return loop1526(al1522);
    };
    if (M2.equal_p(__eq__p1520, M2.eq_p) !== false) {
      var if_res914 = M2.values(M2.hasheq(), M1.hash_update);
    } else {
      if (M2.equal_p(__eq__p1520, M2.eqv_p) !== false) {
        var if_res913 = M2.values(M2.hasheqv(), M1.hash_update);
      } else {
        if (M2.equal_p(__eq__p1520, M2.equal_p) !== false) {
          var if_res912 = M2.values(M2.hash(), M1.hash_update);
        } else {
          var if_res912 = M2.values($rjs_core.Pair.makeList(), alist_update1521);
        }
        var if_res913 = if_res912;
      }
      var if_res914 = if_res913;
    }
    var let_result915 = if_res914;
    var base1528 = let_result915.getAt(0);
    var update1529 = let_result915.getAt(1);
    var lst1531 = l1519;
    var start1532 = 0;
    if (M2.list_p(lst1531) !== false) {
      var if_res916 = M2.rvoid();
    } else {
      var if_res916 = M3.__rjs_quoted__.in_list(lst1531);
    }
    if_res916;
    if (M2.exact_nonnegative_integer_p(start1532) !== false) {
      var if_res917 = M2.rvoid();
    } else {
      var if_res917 = M3.__rjs_quoted__.in_naturals(start1532);
    }
    if_res917;
    var for_loop1533 = function(res1534, lst1535, pos1536) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1535) !== false) {
        var if_res918 = true;
      } else {
        var if_res918 = false;
      }
      if (if_res918 !== false) {
        var elt1537 = M10.unsafe_car(lst1535);
        var rest1538 = M10.unsafe_cdr(lst1535);
        var idx1539 = pos1536;
        if (true !== false) {
          var if_res919 = true;
        } else {
          var if_res919 = false;
        }
        if (if_res919 !== false) {
          var res1541 = res1534;
          var k1543 = key1518(elt1537);
          var v1544 = M2.cons(idx1539, elt1537);
          var res1542 = update1529(res1541, k1543, function(o1545) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.cons(v1544, o1545);
          }, $rjs_core.Pair.makeList());
          var res1540 = M2.values(res1542);
          if (true !== false) {
            if (true !== false) {
              var if_res920 = M2.not(false);
            } else {
              var if_res920 = false;
            }
            var if_res921 = if_res920;
          } else {
            var if_res921 = false;
          }
          if (if_res921 !== false) {
            var if_res922 = for_loop1533(res1540, rest1538, pos1536 + 1);
          } else {
            var if_res922 = res1540;
          }
          var if_res923 = if_res922;
        } else {
          var if_res923 = res1534;
        }
        var if_res924 = if_res923;
      } else {
        var if_res924 = res1534;
      }
      return if_res924;
    };
    var classes1530 = for_loop1533(base1528, lst1531, start1532);
    if (M2.list_p(classes1530) !== false) {
      var lst1547 = classes1530;
      if (M2.list_p(lst1547) !== false) {
        var if_res925 = M2.rvoid();
      } else {
        var if_res925 = M3.__rjs_quoted__.in_list(lst1547);
      }
      if_res925;
      var for_loop1548 = function(fold_var1549, lst1550) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1550) !== false) {
          var p1551 = M10.unsafe_car(lst1550);
          var rest1552 = M10.unsafe_cdr(lst1550);
          if (true !== false) {
            var fold_var1554 = fold_var1549;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901556 = M6.__rjs_quoted__.sort9;
            var temp861557 = M2.cdr(p1551);
            var __lt_871558 = M2.__lt_;
            var car881559 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res926 = M6.__rjs_quoted__.sort7(false, false, car881559, true, temp861557, __lt_871558);
            } else {
              var if_res926 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901556, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car881559), temp861557, __lt_871558);
            }
            var fold_var1555 = M2.cons(if_res926, fold_var1554);
            var fold_var1553 = M2.values(fold_var1555);
            if (true !== false) {
              var if_res927 = M2.not(false);
            } else {
              var if_res927 = false;
            }
            if (if_res927 !== false) {
              var if_res928 = for_loop1548(fold_var1553, rest1552);
            } else {
              var if_res928 = fold_var1553;
            }
            var if_res929 = if_res928;
          } else {
            var if_res929 = fold_var1549;
          }
          var if_res930 = if_res929;
        } else {
          var if_res930 = fold_var1549;
        }
        return if_res930;
      };
      var if_res938 = M8.alt_reverse(for_loop1548(M2.rnull, lst1547));
    } else {
      var ht1560 = classes1530;
      if ((function(ht1561) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.hash_p(ht1561);
      })(ht1560) !== false) {
        var if_res931 = M2.rvoid();
      } else {
        var if_res931 = M3.__rjs_quoted__.default_in_hash(ht1560);
      }
      if_res931;
      var for_loop1562 = function(fold_var1563, i1564) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (i1564 !== false) {
          var let_result932 = M2.__rjs_quoted__.hash_iterate_key_plus_value(ht1560, i1564);
          var _1565 = let_result932.getAt(0);
          var c1566 = let_result932.getAt(1);
          if (true !== false) {
            var fold_var1568 = fold_var1563;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741570 = M6.__rjs_quoted__.sort9;
            var c891571 = c1566;
            var __lt_901572 = M2.__lt_;
            var car911573 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res933 = M6.__rjs_quoted__.sort7(false, false, car911573, true, c891571, __lt_901572);
            } else {
              var if_res933 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741570, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car911573), c891571, __lt_901572);
            }
            var fold_var1569 = M2.cons(if_res933, fold_var1568);
            var fold_var1567 = M2.values(fold_var1569);
            if (true !== false) {
              var if_res934 = M2.not(false);
            } else {
              var if_res934 = false;
            }
            if (if_res934 !== false) {
              var if_res935 = for_loop1562(fold_var1567, M2.__rjs_quoted__.hash_iterate_next(ht1560, i1564));
            } else {
              var if_res935 = fold_var1567;
            }
            var if_res936 = if_res935;
          } else {
            var if_res936 = fold_var1563;
          }
          var if_res937 = if_res936;
        } else {
          var if_res937 = fold_var1563;
        }
        return if_res937;
      };
      var if_res938 = M8.alt_reverse(for_loop1562(M2.rnull, M2.__rjs_quoted__.hash_iterate_first(ht1560)));
    }
    var sorted_classes1546 = if_res938;
    var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911575 = M6.__rjs_quoted__.sort9;
    var sorted_classes921576 = sorted_classes1546;
    var __lt_931577 = M2.__lt_;
    var caar941578 = M2.caar;
    if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
      var if_res939 = M6.__rjs_quoted__.sort7(false, false, caar941578, true, sorted_classes921576, __lt_931577);
    } else {
      var if_res939 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911575, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(caar941578), sorted_classes921576, __lt_931577);
    }
    var lst1574 = if_res939;
    if (M2.list_p(lst1574) !== false) {
      var if_res940 = M2.rvoid();
    } else {
      var if_res940 = M3.__rjs_quoted__.in_list(lst1574);
    }
    if_res940;
    var for_loop1579 = function(fold_var1580, lst1581) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1581) !== false) {
        var c1582 = M10.unsafe_car(lst1581);
        var rest1583 = M10.unsafe_cdr(lst1581);
        if (true !== false) {
          var fold_var1585 = fold_var1580;
          var fold_var1586 = M2.cons(M5.map(M2.cdr, c1582), fold_var1585);
          var fold_var1584 = M2.values(fold_var1586);
          if (true !== false) {
            var if_res941 = M2.not(false);
          } else {
            var if_res941 = false;
          }
          if (if_res941 !== false) {
            var if_res942 = for_loop1579(fold_var1584, rest1583);
          } else {
            var if_res942 = fold_var1584;
          }
          var if_res943 = if_res942;
        } else {
          var if_res943 = fold_var1580;
        }
        var if_res944 = if_res943;
      } else {
        var if_res944 = fold_var1580;
      }
      return if_res944;
    };
    return M8.alt_reverse(for_loop1579(M2.rnull, lst1574));
  };
  var cl945 = function(key1587, l1588) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681513(key1587, l1588, false, false);
  };
  var cl946 = function(key1589, l1590, __eq__p641591) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681513(key1589, l1590, __eq__p641591, true);
  };
  var group_by = $rjs_core.attachProcedureArity(function() {
    var fixed_lam947 = {
      '2': cl945,
      '3': cl946
    }[arguments.length];
    if (fixed_lam947 !== undefined) {
      return fixed_lam947.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cartesian_product = $rjs_core.attachProcedureArity(function() {
    for (var ls1592948 = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      ls1592948[$__5] = arguments[$__5];
    var ls1592 = $rjs_core.Pair.listFromArray(ls1592948);
    var let_result949 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("l")), ls1592);
    var pos__gt_vals1593 = let_result949.getAt(0);
    var pos_pre_inc1594 = let_result949.getAt(1);
    var pos_next1595 = let_result949.getAt(2);
    var init1596 = let_result949.getAt(3);
    var pos_cont_p1597 = let_result949.getAt(4);
    var val_cont_p1598 = let_result949.getAt(5);
    var all_cont_p1599 = let_result949.getAt(6);
    var start1600 = 0;
    if (M2.rvoid() !== false) {
      if (M2.exact_nonnegative_integer_p(start1600) !== false) {
        var if_res950 = M2.rvoid();
      } else {
        var if_res950 = M3.__rjs_quoted__.in_naturals(start1600);
      }
      var if_res951 = if_res950;
    } else {
      var if_res951 = false;
    }
    if_res951;
    var for_loop1601 = function(pos1602, pos1603) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1597 !== false) {
        var if_res952 = pos_cont_p1597(pos1602);
      } else {
        var if_res952 = true;
      }
      if (if_res952 !== false) {
        var if_res953 = true;
      } else {
        var if_res953 = false;
      }
      if (if_res953 !== false) {
        var l1608 = pos__gt_vals1593(pos1602);
        if (all_cont_p1599 !== false) {
          var if_res954 = function(pos1609) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1599(pos1609, l1608);
          };
        } else {
          var if_res954 = false;
        }
        var let_result955 = M2.values(l1608, if_res954);
        var l1604 = let_result955.getAt(0);
        var all_cont_p_by_pos1605 = let_result955.getAt(1);
        if (pos_pre_inc1594 !== false) {
          var if_res956 = pos_pre_inc1594(pos1602);
        } else {
          var if_res956 = pos1602;
        }
        var pos1606 = if_res956;
        var i1607 = pos1603;
        if (val_cont_p1598 !== false) {
          var if_res957 = val_cont_p1598(l1604);
        } else {
          var if_res957 = true;
        }
        if (if_res957 !== false) {
          var if_res958 = true;
        } else {
          var if_res958 = false;
        }
        if (if_res958 !== false) {
          if (M2.list_p(l1604) !== false) {
            var if_res959 = M2.rvoid();
          } else {
            var if_res959 = M2.apply(M2.raise_argument_error, $rjs_core.Symbol.make("cartesian-product"), $rjs_core.UString.make("list?"), i1607, ls1592);
          }
          if_res959;
          var let_result960 = M2.values();
          var let_result961 = M2.values();
          if (all_cont_p_by_pos1605 !== false) {
            var if_res962 = all_cont_p_by_pos1605(pos1606);
          } else {
            var if_res962 = true;
          }
          if (if_res962 !== false) {
            var if_res963 = true;
          } else {
            var if_res963 = false;
          }
          if (if_res963 !== false) {
            var if_res964 = M2.not(false);
          } else {
            var if_res964 = false;
          }
          if (if_res964 !== false) {
            var if_res965 = for_loop1601(pos_next1595(pos1606), pos1603 + 1);
          } else {
            var if_res965 = M2.values();
          }
          var if_res966 = if_res965;
        } else {
          var if_res966 = M2.values();
        }
        var if_res967 = if_res966;
      } else {
        var if_res967 = M2.values();
      }
      return if_res967;
    };
    for_loop1601(init1596, start1600);
    var let_result968 = M2.values();
    M2.rvoid();
    var let_result969 = M2.values();
    var cp_21610 = function(as1611, bs1612) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var lst1613 = as1611;
      if (M2.list_p(lst1613) !== false) {
        var if_res970 = M2.rvoid();
      } else {
        var if_res970 = M3.__rjs_quoted__.in_list(lst1613);
      }
      if_res970;
      var for_loop1614 = function(fold_var1615, lst1616) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1616) !== false) {
          var i1617 = M10.unsafe_car(lst1616);
          var rest1618 = M10.unsafe_cdr(lst1616);
          if (true !== false) {
            var lst1620 = bs1612;
            if (M2.list_p(lst1620) !== false) {
              var if_res971 = M2.rvoid();
            } else {
              var if_res971 = M3.__rjs_quoted__.in_list(lst1620);
            }
            if_res971;
            var for_loop1621 = function(fold_var1622, lst1623) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.pair_p(lst1623) !== false) {
                var j1624 = M10.unsafe_car(lst1623);
                var rest1625 = M10.unsafe_cdr(lst1623);
                if (true !== false) {
                  var fold_var1627 = fold_var1622;
                  var fold_var1628 = M2.cons(M2.cons(i1617, j1624), fold_var1627);
                  var fold_var1626 = M2.values(fold_var1628);
                  if (true !== false) {
                    var if_res972 = M2.not(false);
                  } else {
                    var if_res972 = false;
                  }
                  if (if_res972 !== false) {
                    var if_res973 = for_loop1621(fold_var1626, rest1625);
                  } else {
                    var if_res973 = fold_var1626;
                  }
                  var if_res974 = if_res973;
                } else {
                  var if_res974 = fold_var1622;
                }
                var if_res975 = if_res974;
              } else {
                var if_res975 = fold_var1622;
              }
              return if_res975;
            };
            var fold_var1619 = for_loop1621(fold_var1615, lst1620);
            if (true !== false) {
              var if_res976 = M2.not(false);
            } else {
              var if_res976 = false;
            }
            if (if_res976 !== false) {
              var if_res977 = for_loop1614(fold_var1619, rest1618);
            } else {
              var if_res977 = fold_var1619;
            }
            var if_res978 = if_res977;
          } else {
            var if_res978 = fold_var1615;
          }
          var if_res979 = if_res978;
        } else {
          var if_res979 = fold_var1615;
        }
        return if_res979;
      };
      return M8.alt_reverse(for_loop1614(M2.rnull, lst1613));
    };
    return M6.foldr(cp_21610, M2.list(M2.list()), ls1592);
  });
  var remf = function(f1629, ls1630) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1630) !== false) {
      var if_res980 = M2.rvoid();
    } else {
      var if_res980 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.make("list?"), 1, f1629, ls1630);
    }
    if_res980;
    if (M2.procedure_p(f1629) !== false) {
      var if_res981 = M2.procedure_arity_includes_p(f1629, 1);
    } else {
      var if_res981 = false;
    }
    if (if_res981 !== false) {
      var if_res982 = M2.rvoid();
    } else {
      var if_res982 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.make("(-> any/c any/c)"), 0, f1629, ls1630);
    }
    if_res982;
    if (M2.null_p(ls1630) !== false) {
      var if_res984 = $rjs_core.Pair.makeList();
    } else {
      if (f1629(M2.car(ls1630)) !== false) {
        var if_res983 = M2.cdr(ls1630);
      } else {
        var if_res983 = M2.cons(M2.car(ls1630), remf(f1629, M2.cdr(ls1630)));
      }
      var if_res984 = if_res983;
    }
    return if_res984;
  };
  var remf_times_ = function(f1631, ls1632) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1632) !== false) {
      var if_res985 = M2.rvoid();
    } else {
      var if_res985 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.make("list?"), 1, f1631, ls1632);
    }
    if_res985;
    if (M2.procedure_p(f1631) !== false) {
      var if_res986 = M2.procedure_arity_includes_p(f1631, 1);
    } else {
      var if_res986 = false;
    }
    if (if_res986 !== false) {
      var if_res987 = M2.rvoid();
    } else {
      var if_res987 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.make("(-> any/c any/c)"), 0, f1631, ls1632);
    }
    if_res987;
    if (M2.null_p(ls1632) !== false) {
      var if_res989 = $rjs_core.Pair.makeList();
    } else {
      if (f1631(M2.car(ls1632)) !== false) {
        var if_res988 = remf_times_(f1631, M2.cdr(ls1632));
      } else {
        var if_res988 = M2.cons(M2.car(ls1632), remf_times_(f1631, M2.cdr(ls1632)));
      }
      var if_res989 = if_res988;
    }
    return if_res989;
  };
  var index_of741633 = function(ls721634, v731635, __eq__p701636, __eq__p711637) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1638 = ls721634;
    var v1639 = v731635;
    if (__eq__p711637 !== false) {
      var if_res990 = __eq__p701636;
    } else {
      var if_res990 = M2.equal_p;
    }
    var __eq__p1640 = if_res990;
    if (M2.list_p(ls1638) !== false) {
      var if_res991 = M2.rvoid();
    } else {
      var if_res991 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.make("list?"), 0, ls1638, v1639);
    }
    if_res991;
    if (M2.procedure_p(__eq__p1640) !== false) {
      var if_res992 = M2.procedure_arity_includes_p(__eq__p1640, 2);
    } else {
      var if_res992 = false;
    }
    if (if_res992 !== false) {
      var if_res993 = M2.rvoid();
    } else {
      var if_res993 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.make("(-> any/c any/c any/c)"), 2, ls1638, v1639, __eq__p1640);
    }
    if_res993;
    var loop1641 = function(ls1642, i1643) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1642) !== false) {
        var if_res995 = false;
      } else {
        if (__eq__p1640(M2.car(ls1642), v1639) !== false) {
          var if_res994 = i1643;
        } else {
          var if_res994 = loop1641(M2.cdr(ls1642), M2.add1(i1643));
        }
        var if_res995 = if_res994;
      }
      return if_res995;
    };
    return loop1641(ls1638, 0);
  };
  var cl996 = function(ls1644, v1645) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741633(ls1644, v1645, false, false);
  };
  var cl997 = function(ls1646, v1647, __eq__p701648) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741633(ls1646, v1647, __eq__p701648, true);
  };
  var index_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam998 = {
      '2': cl996,
      '3': cl997
    }[arguments.length];
    if (fixed_lam998 !== undefined) {
      return fixed_lam998.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var index_where = function(ls1649, f1650) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1649) !== false) {
      var if_res999 = M2.rvoid();
    } else {
      var if_res999 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.make("list?"), 0, ls1649, f1650);
    }
    if_res999;
    if (M2.procedure_p(f1650) !== false) {
      var if_res1000 = M2.procedure_arity_includes_p(f1650, 1);
    } else {
      var if_res1000 = false;
    }
    if (if_res1000 !== false) {
      var if_res1001 = M2.rvoid();
    } else {
      var if_res1001 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.make("(-> any/c any/c)"), 1, ls1649, f1650);
    }
    if_res1001;
    var loop1651 = function(ls1652, i1653) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1652) !== false) {
        var if_res1003 = false;
      } else {
        if (f1650(M2.car(ls1652)) !== false) {
          var if_res1002 = i1653;
        } else {
          var if_res1002 = loop1651(M2.cdr(ls1652), M2.add1(i1653));
        }
        var if_res1003 = if_res1002;
      }
      return if_res1003;
    };
    return loop1651(ls1649, 0);
  };
  var indexes_of801654 = function(ls781655, v791656, __eq__p761657, __eq__p771658) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1659 = ls781655;
    var v1660 = v791656;
    if (__eq__p771658 !== false) {
      var if_res1004 = __eq__p761657;
    } else {
      var if_res1004 = M2.equal_p;
    }
    var __eq__p1661 = if_res1004;
    if (M2.list_p(ls1659) !== false) {
      var if_res1005 = M2.rvoid();
    } else {
      var if_res1005 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.make("list?"), 0, ls1659, v1660);
    }
    if_res1005;
    if (M2.procedure_p(__eq__p1661) !== false) {
      var if_res1006 = M2.procedure_arity_includes_p(__eq__p1661, 2);
    } else {
      var if_res1006 = false;
    }
    if (if_res1006 !== false) {
      var if_res1007 = M2.rvoid();
    } else {
      var if_res1007 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.make("(-> any/c any/c any/c)"), 2, ls1659, v1660, __eq__p1661);
    }
    if_res1007;
    var loop1662 = function(ls1663, i1664) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1663) !== false) {
        var if_res1009 = $rjs_core.Pair.makeList();
      } else {
        if (__eq__p1661(M2.car(ls1663), v1660) !== false) {
          var if_res1008 = M2.cons(i1664, loop1662(M2.cdr(ls1663), M2.add1(i1664)));
        } else {
          var if_res1008 = loop1662(M2.cdr(ls1663), M2.add1(i1664));
        }
        var if_res1009 = if_res1008;
      }
      return if_res1009;
    };
    return loop1662(ls1659, 0);
  };
  var cl1010 = function(ls1665, v1666) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801654(ls1665, v1666, false, false);
  };
  var cl1011 = function(ls1667, v1668, __eq__p761669) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801654(ls1667, v1668, __eq__p761669, true);
  };
  var indexes_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1012 = {
      '2': cl1010,
      '3': cl1011
    }[arguments.length];
    if (fixed_lam1012 !== undefined) {
      return fixed_lam1012.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var indexes_where = function(ls1670, f1671) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1670) !== false) {
      var if_res1013 = M2.rvoid();
    } else {
      var if_res1013 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.make("list?"), 0, ls1670, f1671);
    }
    if_res1013;
    if (M2.procedure_p(f1671) !== false) {
      var if_res1014 = M2.procedure_arity_includes_p(f1671, 1);
    } else {
      var if_res1014 = false;
    }
    if (if_res1014 !== false) {
      var if_res1015 = M2.rvoid();
    } else {
      var if_res1015 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.make("(-> any/c any/c)"), 1, ls1670, f1671);
    }
    if_res1015;
    var loop1672 = function(ls1673, i1674) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1673) !== false) {
        var if_res1017 = $rjs_core.Pair.makeList();
      } else {
        if (f1671(M2.car(ls1673)) !== false) {
          var if_res1016 = M2.cons(i1674, loop1672(M2.cdr(ls1673), M2.add1(i1674)));
        } else {
          var if_res1016 = loop1672(M2.cdr(ls1673), M2.add1(i1674));
        }
        var if_res1017 = if_res1016;
      }
      return if_res1017;
    };
    return loop1672(ls1670, 0);
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.check_duplicates53 = check_duplicates53;
  __rjs_quoted__.add_between35 = add_between35;
  __rjs_quoted__.check_duplicates51 = check_duplicates51;
  __rjs_quoted__.remove_duplicates43 = remove_duplicates43;
  __rjs_quoted__.remove_duplicates45 = remove_duplicates45;
  __rjs_quoted__.add_between37 = add_between37;
  __rjs_quoted__.range_proc = range_proc;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get remf_times_() {
      return remf_times_;
    },
    get remf() {
      return remf;
    },
    get cartesian_product() {
      return cartesian_product;
    },
    get group_by() {
      return group_by;
    },
    get argmax() {
      return argmax;
    },
    get argmin() {
      return argmin;
    },
    get in_permutations() {
      return in_permutations;
    },
    get permutations() {
      return permutations;
    },
    get in_combinations() {
      return in_combinations;
    },
    get combinations() {
      return combinations;
    },
    get shuffle() {
      return shuffle;
    },
    get filter_not() {
      return filter_not;
    },
    get append_map() {
      return append_map;
    },
    get partition() {
      return partition;
    },
    get count() {
      return count;
    },
    get filter_map() {
      return filter_map;
    },
    get flatten() {
      return flatten;
    },
    get append_times_() {
      return append_times_;
    },
    get drop_common_prefix() {
      return drop_common_prefix;
    },
    get take_common_prefix() {
      return take_common_prefix;
    },
    get split_common_prefix() {
      return split_common_prefix;
    },
    get list_prefix_p() {
      return list_prefix_p;
    },
    get splitf_at_right() {
      return splitf_at_right;
    },
    get dropf_right() {
      return dropf_right;
    },
    get takef_right() {
      return takef_right;
    },
    get split_at_right() {
      return split_at_right;
    },
    get take_right() {
      return take_right;
    },
    get drop_right() {
      return drop_right;
    },
    get splitf_at() {
      return splitf_at;
    },
    get dropf() {
      return dropf;
    },
    get takef() {
      return takef;
    },
    get split_at() {
      return split_at;
    },
    get take() {
      return take;
    },
    get drop() {
      return drop;
    },
    get indexes_where() {
      return indexes_where;
    },
    get indexes_of() {
      return indexes_of;
    },
    get index_where() {
      return index_where;
    },
    get index_of() {
      return index_of;
    },
    get list_set() {
      return list_set;
    },
    get list_update() {
      return list_update;
    },
    get make_list() {
      return make_list;
    },
    get empty_p() {
      return empty_p;
    },
    get empty() {
      return empty;
    },
    get cons_p() {
      return cons_p;
    },
    get rest() {
      return rest;
    },
    get last() {
      return last;
    },
    get last_pair() {
      return last_pair;
    },
    get tenth() {
      return tenth;
    },
    get ninth() {
      return ninth;
    },
    get eighth() {
      return eighth;
    },
    get seventh() {
      return seventh;
    },
    get sixth() {
      return sixth;
    },
    get fifth() {
      return fifth;
    },
    get fourth() {
      return fourth;
    },
    get third() {
      return third;
    },
    get second() {
      return second;
    },
    get first() {
      return first;
    }
  };
})();
var $__collects_47_waxeye_47_ast_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/ast.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var let_result335 = M0.make_struct_type($rjs_core.Symbol.make("ast"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("ast"));
  var struct_602 = let_result335.getAt(0);
  var make_603 = let_result335.getAt(1);
  var __p604 = let_result335.getAt(2);
  var __ref605 = let_result335.getAt(3);
  var __set_bang_606 = let_result335.getAt(4);
  var let_result336 = M0.values(struct_602, make_603, __p604, M0.make_struct_field_accessor(__ref605, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref605, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_accessor(__ref605, 2, $rjs_core.Symbol.make("pos")), M0.make_struct_field_mutator(__set_bang_606, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_606, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_mutator(__set_bang_606, 2, $rjs_core.Symbol.make("pos")));
  var struct_ast = let_result336.getAt(0);
  var ast1 = let_result336.getAt(1);
  var ast_p = let_result336.getAt(2);
  var ast_t = let_result336.getAt(3);
  var ast_c = let_result336.getAt(4);
  var ast_pos = let_result336.getAt(5);
  var set_ast_t_bang_ = let_result336.getAt(6);
  var set_ast_c_bang_ = let_result336.getAt(7);
  var set_ast_pos_bang_ = let_result336.getAt(8);
  var let_result337 = M0.make_struct_type($rjs_core.Symbol.make("parse-error"), false, 6, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4, 5), false, $rjs_core.Symbol.make("parse-error"));
  var struct_607 = let_result337.getAt(0);
  var make_608 = let_result337.getAt(1);
  var __p609 = let_result337.getAt(2);
  var __ref610 = let_result337.getAt(3);
  var __set_bang_611 = let_result337.getAt(4);
  var let_result338 = M0.values(struct_607, make_608, __p609, M0.make_struct_field_accessor(__ref610, 0, $rjs_core.Symbol.make("pos")), M0.make_struct_field_accessor(__ref610, 1, $rjs_core.Symbol.make("line")), M0.make_struct_field_accessor(__ref610, 2, $rjs_core.Symbol.make("col")), M0.make_struct_field_accessor(__ref610, 3, $rjs_core.Symbol.make("expected")), M0.make_struct_field_accessor(__ref610, 4, $rjs_core.Symbol.make("received")), M0.make_struct_field_accessor(__ref610, 5, $rjs_core.Symbol.make("snippet")));
  var struct_parse_error = let_result338.getAt(0);
  var parse_error2 = let_result338.getAt(1);
  var parse_error_p = let_result338.getAt(2);
  var parse_error_pos = let_result338.getAt(3);
  var parse_error_line = let_result338.getAt(4);
  var parse_error_col = let_result338.getAt(5);
  var parse_error_expected = let_result338.getAt(6);
  var parse_error_received = let_result338.getAt(7);
  var parse_error_snippet = let_result338.getAt(8);
  var ast__gt_string = function(ast612) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var indent_level613 = 0;
    var o614 = M0.open_output_string();
    var display_a615 = function(c618) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level613, 0) !== false) {
        var if_res339 = M0.display($rjs_core.UString.make("->  "), o614);
      } else {
        var if_res339 = M0.rvoid();
      }
      if_res339;
      M0.display(ast_t(c618), o614);
      indent_level613 = indent_level613 + 1;
      M2.for_each(function(a619) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.newline(o614);
        return display_iter617(a619);
      }, ast_c(c618));
      indent_level613 = indent_level613 - 1;
      return null;
    };
    var display_c616 = function(c620) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level613, 0) !== false) {
        var if_res340 = M0.display($rjs_core.UString.make("|   "), o614);
      } else {
        var if_res340 = M0.rvoid();
      }
      if_res340;
      return M0.display(c620, o614);
    };
    var display_iter617 = function(ast621) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part622 = M0.char_p(ast621);
      if (or_part622 !== false) {
        var if_res341 = or_part622;
      } else {
        var if_res341 = ast_p(ast621);
      }
      if (if_res341 !== false) {
        var loop623 = function(i624) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.__lt_(i624, indent_level613) !== false) {
            M0.display($rjs_core.UString.make("    "), o614);
            var if_res342 = loop623(i624 + 1);
          } else {
            var if_res342 = M0.rvoid();
          }
          return if_res342;
        };
        loop623(1);
        if (M0.char_p(ast621) !== false) {
          var if_res343 = display_c616(ast621);
        } else {
          var if_res343 = display_a615(ast621);
        }
        var if_res344 = if_res343;
      } else {
        var if_res344 = M0.rvoid();
      }
      return if_res344;
    };
    display_iter617(ast612);
    return M0.get_output_string(o614);
  };
  var display_ast = function(ast625) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (ast_p(ast625) !== false) {
      var if_res346 = ast__gt_string(ast625);
    } else {
      if (parse_error_p(ast625) !== false) {
        var if_res345 = parse_error__gt_string(ast625);
      } else {
        var if_res345 = ast625;
      }
      var if_res346 = if_res345;
    }
    M0.display(if_res346);
    return M0.newline();
  };
  var ast__gt_string_sexpr = function(ast626) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var o627 = M0.open_output_string();
    var display_iter628 = function(ast629) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.display($rjs_core.UString.make("("), o627);
      M0.display(ast_t(ast629), o627);
      M2.for_each(function(a630) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.display($rjs_core.UString.make(" "), o627);
        if (ast_p(a630) !== false) {
          var if_res347 = display_iter628(a630);
        } else {
          var if_res347 = M0.display(a630, o627);
        }
        return if_res347;
      }, ast_c(ast629));
      return M0.display($rjs_core.UString.make(")"), o627);
    };
    display_iter628(ast626);
    return M0.get_output_string(o627);
  };
  var parse_error__gt_string = function(error631) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var comma_separate632 = function(l633) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp5634 = M2.map(M0.symbol__gt_string, l633);
      var temp6635 = $rjs_core.UString.make(", ");
      if (M0.variable_reference_constant_p(M1.__rjs_quoted__.add_between37) !== false) {
        var if_res348 = M1.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp5634, temp6635);
      } else {
        var if_res348 = M1.__rjs_quoted__.add_between37(temp5634, temp6635);
      }
      return M0.apply(M0.string_append, if_res348);
    };
    var expected636 = function(nts637) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var len638 = M0.length(nts637);
      if (M0.__eq_(len638, 0) !== false) {
        var if_res349 = $rjs_core.UString.make("<end of input>");
      } else {
        var if_res349 = M0.string_append($rjs_core.UString.make("["), comma_separate632(nts637), $rjs_core.UString.make("]"));
      }
      return if_res349;
    };
    var temp354 = M0.number__gt_string(parse_error_line(error631));
    var temp353 = $rjs_core.UString.make(":");
    var temp352 = M0.number__gt_string(parse_error_col(error631));
    var temp351 = $rjs_core.UString.make(" expected: ");
    var temp7639 = parse_error_expected(error631);
    if (M0.variable_reference_constant_p(M1.__rjs_quoted__.remove_duplicates45) !== false) {
      var if_res350 = M1.__rjs_quoted__.remove_duplicates43(false, false, temp7639, false, false);
    } else {
      var if_res350 = M1.__rjs_quoted__.remove_duplicates45(temp7639);
    }
    return M0.string_append(temp354, temp353, temp352, temp351, expected636(if_res350), $rjs_core.UString.make(" received: "), parse_error_received(error631), $rjs_core.UString.make("\n"), parse_error_snippet(error631));
  };
  var display_parse_error = function(error640) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.display(parse_error__gt_string(error640));
    return M0.newline();
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.parse_error_snippet = parse_error_snippet;
  __rjs_quoted__.struct_ast = struct_ast;
  __rjs_quoted__.parse_error_received = parse_error_received;
  __rjs_quoted__.set_ast_c_bang_ = set_ast_c_bang_;
  __rjs_quoted__.parse_error_pos = parse_error_pos;
  __rjs_quoted__.struct_parse_error = struct_parse_error;
  __rjs_quoted__.ast_pos = ast_pos;
  __rjs_quoted__.ast_t = ast_t;
  __rjs_quoted__.ast_c = ast_c;
  __rjs_quoted__.ast1 = ast1;
  __rjs_quoted__.ast_p = ast_p;
  __rjs_quoted__.parse_error_col = parse_error_col;
  __rjs_quoted__.set_ast_t_bang_ = set_ast_t_bang_;
  __rjs_quoted__.parse_error_line = parse_error_line;
  __rjs_quoted__.parse_error2 = parse_error2;
  __rjs_quoted__.parse_error_p = parse_error_p;
  __rjs_quoted__.set_ast_pos_bang_ = set_ast_pos_bang_;
  __rjs_quoted__.parse_error_expected = parse_error_expected;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_ast() {
      return struct_ast;
    },
    get ast_p() {
      return ast_p;
    },
    get ast_t() {
      return ast_t;
    },
    get ast_c() {
      return ast_c;
    },
    get ast_pos() {
      return ast_pos;
    },
    get set_ast_t_bang_() {
      return set_ast_t_bang_;
    },
    get set_ast_c_bang_() {
      return set_ast_c_bang_;
    },
    get set_ast_pos_bang_() {
      return set_ast_pos_bang_;
    },
    get struct_parse_error() {
      return struct_parse_error;
    },
    get parse_error_p() {
      return parse_error_p;
    },
    get parse_error_pos() {
      return parse_error_pos;
    },
    get parse_error_line() {
      return parse_error_line;
    },
    get parse_error_col() {
      return parse_error_col;
    },
    get parse_error_expected() {
      return parse_error_expected;
    },
    get parse_error_received() {
      return parse_error_received;
    },
    get parse_error_snippet() {
      return parse_error_snippet;
    },
    get ast__gt_string() {
      return ast__gt_string;
    },
    get display_ast() {
      return display_ast;
    },
    get ast__gt_string_sexpr() {
      return ast__gt_string_sexpr;
    },
    get parse_error__gt_string() {
      return parse_error__gt_string;
    },
    get display_parse_error() {
      return display_parse_error;
    }
  };
})();
var $__modules_47_gen_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/gen.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var __times_eof_check_times_ = true;
  var __times_expression_level_times_ = $rjs_core.Pair.makeList();
  var __times_file_header_times_ = false;
  var __times_module_name_times_ = false;
  var __times_name_prefix_times_ = false;
  var __times_start_index_times_ = 0;
  var __times_start_name_times_ = $rjs_core.UString.make("");
  var eof_check_bang_ = function(val669) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_eof_check_times_ = val669;
    return null;
  };
  var file_header_bang_ = function(val670) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_file_header_times_ = val670;
    return null;
  };
  var module_name_bang_ = function(val671) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_module_name_times_ = val671;
    return null;
  };
  var name_prefix_bang_ = function(val672) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_name_prefix_times_ = val672;
    return null;
  };
  var start_index_bang_ = function(val673) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_index_times_ = val673;
    return null;
  };
  var start_name_bang_ = function(val674) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_name_times_ = val674;
    return null;
  };
  var start_nt_bang_ = function(name675, grammar676) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var index_of677 = function(ls678, v679) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop680 = function(ls681, i682) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls681) !== false) {
          var if_res367 = false;
        } else {
          if (M0.equal_p(M0.car(ls681), v679) !== false) {
            var if_res366 = i682;
          } else {
            var if_res366 = loop680(M0.cdr(ls681), M0.add1(i682));
          }
          var if_res367 = if_res366;
        }
        return if_res367;
      };
      return loop680(ls678, 0);
    };
    __times_start_name_times_ = name675;
    if (M0.equal_p(name675, $rjs_core.UString.make("")) !== false) {
      var if_res369 = start_name_bang_(get_non_term(M0.car(get_defs(grammar676))));
    } else {
      var si683 = index_of677(M2.map(get_non_term, get_defs(grammar676)), name675);
      if (si683 !== false) {
        var if_res368 = start_index_bang_(si683);
      } else {
        var if_res368 = M0.error($rjs_core.Symbol.make("waxeye"), M0.format($rjs_core.UString.make("Can't find definition of starting non-terminal: ~a"), __times_start_name_times_));
      }
      var if_res369 = if_res368;
    }
    return if_res369;
  };
  var push_exp_level = function(level684) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_expression_level_times_ = M0.cons(level684, __times_expression_level_times_);
    return null;
  };
  var pop_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var top685 = M0.car(__times_expression_level_times_);
    __times_expression_level_times_ = M0.cdr(__times_expression_level_times_);
    return top685;
  };
  var peek_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.car(__times_expression_level_times_);
  };
  var get_non_terms = function(grammar686) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.map(get_non_term, M1.ast_c(grammar686));
  };
  var get_non_term = function(def687) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M1.ast_c(M0.car(M1.ast_c(def687))));
  };
  var get_defs = function(grammar688) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_c(grammar688);
  };
  var get_arrow = function(def689) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_t(M0.cadr(M1.ast_c(def689)));
  };
  var get_alternation = function(def690) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.caddr(M1.ast_c(def690));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_eof_check_times_() {
      return __times_eof_check_times_;
    },
    get __times_expression_level_times_() {
      return __times_expression_level_times_;
    },
    get __times_file_header_times_() {
      return __times_file_header_times_;
    },
    get __times_module_name_times_() {
      return __times_module_name_times_;
    },
    get __times_name_prefix_times_() {
      return __times_name_prefix_times_;
    },
    get __times_start_index_times_() {
      return __times_start_index_times_;
    },
    get __times_start_name_times_() {
      return __times_start_name_times_;
    },
    get eof_check_bang_() {
      return eof_check_bang_;
    },
    get file_header_bang_() {
      return file_header_bang_;
    },
    get module_name_bang_() {
      return module_name_bang_;
    },
    get name_prefix_bang_() {
      return name_prefix_bang_;
    },
    get start_index_bang_() {
      return start_index_bang_;
    },
    get start_name_bang_() {
      return start_name_bang_;
    },
    get start_nt_bang_() {
      return start_nt_bang_;
    },
    get push_exp_level() {
      return push_exp_level;
    },
    get pop_exp_level() {
      return pop_exp_level;
    },
    get peek_exp_level() {
      return peek_exp_level;
    },
    get get_non_terms() {
      return get_non_terms;
    },
    get get_non_term() {
      return get_non_term;
    },
    get get_defs() {
      return get_defs;
    },
    get get_arrow() {
      return get_arrow;
    },
    get get_alternation() {
      return get_alternation;
    }
  };
})();
var $__modules_47_action_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/action.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var collect_actions = function(grammar1773) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var action_list1774 = $rjs_core.Pair.makeList();
    var visit_action1775 = function(exp1776) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      action_list1774 = M1.cons(exp1776, action_list1774);
      return null;
    };
    var visit_alternation1777 = function(exp1781) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_sequence1778, M2.ast_c(exp1781));
    };
    var visit_sequence1778 = function(exp1782) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_unit1779, M2.ast_c(exp1782));
    };
    var visit_unit1779 = function(exp1783) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el1784 = M2.ast_c(exp1783);
      var el_len1785 = M1.length(el1784);
      return visit_exp1780(M1.list_ref(el1784, el_len1785 - 1));
    };
    var visit_exp1780 = function(exp1786) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type1787 = M2.ast_t(exp1786);
      var tmp1788 = type1787;
      if (M1.equal_p(tmp1788, $rjs_core.Symbol.make("action")) !== false) {
        var if_res1082 = visit_action1775(exp1786);
      } else {
        if (M1.equal_p(tmp1788, $rjs_core.Symbol.make("alternation")) !== false) {
          var if_res1081 = visit_alternation1777(exp1786);
        } else {
          if (M1.equal_p(tmp1788, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res1080 = visit_sequence1778(exp1786);
          } else {
            if (M1.equal_p(tmp1788, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res1079 = visit_unit1779(exp1786);
            } else {
              var if_res1079 = M1.rvoid();
            }
            var if_res1080 = if_res1079;
          }
          var if_res1081 = if_res1080;
        }
        var if_res1082 = if_res1081;
      }
      return if_res1082;
    };
    var get_def_actions1789 = function(def1790) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation1777(M1.caddr(M2.ast_c(def1790)));
    };
    M3.for_each(get_def_actions1789, M0.get_defs(grammar1773));
    action_list1774 = M4.alt_reverse(action_list1774);
    return null;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get collect_actions() {
      return collect_actions;
    }
  };
})();
var $__modules_47_expand_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/expand.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var expand_grammar = function(grammar1704) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lift_only_sub_exp1705 = function(visitor1706, exp1707) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil1708 = M2.ast_c(exp1707);
      M3.for_each(visitor1706, chil1708);
      if (M1.__eq_(M1.length(chil1708), 1) !== false) {
        var only1709 = M1.car(chil1708);
        M2.set_ast_t_bang_(exp1707, M2.ast_t(only1709));
        M2.set_ast_c_bang_(exp1707, M2.ast_c(only1709));
        var if_res1026 = M2.set_ast_pos_bang_(exp1707, M2.ast_pos(only1709));
      } else {
        var if_res1026 = M1.rvoid();
      }
      return if_res1026;
    };
    var visit_alternation1710 = function(exp1714) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return lift_only_sub_exp1705(visit_sequence1711, exp1714);
    };
    var visit_sequence1711 = function(exp1715) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M2.set_ast_c_bang_(exp1715, M3.map(expand_unit, M2.ast_c(exp1715)));
      return lift_only_sub_exp1705(visit_exp1713, exp1715);
    };
    var visit_only_child1712 = function(exp1716) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_exp1713(M1.car(M2.ast_c(exp1716)));
    };
    var visit_exp1713 = function(exp1717) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type1718 = M2.ast_t(exp1717);
      var tmp1719 = type1718;
      if (M1.symbol_p(tmp1719) !== false) {
        var if_res1027 = M1.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 13], [$rjs_core.Symbol.make("identifier"), 7], [$rjs_core.Symbol.make("optional"), 11], [$rjs_core.Symbol.make("not"), 10], [$rjs_core.Symbol.make("caseLiteral"), 4], [$rjs_core.Symbol.make("closure"), 6], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 14], [$rjs_core.Symbol.make("action"), 1], [$rjs_core.Symbol.make("alternation"), 2], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 15], [$rjs_core.Symbol.make("label"), 8], [$rjs_core.Symbol.make("and"), 3], [$rjs_core.Symbol.make("literal"), 9]], false), tmp1719, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return 0;
        });
      } else {
        var if_res1027 = 0;
      }
      var index1720 = if_res1027;
      if (M5.unsafe_fx_lt_(index1720, 7) !== false) {
        if (M5.unsafe_fx_lt_(index1720, 3) !== false) {
          if (M5.unsafe_fx_lt_(index1720, 1) !== false) {
            var if_res1029 = M1.error($rjs_core.Symbol.make("expand-grammar"), $rjs_core.UString.make("unknown expression type: ~s"), type1718);
          } else {
            if (M5.unsafe_fx_lt_(index1720, 2) !== false) {
              var if_res1028 = M1.rvoid();
            } else {
              var if_res1028 = visit_alternation1710(exp1717);
            }
            var if_res1029 = if_res1028;
          }
          var if_res1033 = if_res1029;
        } else {
          if (M5.unsafe_fx_lt_(index1720, 4) !== false) {
            var if_res1032 = visit_only_child1712(exp1717);
          } else {
            if (M5.unsafe_fx_lt_(index1720, 5) !== false) {
              var if_res1031 = visit_case_literal(exp1717);
            } else {
              if (M5.unsafe_fx_lt_(index1720, 6) !== false) {
                var if_res1030 = visit_char_class(exp1717);
              } else {
                var if_res1030 = visit_only_child1712(exp1717);
              }
              var if_res1031 = if_res1030;
            }
            var if_res1032 = if_res1031;
          }
          var if_res1033 = if_res1032;
        }
        var if_res1042 = if_res1033;
      } else {
        if (M5.unsafe_fx_lt_(index1720, 11) !== false) {
          if (M5.unsafe_fx_lt_(index1720, 8) !== false) {
            var if_res1036 = M1.rvoid();
          } else {
            if (M5.unsafe_fx_lt_(index1720, 9) !== false) {
              var if_res1035 = M1.rvoid();
            } else {
              if (M5.unsafe_fx_lt_(index1720, 10) !== false) {
                var if_res1034 = visit_literal(exp1717);
              } else {
                var if_res1034 = visit_only_child1712(exp1717);
              }
              var if_res1035 = if_res1034;
            }
            var if_res1036 = if_res1035;
          }
          var if_res1041 = if_res1036;
        } else {
          if (M5.unsafe_fx_lt_(index1720, 13) !== false) {
            if (M5.unsafe_fx_lt_(index1720, 12) !== false) {
              var if_res1037 = visit_only_child1712(exp1717);
            } else {
              var if_res1037 = visit_only_child1712(exp1717);
            }
            var if_res1040 = if_res1037;
          } else {
            if (M5.unsafe_fx_lt_(index1720, 14) !== false) {
              var if_res1039 = visit_sequence1711(exp1717);
            } else {
              if (M5.unsafe_fx_lt_(index1720, 15) !== false) {
                var if_res1038 = visit_only_child1712(exp1717);
              } else {
                var if_res1038 = M1.rvoid();
              }
              var if_res1039 = if_res1038;
            }
            var if_res1040 = if_res1039;
          }
          var if_res1041 = if_res1040;
        }
        var if_res1042 = if_res1041;
      }
      return if_res1042;
    };
    var expand_def1721 = function(def1722) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation1710(M1.caddr(M2.ast_c(def1722)));
    };
    return M3.for_each(expand_def1721, M0.get_defs(grammar1704));
  };
  var expand_unit = function(exp1723) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var make_prefix1724 = function(v1725, e1726) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r1727 = M1.car(M2.ast_c(v1725));
      if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(42)) !== false) {
        var if_res1048 = $rjs_core.Symbol.make("closure");
      } else {
        if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(43)) !== false) {
          var if_res1047 = $rjs_core.Symbol.make("plus");
        } else {
          if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(63)) !== false) {
            var if_res1046 = $rjs_core.Symbol.make("optional");
          } else {
            if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(58)) !== false) {
              var if_res1045 = $rjs_core.Symbol.make("void");
            } else {
              if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(38)) !== false) {
                var if_res1044 = $rjs_core.Symbol.make("and");
              } else {
                if (M1.equal_p(r1727, $rjs_core.Char.charFromCodepoint(33)) !== false) {
                  var if_res1043 = $rjs_core.Symbol.make("not");
                } else {
                  var if_res1043 = M1.error($rjs_core.Symbol.make("make-prefix"), $rjs_core.UString.make("unknown expression type: ~s"), r1727);
                }
                var if_res1044 = if_res1043;
              }
              var if_res1045 = if_res1044;
            }
            var if_res1046 = if_res1045;
          }
          var if_res1047 = if_res1046;
        }
        var if_res1048 = if_res1047;
      }
      return M2.__rjs_quoted__.ast1(if_res1048, M1.list(e1726), M1.cons(0, 0));
    };
    var make_label1728 = function(v1729, e1730) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r1731 = M1.car(M2.ast_c(v1729));
      return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("label"), M1.list(e1730), M1.cons(0, 0));
    };
    var expand_unit_iter1732 = function(el1733) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var rest1734 = M1.cdr(el1733);
      if (M1.null_p(rest1734) !== false) {
        var if_res1051 = M1.car(el1733);
      } else {
        var type1735 = M2.ast_t(M1.car(el1733));
        var tmp1736 = type1735;
        if (M1.equal_p(tmp1736, $rjs_core.Symbol.make("prefix")) !== false) {
          var if_res1050 = make_prefix1724;
        } else {
          if (M1.equal_p(tmp1736, $rjs_core.Symbol.make("label")) !== false) {
            var if_res1049 = make_label1728;
          } else {
            var if_res1049 = M1.error($rjs_core.Symbol.make("expand-unit-iter"), $rjs_core.UString.make("unknown expression type: ~s"), type1735);
          }
          var if_res1050 = if_res1049;
        }
        var if_res1051 = if_res1050(M1.car(el1733), expand_unit_iter1732(rest1734));
      }
      return if_res1051;
    };
    return expand_unit_iter1732(M2.ast_c(exp1723));
  };
  var visit_case_literal = function(exp1737) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_chil1738 = function(c1739) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_alphabetic_p(c1739) !== false) {
        var if_res1052 = M1.list(M1.char_upcase(c1739), M1.char_downcase(c1739));
      } else {
        var if_res1052 = M1.list(c1739);
      }
      return if_res1052;
    };
    convert_chars_bang_(exp1737);
    var letters1740 = M2.ast_c(exp1737);
    if (M4.memf(M1.char_alphabetic_p, letters1740) !== false) {
      if (M1.null_p(M1.cdr(letters1740)) !== false) {
        var c1741 = M1.car(letters1740);
        M2.set_ast_t_bang_(exp1737, $rjs_core.Symbol.make("charClass"));
        var if_res1053 = M2.set_ast_c_bang_(exp1737, cc_chil1738(c1741));
      } else {
        M2.set_ast_t_bang_(exp1737, $rjs_core.Symbol.make("sequence"));
        var if_res1053 = M2.set_ast_c_bang_(exp1737, M3.map(function(a1742) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("charClass"), cc_chil1738(a1742), M1.cons(0, 0));
        }, letters1740));
      }
      var if_res1054 = if_res1053;
    } else {
      var if_res1054 = M2.set_ast_t_bang_(exp1737, $rjs_core.Symbol.make("literal"));
    }
    return if_res1054;
  };
  var convert_char = function(c1743) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_char1744 = function(c1745) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil1746 = M2.ast_c(c1745);
      if (M1.__eq_(M1.length(chil1746), 1) !== false) {
        var if_res1058 = M1.car(chil1746);
      } else {
        var s1747 = M1.cadr(chil1746);
        if (M1.equal_p(s1747, $rjs_core.Char.charFromCodepoint(110)) !== false) {
          var if_res1057 = $rjs_core.Char.charFromCodepoint(10);
        } else {
          if (M1.equal_p(s1747, $rjs_core.Char.charFromCodepoint(116)) !== false) {
            var if_res1056 = $rjs_core.Char.charFromCodepoint(9);
          } else {
            if (M1.equal_p(s1747, $rjs_core.Char.charFromCodepoint(114)) !== false) {
              var if_res1055 = $rjs_core.Char.charFromCodepoint(13);
            } else {
              var if_res1055 = s1747;
            }
            var if_res1056 = if_res1055;
          }
          var if_res1057 = if_res1056;
        }
        var if_res1058 = if_res1057;
      }
      return if_res1058;
    };
    var cc_hex1748 = function(c1749) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.integer__gt_char(M1.string__gt_number(M1.list__gt_string(M2.ast_c(c1749)), 16));
    };
    if (M1.equal_p(M2.ast_t(c1743), $rjs_core.Symbol.make("hex")) !== false) {
      var if_res1059 = cc_hex1748(c1743);
    } else {
      var if_res1059 = cc_char1744(c1743);
    }
    return if_res1059;
  };
  var convert_chars_bang_ = function(exp1750) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.set_ast_c_bang_(exp1750, M3.map(convert_char, M2.ast_c(exp1750)));
  };
  var visit_literal = function(exp1751) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return convert_chars_bang_(exp1751);
  };
  var visit_char_class = function(exp1752) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_part1753 = function(part1754) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var range1755 = M2.ast_c(part1754);
      if (M1.__eq_(M1.length(range1755), 1) !== false) {
        var if_res1062 = convert_char(M1.car(range1755));
      } else {
        var r11756 = convert_char(M1.car(range1755));
        var r21757 = convert_char(M1.cadr(range1755));
        if (M1.char_eq__p(r11756, r21757) !== false) {
          var if_res1061 = r11756;
        } else {
          if (M1.char_lt__p(r11756, r21757) !== false) {
            var if_res1060 = M1.cons(r11756, r21757);
          } else {
            var if_res1060 = M1.cons(r21757, r11756);
          }
          var if_res1061 = if_res1060;
        }
        var if_res1062 = if_res1061;
      }
      return if_res1062;
    };
    var cc_less_than_p1758 = function(a1759, b1760) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_p(a1759) !== false) {
        var if_res1064 = a1759;
      } else {
        var if_res1064 = M1.car(a1759);
      }
      if (M1.char_p(b1760) !== false) {
        var if_res1063 = b1760;
      } else {
        var if_res1063 = M1.car(b1760);
      }
      return M1.char_lt__p(if_res1064, if_res1063);
    };
    var minimise1761 = function(cc1762) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var next_to_p1763 = function(a1764, b1765) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.__eq_(M1.char__gt_integer(b1765) - M1.char__gt_integer(a1764), 1);
      };
      if (M1.null_p(cc1762) !== false) {
        var if_res1077 = $rjs_core.Pair.makeList();
      } else {
        var a1766 = M1.car(cc1762);
        var rest1767 = M1.cdr(cc1762);
        if (M1.null_p(rest1767) !== false) {
          var if_res1076 = cc1762;
        } else {
          var b1768 = M1.car(rest1767);
          if (M1.char_p(a1766) !== false) {
            if (M1.char_p(b1768) !== false) {
              if (M1.char_eq__p(a1766, b1768) !== false) {
                var if_res1066 = minimise1761(M1.cons(a1766, M1.cdr(rest1767)));
              } else {
                if (next_to_p1763(a1766, b1768) !== false) {
                  var if_res1065 = minimise1761(M1.cons(M1.cons(a1766, b1768), M1.cdr(rest1767)));
                } else {
                  var if_res1065 = M1.cons(a1766, minimise1761(rest1767));
                }
                var if_res1066 = if_res1065;
              }
              var if_res1068 = if_res1066;
            } else {
              if (next_to_p1763(a1766, M1.car(b1768)) !== false) {
                var if_res1067 = minimise1761(M1.cons(M1.cons(a1766, M1.cdr(b1768)), M1.cdr(rest1767)));
              } else {
                var if_res1067 = M1.cons(a1766, minimise1761(rest1767));
              }
              var if_res1068 = if_res1067;
            }
            var if_res1075 = if_res1068;
          } else {
            if (M1.char_p(b1768) !== false) {
              var or_part1769 = M1.char_eq__p(b1768, M1.car(a1766));
              if (or_part1769 !== false) {
                var if_res1069 = or_part1769;
              } else {
                var if_res1069 = M1.char_lt__eq__p(b1768, M1.cdr(a1766));
              }
              if (if_res1069 !== false) {
                var if_res1071 = minimise1761(M1.cons(a1766, M1.cdr(rest1767)));
              } else {
                if (next_to_p1763(M1.cdr(a1766), b1768) !== false) {
                  var if_res1070 = minimise1761(M1.cons(M1.cons(M1.car(a1766), b1768), M1.cdr(rest1767)));
                } else {
                  var if_res1070 = M1.cons(a1766, minimise1761(rest1767));
                }
                var if_res1071 = if_res1070;
              }
              var if_res1074 = if_res1071;
            } else {
              var or_part1770 = M1.char_lt__eq__p(M1.car(b1768), M1.cdr(a1766));
              if (or_part1770 !== false) {
                var if_res1072 = or_part1770;
              } else {
                var if_res1072 = next_to_p1763(M1.cdr(a1766), M1.car(b1768));
              }
              if (if_res1072 !== false) {
                var if_res1073 = minimise1761(M1.cons(M1.cons(M1.integer__gt_char(M1.min(M1.char__gt_integer(M1.car(a1766)), M1.char__gt_integer(M1.car(b1768)))), M1.integer__gt_char(M1.max(M1.char__gt_integer(M1.cdr(a1766)), M1.char__gt_integer(M1.cdr(b1768))))), M1.cdr(rest1767)));
              } else {
                var if_res1073 = M1.cons(a1766, minimise1761(rest1767));
              }
              var if_res1074 = if_res1073;
            }
            var if_res1075 = if_res1074;
          }
          var if_res1076 = if_res1075;
        }
        var if_res1077 = if_res1076;
      }
      return if_res1077;
    };
    var temp11771 = M3.map(cc_part1753, M2.ast_c(exp1752));
    var cc_less_than_p21772 = cc_less_than_p1758;
    if (M1.variable_reference_constant_p(M4.__rjs_quoted__.sort9) !== false) {
      var if_res1078 = M4.__rjs_quoted__.sort7(false, false, false, false, temp11771, cc_less_than_p21772);
    } else {
      var if_res1078 = M4.__rjs_quoted__.sort9(temp11771, cc_less_than_p21772);
    }
    return M2.set_ast_c_bang_(exp1752, minimise1761(if_res1078));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get expand_grammar() {
      return expand_grammar;
    },
    get expand_unit() {
      return expand_unit;
    },
    get visit_case_literal() {
      return visit_case_literal;
    },
    get convert_char() {
      return convert_char;
    },
    get convert_chars_bang_() {
      return convert_chars_bang_;
    },
    get visit_literal() {
      return visit_literal;
    },
    get visit_char_class() {
      return visit_char_class;
    }
  };
})();
var $__modules_47_transform_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/transform.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__modules_47_action_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M4 = $__modules_47_expand_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var transform_grammar = function(g641) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var nt_names642 = M1.make_hash();
    if (check_not_empty(g641) !== false) {
      if (M2.collect_actions(g641) !== false) {
        if (collect_nt_names(g641, nt_names642) !== false) {
          if (check_refs(g641, nt_names642) !== false) {
            var if_res355 = M4.expand_grammar(g641);
          } else {
            var if_res355 = false;
          }
          var if_res356 = if_res355;
        } else {
          var if_res356 = false;
        }
        var if_res357 = if_res356;
      } else {
        var if_res357 = false;
      }
      var if_res358 = if_res357;
    } else {
      var if_res358 = false;
    }
    return if_res358;
  };
  var check_not_empty = function(g643) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(M3.ast_c(g643)) !== false) {
      var if_res359 = M1.error($rjs_core.Symbol.make("check-not-empty"), $rjs_core.UString.make("grammar is empty"));
    } else {
      var if_res359 = M1.rvoid();
    }
    return if_res359;
  };
  var collect_nt_names = function(g644, nt_names645) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ok646 = true;
    M5.for_each(function(a647) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name648 = M0.get_non_term(a647);
      var found649 = M1.hash_ref(nt_names645, name648, false);
      if (found649 !== false) {
        ok646 = false;
        var if_res360 = M1.error($rjs_core.Symbol.make("check-duplicate"), $rjs_core.UString.make("duplicate definition of non-terminal: ~a"), name648);
      } else {
        var if_res360 = M1.hash_set_bang_(nt_names645, name648, name648);
      }
      return if_res360;
    }, M3.ast_c(g644));
    return ok646;
  };
  var check_refs = function(grammar650, nt_names651) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var visit_nt652 = function(exp653) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name654 = M1.list__gt_string(M3.ast_c(exp653));
      if (M1.hash_ref(nt_names651, name654, false) !== false) {
        var if_res361 = M1.rvoid();
      } else {
        var if_res361 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.make("undefined reference to non-terminal: ~a"), name654);
      }
      return if_res361;
    };
    var visit_alternation655 = function(exp659) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_sequence656, M3.ast_c(exp659));
    };
    var visit_sequence656 = function(exp660) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_unit657, M3.ast_c(exp660));
    };
    var visit_unit657 = function(exp661) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el662 = M3.ast_c(exp661);
      var el_len663 = M1.length(el662);
      return visit_exp658(M1.list_ref(el662, el_len663 - 1));
    };
    var visit_exp658 = function(exp664) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type665 = M3.ast_t(exp664);
      var tmp666 = type665;
      if (M1.equal_p(tmp666, $rjs_core.Symbol.make("alternation")) !== false) {
        var if_res365 = visit_alternation655(exp664);
      } else {
        if (M1.equal_p(tmp666, $rjs_core.Symbol.make("identifier")) !== false) {
          var if_res364 = visit_nt652(exp664);
        } else {
          if (M1.equal_p(tmp666, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res363 = visit_sequence656(exp664);
          } else {
            if (M1.equal_p(tmp666, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res362 = visit_unit657(exp664);
            } else {
              var if_res362 = M1.rvoid();
            }
            var if_res363 = if_res362;
          }
          var if_res364 = if_res363;
        }
        var if_res365 = if_res364;
      }
      return if_res365;
    };
    var check_nt_refs667 = function(def668) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation655(M1.caddr(M3.ast_c(def668)));
    };
    return M5.for_each(check_nt_refs667, M0.get_defs(grammar650));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get transform_grammar() {
      return transform_grammar;
    },
    get check_not_empty() {
      return check_not_empty;
    },
    get collect_nt_names() {
      return collect_nt_names;
    },
    get check_refs() {
      return check_refs;
    }
  };
})();
var $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw-file.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var exists_syms = $rjs_core.Pair.makeList($rjs_core.Symbol.make("error"), $rjs_core.Symbol.make("append"), $rjs_core.Symbol.make("update"), $rjs_core.Symbol.make("can-update"), $rjs_core.Symbol.make("replace"), $rjs_core.Symbol.make("truncate"), $rjs_core.Symbol.make("must-truncate"), $rjs_core.Symbol.make("truncate/replace"));
  var exists_desc = $rjs_core.UString.make("(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)");
  var binary_or_text_desc = $rjs_core.UString.make("(or/c 'binary 'text)");
  var open_input_file6 = function(for_module_p23149, for_module_p43150, mode13151, mode33152, path53153) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3154 = path53153;
    if (mode33152 !== false) {
      var if_res2095 = mode13151;
    } else {
      var if_res2095 = $rjs_core.Symbol.make("binary");
    }
    var mode3155 = if_res2095;
    if (for_module_p43150 !== false) {
      var if_res2096 = for_module_p23149;
    } else {
      var if_res2096 = false;
    }
    var for_module_p3156 = if_res2096;
    if (M3.path_string_p(path3154) !== false) {
      var if_res2097 = M1.rvoid();
    } else {
      var if_res2097 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), $rjs_core.UString.make("path-string?"), path3154);
    }
    if_res2097;
    if (M0.memq(mode3155, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2098 = M1.rvoid();
    } else {
      var if_res2098 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), binary_or_text_desc, mode3155);
    }
    if_res2098;
    if (for_module_p3156 !== false) {
      var if_res2099 = $rjs_core.Symbol.make("module");
    } else {
      var if_res2099 = $rjs_core.Symbol.make("none");
    }
    return M1.open_input_file(path3154, mode3155, if_res2099);
  };
  var unpack7 = function(given_kws3157, given_args3158, path53159) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3157) !== false) {
      var if_res2100 = M1.eq_p($rjs_core.Keyword.make("for-module?"), M1.car(given_kws3157));
    } else {
      var if_res2100 = false;
    }
    var for_module_p43160 = if_res2100;
    if (for_module_p43160 !== false) {
      var if_res2101 = M1.car(given_args3158);
    } else {
      var if_res2101 = M1.rvoid();
    }
    var for_module_p23161 = if_res2101;
    if (for_module_p43160 !== false) {
      var if_res2102 = M1.cdr(given_kws3157);
    } else {
      var if_res2102 = given_kws3157;
    }
    var given_kws3162 = if_res2102;
    if (for_module_p43160 !== false) {
      var if_res2103 = M1.cdr(given_args3158);
    } else {
      var if_res2103 = given_args3158;
    }
    var given_args3163 = if_res2103;
    var mode33164 = M1.pair_p(given_kws3162);
    if (mode33164 !== false) {
      var if_res2104 = M1.car(given_args3163);
    } else {
      var if_res2104 = M1.rvoid();
    }
    var mode13165 = if_res2104;
    return open_input_file6(for_module_p23161, for_module_p43160, mode13165, mode33164, path53159);
  };
  var cl2108 = function(given_kws3172, given_args3173, path3174) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(given_kws3172, given_args3173, path3174);
  };
  var temp2110 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2109 = {'3': cl2108}[arguments.length];
    if (fixed_lam2109 !== undefined) {
      return fixed_lam2109.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2107 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("for-module?"), $rjs_core.Keyword.make("mode"));
  var cl2105 = function(path3176) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(M1.rnull, M1.rnull, path3176);
  };
  var open_input_file3175 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2106 = {'1': cl2105}[arguments.length];
    if (fixed_lam2106 !== undefined) {
      return fixed_lam2106.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_file8 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3166, given_argc3167) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3167, 3) !== false) {
      var l13168 = given_kws3166;
      if (M1.null_p(l13168) !== false) {
        var if_res2112 = l13168;
      } else {
        if (M1.eq_p(M1.car(l13168), $rjs_core.Keyword.make("for-module?")) !== false) {
          var if_res2111 = M1.cdr(l13168);
        } else {
          var if_res2111 = l13168;
        }
        var if_res2112 = if_res2111;
      }
      var l13169 = if_res2112;
      var l13170 = l13169;
      if (M1.null_p(l13170) !== false) {
        var if_res2114 = l13170;
      } else {
        if (M1.eq_p(M1.car(l13170), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2113 = M1.cdr(l13170);
        } else {
          var if_res2113 = l13170;
        }
        var if_res2114 = if_res2113;
      }
      var l13171 = if_res2114;
      var if_res2115 = M1.null_p(l13171);
    } else {
      var if_res2115 = false;
    }
    return if_res2115;
  }, temp2110, M1.rnull, temp2107, open_input_file3175);
  var open_output_file14 = function(exists103177, exists123178, mode93179, mode113180, path133181) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3182 = path133181;
    if (mode113180 !== false) {
      var if_res2116 = mode93179;
    } else {
      var if_res2116 = $rjs_core.Symbol.make("binary");
    }
    var mode3183 = if_res2116;
    if (exists123178 !== false) {
      var if_res2117 = exists103177;
    } else {
      var if_res2117 = $rjs_core.Symbol.make("error");
    }
    var exists3184 = if_res2117;
    if (M3.path_string_p(path3182) !== false) {
      var if_res2118 = M1.rvoid();
    } else {
      var if_res2118 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), $rjs_core.UString.make("path-string?"), path3182);
    }
    if_res2118;
    if (M0.memq(mode3183, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2119 = M1.rvoid();
    } else {
      var if_res2119 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), binary_or_text_desc, mode3183);
    }
    if_res2119;
    if (M0.memq(exists3184, exists_syms) !== false) {
      var if_res2120 = M1.rvoid();
    } else {
      var if_res2120 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), exists_desc, exists3184);
    }
    if_res2120;
    return M1.open_output_file(path3182, mode3183, exists3184);
  };
  var unpack15 = function(given_kws3185, given_args3186, path133187) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3185) !== false) {
      var if_res2121 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3185));
    } else {
      var if_res2121 = false;
    }
    var exists123188 = if_res2121;
    if (exists123188 !== false) {
      var if_res2122 = M1.car(given_args3186);
    } else {
      var if_res2122 = M1.rvoid();
    }
    var exists103189 = if_res2122;
    if (exists123188 !== false) {
      var if_res2123 = M1.cdr(given_kws3185);
    } else {
      var if_res2123 = given_kws3185;
    }
    var given_kws3190 = if_res2123;
    if (exists123188 !== false) {
      var if_res2124 = M1.cdr(given_args3186);
    } else {
      var if_res2124 = given_args3186;
    }
    var given_args3191 = if_res2124;
    var mode113192 = M1.pair_p(given_kws3190);
    if (mode113192 !== false) {
      var if_res2125 = M1.car(given_args3191);
    } else {
      var if_res2125 = M1.rvoid();
    }
    var mode93193 = if_res2125;
    return open_output_file14(exists103189, exists123188, mode93193, mode113192, path133187);
  };
  var cl2129 = function(given_kws3200, given_args3201, path3202) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(given_kws3200, given_args3201, path3202);
  };
  var temp2131 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2130 = {'3': cl2129}[arguments.length];
    if (fixed_lam2130 !== undefined) {
      return fixed_lam2130.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2128 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2126 = function(path3204) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(M1.rnull, M1.rnull, path3204);
  };
  var open_output_file3203 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2127 = {'1': cl2126}[arguments.length];
    if (fixed_lam2127 !== undefined) {
      return fixed_lam2127.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1]);
  var open_output_file16 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3194, given_argc3195) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3195, 3) !== false) {
      var l13196 = given_kws3194;
      if (M1.null_p(l13196) !== false) {
        var if_res2133 = l13196;
      } else {
        if (M1.eq_p(M1.car(l13196), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2132 = M1.cdr(l13196);
        } else {
          var if_res2132 = l13196;
        }
        var if_res2133 = if_res2132;
      }
      var l13197 = if_res2133;
      var l13198 = l13197;
      if (M1.null_p(l13198) !== false) {
        var if_res2135 = l13198;
      } else {
        if (M1.eq_p(M1.car(l13198), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2134 = M1.cdr(l13198);
        } else {
          var if_res2134 = l13198;
        }
        var if_res2135 = if_res2134;
      }
      var l13199 = if_res2135;
      var if_res2136 = M1.null_p(l13199);
    } else {
      var if_res2136 = false;
    }
    return if_res2136;
  }, temp2131, M1.rnull, temp2128, open_output_file3203);
  var open_input_output_file22 = function(exists183205, exists203206, mode173207, mode193208, path213209) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3210 = path213209;
    if (mode193208 !== false) {
      var if_res2137 = mode173207;
    } else {
      var if_res2137 = $rjs_core.Symbol.make("binary");
    }
    var mode3211 = if_res2137;
    if (exists203206 !== false) {
      var if_res2138 = exists183205;
    } else {
      var if_res2138 = $rjs_core.Symbol.make("error");
    }
    var exists3212 = if_res2138;
    if (M3.path_string_p(path3210) !== false) {
      var if_res2139 = M1.rvoid();
    } else {
      var if_res2139 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), $rjs_core.UString.make("path-string?"), path3210);
    }
    if_res2139;
    if (M0.memq(mode3211, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2140 = M1.rvoid();
    } else {
      var if_res2140 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), binary_or_text_desc, mode3211);
    }
    if_res2140;
    if (M0.memq(exists3212, exists_syms) !== false) {
      var if_res2141 = M1.rvoid();
    } else {
      var if_res2141 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), exists_desc, exists3212);
    }
    if_res2141;
    return M1.open_input_output_file(path3210, mode3211, exists3212);
  };
  var unpack23 = function(given_kws3213, given_args3214, path213215) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3213) !== false) {
      var if_res2142 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3213));
    } else {
      var if_res2142 = false;
    }
    var exists203216 = if_res2142;
    if (exists203216 !== false) {
      var if_res2143 = M1.car(given_args3214);
    } else {
      var if_res2143 = M1.rvoid();
    }
    var exists183217 = if_res2143;
    if (exists203216 !== false) {
      var if_res2144 = M1.cdr(given_kws3213);
    } else {
      var if_res2144 = given_kws3213;
    }
    var given_kws3218 = if_res2144;
    if (exists203216 !== false) {
      var if_res2145 = M1.cdr(given_args3214);
    } else {
      var if_res2145 = given_args3214;
    }
    var given_args3219 = if_res2145;
    var mode193220 = M1.pair_p(given_kws3218);
    if (mode193220 !== false) {
      var if_res2146 = M1.car(given_args3219);
    } else {
      var if_res2146 = M1.rvoid();
    }
    var mode173221 = if_res2146;
    return open_input_output_file22(exists183217, exists203216, mode173221, mode193220, path213215);
  };
  var cl2150 = function(given_kws3228, given_args3229, path3230) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(given_kws3228, given_args3229, path3230);
  };
  var temp2152 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2151 = {'3': cl2150}[arguments.length];
    if (fixed_lam2151 !== undefined) {
      return fixed_lam2151.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2149 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2147 = function(path3232) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(M1.rnull, M1.rnull, path3232);
  };
  var open_input_output_file3231 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2148 = {'1': cl2147}[arguments.length];
    if (fixed_lam2148 !== undefined) {
      return fixed_lam2148.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_output_file24 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3222, given_argc3223) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3223, 3) !== false) {
      var l13224 = given_kws3222;
      if (M1.null_p(l13224) !== false) {
        var if_res2154 = l13224;
      } else {
        if (M1.eq_p(M1.car(l13224), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2153 = M1.cdr(l13224);
        } else {
          var if_res2153 = l13224;
        }
        var if_res2154 = if_res2153;
      }
      var l13225 = if_res2154;
      var l13226 = l13225;
      if (M1.null_p(l13226) !== false) {
        var if_res2156 = l13226;
      } else {
        if (M1.eq_p(M1.car(l13226), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2155 = M1.cdr(l13226);
        } else {
          var if_res2155 = l13226;
        }
        var if_res2156 = if_res2155;
      }
      var l13227 = if_res2156;
      var if_res2157 = M1.null_p(l13227);
    } else {
      var if_res2157 = false;
    }
    return if_res2157;
  }, temp2152, M1.rnull, temp2149, open_input_output_file3231);
  var call_with_input_file29 = function(mode253233, mode263234, path273235, proc283236) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3237 = path273235;
    var proc3238 = proc283236;
    if (mode263234 !== false) {
      var if_res2158 = mode253233;
    } else {
      var if_res2158 = $rjs_core.Symbol.make("binary");
    }
    var mode3239 = if_res2158;
    if (M3.path_string_p(path3237) !== false) {
      var if_res2159 = M1.rvoid();
    } else {
      var if_res2159 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.make("path-string?"), path3237);
    }
    if_res2159;
    if (M1.procedure_p(proc3238) !== false) {
      var if_res2160 = M1.procedure_arity_includes_p(proc3238, 1);
    } else {
      var if_res2160 = false;
    }
    if (if_res2160 !== false) {
      var if_res2161 = M1.rvoid();
    } else {
      var if_res2161 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.make("(input-port? . -> . any)"), proc3238);
    }
    if_res2161;
    if (M0.memq(mode3239, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2162 = M1.rvoid();
    } else {
      var if_res2162 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), binary_or_text_desc, mode3239);
    }
    if_res2162;
    return M1.call_with_input_file(path3237, proc3238, mode3239);
  };
  var unpack30 = function(given_kws3240, given_args3241, path273242, proc283243) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode263244 = M1.pair_p(given_kws3240);
    if (mode263244 !== false) {
      var if_res2163 = M1.car(given_args3241);
    } else {
      var if_res2163 = M1.rvoid();
    }
    var mode253245 = if_res2163;
    return call_with_input_file29(mode253245, mode263244, path273242, proc283243);
  };
  var cl2167 = function(given_kws3250, given_args3251, path3252, proc3253) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(given_kws3250, given_args3251, path3252, proc3253);
  };
  var temp2169 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2168 = {'4': cl2167}[arguments.length];
    if (fixed_lam2168 !== undefined) {
      return fixed_lam2168.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2166 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2164 = function(path3255, proc3256) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(M1.rnull, M1.rnull, path3255, proc3256);
  };
  var call_with_input_file3254 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2165 = {'2': cl2164}[arguments.length];
    if (fixed_lam2165 !== undefined) {
      return fixed_lam2165.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file31 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3246, given_argc3247) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3247, 4) !== false) {
      var l13248 = given_kws3246;
      if (M1.null_p(l13248) !== false) {
        var if_res2171 = l13248;
      } else {
        if (M1.eq_p(M1.car(l13248), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2170 = M1.cdr(l13248);
        } else {
          var if_res2170 = l13248;
        }
        var if_res2171 = if_res2170;
      }
      var l13249 = if_res2171;
      var if_res2172 = M1.null_p(l13249);
    } else {
      var if_res2172 = false;
    }
    return if_res2172;
  }, temp2169, M1.rnull, temp2166, call_with_input_file3254);
  var call_with_output_file38 = function(exists333257, exists353258, mode323259, mode343260, path363261, proc373262) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3263 = path363261;
    var proc3264 = proc373262;
    if (mode343260 !== false) {
      var if_res2173 = mode323259;
    } else {
      var if_res2173 = $rjs_core.Symbol.make("binary");
    }
    var mode3265 = if_res2173;
    if (exists353258 !== false) {
      var if_res2174 = exists333257;
    } else {
      var if_res2174 = $rjs_core.Symbol.make("error");
    }
    var exists3266 = if_res2174;
    if (M3.path_string_p(path3263) !== false) {
      var if_res2175 = M1.rvoid();
    } else {
      var if_res2175 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.make("path-string?"), path3263);
    }
    if_res2175;
    if (M1.procedure_p(proc3264) !== false) {
      var if_res2176 = M1.procedure_arity_includes_p(proc3264, 1);
    } else {
      var if_res2176 = false;
    }
    if (if_res2176 !== false) {
      var if_res2177 = M1.rvoid();
    } else {
      var if_res2177 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.make("(output-port? . -> . any)"), proc3264);
    }
    if_res2177;
    if (M0.memq(mode3265, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2178 = M1.rvoid();
    } else {
      var if_res2178 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), binary_or_text_desc, mode3265);
    }
    if_res2178;
    if (M0.memq(exists3266, exists_syms) !== false) {
      var if_res2179 = M1.rvoid();
    } else {
      var if_res2179 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), exists_desc, exists3266);
    }
    if_res2179;
    return M1.call_with_output_file(path3263, proc3264, mode3265, exists3266);
  };
  var unpack39 = function(given_kws3267, given_args3268, path363269, proc373270) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3267) !== false) {
      var if_res2180 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3267));
    } else {
      var if_res2180 = false;
    }
    var exists353271 = if_res2180;
    if (exists353271 !== false) {
      var if_res2181 = M1.car(given_args3268);
    } else {
      var if_res2181 = M1.rvoid();
    }
    var exists333272 = if_res2181;
    if (exists353271 !== false) {
      var if_res2182 = M1.cdr(given_kws3267);
    } else {
      var if_res2182 = given_kws3267;
    }
    var given_kws3273 = if_res2182;
    if (exists353271 !== false) {
      var if_res2183 = M1.cdr(given_args3268);
    } else {
      var if_res2183 = given_args3268;
    }
    var given_args3274 = if_res2183;
    var mode343275 = M1.pair_p(given_kws3273);
    if (mode343275 !== false) {
      var if_res2184 = M1.car(given_args3274);
    } else {
      var if_res2184 = M1.rvoid();
    }
    var mode323276 = if_res2184;
    return call_with_output_file38(exists333272, exists353271, mode323276, mode343275, path363269, proc373270);
  };
  var cl2188 = function(given_kws3283, given_args3284, path3285, proc3286) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(given_kws3283, given_args3284, path3285, proc3286);
  };
  var temp2190 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2189 = {'4': cl2188}[arguments.length];
    if (fixed_lam2189 !== undefined) {
      return fixed_lam2189.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2187 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2185 = function(path3288, proc3289) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(M1.rnull, M1.rnull, path3288, proc3289);
  };
  var call_with_output_file3287 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2186 = {'2': cl2185}[arguments.length];
    if (fixed_lam2186 !== undefined) {
      return fixed_lam2186.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file40 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3277, given_argc3278) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3278, 4) !== false) {
      var l13279 = given_kws3277;
      if (M1.null_p(l13279) !== false) {
        var if_res2192 = l13279;
      } else {
        if (M1.eq_p(M1.car(l13279), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2191 = M1.cdr(l13279);
        } else {
          var if_res2191 = l13279;
        }
        var if_res2192 = if_res2191;
      }
      var l13280 = if_res2192;
      var l13281 = l13280;
      if (M1.null_p(l13281) !== false) {
        var if_res2194 = l13281;
      } else {
        if (M1.eq_p(M1.car(l13281), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2193 = M1.cdr(l13281);
        } else {
          var if_res2193 = l13281;
        }
        var if_res2194 = if_res2193;
      }
      var l13282 = if_res2194;
      var if_res2195 = M1.null_p(l13282);
    } else {
      var if_res2195 = false;
    }
    return if_res2195;
  }, temp2190, M1.rnull, temp2187, call_with_output_file3287);
  var with_input_from_file45 = function(mode413290, mode423291, path433292, proc443293) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3294 = path433292;
    var proc3295 = proc443293;
    if (mode423291 !== false) {
      var if_res2196 = mode413290;
    } else {
      var if_res2196 = $rjs_core.Symbol.make("binary");
    }
    var mode3296 = if_res2196;
    if (M3.path_string_p(path3294) !== false) {
      var if_res2197 = M1.rvoid();
    } else {
      var if_res2197 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.make("path-string?"), path3294);
    }
    if_res2197;
    if (M1.procedure_p(proc3295) !== false) {
      var if_res2198 = M1.procedure_arity_includes_p(proc3295, 0);
    } else {
      var if_res2198 = false;
    }
    if (if_res2198 !== false) {
      var if_res2199 = M1.rvoid();
    } else {
      var if_res2199 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.make("(-> any)"), proc3295);
    }
    if_res2199;
    if (M0.memq(mode3296, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2200 = M1.rvoid();
    } else {
      var if_res2200 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), binary_or_text_desc, mode3296);
    }
    if_res2200;
    return M1.with_input_from_file(path3294, proc3295, mode3296);
  };
  var unpack46 = function(given_kws3297, given_args3298, path433299, proc443300) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode423301 = M1.pair_p(given_kws3297);
    if (mode423301 !== false) {
      var if_res2201 = M1.car(given_args3298);
    } else {
      var if_res2201 = M1.rvoid();
    }
    var mode413302 = if_res2201;
    return with_input_from_file45(mode413302, mode423301, path433299, proc443300);
  };
  var cl2205 = function(given_kws3307, given_args3308, path3309, proc3310) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(given_kws3307, given_args3308, path3309, proc3310);
  };
  var temp2207 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2206 = {'4': cl2205}[arguments.length];
    if (fixed_lam2206 !== undefined) {
      return fixed_lam2206.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2204 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2202 = function(path3312, proc3313) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(M1.rnull, M1.rnull, path3312, proc3313);
  };
  var with_input_from_file3311 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2203 = {'2': cl2202}[arguments.length];
    if (fixed_lam2203 !== undefined) {
      return fixed_lam2203.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var with_input_from_file47 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3303, given_argc3304) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3304, 4) !== false) {
      var l13305 = given_kws3303;
      if (M1.null_p(l13305) !== false) {
        var if_res2209 = l13305;
      } else {
        if (M1.eq_p(M1.car(l13305), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2208 = M1.cdr(l13305);
        } else {
          var if_res2208 = l13305;
        }
        var if_res2209 = if_res2208;
      }
      var l13306 = if_res2209;
      var if_res2210 = M1.null_p(l13306);
    } else {
      var if_res2210 = false;
    }
    return if_res2210;
  }, temp2207, M1.rnull, temp2204, with_input_from_file3311);
  var with_output_to_file54 = function(exists493314, exists513315, mode483316, mode503317, path523318, proc533319) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3320 = path523318;
    var proc3321 = proc533319;
    if (mode503317 !== false) {
      var if_res2211 = mode483316;
    } else {
      var if_res2211 = $rjs_core.Symbol.make("binary");
    }
    var mode3322 = if_res2211;
    if (exists513315 !== false) {
      var if_res2212 = exists493314;
    } else {
      var if_res2212 = $rjs_core.Symbol.make("error");
    }
    var exists3323 = if_res2212;
    if (M3.path_string_p(path3320) !== false) {
      var if_res2213 = M1.rvoid();
    } else {
      var if_res2213 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.make("path-string?"), path3320);
    }
    if_res2213;
    if (M1.procedure_p(proc3321) !== false) {
      var if_res2214 = M1.procedure_arity_includes_p(proc3321, 0);
    } else {
      var if_res2214 = false;
    }
    if (if_res2214 !== false) {
      var if_res2215 = M1.rvoid();
    } else {
      var if_res2215 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.make("(-> any)"), proc3321);
    }
    if_res2215;
    if (M0.memq(mode3322, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2216 = M1.rvoid();
    } else {
      var if_res2216 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), binary_or_text_desc, mode3322);
    }
    if_res2216;
    if (M0.memq(exists3323, exists_syms) !== false) {
      var if_res2217 = M1.rvoid();
    } else {
      var if_res2217 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), exists_desc, exists3323);
    }
    if_res2217;
    return M1.with_output_to_file(path3320, proc3321, mode3322, exists3323);
  };
  var unpack55 = function(given_kws3324, given_args3325, path523326, proc533327) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3324) !== false) {
      var if_res2218 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3324));
    } else {
      var if_res2218 = false;
    }
    var exists513328 = if_res2218;
    if (exists513328 !== false) {
      var if_res2219 = M1.car(given_args3325);
    } else {
      var if_res2219 = M1.rvoid();
    }
    var exists493329 = if_res2219;
    if (exists513328 !== false) {
      var if_res2220 = M1.cdr(given_kws3324);
    } else {
      var if_res2220 = given_kws3324;
    }
    var given_kws3330 = if_res2220;
    if (exists513328 !== false) {
      var if_res2221 = M1.cdr(given_args3325);
    } else {
      var if_res2221 = given_args3325;
    }
    var given_args3331 = if_res2221;
    var mode503332 = M1.pair_p(given_kws3330);
    if (mode503332 !== false) {
      var if_res2222 = M1.car(given_args3331);
    } else {
      var if_res2222 = M1.rvoid();
    }
    var mode483333 = if_res2222;
    return with_output_to_file54(exists493329, exists513328, mode483333, mode503332, path523326, proc533327);
  };
  var cl2226 = function(given_kws3340, given_args3341, path3342, proc3343) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(given_kws3340, given_args3341, path3342, proc3343);
  };
  var temp2228 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2227 = {'4': cl2226}[arguments.length];
    if (fixed_lam2227 !== undefined) {
      return fixed_lam2227.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2225 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2223 = function(path3345, proc3346) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(M1.rnull, M1.rnull, path3345, proc3346);
  };
  var with_output_to_file3344 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2224 = {'2': cl2223}[arguments.length];
    if (fixed_lam2224 !== undefined) {
      return fixed_lam2224.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var with_output_to_file56 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3334, given_argc3335) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3335, 4) !== false) {
      var l13336 = given_kws3334;
      if (M1.null_p(l13336) !== false) {
        var if_res2230 = l13336;
      } else {
        if (M1.eq_p(M1.car(l13336), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2229 = M1.cdr(l13336);
        } else {
          var if_res2229 = l13336;
        }
        var if_res2230 = if_res2229;
      }
      var l13337 = if_res2230;
      var l13338 = l13337;
      if (M1.null_p(l13338) !== false) {
        var if_res2232 = l13338;
      } else {
        if (M1.eq_p(M1.car(l13338), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2231 = M1.cdr(l13338);
        } else {
          var if_res2231 = l13338;
        }
        var if_res2232 = if_res2231;
      }
      var l13339 = if_res2232;
      var if_res2233 = M1.null_p(l13339);
    } else {
      var if_res2233 = false;
    }
    return if_res2233;
  }, temp2228, M1.rnull, temp2225, with_output_to_file3344);
  var call_with_input_file_times_61 = function(mode573347, mode583348, path593349, proc603350) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3351 = path593349;
    var proc3352 = proc603350;
    if (mode583348 !== false) {
      var if_res2234 = mode573347;
    } else {
      var if_res2234 = $rjs_core.Symbol.make("binary");
    }
    var mode3353 = if_res2234;
    if (M3.path_string_p(path3351) !== false) {
      var if_res2235 = M1.rvoid();
    } else {
      var if_res2235 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.make("path-string?"), path3351);
    }
    if_res2235;
    if (M1.procedure_p(proc3352) !== false) {
      var if_res2236 = M1.procedure_arity_includes_p(proc3352, 1);
    } else {
      var if_res2236 = false;
    }
    if (if_res2236 !== false) {
      var if_res2237 = M1.rvoid();
    } else {
      var if_res2237 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.make("(input-port? . -> . any)"), proc3352);
    }
    if_res2237;
    if (M0.memq(mode3353, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2238 = M1.rvoid();
    } else {
      var if_res2238 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), binary_or_text_desc, mode3353);
    }
    if_res2238;
    var p3354 = M1.open_input_file(path3351, mode3353);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3352(p3354);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_input_port(p3354);
    });
  };
  var unpack62 = function(given_kws3355, given_args3356, path593357, proc603358) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode583359 = M1.pair_p(given_kws3355);
    if (mode583359 !== false) {
      var if_res2239 = M1.car(given_args3356);
    } else {
      var if_res2239 = M1.rvoid();
    }
    var mode573360 = if_res2239;
    return call_with_input_file_times_61(mode573360, mode583359, path593357, proc603358);
  };
  var cl2243 = function(given_kws3365, given_args3366, path3367, proc3368) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(given_kws3365, given_args3366, path3367, proc3368);
  };
  var temp2245 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2244 = {'4': cl2243}[arguments.length];
    if (fixed_lam2244 !== undefined) {
      return fixed_lam2244.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2242 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2240 = function(path3370, proc3371) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(M1.rnull, M1.rnull, path3370, proc3371);
  };
  var call_with_input_file_times_3369 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2241 = {'2': cl2240}[arguments.length];
    if (fixed_lam2241 !== undefined) {
      return fixed_lam2241.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file_times_63 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3361, given_argc3362) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3362, 4) !== false) {
      var l13363 = given_kws3361;
      if (M1.null_p(l13363) !== false) {
        var if_res2247 = l13363;
      } else {
        if (M1.eq_p(M1.car(l13363), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2246 = M1.cdr(l13363);
        } else {
          var if_res2246 = l13363;
        }
        var if_res2247 = if_res2246;
      }
      var l13364 = if_res2247;
      var if_res2248 = M1.null_p(l13364);
    } else {
      var if_res2248 = false;
    }
    return if_res2248;
  }, temp2245, M1.rnull, temp2242, call_with_input_file_times_3369);
  var call_with_output_file_times_70 = function(exists653372, exists673373, mode643374, mode663375, path683376, proc693377) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3378 = path683376;
    var proc3379 = proc693377;
    if (mode663375 !== false) {
      var if_res2249 = mode643374;
    } else {
      var if_res2249 = $rjs_core.Symbol.make("binary");
    }
    var mode3380 = if_res2249;
    if (exists673373 !== false) {
      var if_res2250 = exists653372;
    } else {
      var if_res2250 = $rjs_core.Symbol.make("error");
    }
    var exists3381 = if_res2250;
    if (M3.path_string_p(path3378) !== false) {
      var if_res2251 = M1.rvoid();
    } else {
      var if_res2251 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.make("path-string?"), path3378);
    }
    if_res2251;
    if (M1.procedure_p(proc3379) !== false) {
      var if_res2252 = M1.procedure_arity_includes_p(proc3379, 1);
    } else {
      var if_res2252 = false;
    }
    if (if_res2252 !== false) {
      var if_res2253 = M1.rvoid();
    } else {
      var if_res2253 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.make("(output-port? . -> . any)"), proc3379);
    }
    if_res2253;
    if (M0.memq(mode3380, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2254 = M1.rvoid();
    } else {
      var if_res2254 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), binary_or_text_desc, mode3380);
    }
    if_res2254;
    if (M0.memq(exists3381, exists_syms) !== false) {
      var if_res2255 = M1.rvoid();
    } else {
      var if_res2255 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), exists_desc, exists3381);
    }
    if_res2255;
    var p3382 = M1.open_output_file(path3378, mode3380, exists3381);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3379(p3382);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_output_port(p3382);
    });
  };
  var unpack71 = function(given_kws3383, given_args3384, path683385, proc693386) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3383) !== false) {
      var if_res2256 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3383));
    } else {
      var if_res2256 = false;
    }
    var exists673387 = if_res2256;
    if (exists673387 !== false) {
      var if_res2257 = M1.car(given_args3384);
    } else {
      var if_res2257 = M1.rvoid();
    }
    var exists653388 = if_res2257;
    if (exists673387 !== false) {
      var if_res2258 = M1.cdr(given_kws3383);
    } else {
      var if_res2258 = given_kws3383;
    }
    var given_kws3389 = if_res2258;
    if (exists673387 !== false) {
      var if_res2259 = M1.cdr(given_args3384);
    } else {
      var if_res2259 = given_args3384;
    }
    var given_args3390 = if_res2259;
    var mode663391 = M1.pair_p(given_kws3389);
    if (mode663391 !== false) {
      var if_res2260 = M1.car(given_args3390);
    } else {
      var if_res2260 = M1.rvoid();
    }
    var mode643392 = if_res2260;
    return call_with_output_file_times_70(exists653388, exists673387, mode643392, mode663391, path683385, proc693386);
  };
  var cl2264 = function(given_kws3399, given_args3400, path3401, proc3402) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(given_kws3399, given_args3400, path3401, proc3402);
  };
  var temp2266 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2265 = {'4': cl2264}[arguments.length];
    if (fixed_lam2265 !== undefined) {
      return fixed_lam2265.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2263 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2261 = function(path3404, proc3405) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(M1.rnull, M1.rnull, path3404, proc3405);
  };
  var call_with_output_file_times_3403 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2262 = {'2': cl2261}[arguments.length];
    if (fixed_lam2262 !== undefined) {
      return fixed_lam2262.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file_times_72 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3393, given_argc3394) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3394, 4) !== false) {
      var l13395 = given_kws3393;
      if (M1.null_p(l13395) !== false) {
        var if_res2268 = l13395;
      } else {
        if (M1.eq_p(M1.car(l13395), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2267 = M1.cdr(l13395);
        } else {
          var if_res2267 = l13395;
        }
        var if_res2268 = if_res2267;
      }
      var l13396 = if_res2268;
      var l13397 = l13396;
      if (M1.null_p(l13397) !== false) {
        var if_res2270 = l13397;
      } else {
        if (M1.eq_p(M1.car(l13397), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2269 = M1.cdr(l13397);
        } else {
          var if_res2269 = l13397;
        }
        var if_res2270 = if_res2269;
      }
      var l13398 = if_res2270;
      var if_res2271 = M1.null_p(l13398);
    } else {
      var if_res2271 = false;
    }
    return if_res2271;
  }, temp2266, M1.rnull, temp2263, call_with_output_file_times_3403);
  var core773406 = function(build_p733407, build_p743408, dir753409, dir763410) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (dir763410 !== false) {
      var if_res2272 = dir753409;
    } else {
      var if_res2272 = M1.current_directory();
    }
    var dir3411 = if_res2272;
    if (build_p743408 !== false) {
      var if_res2273 = build_p733407;
    } else {
      var if_res2273 = false;
    }
    var build_p3412 = if_res2273;
    if (M3.path_string_p(dir3411) !== false) {
      var if_res2274 = M1.rvoid();
    } else {
      var if_res2274 = M1.raise_argument_error($rjs_core.Symbol.make("directory-list"), $rjs_core.UString.make("path-string?"), dir3411);
    }
    if_res2274;
    var content3413 = M4.sort(M1.directory_list(dir3411), M1.path_lt__p);
    if (build_p3412 !== false) {
      var if_res2275 = M2.map(function(i3414) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.build_path(dir3411, i3414);
      }, content3413);
    } else {
      var if_res2275 = content3413;
    }
    return if_res2275;
  };
  var unpack783415 = function(given_kws3416, given_args3417, dir753418, dir763419) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var build_p743420 = M1.pair_p(given_kws3416);
    if (build_p743420 !== false) {
      var if_res2276 = M1.car(given_args3417);
    } else {
      var if_res2276 = M1.rvoid();
    }
    var build_p733421 = if_res2276;
    return core773406(build_p733421, build_p743420, dir753418, dir763419);
  };
  var cl2281 = function(given_kws3426, given_args3427) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783415(given_kws3426, given_args3427, false, false);
  };
  var cl2282 = function(given_kws3428, given_args3429, dir753430) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783415(given_kws3428, given_args3429, dir753430, true);
  };
  var temp2284 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2283 = {
      '2': cl2281,
      '3': cl2282
    }[arguments.length];
    if (fixed_lam2283 !== undefined) {
      return fixed_lam2283.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var temp2280 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("build?"));
  var cl2277 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783415(M1.rnull, M1.rnull, false, false);
  };
  var cl2278 = function(dir753432) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783415(M1.rnull, M1.rnull, dir753432, true);
  };
  var directory_list3431 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2279 = {
      '0': cl2277,
      '1': cl2278
    }[arguments.length];
    if (fixed_lam2279 !== undefined) {
      return fixed_lam2279.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var directory_list = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3422, given_argc3423) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__gt__eq_(given_argc3423, 2) !== false) {
      var if_res2285 = M1.__lt__eq_(given_argc3423, 3);
    } else {
      var if_res2285 = false;
    }
    if (if_res2285 !== false) {
      var l13424 = given_kws3422;
      if (M1.null_p(l13424) !== false) {
        var if_res2287 = l13424;
      } else {
        if (M1.eq_p(M1.car(l13424), $rjs_core.Keyword.make("build?")) !== false) {
          var if_res2286 = M1.cdr(l13424);
        } else {
          var if_res2286 = l13424;
        }
        var if_res2287 = if_res2286;
      }
      var l13425 = if_res2287;
      var if_res2288 = M1.null_p(l13425);
    } else {
      var if_res2288 = false;
    }
    return if_res2288;
  }, temp2284, M1.rnull, temp2280, directory_list3431);
  var __rjs_quoted__ = {};
  __rjs_quoted__.call_with_input_file29 = call_with_input_file29;
  __rjs_quoted__.open_input_output_file22 = open_input_output_file22;
  __rjs_quoted__.call_with_input_file31 = call_with_input_file31;
  __rjs_quoted__.call_with_output_file40 = call_with_output_file40;
  __rjs_quoted__.call_with_input_file_times_61 = call_with_input_file_times_61;
  __rjs_quoted__.open_output_file14 = open_output_file14;
  __rjs_quoted__.call_with_output_file_times_72 = call_with_output_file_times_72;
  __rjs_quoted__.open_output_file16 = open_output_file16;
  __rjs_quoted__.with_output_to_file54 = with_output_to_file54;
  __rjs_quoted__.with_output_to_file56 = with_output_to_file56;
  __rjs_quoted__.with_input_from_file45 = with_input_from_file45;
  __rjs_quoted__.call_with_input_file_times_63 = call_with_input_file_times_63;
  __rjs_quoted__.open_input_file6 = open_input_file6;
  __rjs_quoted__.call_with_output_file38 = call_with_output_file38;
  __rjs_quoted__.with_input_from_file47 = with_input_from_file47;
  __rjs_quoted__.open_input_file8 = open_input_file8;
  __rjs_quoted__.open_input_output_file24 = open_input_output_file24;
  __rjs_quoted__.call_with_output_file_times_70 = call_with_output_file_times_70;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __directory_list() {
      return directory_list;
    }
  };
})();
var $__modules_47_version_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/version.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __times_version_times_ = $rjs_core.UString.make("0.8.1");
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_version_times_() {
      return __times_version_times_;
    }
  };
})();
var $__modules_47_code_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/code.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__modules_47_version_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var __times_default_header_times_ = M0.list(M0.string_append($rjs_core.UString.make("Generated by the Waxeye Parser Generator - version "), M4.__times_version_times_), $rjs_core.UString.make("www.waxeye.org"));
  var __times_indent_unit_times_ = 4;
  var __times_indent_level_times_ = 0;
  var indent_unit_bang_ = function(val1675) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_unit_times_ = val1675;
    return null;
  };
  var dump_string = function(s1676, path1677) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__5411678 = M2.__rjs_quoted__.call_with_output_file40;
    var path11679 = path1677;
    var temp21680 = function(p1682) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.display(s1676, p1682);
    };
    var temp31681 = $rjs_core.Symbol.make("replace");
    if (M0.variable_reference_constant_p(M2.__rjs_quoted__.call_with_output_file40) !== false) {
      var if_res1018 = M2.__rjs_quoted__.call_with_output_file38(temp31681, true, false, false, path11679, temp21680);
    } else {
      var if_res1018 = M0.checked_procedure_check_and_extract(M5.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__5411678, M5.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), M0.list(temp31681), path11679, temp21680);
    }
    return if_res1018;
  };
  var ind = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M1.make_list(__times_indent_level_times_, M0.make_string(__times_indent_unit_times_, $rjs_core.Char.charFromCodepoint(32))));
  };
  var indent_plus_ = function(n1683) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ + n1683;
    return null;
  };
  var indent_ = function(n1684) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ - n1684;
    return null;
  };
  var bool__gt_s = function(b1685) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (b1685 !== false) {
      var if_res1019 = $rjs_core.UString.make("true");
    } else {
      var if_res1019 = $rjs_core.UString.make("false");
    }
    return if_res1019;
  };
  var comment_bookend = function(top1686, unit1687, bot1688, lines1689) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.string_append(ind(), top1686, $rjs_core.UString.make("\n"), comment_base(unit1687, lines1689), ind(), bot1688, $rjs_core.UString.make("\n"));
  };
  var comment_base = function(unit1690, lines1691) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M3.map(function(a1692) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.equal_p($rjs_core.UString.make(""), a1692) !== false) {
        var if_res1020 = M0.format($rjs_core.UString.make("~a~a\n"), ind(), unit1690);
      } else {
        var if_res1020 = M0.format($rjs_core.UString.make("~a~a ~a\n"), ind(), unit1690, a1692);
      }
      return if_res1020;
    }, lines1691));
  };
  var script_comment = function(lines1693) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return comment_base($rjs_core.UString.make("#"), lines1693);
  };
  var camel_case_lower = function(s1694) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl1695 = M0.string__gt_list(s1694);
    if (M0.null_p(sl1695) !== false) {
      var if_res1021 = $rjs_core.UString.make("");
    } else {
      var if_res1021 = M0.list__gt_string(M0.cons(M0.char_downcase(M0.car(sl1695)), M0.cdr(sl1695)));
    }
    return if_res1021;
  };
  var camel_case_upper = function(s1696) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl1697 = M0.string__gt_list(s1696);
    if (M0.null_p(sl1697) !== false) {
      var if_res1022 = $rjs_core.UString.make("");
    } else {
      var if_res1022 = M0.list__gt_string(M0.cons(M0.char_upcase(M0.car(sl1697)), M0.cdr(sl1697)));
    }
    return if_res1022;
  };
  var string__gt_upper = function(s1698) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M3.map(M0.char_upcase, M0.string__gt_list(s1698)));
  };
  var escape_for_java_char_p = function(ch1699) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part1700 = M0.equal_p(ch1699, $rjs_core.Char.charFromCodepoint(92));
    if (or_part1700 !== false) {
      var if_res1023 = or_part1700;
    } else {
      var if_res1023 = M0.equal_p(ch1699, $rjs_core.Char.charFromCodepoint(39));
    }
    return if_res1023;
  };
  var escape_java_string = function(s1701) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var escape_java_string_iter1702 = function(sl1703) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(sl1703) !== false) {
        var if_res1025 = $rjs_core.Pair.makeList();
      } else {
        if (M0.equal_p(M0.car(sl1703), $rjs_core.Char.charFromCodepoint(34)) !== false) {
          var if_res1024 = M0.cons($rjs_core.Char.charFromCodepoint(92), M0.cons($rjs_core.Char.charFromCodepoint(34), escape_java_string_iter1702(M0.cdr(sl1703))));
        } else {
          var if_res1024 = M0.cons(M0.car(sl1703), escape_java_string_iter1702(M0.cdr(sl1703)));
        }
        var if_res1025 = if_res1024;
      }
      return if_res1025;
    };
    return M0.list__gt_string(escape_java_string_iter1702(M0.string__gt_list(s1701)));
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.indent_ = indent_;
  __rjs_quoted__.indent_plus_ = indent_plus_;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_default_header_times_() {
      return __times_default_header_times_;
    },
    get __times_indent_unit_times_() {
      return __times_indent_unit_times_;
    },
    get __times_indent_level_times_() {
      return __times_indent_level_times_;
    },
    get indent_unit_bang_() {
      return indent_unit_bang_;
    },
    get dump_string() {
      return dump_string;
    },
    get ind() {
      return ind;
    },
    get indent_plus_() {
      return indent_plus_;
    },
    get indent_() {
      return indent_;
    },
    get bool__gt_s() {
      return bool__gt_s;
    },
    get comment_bookend() {
      return comment_bookend;
    },
    get comment_base() {
      return comment_base;
    },
    get script_comment() {
      return script_comment;
    },
    get camel_case_lower() {
      return camel_case_lower;
    },
    get camel_case_upper() {
      return camel_case_upper;
    },
    get string__gt_upper() {
      return string__gt_upper;
    },
    get escape_for_java_char_p() {
      return escape_for_java_char_p;
    },
    get escape_java_string() {
      return escape_java_string;
    }
  };
})();
var $__modules_47_javascript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/javascript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_code_46_rkt_46_js__;
  var M1 = $__runtime_47_paramz_46_rkt_46_js__;
  var M2 = $__modules_47_gen_46_rkt_46_js__;
  var M3 = $__runtime_47_kernel_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M5 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M7 = $__runtime_47_unsafe_46_rkt_46_js__;
  var javascript_comment = function(lines560) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.comment_bookend($rjs_core.UString.make("/*"), $rjs_core.UString.make(" *"), $rjs_core.UString.make(" */"), lines560);
  };
  var typescript = M3.make_parameter(false);
  var gen_typescript = function(grammar561, path562) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.indent_unit_bang_(2);
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res278 = M3.string_append(M3.string_downcase(M2.__times_name_prefix_times_), $rjs_core.UString.make("_parser.ts"));
    } else {
      var if_res278 = $rjs_core.UString.make("parser.ts");
    }
    var file_path563 = M3.string_append(path562, if_res278);
    M0.dump_string(gen_typescript_parser(grammar561), file_path563);
    return M3.list(file_path563);
  };
  var gen_javascript = function(grammar564, path565) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.indent_unit_bang_(4);
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res279 = M3.string_append(M3.string_downcase(M2.__times_name_prefix_times_), $rjs_core.UString.make("_parser.js"));
    } else {
      var if_res279 = $rjs_core.UString.make("parser.js");
    }
    var file_path566 = M3.string_append(path565, if_res279);
    M0.dump_string(gen_javascript_parser(grammar564), file_path566);
    return M3.list(file_path566);
  };
  var gen_char = function(t567) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp285 = $rjs_core.UString.make("'~a~a'");
    if (M0.escape_for_java_char_p(t567) !== false) {
      var if_res284 = $rjs_core.UString.make("\\");
    } else {
      var if_res284 = $rjs_core.UString.make("");
    }
    if (M3.equal_p(t567, $rjs_core.Char.charFromCodepoint(34)) !== false) {
      var if_res283 = $rjs_core.UString.make("\\\"");
    } else {
      if (M3.equal_p(t567, $rjs_core.Char.charFromCodepoint(10)) !== false) {
        var if_res282 = $rjs_core.UString.make("\\n");
      } else {
        if (M3.equal_p(t567, $rjs_core.Char.charFromCodepoint(9)) !== false) {
          var if_res281 = $rjs_core.UString.make("\\t");
        } else {
          if (M3.equal_p(t567, $rjs_core.Char.charFromCodepoint(13)) !== false) {
            var if_res280 = $rjs_core.UString.make("\\r");
          } else {
            var if_res280 = t567;
          }
          var if_res281 = if_res280;
        }
        var if_res282 = if_res281;
      }
      var if_res283 = if_res282;
    }
    return M3.format(temp285, if_res284, if_res283);
  };
  var gen_char_class = function(a568) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var gen_char_class_item569 = function(a570) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M3.char_p(a570) !== false) {
        var if_res286 = M3.format($rjs_core.UString.make("0x~x"), M3.char__gt_integer(a570));
      } else {
        var if_res286 = M3.format($rjs_core.UString.make("[0x~x, 0x~x]"), M3.char__gt_integer(M3.car(a570)), M3.char__gt_integer(M3.cdr(a570)));
      }
      return if_res286;
    };
    if (M3.symbol_p(a568) !== false) {
      var if_res289 = $rjs_core.UString.make("-1");
    } else {
      if (M3.list_p(a568) !== false) {
        var if_res288 = gen_array(gen_char_class_item569, a568);
      } else {
        if (M3.char_p(a568) !== false) {
          var if_res287 = gen_char_class_item569(a568);
        } else {
          var if_res287 = a568;
        }
        var if_res288 = if_res287;
      }
      var if_res289 = if_res288;
    }
    return if_res289;
  };
  var exp_id_map = M3.make_hash($rjs_core.Pair.makeList($rjs_core.Pair.make($rjs_core.UString.make("NT"), 1), $rjs_core.Pair.make($rjs_core.UString.make("ALT"), 2), $rjs_core.Pair.make($rjs_core.UString.make("SEQ"), 3), $rjs_core.Pair.make($rjs_core.UString.make("PLUS"), 4), $rjs_core.Pair.make($rjs_core.UString.make("STAR"), 5), $rjs_core.Pair.make($rjs_core.UString.make("OPT"), 6), $rjs_core.Pair.make($rjs_core.UString.make("AND"), 7), $rjs_core.Pair.make($rjs_core.UString.make("NOT"), 8), $rjs_core.Pair.make($rjs_core.UString.make("VOID"), 9), $rjs_core.Pair.make($rjs_core.UString.make("ANY"), 10), $rjs_core.Pair.make($rjs_core.UString.make("CHAR"), 11), $rjs_core.Pair.make($rjs_core.UString.make("CHAR_CLASS"), 12)));
  var gen_exp = function(a571) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp574 = M5.ast_t(a571);
    if (M3.symbol_p(tmp574) !== false) {
      var if_res290 = M3.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 11], [$rjs_core.Symbol.make("identifier"), 1], [$rjs_core.Symbol.make("optional"), 7], [$rjs_core.Symbol.make("not"), 6], [$rjs_core.Symbol.make("closure"), 8], [$rjs_core.Symbol.make("charClass"), 3], [$rjs_core.Symbol.make("void"), 4], [$rjs_core.Symbol.make("alternation"), 10], [$rjs_core.Symbol.make("plus"), 9], [$rjs_core.Symbol.make("wildCard"), 12], [$rjs_core.Symbol.make("and"), 5], [$rjs_core.Symbol.make("literal"), 2]], false), tmp574, function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return 0;
      });
    } else {
      var if_res290 = 0;
    }
    var index575 = if_res290;
    if (M7.unsafe_fx_lt_(index575, 6) !== false) {
      if (M7.unsafe_fx_lt_(index575, 2) !== false) {
        if (M7.unsafe_fx_lt_(index575, 1) !== false) {
          var if_res291 = M3.format($rjs_core.UString.make("unknown:~a"), M5.ast_t(a571));
        } else {
          var if_res291 = M3.values($rjs_core.UString.make("NT"), M3.format($rjs_core.UString.make("name: '~a'"), M3.list__gt_string(M5.ast_c(a571))));
        }
        var if_res296 = if_res291;
      } else {
        if (M7.unsafe_fx_lt_(index575, 3) !== false) {
          if (M3.__lt__eq_(M3.length(M5.ast_c(a571)), 1) !== false) {
            var if_res292 = M3.values($rjs_core.UString.make("CHAR"), M3.format($rjs_core.UString.make("char: ~a"), gen_char(M3.car(M5.ast_c(a571)))));
          } else {
            var if_res292 = M3.values($rjs_core.UString.make("SEQ"), M3.format($rjs_core.UString.make("exprs: ~a"), gen_array(gen_exp, M6.map(function(b576) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M5.__rjs_quoted__.ast1($rjs_core.Symbol.make("literal"), M3.cons(b576, $rjs_core.Pair.makeList()), $rjs_core.Pair.makeList());
            }, M5.ast_c(a571)))));
          }
          var if_res295 = if_res292;
        } else {
          if (M7.unsafe_fx_lt_(index575, 4) !== false) {
            var if_res294 = M3.values($rjs_core.UString.make("CHAR_CLASS"), M3.format($rjs_core.UString.make("codepoints: ~a"), gen_char_class(M5.ast_c(a571))));
          } else {
            if (M7.unsafe_fx_lt_(index575, 5) !== false) {
              var if_res293 = M3.values($rjs_core.UString.make("VOID"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
            } else {
              var if_res293 = M3.values($rjs_core.UString.make("AND"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
            }
            var if_res294 = if_res293;
          }
          var if_res295 = if_res294;
        }
        var if_res296 = if_res295;
      }
      var if_res303 = if_res296;
    } else {
      if (M7.unsafe_fx_lt_(index575, 9) !== false) {
        if (M7.unsafe_fx_lt_(index575, 7) !== false) {
          var if_res298 = M3.values($rjs_core.UString.make("NOT"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
        } else {
          if (M7.unsafe_fx_lt_(index575, 8) !== false) {
            var if_res297 = M3.values($rjs_core.UString.make("OPT"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
          } else {
            var if_res297 = M3.values($rjs_core.UString.make("STAR"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
          }
          var if_res298 = if_res297;
        }
        var if_res302 = if_res298;
      } else {
        if (M7.unsafe_fx_lt_(index575, 10) !== false) {
          var if_res301 = M3.values($rjs_core.UString.make("PLUS"), M3.format($rjs_core.UString.make("expr: ~a"), gen_exp(M3.car(M5.ast_c(a571)))));
        } else {
          if (M7.unsafe_fx_lt_(index575, 11) !== false) {
            var if_res300 = M3.values($rjs_core.UString.make("ALT"), M3.format($rjs_core.UString.make("exprs: ~a"), gen_array(gen_exp, M5.ast_c(a571))));
          } else {
            if (M7.unsafe_fx_lt_(index575, 12) !== false) {
              var if_res299 = M3.values($rjs_core.UString.make("SEQ"), M3.format($rjs_core.UString.make("exprs: ~a"), gen_array(gen_exp, M5.ast_c(a571))));
            } else {
              var if_res299 = M3.values($rjs_core.UString.make("ANY"), $rjs_core.UString.make(""));
            }
            var if_res300 = if_res299;
          }
          var if_res301 = if_res300;
        }
        var if_res302 = if_res301;
      }
      var if_res303 = if_res302;
    }
    var let_result304 = if_res303;
    var name572 = let_result304.getAt(0);
    var args573 = let_result304.getAt(1);
    if (M3.__eq_(0, M3.string_length(args573)) !== false) {
      var if_res305 = $rjs_core.UString.make("");
    } else {
      var if_res305 = M3.format($rjs_core.UString.make(", ~a"), args573);
    }
    var args_str577 = if_res305;
    if (typescript() !== false) {
      var if_res306 = M3.format($rjs_core.UString.make("{ type: ExprType.~a~a }"), name572, args_str577);
    } else {
      var if_res306 = M3.format($rjs_core.UString.make("{ type: ~a /* ~a */~a }"), M3.hash_ref(exp_id_map, name572), name572, args_str577);
    }
    return if_res306;
  };
  var nonterminal_mode_map = M3.make_hash($rjs_core.Pair.makeList($rjs_core.Pair.make($rjs_core.UString.make("NORMAL"), 1), $rjs_core.Pair.make($rjs_core.UString.make("PRUNING"), 2), $rjs_core.Pair.make($rjs_core.UString.make("VOIDING"), 3)));
  var gen_def = function(a578) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp582 = M5.ast_t(M3.list_ref(M5.ast_c(a578), 1));
    if (M3.equal_p(tmp582, $rjs_core.Symbol.make("voidArrow")) !== false) {
      var if_res309 = $rjs_core.UString.make("VOIDING");
    } else {
      if (M3.equal_p(tmp582, $rjs_core.Symbol.make("pruneArrow")) !== false) {
        var if_res308 = $rjs_core.UString.make("PRUNING");
      } else {
        if (M3.equal_p(tmp582, $rjs_core.Symbol.make("leftArrow")) !== false) {
          var if_res307 = $rjs_core.UString.make("NORMAL");
        } else {
          var if_res307 = M3.rvoid();
        }
        var if_res308 = if_res307;
      }
      var if_res309 = if_res308;
    }
    var mode_name579 = if_res309;
    var nt_name580 = M3.list__gt_string(M5.ast_c(M3.list_ref(M5.ast_c(a578), 0)));
    var exp581 = gen_exp(M3.list_ref(M5.ast_c(a578), 2));
    if (typescript() !== false) {
      var if_res310 = M3.format($rjs_core.UString.make("'~a': { mode: NonTerminalMode.~a, exp: ~a }"), nt_name580, mode_name579, exp581);
    } else {
      var if_res310 = M3.format($rjs_core.UString.make("'~a': { mode: ~a /* ~a */, exp: ~a }"), nt_name580, M3.hash_ref(nonterminal_mode_map, mode_name579), mode_name579, exp581);
    }
    return if_res310;
  };
  var gen_defs = function(a583) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return gen_map(gen_def, M5.ast_c(a583));
  };
  var gen_map = function(fn584, data585) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp312 = $rjs_core.UString.make("{~a}");
    M0.indent_plus_(1);
    if (M3.null_p(data585) !== false) {
      var if_res311 = $rjs_core.UString.make("");
    } else {
      var if_res311 = M3.string_append(fn584(M3.car(data585)), M3.apply(M3.string_append, M6.map(function(a587) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M3.string_append($rjs_core.UString.make(",\n"), M0.ind(), fn584(a587));
      }, M3.cdr(data585))));
    }
    var val586 = if_res311;
    M0.indent_(1);
    return M3.format(temp312, val586);
  };
  var gen_array = function(fn588, data589) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp315 = $rjs_core.UString.make("[~a]");
    M0.indent_plus_(1);
    if (M3.null_p(data589) !== false) {
      var if_res314 = $rjs_core.UString.make("");
    } else {
      var temp1591 = M6.map(fn588, data589);
      var temp2592 = $rjs_core.UString.make(", ");
      if (M3.variable_reference_constant_p(M4.__rjs_quoted__.add_between37) !== false) {
        var if_res313 = M4.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp1591, temp2592);
      } else {
        var if_res313 = M4.__rjs_quoted__.add_between37(temp1591, temp2592);
      }
      var if_res314 = M3.apply(M3.string_append, if_res313);
    }
    var val590 = if_res314;
    M0.indent_(1);
    return M3.format(temp315, val590);
  };
  var gen_typescript_parser = function(grammar593) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res316 = M3.string_append(M0.camel_case_upper(M2.__times_name_prefix_times_), $rjs_core.UString.make("Parser"));
    } else {
      var if_res316 = $rjs_core.UString.make("Parser");
    }
    var parser_name594 = if_res316;
    var temp324 = $rjs_core.UString.make("~a\nimport { ExprType, NonTerminalMode, ParserConfig, WaxeyeParser } from 'waxeye';\n\nconst parserConfig: ParserConfig =\n ~a~a~a;\nconst start = '~a';\n\nexport class ~a extends WaxeyeParser {\n  public constructor() {\n    super(parserConfig, start);\n  }\n}\n");
    if (M2.__times_file_header_times_ !== false) {
      var if_res323 = javascript_comment(M2.__times_file_header_times_);
    } else {
      var if_res323 = javascript_comment(M0.__times_default_header_times_);
    }
    var temp322 = M0.ind();
    var temp321 = M0.ind();
    var __context317 = $rjs_core.Marks.getFrames();
    var __context318;
    try {
      __context318 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M1.parameterization_key, M1.extend_parameterization(M3.continuation_mark_set_first(false, M1.parameterization_key), typescript, true));
      var __wcm_result319 = gen_defs(grammar593);
    } finally {
      $rjs_core.Marks.updateFrame(__context317, __context318);
    }
    return M3.format(temp324, if_res323, temp322, temp321, __wcm_result319, M2.__times_start_name_times_, parser_name594);
  };
  var gen_javascript_parser = function(grammar595) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__times_name_prefix_times_ !== false) {
      var if_res325 = M3.string_append(M0.camel_case_upper(M2.__times_name_prefix_times_), $rjs_core.UString.make("Parser"));
    } else {
      var if_res325 = $rjs_core.UString.make("Parser");
    }
    var parser_name596 = if_res325;
    var gen_parser_class597 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp332 = $rjs_core.UString.make("\nfunction ~a() {}\n~a.prototype = new waxeye.WaxeyeParser(\n~a~a~a\n~a, '~a');\n");
      var temp331 = M0.ind();
      var temp330 = M0.ind();
      var __context326 = $rjs_core.Marks.getFrames();
      var __context327;
      try {
        __context327 = $rjs_core.Marks.enterFrame();
        $rjs_core.Marks.setMark(M1.parameterization_key, M1.extend_parameterization(M3.continuation_mark_set_first(false, M1.parameterization_key), typescript, false));
        var __wcm_result328 = gen_defs(grammar595);
      } finally {
        $rjs_core.Marks.updateFrame(__context326, __context327);
      }
      return M3.format(temp332, parser_name596, parser_name596, temp331, temp330, __wcm_result328, M0.ind(), M2.__times_start_name_times_);
    };
    var gen_nodejs_imports598 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val599 = M3.format($rjs_core.UString.make("\nvar waxeye = waxeye;\nif (typeof module !== 'undefined') {\n~a// require from module system\n~awaxeye = require('waxeye');\n}\n"), M0.ind(), M0.ind());
      M0.indent_(1);
      return val599;
    };
    var gen_nodejs_exports600 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val601 = M3.format($rjs_core.UString.make("\n// Add to module system\nif (typeof module !== 'undefined') {\n~amodule.exports.~a = ~a;\n}\n"), M0.ind(), parser_name596, parser_name596);
      M0.indent_(1);
      return val601;
    };
    var temp334 = $rjs_core.UString.make("~a~a~a~a");
    if (M2.__times_file_header_times_ !== false) {
      var if_res333 = javascript_comment(M2.__times_file_header_times_);
    } else {
      var if_res333 = javascript_comment(M0.__times_default_header_times_);
    }
    return M3.format(temp334, if_res333, gen_nodejs_imports598(), gen_parser_class597(), gen_nodejs_exports600());
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get gen_typescript_parser() {
      return gen_typescript_parser;
    },
    get gen_typescript() {
      return gen_typescript;
    },
    get gen_javascript_parser() {
      return gen_javascript_parser;
    },
    get gen_javascript() {
      return gen_javascript;
    }
  };
})();
var $__collects_47_waxeye_47_set_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/set.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var within_set_p = function(a1791, b1792) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(a1791) !== false) {
      var if_res1089 = false;
    } else {
      var aa1793 = M0.car(a1791);
      if (M0.char_p(aa1793) !== false) {
        if (M0.char_eq__p(aa1793, b1792) !== false) {
          var if_res1084 = true;
        } else {
          if (M0.char_lt__p(aa1793, b1792) !== false) {
            var if_res1083 = within_set_p(M0.cdr(a1791), b1792);
          } else {
            var if_res1083 = false;
          }
          var if_res1084 = if_res1083;
        }
        var if_res1088 = if_res1084;
      } else {
        if (M0.char_lt__eq__p(M0.car(aa1793), b1792) !== false) {
          var if_res1085 = M0.char_lt__eq__p(b1792, M0.cdr(aa1793));
        } else {
          var if_res1085 = false;
        }
        if (if_res1085 !== false) {
          var if_res1087 = true;
        } else {
          if (M0.char_lt__p(M0.cdr(aa1793), b1792) !== false) {
            var if_res1086 = within_set_p(M0.cdr(a1791), b1792);
          } else {
            var if_res1086 = false;
          }
          var if_res1087 = if_res1086;
        }
        var if_res1088 = if_res1087;
      }
      var if_res1089 = if_res1088;
    }
    return if_res1089;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get within_set_p() {
      return within_set_p;
    }
  };
})();
var $__collects_47_waxeye_47_fa_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/fa.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var let_result374 = M0.make_struct_type($rjs_core.Symbol.make("edge"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("edge"));
  var struct_697 = let_result374.getAt(0);
  var make_698 = let_result374.getAt(1);
  var __p699 = let_result374.getAt(2);
  var __ref700 = let_result374.getAt(3);
  var __set_bang_701 = let_result374.getAt(4);
  var let_result375 = M0.values(struct_697, make_698, __p699, M0.make_struct_field_accessor(__ref700, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref700, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_accessor(__ref700, 2, $rjs_core.Symbol.make("v")), M0.make_struct_field_mutator(__set_bang_701, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_701, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_mutator(__set_bang_701, 2, $rjs_core.Symbol.make("v")));
  var struct_edge = let_result375.getAt(0);
  var edge1 = let_result375.getAt(1);
  var edge_p = let_result375.getAt(2);
  var edge_t = let_result375.getAt(3);
  var edge_s = let_result375.getAt(4);
  var edge_v = let_result375.getAt(5);
  var set_edge_t_bang_ = let_result375.getAt(6);
  var set_edge_s_bang_ = let_result375.getAt(7);
  var set_edge_v_bang_ = let_result375.getAt(8);
  var let_result376 = M0.make_struct_type($rjs_core.Symbol.make("state"), false, 2, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("state"));
  var struct_702 = let_result376.getAt(0);
  var make_703 = let_result376.getAt(1);
  var __p704 = let_result376.getAt(2);
  var __ref705 = let_result376.getAt(3);
  var __set_bang_706 = let_result376.getAt(4);
  var let_result377 = M0.values(struct_702, make_703, __p704, M0.make_struct_field_accessor(__ref705, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_accessor(__ref705, 1, $rjs_core.Symbol.make("match")), M0.make_struct_field_mutator(__set_bang_706, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_mutator(__set_bang_706, 1, $rjs_core.Symbol.make("match")));
  var struct_state = let_result377.getAt(0);
  var state2 = let_result377.getAt(1);
  var state_p = let_result377.getAt(2);
  var state_edges = let_result377.getAt(3);
  var state_match = let_result377.getAt(4);
  var set_state_edges_bang_ = let_result377.getAt(5);
  var set_state_match_bang_ = let_result377.getAt(6);
  var let_result378 = M0.make_struct_type($rjs_core.Symbol.make("fa"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2), false, $rjs_core.Symbol.make("fa"));
  var struct_707 = let_result378.getAt(0);
  var make_708 = let_result378.getAt(1);
  var __p709 = let_result378.getAt(2);
  var __ref710 = let_result378.getAt(3);
  var __set_bang_711 = let_result378.getAt(4);
  var let_result379 = M0.values(struct_707, make_708, __p709, M0.make_struct_field_accessor(__ref710, 0, $rjs_core.Symbol.make("type")), M0.make_struct_field_accessor(__ref710, 1, $rjs_core.Symbol.make("states")), M0.make_struct_field_accessor(__ref710, 2, $rjs_core.Symbol.make("mode")));
  var struct_fa = let_result379.getAt(0);
  var fa3 = let_result379.getAt(1);
  var fa_p = let_result379.getAt(2);
  var fa_type = let_result379.getAt(3);
  var fa_states = let_result379.getAt(4);
  var fa_mode = let_result379.getAt(5);
  var __rjs_quoted__ = {};
  __rjs_quoted__.set_edge_v_bang_ = set_edge_v_bang_;
  __rjs_quoted__.set_edge_t_bang_ = set_edge_t_bang_;
  __rjs_quoted__.state2 = state2;
  __rjs_quoted__.set_edge_s_bang_ = set_edge_s_bang_;
  __rjs_quoted__.state_match = state_match;
  __rjs_quoted__.struct_fa = struct_fa;
  __rjs_quoted__.set_state_edges_bang_ = set_state_edges_bang_;
  __rjs_quoted__.edge_s = edge_s;
  __rjs_quoted__.fa_p = fa_p;
  __rjs_quoted__.edge_t = edge_t;
  __rjs_quoted__.set_state_match_bang_ = set_state_match_bang_;
  __rjs_quoted__.struct_state = struct_state;
  __rjs_quoted__.edge1 = edge1;
  __rjs_quoted__.edge_p = edge_p;
  __rjs_quoted__.state_p = state_p;
  __rjs_quoted__.fa_type = fa_type;
  __rjs_quoted__.fa_mode = fa_mode;
  __rjs_quoted__.state_edges = state_edges;
  __rjs_quoted__.fa_states = fa_states;
  __rjs_quoted__.edge_v = edge_v;
  __rjs_quoted__.struct_edge = struct_edge;
  __rjs_quoted__.fa3 = fa3;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_edge() {
      return struct_edge;
    },
    get edge_p() {
      return edge_p;
    },
    get edge_t() {
      return edge_t;
    },
    get edge_s() {
      return edge_s;
    },
    get edge_v() {
      return edge_v;
    },
    get set_edge_t_bang_() {
      return set_edge_t_bang_;
    },
    get set_edge_s_bang_() {
      return set_edge_s_bang_;
    },
    get set_edge_v_bang_() {
      return set_edge_v_bang_;
    },
    get struct_state() {
      return struct_state;
    },
    get state_p() {
      return state_p;
    },
    get state_edges() {
      return state_edges;
    },
    get state_match() {
      return state_match;
    },
    get set_state_edges_bang_() {
      return set_state_edges_bang_;
    },
    get set_state_match_bang_() {
      return set_state_match_bang_;
    },
    get struct_fa() {
      return struct_fa;
    },
    get fa_p() {
      return fa_p;
    },
    get fa_type() {
      return fa_type;
    },
    get fa_states() {
      return fa_states;
    },
    get fa_mode() {
      return fa_mode;
    }
  };
})();
var $__collects_47_waxeye_47_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_waxeye_47_set_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var let_result380 = M1.make_struct_type($rjs_core.Symbol.make("cache-item"), false, 5, 0, false, M1.rnull, M1.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4), false, $rjs_core.Symbol.make("cache-item"));
  var struct_712 = let_result380.getAt(0);
  var make_713 = let_result380.getAt(1);
  var __p714 = let_result380.getAt(2);
  var __ref715 = let_result380.getAt(3);
  var __set_bang_716 = let_result380.getAt(4);
  var let_result381 = M1.values(struct_712, make_713, __p714, M1.make_struct_field_accessor(__ref715, 0, $rjs_core.Symbol.make("val")), M1.make_struct_field_accessor(__ref715, 1, $rjs_core.Symbol.make("pos")), M1.make_struct_field_accessor(__ref715, 2, $rjs_core.Symbol.make("line")), M1.make_struct_field_accessor(__ref715, 3, $rjs_core.Symbol.make("col")), M1.make_struct_field_accessor(__ref715, 4, $rjs_core.Symbol.make("cr")));
  var struct_cache_item = let_result381.getAt(0);
  var cache_item1 = let_result381.getAt(1);
  var cache_item_p = let_result381.getAt(2);
  var cache_item_val = let_result381.getAt(3);
  var cache_item_pos = let_result381.getAt(4);
  var cache_item_line = let_result381.getAt(5);
  var cache_item_col = let_result381.getAt(6);
  var cache_item_cr = let_result381.getAt(7);
  var make_parser = function(start717, eof_check718, automata719) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(input720) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var input_len721 = M1.string_length(input720);
      var input_pos722 = 0;
      var line723 = 1;
      var column724 = 0;
      var last_cr725 = false;
      var error_pos726 = 0;
      var error_line727 = 1;
      var error_col728 = 0;
      var error_expected729 = $rjs_core.Pair.makeList();
      var fa_stack730 = $rjs_core.Pair.makeList();
      var cache731 = M1.make_hash();
      var match_automaton732 = function(index740) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var key741 = M1.cons(index740, input_pos722);
        var value742 = M1.hash_ref(cache731, key741, false);
        if (value742 !== false) {
          restore_pos737(cache_item_pos(value742), cache_item_line(value742), cache_item_col(value742), cache_item_cr(value742));
          var if_res391 = cache_item_val(value742);
        } else {
          var automaton743 = M1.vector_ref(automata719, index740);
          var type744 = M3.fa_type(automaton743);
          var states745 = M3.fa_states(automaton743);
          var automaton_mode746 = M3.fa_mode(automaton743);
          fa_stack730 = M1.cons(M1.cons(automaton743, false), fa_stack730);
          var start_pos748 = input_pos722;
          var start_line749 = line723;
          var start_col750 = column724;
          var start_cr751 = last_cr725;
          var res752 = match_state733(M1.vector_ref(states745, 0));
          if (M1.equal_p(type744, $rjs_core.Symbol.make("&")) !== false) {
            restore_pos737(start_pos748, start_line749, start_col750, start_cr751);
            var if_res390 = M1.not(M1.not(res752));
          } else {
            if (M1.equal_p(type744, $rjs_core.Symbol.make("!")) !== false) {
              restore_pos737(start_pos748, start_line749, start_col750, start_cr751);
              if (res752 !== false) {
                var if_res382 = update_error739();
              } else {
                var if_res382 = true;
              }
              var if_res389 = if_res382;
            } else {
              if (res752 !== false) {
                var tmp753 = automaton_mode746;
                if (M1.equal_p(tmp753, $rjs_core.Symbol.make("voidArrow")) !== false) {
                  var if_res387 = true;
                } else {
                  if (M1.equal_p(tmp753, $rjs_core.Symbol.make("pruneArrow")) !== false) {
                    if (M1.null_p(res752) !== false) {
                      var if_res384 = true;
                    } else {
                      if (M1.null_p(M1.cdr(res752)) !== false) {
                        var if_res383 = M1.car(res752);
                      } else {
                        var if_res383 = M2.__rjs_quoted__.ast1(type744, res752, M1.cons(start_pos748, input_pos722));
                      }
                      var if_res384 = if_res383;
                    }
                    var if_res386 = if_res384;
                  } else {
                    if (M1.equal_p(tmp753, $rjs_core.Symbol.make("leftArrow")) !== false) {
                      var if_res385 = M2.__rjs_quoted__.ast1(type744, res752, M1.cons(start_pos748, input_pos722));
                    } else {
                      var if_res385 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.make("Unknown automaton mode"));
                    }
                    var if_res386 = if_res385;
                  }
                  var if_res387 = if_res386;
                }
                var if_res388 = if_res387;
              } else {
                var if_res388 = update_error739();
              }
              var if_res389 = if_res388;
            }
            var if_res390 = if_res389;
          }
          var v747 = if_res390;
          fa_stack730 = M1.cdr(fa_stack730);
          M1.hash_set_bang_(cache731, key741, cache_item1(v747, input_pos722, line723, column724, last_cr725));
          var if_res391 = v747;
        }
        return if_res391;
      };
      var match_state733 = function(state754) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var res755 = match_edges734(M3.state_edges(state754));
        if (res755 !== false) {
          var if_res393 = res755;
        } else {
          if (M3.state_match(state754) !== false) {
            var if_res392 = $rjs_core.Pair.makeList();
          } else {
            var if_res392 = false;
          }
          var if_res393 = if_res392;
        }
        return if_res393;
      };
      var match_edges734 = function(edges756) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(edges756) !== false) {
          var if_res395 = false;
        } else {
          var res757 = match_edge735(M1.car(edges756));
          if (res757 !== false) {
            var if_res394 = res757;
          } else {
            var if_res394 = match_edges734(M1.cdr(edges756));
          }
          var if_res395 = if_res394;
        }
        return if_res395;
      };
      var match_edge735 = function(edge758) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var start_pos759 = input_pos722;
        var start_line760 = line723;
        var start_col761 = column724;
        var start_cr762 = last_cr725;
        var t763 = M3.edge_t(edge758);
        if (M1.equal_p($rjs_core.Symbol.make("wild"), t763) !== false) {
          if (M1.__lt_(input_pos722, input_len721) !== false) {
            var if_res396 = mv736();
          } else {
            var if_res396 = record_error738();
          }
          var if_res404 = if_res396;
        } else {
          if (M1.char_p(t763) !== false) {
            if (M1.__lt_(input_pos722, input_len721) !== false) {
              var if_res397 = M1.equal_p(M1.string_ref(input720, input_pos722), t763);
            } else {
              var if_res397 = false;
            }
            if (if_res397 !== false) {
              var if_res398 = mv736();
            } else {
              var if_res398 = record_error738();
            }
            var if_res403 = if_res398;
          } else {
            if (M1.pair_p(t763) !== false) {
              if (M1.__lt_(input_pos722, input_len721) !== false) {
                var if_res399 = M0.within_set_p(t763, M1.string_ref(input720, input_pos722));
              } else {
                var if_res399 = false;
              }
              if (if_res399 !== false) {
                var if_res400 = mv736();
              } else {
                var if_res400 = record_error738();
              }
              var if_res402 = if_res400;
            } else {
              if (M1.integer_p(t763) !== false) {
                var if_res401 = match_automaton732(t763);
              } else {
                var if_res401 = false;
              }
              var if_res402 = if_res401;
            }
            var if_res403 = if_res402;
          }
          var if_res404 = if_res403;
        }
        var res764 = if_res404;
        if (res764 !== false) {
          var tran_res765 = match_state733(M1.vector_ref(M3.fa_states(M1.caar(fa_stack730)), M3.edge_s(edge758)));
          if (tran_res765 !== false) {
            var or_part766 = M3.edge_v(edge758);
            if (or_part766 !== false) {
              var if_res405 = or_part766;
            } else {
              var if_res405 = M1.equal_p(res764, true);
            }
            if (if_res405 !== false) {
              var if_res406 = tran_res765;
            } else {
              var if_res406 = M1.cons(res764, tran_res765);
            }
            var if_res407 = if_res406;
          } else {
            restore_pos737(start_pos759, start_line760, start_col761, start_cr762);
            var if_res407 = false;
          }
          var if_res408 = if_res407;
        } else {
          var if_res408 = false;
        }
        return if_res408;
      };
      var mv736 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var ch767 = M1.string_ref(input720, input_pos722);
        input_pos722 = input_pos722 + 1;
        if (M1.char_eq__p(ch767, $rjs_core.Char.charFromCodepoint(13)) !== false) {
          line723 = line723 + 1;
          column724 = 0;
          last_cr725 = true;
          var if_res411 = null;
        } else {
          if (M1.char_eq__p(ch767, $rjs_core.Char.charFromCodepoint(10)) !== false) {
            if (last_cr725 !== false) {
              var if_res409 = M1.rvoid();
            } else {
              line723 = line723 + 1;
              column724 = 0;
              var if_res409 = null;
            }
            var if_res410 = if_res409;
          } else {
            column724 = column724 + 1;
            var if_res410 = null;
          }
          if_res410;
          last_cr725 = false;
          var if_res411 = null;
        }
        if_res411;
        return ch767;
      };
      var restore_pos737 = function(p768, l769, c770, cr771) {
        if (arguments.length !== 4) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        input_pos722 = p768;
        line723 = l769;
        column724 = c770;
        last_cr725 = cr771;
        return null;
      };
      var record_error738 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__lt_(error_pos726, input_pos722) !== false) {
          error_pos726 = input_pos722;
          error_line727 = line723;
          error_col728 = column724;
          error_expected729 = $rjs_core.Pair.makeList();
          var if_res412 = null;
        } else {
          var if_res412 = M1.rvoid();
        }
        if_res412;
        if (M1.__lt__eq_(error_pos726, input_pos722) !== false) {
          fa_stack730 = M1.cons(M1.cons(M1.caar(fa_stack730), true), M1.cdr(fa_stack730));
          var if_res413 = null;
        } else {
          var if_res413 = M1.rvoid();
        }
        if_res413;
        return false;
      };
      var update_error739 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.cdar(fa_stack730) !== false) {
          error_expected729 = M1.cons(M3.fa_type(M1.caar(fa_stack730)), error_expected729);
          var if_res414 = null;
        } else {
          var if_res414 = M1.rvoid();
        }
        if_res414;
        return false;
      };
      var do_eof_check772 = function(res775) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (res775 !== false) {
          if (eof_check718 !== false) {
            var if_res415 = M1.__lt_(input_pos722, input_len721);
          } else {
            var if_res415 = false;
          }
          if (if_res415 !== false) {
            var if_res416 = M2.__rjs_quoted__.parse_error2(error_pos726, error_line727, error_col728, error_expected729, received773(), snippet774());
          } else {
            var if_res416 = res775;
          }
          var if_res417 = if_res416;
        } else {
          var if_res417 = M2.__rjs_quoted__.parse_error2(error_pos726, error_line727, error_col728, error_expected729, received773(), snippet774());
        }
        return if_res417;
      };
      var received773 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__eq_(error_pos726, input_len721) !== false) {
          var if_res418 = $rjs_core.UString.make("<end of input>");
        } else {
          var if_res418 = M1.substring(input720, error_pos726, error_pos726 + 1);
        }
        return if_res418;
      };
      var snippet774 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var snippet_length_max776 = 80;
        var line_finder777 = function(index_test778, index_move779) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var loop780 = function(i781, j782) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (index_test778(i781) !== false) {
              if (M1.__lt_(j782, snippet_length_max776) !== false) {
                var ch783 = M1.string_ref(input720, index_move779(i781));
                var or_part784 = M1.char_eq__p(ch783, $rjs_core.Char.charFromCodepoint(10));
                if (or_part784 !== false) {
                  var if_res419 = or_part784;
                } else {
                  var if_res419 = M1.char_eq__p(ch783, $rjs_core.Char.charFromCodepoint(13));
                }
                var if_res420 = M1.not(if_res419);
              } else {
                var if_res420 = false;
              }
              var if_res421 = if_res420;
            } else {
              var if_res421 = false;
            }
            if (if_res421 !== false) {
              var if_res422 = loop780(index_move779(i781), j782 + 1);
            } else {
              var if_res422 = i781;
            }
            return if_res422;
          };
          return loop780(error_pos726, 0);
        };
        var find_line_start785 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder777(function(i786) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__gt_(i786, 0);
          }, M1.sub1);
        };
        var find_line_end787 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder777(function(i788) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__lt_(i788, input_len721 - 1);
          }, M1.add1);
        };
        var build_snippet789 = function(start790, end791) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M1.string_append(M1.substring(input720, start790, M1.min(end791, input_len721)), $rjs_core.UString.make("\n"), M1.make_string(error_pos726 - start790, $rjs_core.Char.charFromCodepoint(32)), $rjs_core.UString.make("^"));
        };
        var line_start792 = find_line_start785();
        var line_end793 = find_line_end787();
        if (M1.__lt_(line_end793 - line_start792, snippet_length_max776) !== false) {
          var if_res423 = build_snippet789(line_start792, line_end793 + 1);
        } else {
          var s_len794 = error_pos726 - line_start792;
          var e_len795 = (line_end793 + 1) - error_pos726;
          var half_max796 = snippet_length_max776 / 2;
          var s797 = M1.min(s_len794, half_max796);
          var e798 = M1.min(e_len795, half_max796);
          var ss799 = s797 + (half_max796 - e798);
          var ee800 = e798 + (half_max796 - s797);
          var if_res423 = build_snippet789(error_pos726 - ss799, error_pos726 + ee800);
        }
        return if_res423;
      };
      return do_eof_check772(match_automaton732(start717));
    };
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.cache_item_p = cache_item_p;
  __rjs_quoted__.cache_item_cr = cache_item_cr;
  __rjs_quoted__.cache_item_pos = cache_item_pos;
  __rjs_quoted__.cache_item_val = cache_item_val;
  __rjs_quoted__.cache_item1 = cache_item1;
  __rjs_quoted__.struct_cache_item = struct_cache_item;
  __rjs_quoted__.cache_item_col = cache_item_col;
  __rjs_quoted__.cache_item_line = cache_item_line;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_parser() {
      return make_parser;
    }
  };
})();
var $__modules_47_grammar_45_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/grammar-parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_parser_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var automata = M0.vector(M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("grammar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(1, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("definition"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 2, false), M2.__rjs_quoted__.edge1(18, 2, false), M2.__rjs_quoted__.edge1(19, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alternation"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(20, 2, false)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sequence"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("unit"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(5, 0, false), M2.__rjs_quoted__.edge1(6, 0, false), M2.__rjs_quoted__.edge1(8, 1, false), M2.__rjs_quoted__.edge1(21, 3, false), M2.__rjs_quoted__.edge1(7, 2, false), M2.__rjs_quoted__.edge1(9, 2, false), M2.__rjs_quoted__.edge1(10, 2, false), M2.__rjs_quoted__.edge1(12, 2, false), M2.__rjs_quoted__.edge1(16, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(28, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(22, 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("prefix"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(33), $rjs_core.Char.charFromCodepoint(38), M0.cons($rjs_core.Char.charFromCodepoint(42), $rjs_core.Char.charFromCodepoint(43)), $rjs_core.Char.charFromCodepoint(58), $rjs_core.Char.charFromCodepoint(63)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("label"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("action"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(64), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 3, true), M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(23, 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(62), 7, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("identifier"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false), M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("literal"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(30, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(29, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("caseLiteral"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(32, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(31, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("lChar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(34, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34), $rjs_core.Char.charFromCodepoint(39), $rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(33, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("charClass"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(91), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(35, 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(13, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("range"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 1, false), M2.__rjs_quoted__.edge1(15, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("char"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(38, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(93)), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(37, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(36, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("hex"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(117), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(123), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 5, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 7, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 8, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 9, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("wildCard"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(46), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("leftArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("pruneArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("voidArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(58), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alt"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(124), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("open"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(40), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("close"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(41), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("comma"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(44), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(35), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(40, 2, false), M2.__rjs_quoted__.edge1(26, 3, false), M2.__rjs_quoted__.edge1(39, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("mComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(25, 2, false), M2.__rjs_quoted__.edge1(41, 3, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 5, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("endOfLine"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 1, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("ws"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(9), $rjs_core.Char.charFromCodepoint(32)), 0, false), M2.__rjs_quoted__.edge1(26, 0, false), M2.__rjs_quoted__.edge1(24, 0, false), M2.__rjs_quoted__.edge1(25, 0, false)), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 1, false), M2.__rjs_quoted__.edge1(18, 1, false), M2.__rjs_quoted__.edge1(19, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")));
  var grammar_parser = M1.make_parser(0, true, automata);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get grammar_parser() {
      return grammar_parser;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var __eq__gt_$ = function(lam_expr526) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.Marks.wrapWithContext(lam_expr526);
  };
  var js_string = function(e527) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return e527.toString();
  };
  var racket_string = function(e528) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.UString.makeImmutable(e528);
  };
  var assoc__gt_object = function(pairs529) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result530 = {};
    var loop531 = function(pairs532) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.null_p(pairs532) !== false) {
        var if_res265 = result530;
      } else {
        var p533 = M1.car(pairs532);
        var k535 = M1.car(p533);
        if (M1.string_p(k535) !== false) {
          var if_res264 = k535;
        } else {
          if (M1.symbol_p(k535) !== false) {
            var if_res263 = M1.symbol__gt_string(k535);
          } else {
            var if_res263 = M1.error($rjs_core.Symbol.make("assoc->object"), $rjs_core.UString.make("invalid key value"));
          }
          var if_res264 = if_res263;
        }
        var key534 = if_res264;
        result530[key534] = M1.car(M1.cdr(p533));
        var if_res265 = loop531(M1.cdr(pairs532));
      }
      return if_res265;
    };
    return loop531(pairs529);
  };
  var js_array_p = function(v536) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (v536) instanceof (Array);
  };
  var in_js_array = function(arr537) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_array(arr537);
    var arr538 = arr537;
    if (js_array_p(arr538) !== false) {
      var if_res266 = M1.rvoid();
    } else {
      var if_res266 = in_js_array(arr538);
    }
    if_res266;
    var for_loop539 = function(fold_var540, i541) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.__lt_(i541, arr538.length) !== false) {
        var v542 = arr538[i541];
        if (true !== false) {
          var fold_var544 = fold_var540;
          var fold_var545 = M1.cons(v542, fold_var544);
          var fold_var543 = M1.values(fold_var545);
          if (true !== false) {
            var if_res267 = M1.not(false);
          } else {
            var if_res267 = false;
          }
          if (if_res267 !== false) {
            var if_res268 = for_loop539(fold_var543, i541 + 1);
          } else {
            var if_res268 = fold_var543;
          }
          var if_res269 = if_res268;
        } else {
          var if_res269 = fold_var540;
        }
        var if_res270 = if_res269;
      } else {
        var if_res270 = fold_var540;
      }
      return if_res270;
    };
    return M2.alt_reverse(for_loop539(M1.rnull, 0));
  };
  var check_array = function(v546) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (js_array_p(v546) !== false) {
      var if_res271 = M1.rvoid();
    } else {
      var if_res271 = M1.raise_argument_error($rjs_core.Symbol.make("in-js-array"), $rjs_core.UString.make("js-array?"), v546);
    }
    return if_res271;
  };
  var in_js_obect = function(obj547) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_object(obj547);
    var obj548 = obj547;
    var keys549 = Object.keys(obj547);
    if (js_object_p(obj548) !== false) {
      var if_res272 = M1.rvoid();
    } else {
      var if_res272 = in_js_array(obj548);
    }
    if_res272;
    var for_loop550 = function(fold_var551, i552) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.__lt_(i552, keys549.length) !== false) {
        var k553 = keys549[i552];
        var v554 = obj548[keys549[i552]];
        if (true !== false) {
          var fold_var556 = fold_var551;
          var fold_var557 = M1.cons(M1.values(k553, v554), fold_var556);
          var fold_var555 = M1.values(fold_var557);
          if (true !== false) {
            var if_res273 = M1.not(false);
          } else {
            var if_res273 = false;
          }
          if (if_res273 !== false) {
            var if_res274 = for_loop550(fold_var555, i552 + 1);
          } else {
            var if_res274 = fold_var555;
          }
          var if_res275 = if_res274;
        } else {
          var if_res275 = fold_var551;
        }
        var if_res276 = if_res275;
      } else {
        var if_res276 = fold_var551;
      }
      return if_res276;
    };
    return M2.alt_reverse(for_loop550(M1.rnull, 0));
  };
  var js_object_p = function(v558) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $traceurRuntime.typeof((v558)) === "object";
  };
  var check_object = function(v559) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (js_object_p(v559) !== false) {
      var if_res277 = M1.rvoid();
    } else {
      var if_res277 = M1.raise_argument_error($rjs_core.Symbol.make("in-js-object"), $rjs_core.UString.make("js-object?"), v559);
    }
    return if_res277;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.js_string = js_string;
  __rjs_quoted__.js_array_p = js_array_p;
  __rjs_quoted__.in_js_array = in_js_array;
  __rjs_quoted__.js_object_p = js_object_p;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get assoc__gt_object() {
      return assoc__gt_object;
    },
    get racket_string() {
      return racket_string;
    },
    get js_string() {
      return js_string;
    },
    get __eq__gt_$() {
      return __eq__gt_$;
    }
  };
})();
var $__modules_47_racketscript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/racketscript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var M1 = $__modules_47_gen_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__modules_47_transform_46_rkt_46_js__;
  var M4 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M5 = $__modules_47_javascript_46_rkt_46_js__;
  var M6 = $__modules_47_grammar_45_parser_46_rkt_46_js__;
  var M7 = $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__;
  var syntax_error_message = function(error1) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.string_append($rjs_core.UString.make("syntax error in grammar: "), M4.parse_error__gt_string(error1));
  };
  var transform_and_set_start42 = function(grammar_or_error33, start_name14, start_name25) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var grammar_or_error6 = grammar_or_error33;
    if (start_name25 !== false) {
      var if_res1 = start_name14;
    } else {
      var if_res1 = $rjs_core.UString.make("");
    }
    var start_name7 = if_res1;
    if (M4.ast_p(grammar_or_error6) !== false) {
      var grammar8 = grammar_or_error6;
      M3.transform_grammar(grammar8);
      M1.start_nt_bang_(start_name7, grammar8);
      var if_res2 = grammar8;
    } else {
      var if_res2 = grammar_or_error6;
    }
    return if_res2;
  };
  var cl3 = function(grammar_or_error9) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error9, false, false);
  };
  var cl4 = function(grammar_or_error10, start_name111) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error10, start_name111, true);
  };
  var transform_and_set_start = $rjs_core.attachProcedureArity(function() {
    var fixed_lam5 = {
      '1': cl3,
      '2': cl4
    }[arguments.length];
    if (fixed_lam5 !== undefined) {
      return fixed_lam5.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.make("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var js_result = function(grammar_or_error12, fn13) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M4.ast_p(grammar_or_error12) !== false) {
      var if_res6 = [M7.js_string(fn13(grammar_or_error12)), null];
    } else {
      var if_res6 = [null, M7.js_string(syntax_error_message(grammar_or_error12))];
    }
    return if_res6;
  };
  var grammar_to_ast_string = function(grammar_src14) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(M6.grammar_parser(M7.racket_string(grammar_src14)), M4.ast__gt_string);
  };
  var grammar_to_transformed_ast_string = function(grammar_src15) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M6.grammar_parser(M7.racket_string(grammar_src15))), M4.ast__gt_string);
  };
  var generate_parser = function(grammar_src16) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M6.grammar_parser(M7.racket_string(grammar_src16))), M5.gen_javascript_parser);
  };
  window.waxeyeCompiler = {
    'grammarToAstString': grammar_to_ast_string,
    'grammarToTransformedAstString': grammar_to_transformed_ast_string,
    'generateParser': generate_parser
  };
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
