var $__runtime_47_core_47_raw_95_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/raw_hashing.js";
  function hash(o) {
    if (o === null)
      return 0;
    switch ((typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o))) {
      case 'number':
        return hashNumber(o);
      case 'string':
        return hashString(o);
      case 'boolean':
        return o ? 1 : -1;
      case 'undefined':
        return 0;
      case 'object':
      case 'function':
        return hashObjectIdentity(o);
      default:
        return hashString(o.toString());
    }
  }
  function hashString(s) {
    var h = 0;
    var n = s.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + s.charCodeAt(i));
    }
    return h;
  }
  var kBuf = new ArrayBuffer(8);
  var kBufAsF64 = new Float64Array(kBuf);
  var kBufAsI32 = new Int32Array(kBuf);
  function hashNumber(n) {
    if (~~n === n) {
      return ~~n;
    }
    kBufAsF64[0] = n;
    return kBufAsI32[0] ^ kBufAsI32[1];
  }
  var objectIds = new WeakMap();
  var currentId = 0;
  function hashObjectIdentity(o) {
    var result = objectIds.get(o);
    if (result === undefined) {
      currentId = ~~(currentId + 1);
      objectIds.set(o, currentId);
      return currentId;
    }
    return result;
  }
  function hashIntArray(a) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + a[i]);
    }
    return h;
  }
  function hashArray(a, valueToIntFn) {
    var h = 0;
    var n = a.length;
    for (var i = 0; i < n; ++i) {
      h = ~~(((h << 5) - h) + valueToIntFn(a[i]));
    }
    return h;
  }
  return {
    get hash() {
      return hash;
    },
    get hashString() {
      return hashString;
    },
    get hashNumber() {
      return hashNumber;
    },
    get hashObjectIdentity() {
      return hashObjectIdentity;
    },
    get hashIntArray() {
      return hashIntArray;
    },
    get hashArray() {
      return hashArray;
    }
  };
})();
var $__runtime_47_core_47_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/primitive.js";
  var hashString = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashString;
  var Primitive = function() {
    function Primitive() {}
    return ($traceurRuntime.createClass)(Primitive, {hashForEqual: function() {
        return hashString(this.toString());
      }}, {});
  }();
  function check(v) {
    return (v instanceof Primitive);
  }
  return {
    get Primitive() {
      return Primitive;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mini_native_output_string_port.js";
  var MiniNativeOutputStringPort = function() {
    function MiniNativeOutputStringPort() {
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(MiniNativeOutputStringPort, {
      consume: function(nativeString) {
        this._buffer.push(nativeString);
      },
      getOutputString: function() {
        return this._buffer.join('');
      }
    }, {});
  }();
  return {get MiniNativeOutputStringPort() {
      return MiniNativeOutputStringPort;
    }};
})();
var $__runtime_47_core_47_bytes_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/bytes.js";
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextDecoder = (typeof window === 'undefined') ? require('util').TextDecoder : window.TextDecoder;
  function check(bs) {
    return (typeof bs === 'undefined' ? 'undefined' : $traceurRuntime.typeof(bs)) === 'object' && bs !== null && bs.constructor === Uint8Array;
  }
  function eq(a, b) {
    if (a.length !== b.length)
      return false;
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function fromIntArray(ints) {
    return new Uint8Array(ints);
  }
  var utf8Decoder = new TextDecoder('utf-8');
  function toString(bytes) {
    return utf8Decoder.decode(bytes);
  }
  function displayNativeString(out, bytes) {
    out.consume(toString(bytes));
  }
  function hashForEqual(bytes) {
    return hashIntArray(bytes);
  }
  return {
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get fromIntArray() {
      return fromIntArray;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_char_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/char.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Char = function($__super) {
    function Char(codepoint, nativeString) {
      $traceurRuntime.superConstructor(Char).call(this);
      this.codepoint = codepoint;
      this._nativeString = nativeString;
    }
    return ($traceurRuntime.createClass)(Char, {
      equals: function(v) {
        return check(v) && eq(this, v);
      },
      isImmutable: function() {
        return true;
      },
      valueOf: function() {
        return this.codepoint;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = String.fromCodePoint(this.codepoint);
        }
        return this._nativeString;
      },
      hashForEqual: function() {
        return this.codepoint;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      writeNativeString: function(out) {
        var c = this.codepoint;
        switch (c) {
          case 0:
            out.consume('#\\nul');
            break;
          case 8:
            out.consume('#\\backspace');
            break;
          case 9:
            out.consume('#\\tab');
            break;
          case 10:
            out.consume('#\\newline');
            break;
          case 11:
            out.consume('#\\vtab');
            break;
          case 12:
            out.consume('#\\page');
            break;
          case 13:
            out.consume('#\\return');
            break;
          case 32:
            out.consume('#\\space');
            break;
          case 127:
            out.consume('#\\rubout');
            break;
          default:
            if (isGraphicCodepoint(c)) {
              out.consume(("#\\" + this.toString()));
            } else {
              out.consume(c > 0xFFFF ? ("#\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("#\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
            }
        }
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      }
    }, {}, $__super);
  }(Primitive);
  var INTERN_CACHE_SIZE = 256;
  var internedCache = new Array(INTERN_CACHE_SIZE);
  function charFromCodepoint(codepoint) {
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, null);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, null);
  }
  function charFromNativeString(s) {
    var codepoint = s.codePointAt(0);
    if (codepoint < INTERN_CACHE_SIZE) {
      if (internedCache[codepoint] === undefined) {
        internedCache[codepoint] = new Char(codepoint, s);
      }
      return internedCache[codepoint];
    }
    return new Char(codepoint, s);
  }
  function check(char) {
    return (typeof char === 'undefined' ? 'undefined' : $traceurRuntime.typeof(char)) === 'object' && char !== null && char.constructor === Char;
  }
  function eq(a, b) {
    return a.codepoint === b.codepoint;
  }
  function charToInteger(c) {
    return c.codepoint;
  }
  function integerToChar(k) {
    return charFromCodepoint(k);
  }
  function charUtf8Length(c) {
    var cp = c.codepoint;
    if (cp < 0x80) {
      return 1;
    } else if (cp < 0x800) {
      return 2;
    } else if (cp < 0x10000) {
      return 3;
    } else if (cp < 0x200000) {
      return 4;
    } else if (cp < 0x4000000) {
      return 5;
    }
    return 6;
  }
  function isGraphicCodepoint(c) {
    return (c > 32 && c < 127 || (c > 160 && c < 896 && !(c === 173 || c > 887 && c < 890)) || (c > 899 && c < 1480 && !(c === 1328 || c > 1366 && c < 1369 || c === 1376 || c === 1416 || c > 1418 && c < 1421 || c === 1424 || (c > 906 && c < 910 && c !== 908) || c === 930)) || c > 1487 && c < 1515 || c > 1519 && c < 1525 || (c > 1541 && c < 1970 && !(c > 1563 && c < 1566 || c === 1757 || c > 1805 && c < 1808 || c > 1866 && c < 1869)) || c > 1983 && c < 2043);
  }
  function isBlankCodepoint(c) {
    return (c === 9 || c === 32 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c === 8239 || c === 8287 || c === 12288);
  }
  function isWhitespaceCodepoint(c) {
    return (c > 8 && c < 14 || c === 32 || c === 133 || c === 160 || c === 5760 || c > 8191 && c < 8203 || c > 8231 && c < 8234 || c === 8239 || c === 8287 || c === 12288);
  }
  return {
    get Char() {
      return Char;
    },
    get charFromCodepoint() {
      return charFromCodepoint;
    },
    get charFromNativeString() {
      return charFromNativeString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get charToInteger() {
      return charToInteger;
    },
    get integerToChar() {
      return integerToChar;
    },
    get charUtf8Length() {
      return charUtf8Length;
    },
    get isGraphicCodepoint() {
      return isGraphicCodepoint;
    },
    get isBlankCodepoint() {
      return isBlankCodepoint;
    },
    get isWhitespaceCodepoint() {
      return isWhitespaceCodepoint;
    }
  };
})();
var $__runtime_47_third_45_party_47_hamt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/third-party/hamt.js";
  var _typeof = typeof Symbol === "function" && $traceurRuntime.typeof(Symbol.iterator) === "symbol" ? function(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj));
  };
  var hamt = {};
  var SIZE = 5;
  var BUCKET_SIZE = Math.pow(2, SIZE);
  var MASK = BUCKET_SIZE - 1;
  var MAX_INDEX_NODE = BUCKET_SIZE / 2;
  var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
  var nothing = {};
  var constant = function constant(x) {
    return function() {
      return x;
    };
  };
  var hash = hamt.hash = function(str) {
    var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);
    if (type === 'number')
      return str;
    if (type !== 'string')
      str += '';
    var hash = 0;
    for (var i = 0,
        len = str.length; i < len; ++i) {
      var c = str.charCodeAt(i);
      hash = (hash << 5) - hash + c | 0;
    }
    return hash;
  };
  var popcount = function popcount(x) {
    x -= x >> 1 & 0x55555555;
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x += x >> 8;
    x += x >> 16;
    return x & 0x7f;
  };
  var hashFragment = function hashFragment(shift, h) {
    return h >>> shift & MASK;
  };
  var toBitmap = function toBitmap(x) {
    return 1 << x;
  };
  var fromBitmap = function fromBitmap(bitmap, bit) {
    return popcount(bitmap & bit - 1);
  };
  var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {
    var out = arr;
    if (!mutate) {
      var len = arr.length;
      out = new Array(len);
      for (var i = 0; i < len; ++i) {
        out[i] = arr[i];
      }
    }
    out[at] = v;
    return out;
  };
  var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {
    var newLen = arr.length - 1;
    var i = 0;
    var g = 0;
    var out = arr;
    if (mutate) {
      i = g = at;
    } else {
      out = new Array(newLen);
      while (i < at) {
        out[g++] = arr[i++];
      }
    }
    ++i;
    while (i <= newLen) {
      out[g++] = arr[i++];
    }
    if (mutate) {
      out.length = newLen;
    }
    return out;
  };
  var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {
    var len = arr.length;
    if (mutate) {
      var _i = len;
      while (_i >= at) {
        arr[_i--] = arr[_i];
      }
      arr[at] = v;
      return arr;
    }
    var i = 0,
        g = 0;
    var out = new Array(len + 1);
    while (i < at) {
      out[g++] = arr[i++];
    }
    out[at] = v;
    while (i < len) {
      out[++g] = arr[i++];
    }
    return out;
  };
  var LEAF = 1;
  var COLLISION = 2;
  var INDEX = 3;
  var ARRAY = 4;
  var empty = {__hamt_isEmpty: true};
  var isEmptyNode = function isEmptyNode(x) {
    return x === empty || x && x.__hamt_isEmpty;
  };
  var Leaf = function Leaf(edit, hash, key, value) {
    return {
      type: LEAF,
      edit: edit,
      hash: hash,
      key: key,
      value: value,
      _modify: Leaf__modify
    };
  };
  var Collision = function Collision(edit, hash, children) {
    return {
      type: COLLISION,
      edit: edit,
      hash: hash,
      children: children,
      _modify: Collision__modify
    };
  };
  var IndexedNode = function IndexedNode(edit, mask, children) {
    return {
      type: INDEX,
      edit: edit,
      mask: mask,
      children: children,
      _modify: IndexedNode__modify
    };
  };
  var ArrayNode = function ArrayNode(edit, size, children) {
    return {
      type: ARRAY,
      edit: edit,
      size: size,
      children: children,
      _modify: ArrayNode__modify
    };
  };
  var isLeaf = function isLeaf(node) {
    return node === empty || node.type === LEAF || node.type === COLLISION;
  };
  var expand = function expand(edit, frag, child, bitmap, subNodes) {
    var arr = [];
    var bit = bitmap;
    var count = 0;
    for (var i = 0; bit; ++i) {
      if (bit & 1)
        arr[i] = subNodes[count++];
      bit >>>= 1;
    }
    arr[frag] = child;
    return ArrayNode(edit, count + 1, arr);
  };
  var pack = function pack(edit, count, removed, elements) {
    var children = new Array(count - 1);
    var g = 0;
    var bitmap = 0;
    for (var i = 0,
        len = elements.length; i < len; ++i) {
      if (i !== removed) {
        var elem = elements[i];
        if (elem && !isEmptyNode(elem)) {
          children[g++] = elem;
          bitmap |= 1 << i;
        }
      }
    }
    return IndexedNode(edit, bitmap, children);
  };
  var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {
    if (h1 === h2)
      return Collision(edit, h1, [n2, n1]);
    var subH1 = hashFragment(shift, h1);
    var subH2 = hashFragment(shift, h2);
    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
  };
  var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {
    var len = list.length;
    for (var i = 0; i < len; ++i) {
      var child = list[i];
      if (keyEq(k, child.key)) {
        var value = child.value;
        var _newValue = f(value);
        if (_newValue === value)
          return list;
        if (_newValue === nothing) {
          --size.value;
          return arraySpliceOut(mutate, i, list);
        }
        return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);
      }
    }
    var newValue = f();
    if (newValue === nothing)
      return list;
    ++size.value;
    return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);
  };
  var canEditNode = function canEditNode(edit, node) {
    return edit === node.edit;
  };
  var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {
    if (keyEq(k, this.key)) {
      var _v = f(this.value);
      if (_v === this.value)
        return this;
      else if (_v === nothing) {
        --size.value;
        return empty;
      }
      if (canEditNode(edit, this)) {
        this.value = _v;
        return this;
      }
      return Leaf(edit, h, k, _v);
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {
    if (h === this.hash) {
      var canEdit = canEditNode(edit, this);
      var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
      if (list === this.children)
        return this;
      return list.length > 1 ? Collision(edit, this.hash, list) : list[0];
    }
    var v = f();
    if (v === nothing)
      return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
  };
  var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {
    var mask = this.mask;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var bit = toBitmap(frag);
    var indx = fromBitmap(mask, bit);
    var exists = mask & bit;
    var current = exists ? children[indx] : empty;
    var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (current === child)
      return this;
    var canEdit = canEditNode(edit, this);
    var bitmap = mask;
    var newChildren = void 0;
    if (exists && isEmptyNode(child)) {
      bitmap &= ~bit;
      if (!bitmap)
        return empty;
      if (children.length <= 2 && isLeaf(children[indx ^ 1]))
        return children[indx ^ 1];
      newChildren = arraySpliceOut(canEdit, indx, children);
    } else if (!exists && !isEmptyNode(child)) {
      if (children.length >= MAX_INDEX_NODE)
        return expand(edit, frag, child, mask, children);
      bitmap |= bit;
      newChildren = arraySpliceIn(canEdit, indx, child, children);
    } else {
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return IndexedNode(edit, bitmap, newChildren);
  };
  var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {
    var count = this.size;
    var children = this.children;
    var frag = hashFragment(shift, h);
    var child = children[frag];
    var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);
    if (child === newChild)
      return this;
    var canEdit = canEditNode(edit, this);
    var newChildren = void 0;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      --count;
      if (count <= MIN_ARRAY_NODE)
        return pack(edit, count, frag, children);
      newChildren = arrayUpdate(canEdit, frag, empty, children);
    } else {
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return ArrayNode(edit, count, newChildren);
  };
  empty._modify = function(edit, keyEq, shift, f, h, k, size) {
    var v = f();
    if (v === nothing)
      return empty;
    ++size.value;
    return Leaf(edit, h, k, v);
  };
  function Map(editable, edit, config, root, size) {
    this._editable = editable;
    this._edit = edit;
    this._config = config;
    this._root = root;
    this._size = size;
  }
  ;
  Map.prototype.setTree = function(newRoot, newSize) {
    if (this._editable) {
      this._root = newRoot;
      this._size = newSize;
      return this;
    }
    return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);
  };
  var tryGetHash = hamt.tryGetHash = function(alt, hash, key, map) {
    var node = map._root;
    var shift = 0;
    var keyEq = map._config.keyEq;
    while (true) {
      switch (node.type) {
        case LEAF:
          {
            return keyEq(key, node.key) ? node.value : alt;
          }
        case COLLISION:
          {
            if (hash === node.hash) {
              var children = node.children;
              for (var i = 0,
                  len = children.length; i < len; ++i) {
                var child = children[i];
                if (keyEq(key, child.key))
                  return child.value;
              }
            }
            return alt;
          }
        case INDEX:
          {
            var frag = hashFragment(shift, hash);
            var bit = toBitmap(frag);
            if (node.mask & bit) {
              node = node.children[fromBitmap(node.mask, bit)];
              shift += SIZE;
              break;
            }
            return alt;
          }
        case ARRAY:
          {
            node = node.children[hashFragment(shift, hash)];
            if (node) {
              shift += SIZE;
              break;
            }
            return alt;
          }
        default:
          return alt;
      }
    }
  };
  Map.prototype.tryGetHash = function(alt, hash, key) {
    return tryGetHash(alt, hash, key, this);
  };
  var tryGet = hamt.tryGet = function(alt, key, map) {
    return tryGetHash(alt, map._config.hash(key), key, map);
  };
  Map.prototype.tryGet = function(alt, key) {
    return tryGet(alt, key, this);
  };
  var getHash = hamt.getHash = function(hash, key, map) {
    return tryGetHash(undefined, hash, key, map);
  };
  Map.prototype.getHash = function(hash, key) {
    return getHash(hash, key, this);
  };
  var get = hamt.get = function(key, map) {
    return tryGetHash(undefined, map._config.hash(key), key, map);
  };
  Map.prototype.get = function(key, alt) {
    return tryGet(alt, key, this);
  };
  var hasHash = hamt.has = function(hash, key, map) {
    return tryGetHash(nothing, hash, key, map) !== nothing;
  };
  Map.prototype.hasHash = function(hash, key) {
    return hasHash(hash, key, this);
  };
  var has = hamt.has = function(key, map) {
    return hasHash(map._config.hash(key), key, map);
  };
  Map.prototype.has = function(key) {
    return has(key, this);
  };
  var defKeyCompare = function defKeyCompare(x, y) {
    return x === y;
  };
  hamt.make = function(config) {
    return new Map(0, 0, {
      keyEq: config && config.keyEq || defKeyCompare,
      hash: config && config.hash || hash
    }, empty, 0);
  };
  hamt.empty = hamt.make();
  var isEmpty = hamt.isEmpty = function(map) {
    return map && !!isEmptyNode(map._root);
  };
  Map.prototype.isEmpty = function() {
    return isEmpty(this);
  };
  var modifyHash = hamt.modifyHash = function(f, hash, key, map) {
    var size = {value: map._size};
    var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);
    return map.setTree(newRoot, size.value);
  };
  Map.prototype.modifyHash = function(hash, key, f) {
    return modifyHash(f, hash, key, this);
  };
  var modify = hamt.modify = function(f, key, map) {
    return modifyHash(f, map._config.hash(key), key, map);
  };
  Map.prototype.modify = function(key, f) {
    return modify(f, key, this);
  };
  var setHash = hamt.setHash = function(hash, key, value, map) {
    return modifyHash(constant(value), hash, key, map);
  };
  Map.prototype.setHash = function(hash, key, value) {
    return setHash(hash, key, value, this);
  };
  var set = hamt.set = function(key, value, map) {
    return setHash(map._config.hash(key), key, value, map);
  };
  Map.prototype.set = function(key, value) {
    return set(key, value, this);
  };
  var del = constant(nothing);
  var removeHash = hamt.removeHash = function(hash, key, map) {
    return modifyHash(del, hash, key, map);
  };
  Map.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {
    return removeHash(hash, key, this);
  };
  var remove = hamt.remove = function(key, map) {
    return removeHash(map._config.hash(key), key, map);
  };
  Map.prototype.remove = Map.prototype.delete = function(key) {
    return remove(key, this);
  };
  var beginMutation = hamt.beginMutation = function(map) {
    return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
  };
  Map.prototype.beginMutation = function() {
    return beginMutation(this);
  };
  var endMutation = hamt.endMutation = function(map) {
    map._editable = map._editable && map._editable - 1;
    return map;
  };
  Map.prototype.endMutation = function() {
    return endMutation(this);
  };
  var mutate = hamt.mutate = function(f, map) {
    var transient = beginMutation(map);
    f(transient);
    return endMutation(transient);
  };
  Map.prototype.mutate = function(f) {
    return mutate(f, this);
  };
  var appk = function appk(k) {
    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
  };
  var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {
    while (i < len) {
      var child = children[i++];
      if (child && !isEmptyNode(child))
        return lazyVisit(child, f, [len, children, i, f, k]);
    }
    return appk(k);
  };
  var lazyVisit = function lazyVisit(node, f, k) {
    switch (node.type) {
      case LEAF:
        return {
          value: f(node),
          rest: k
        };
      case COLLISION:
      case ARRAY:
      case INDEX:
        var children = node.children;
        return lazyVisitChildren(children.length, children, 0, f, k);
      default:
        return appk(k);
    }
  };
  var DONE = {done: true};
  function MapIterator(v) {
    this.v = v;
  }
  ;
  MapIterator.prototype.next = function() {
    if (!this.v)
      return DONE;
    var v0 = this.v;
    this.v = appk(v0.rest);
    return v0;
  };
  MapIterator.prototype[Symbol.iterator] = function() {
    return this;
  };
  var visit = function visit(map, f) {
    return new MapIterator(lazyVisit(map._root, f));
  };
  var buildPairs = function buildPairs(x) {
    return [x.key, x.value];
  };
  var entries = hamt.entries = function(map) {
    return visit(map, buildPairs);
  };
  Map.prototype.entries = Map.prototype[Symbol.iterator] = function() {
    return entries(this);
  };
  var buildKeys = function buildKeys(x) {
    return x.key;
  };
  var keys = hamt.keys = function(map) {
    return visit(map, buildKeys);
  };
  Map.prototype.keys = function() {
    return keys(this);
  };
  var buildValues = function buildValues(x) {
    return x.value;
  };
  var values = hamt.values = Map.prototype.values = function(map) {
    return visit(map, buildValues);
  };
  Map.prototype.values = function() {
    return values(this);
  };
  var fold = hamt.fold = function(f, z, m) {
    var root = m._root;
    if (root.type === LEAF)
      return f(z, root.value, root.key);
    var toVisit = [root.children];
    var children = void 0;
    while (children = toVisit.pop()) {
      for (var i = 0,
          len = children.length; i < len; ) {
        var child = children[i++];
        if (child && child.type) {
          if (child.type === LEAF)
            z = f(z, child.value, child.key);
          else
            toVisit.push(child.children);
        }
      }
    }
    return z;
  };
  Map.prototype.fold = function(f, z) {
    return fold(f, z, this);
  };
  var forEach = hamt.forEach = function(f, map) {
    return fold(function(_, value, key) {
      return f(value, key, map);
    }, null, map);
  };
  Map.prototype.forEach = function(f) {
    return forEach(f, this);
  };
  var count = hamt.count = function(map) {
    return map._size;
  };
  Map.prototype.count = function() {
    return count(this);
  };
  Object.defineProperty(Map.prototype, 'size', {get: Map.prototype.count});
  ;
  return {get hamt() {
      return hamt;
    }};
})();
var $__runtime_47_core_47_lib_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/lib.js";
  ;
  function argumentsToArray(args) {
    return Array.prototype.slice.call(args, 0);
  }
  function argumentsSlice(a, i) {
    return [].slice.call(a, i);
  }
  function attachReadOnlyProperty(o, k, v) {
    return Object.defineProperty(o, k, {
      value: v,
      writable: false,
      configurable: false
    });
  }
  function internedMake(f) {
    var cache = new Map();
    return function(v) {
      v = v.toString();
      var result = cache.get(v);
      if (result === undefined) {
        result = f(v);
        cache.set(v, result);
      }
      return result;
    };
  }
  return {
    get hamt() {
      return $__runtime_47_third_45_party_47_hamt_46_js__.hamt;
    },
    get argumentsToArray() {
      return argumentsToArray;
    },
    get argumentsSlice() {
      return argumentsSlice;
    },
    get attachReadOnlyProperty() {
      return attachReadOnlyProperty;
    },
    get internedMake() {
      return internedMake;
    }
  };
})();
var $__runtime_47_core_47_procedure_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/procedure.js";
  function attachProcedureArity(fn, arity) {
    fn.__rjs_arityValue = arity || fn.length;
    return fn;
  }
  function check(v) {
    return typeof v === 'function';
  }
  function toString(f) {
    return f.name ? ("#<procedure:" + f.name + ">") : '#<procedure>';
  }
  function displayNativeString(out, f) {
    out.consume(toString(f));
  }
  return {
    get attachProcedureArity() {
      return attachProcedureArity;
    },
    get check() {
      return check;
    },
    get toString() {
      return toString;
    },
    get displayNativeString() {
      return displayNativeString;
    }
  };
})();
var $__runtime_47_core_47_print_95_native_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_native_string.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  function displayNativeString(out, v) {
    if (v === true) {
      out.consume('#t');
    } else if (v === false) {
      out.consume('#f');
    } else if (v === undefined || v === null) {
      out.consume('#<void>');
    } else if (Primitive.check(v)) {
      v.displayNativeString(out);
    } else if (Bytes.check(v)) {
      Bytes.displayNativeString(out, v);
    } else if (Procedure.check(v)) {
      Procedure.displayNativeString(out, v);
    } else {
      out.consume(v.toString());
    }
  }
  function writeNativeString(out, v) {
    if (Primitive.check(v)) {
      v.writeNativeString(out);
    } else {
      displayNativeString(out, v);
    }
  }
  function printNativeString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printNativeString(out);
    } else {
      writeNativeString(out, v);
    }
  }
  return {
    get displayNativeString() {
      return displayNativeString;
    },
    get writeNativeString() {
      return writeNativeString;
    },
    get printNativeString() {
      return printNativeString;
    }
  };
})();
var $__runtime_47_core_47_errors_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/errors.js";
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var printNativeString = ($__runtime_47_core_47_print_95_native_95_string_46_js__).printNativeString;
  function printError(out, msg, args) {
    out.consume(msg);
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (args)[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var arg = $__2.value;
        {
          out.consume(' ');
          if (typeof arg === 'string') {
            out.consume(arg);
          } else {
            printNativeString(out, arg, true, 0);
          }
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
  }
  function makeError(name) {
    var $__0 = this;
    var e = function(msg) {
      for (var args = [],
          $__8 = 1; $__8 < arguments.length; $__8++)
        args[$__8 - 1] = arguments[$__8];
      this.name = name;
      var stringOut = new MiniNativeOutputStringPort();
      printError(stringOut, msg, args);
      this.message = stringOut.getOutputString();
      this.stack = (new Error()).stack;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }
    };
    e.prototype = Object.create(Error.prototype);
    e.prototype.constructor = e;
    return function() {
      for (var args = [],
          $__9 = 0; $__9 < arguments.length; $__9++)
        args[$__9] = arguments[$__9];
      return new (Function.prototype.bind.apply(e, [$__0].concat(args)))();
    };
  }
  var racketCoreError = makeError('RacketCoreError');
  var racketContractError = makeError('RacketContractError');
  return {
    get racketCoreError() {
      return racketCoreError;
    },
    get racketContractError() {
      return racketContractError;
    }
  };
})();
var $__runtime_47_core_47_unicode_95_string_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/unicode_string.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  var hashIntArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashIntArray;
  var TextEncoder = (typeof window === 'undefined') ? require('util').TextEncoder : window.TextEncoder;
  var UString = function($__super) {
    function UString(chars, nativeString) {
      $traceurRuntime.superConstructor(UString).call(this);
      this.chars = chars;
      this._nativeString = nativeString;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(UString, {
      get length() {
        return this.chars.length;
      },
      toString: function() {
        if (this._nativeString === null) {
          this._nativeString = this.chars.join('');
        }
        return this._nativeString;
      },
      charAt: function(i) {
        this.checkIndexLtLength(i);
        return this.chars[i];
      },
      toLowerCase: function() {
        return makeMutable(this.toString().toLowerCase());
      },
      toUpperCase: function() {
        return makeMutable(this.toString().toUpperCase());
      },
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), null);
      },
      split: function(sep) {
        return this.toString().split(sep).map(function(s) {
          return makeMutable(s);
        });
      },
      checkIndexLtLength: function(i) {
        if (i >= this.length) {
          if (this.length > 0) {
            throw racketContractError(("string-ref: index is out of range\n  index: " + i + "\n  valid range: [0, " + (this.length - 1) + "]\n  string: "), this);
          } else {
            throw racketContractError(("string-ref: index is out of range for empty string\n  index: " + i));
          }
        }
      },
      valueOf: function() {
        return this.toString();
      },
      equals: function(v) {
        return check(v) && this.toString() === v.toString();
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = hashIntArray(this.chars);
        }
        return this._cachedHashCode;
      },
      displayNativeString: function(out) {
        out.consume(this.toString());
      },
      displayUString: function(out) {
        out.consume(this);
      },
      writeNativeString: function(out) {
        out.consume('"');
        var $__7 = true;
        var $__8 = false;
        var $__9 = undefined;
        try {
          for (var $__5 = void 0,
              $__4 = (this.chars)[Symbol.iterator](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
            var char = $__5.value;
            {
              var c = char.codepoint;
              switch (c) {
                case 7:
                  out.consume('\\a');
                  break;
                case 8:
                  out.consume('\\b');
                  break;
                case 9:
                  out.consume('\\t');
                  break;
                case 11:
                  out.consume('\\v');
                  break;
                case 12:
                  out.consume('\\f');
                  break;
                case 10:
                  out.consume('\\n');
                  break;
                case 13:
                  out.consume('\\r');
                  break;
                case 27:
                  out.consume('\\e');
                  break;
                case 34:
                  out.consume('\\"');
                  break;
                case 92:
                  out.consume('\\\\');
                  break;
                default:
                  if (Char.isGraphicCodepoint(c) || Char.isBlankCodepoint(c)) {
                    out.consume(char.toString());
                  } else {
                    out.consume(c > 0xFFFF ? ("\\U" + c.toString(16).toUpperCase().padStart(8, '0')) : ("\\u" + c.toString(16).toUpperCase().padStart(4, '0')));
                  }
              }
            }
          }
        } catch ($__10) {
          $__8 = true;
          $__9 = $__10;
        } finally {
          try {
            if (!$__7 && $__4.return != null) {
              $__4.return();
            }
          } finally {
            if ($__8) {
              throw $__9;
            }
          }
        }
        out.consume('"');
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      printUString: function(out) {
        this.writeUString(out);
      }
    }, {}, $__super);
  }(Primitive);
  var ImmutableUString = function($__super) {
    function ImmutableUString() {
      $traceurRuntime.superConstructor(ImmutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableUString, {isImmutable: function() {
        return true;
      }}, {}, $__super);
  }(UString);
  var ImmutableBMPString = function($__super) {
    function ImmutableBMPString() {
      $traceurRuntime.superConstructor(ImmutableBMPString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(ImmutableBMPString, {
      substring: function(start, end) {
        return new MutableUString(this.chars.slice(start, end), this.toString().substring(start, end));
      },
      writeNativeString: function(out) {
        out.consume(JSON.stringify(this.toString()));
      }
    }, {}, $__super);
  }(ImmutableUString);
  var MutableUString = function($__super) {
    function MutableUString() {
      $traceurRuntime.superConstructor(MutableUString).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(MutableUString, {
      isImmutable: function() {
        return false;
      },
      setCharAt: function(i, char) {
        this.checkIndexLtLength(i);
        if (!Char.eq(char, this.chars[i])) {
          this.chars[i] = char;
          this._nativeString = null;
          this._cachedHashCode = null;
        }
      }
    }, {}, $__super);
  }(UString);
  function nativeStringToChars(nativeString) {
    return Array.from(nativeString, Char.charFromNativeString);
  }
  var makeInternedImmutable = internedMake(function(nativeString) {
    return makeImmutable(nativeString);
  });
  function makeImmutable(nativeString) {
    return makeImmutableFromCharsAndNativeString(nativeStringToChars(nativeString), nativeString);
  }
  function makeImmutableFromCharsAndNativeString(chars, nativeString) {
    return chars.length === nativeString.length ? new ImmutableBMPString(chars, nativeString) : new ImmutableUString(chars, nativeString);
  }
  function makeMutable(nativeString) {
    return new MutableUString(nativeStringToChars(nativeString), nativeString);
  }
  function makeMutableFromChars(chars) {
    return new MutableUString(chars, null);
  }
  function copyAsMutable(str) {
    return new MutableUString(str.chars, str._nativeString);
  }
  function makeMutableFromCharsVarArgs() {
    for (var chars = [],
        $__11 = 0; $__11 < arguments.length; $__11++)
      chars[$__11] = arguments[$__11];
    return makeMutableFromChars(chars);
  }
  function stringToImmutableString(v) {
    return v instanceof ImmutableUString ? v : makeImmutableFromCharsAndNativeString(v.chars, v.toString());
  }
  function check(v) {
    return v instanceof UString;
  }
  function eq(a, b) {
    return a.toString() === b.toString();
  }
  function lt(a, b) {
    if (a.length < b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] < b.chars[i];
      }
    }
    return false;
  }
  function gt(a, b) {
    if (a.length > b.length) {
      return true;
    }
    var n = a.length;
    for (var i = 0; i < n; i++) {
      if (!Char.eq(a.chars[i], b.chars[i])) {
        return a.chars[i] > b.chars[i];
      }
    }
    return false;
  }
  function lte(a, b) {
    return !gt(a, b);
  }
  function gte(a, b) {
    return !lt(a, b);
  }
  function repeatChar(k, c) {
    var chars = new Array(k);
    chars.fill(c.toString());
    return new MutableUString(chars, null);
  }
  var utf8Encoder = new TextEncoder();
  function toBytesUtf8(str) {
    return utf8Encoder.encode(str.toString());
  }
  function fromBytesUtf8(bytes) {
    return makeMutable(Bytes.toString(bytes));
  }
  function stringAppend() {
    var $__13;
    for (var strs = [],
        $__12 = 0; $__12 < arguments.length; $__12++)
      strs[$__12] = arguments[$__12];
    return makeMutableFromChars(($__13 = []).concat.apply($__13, $traceurRuntime.spread(strs.map(function(s) {
      return s.chars;
    }))));
  }
  Char.Char.prototype.displayUString = function(out) {
    out.consume(new MutableUString([this], this._nativeString));
  };
  Char.Char.prototype.writeUString = function(out) {
    var stringOut = new MiniNativeOutputStringPort();
    this.writeNativeString(stringOut);
    out.consume(makeMutable(stringOut.getOutputString()));
  };
  return {
    get UString() {
      return UString;
    },
    get makeInternedImmutable() {
      return makeInternedImmutable;
    },
    get makeImmutable() {
      return makeImmutable;
    },
    get makeMutable() {
      return makeMutable;
    },
    get makeMutableFromChars() {
      return makeMutableFromChars;
    },
    get copyAsMutable() {
      return copyAsMutable;
    },
    get makeMutableFromCharsVarArgs() {
      return makeMutableFromCharsVarArgs;
    },
    get stringToImmutableString() {
      return stringToImmutableString;
    },
    get check() {
      return check;
    },
    get eq() {
      return eq;
    },
    get lt() {
      return lt;
    },
    get gt() {
      return gt;
    },
    get lte() {
      return lte;
    },
    get gte() {
      return gte;
    },
    get repeatChar() {
      return repeatChar;
    },
    get toBytesUtf8() {
      return toBytesUtf8;
    },
    get fromBytesUtf8() {
      return fromBytesUtf8;
    },
    get stringAppend() {
      return stringAppend;
    }
  };
})();
var $__runtime_47_core_47_printable_95_primitive_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printable_primitive.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var MiniNativeOutputStringPort = ($__runtime_47_core_47_mini_95_native_95_output_95_string_95_port_46_js__).MiniNativeOutputStringPort;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var PRINT_PREFIX_USTRING = UString.makeInternedImmutable("'");
  var PrintablePrimitive = function($__super) {
    function PrintablePrimitive() {
      $traceurRuntime.superConstructor(PrintablePrimitive).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(PrintablePrimitive, {
      displayUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.displayNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      writeNativeString: function(out) {
        this.displayNativeString(out);
      },
      writeUString: function(out) {
        var stringOut = new MiniNativeOutputStringPort();
        this.writeNativeString(stringOut);
        out.consume(UString.makeMutable(stringOut.getOutputString()));
      },
      printNativeString: function(out) {
        out.consume("'");
        this.writeNativeString(out);
      },
      printUString: function(out) {
        out.consume(PRINT_PREFIX_USTRING);
        this.writeUString(out);
      },
      toString: function() {
        var out = new MiniNativeOutputStringPort();
        this.displayNativeString(out);
        return out.getOutputString();
      }
    }, {}, $__super);
  }(Primitive);
  return {get PrintablePrimitive() {
      return PrintablePrimitive;
    }};
})();
var $__runtime_47_core_47_equality_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/equality.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function isEq(v1, v2) {
    return v1 === v2;
  }
  function isEqv(v1, v2) {
    return v1 === v2 || Char.check(v1) && Char.check(v2) && Char.eq(v1, v2);
  }
  function isEqual(v1, v2) {
    if (v1 === v2)
      return true;
    if (Primitive.check(v1))
      return v1.equals(v2);
    if (Bytes.check(v1) && Bytes.check(v2))
      return Bytes.eq(v1, v2);
    return false;
  }
  return {
    get isEq() {
      return isEq;
    },
    get isEqv() {
      return isEqv;
    },
    get isEqual() {
      return isEqual;
    }
  };
})();
var $__runtime_47_core_47_hashing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hashing.js";
  var hash = ($__runtime_47_core_47_raw_95_hashing_46_js__).hash;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  function hashForEq(o) {
    return hash(o);
  }
  function hashForEqv(o) {
    if (Char.check(o))
      return o.codepoint;
    return hash(o);
  }
  function hashForEqual(o) {
    if (Primitive.check(o))
      return o.hashForEqual();
    if (Bytes.check(o))
      return Bytes.hashForEqual(o);
    return hash(o);
  }
  return {
    get hashForEq() {
      return hashForEq;
    },
    get hashForEqv() {
      return hashForEqv;
    },
    get hashForEqual() {
      return hashForEqual;
    }
  };
})();
var $__runtime_47_core_47_print_95_ustring_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/print_ustring.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Procedure = $__runtime_47_core_47_procedure_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var TRUE_USTRING = UString.makeInternedImmutable('#t');
  var FALSE_USTRING = UString.makeInternedImmutable('#f');
  var VOID_USTRING = UString.makeInternedImmutable('#<void>');
  function displayUString(out, v) {
    if (v === true) {
      out.consume(TRUE_USTRING);
    } else if (v === false) {
      out.consume(FALSE_USTRING);
    } else if (v === undefined || v === null) {
      out.consume(VOID_USTRING);
    } else if (typeof v === 'number' || typeof v === 'string') {
      out.consume(UString.makeMutable(v.toString()));
    } else if (Primitive.check(v)) {
      v.displayUString(out);
    } else if (Bytes.check(v)) {
      out.consume(UString.makeMutable(Bytes.toString(v)));
    } else if (Procedure.check(v)) {
      out.consume(UString.makeMutable(Procedure.toString(v)));
    } else {
      out.consume(UString.makeMutable(v.toString()));
    }
  }
  function writeUString(out, v) {
    if (Primitive.check(v)) {
      v.writeUString(out);
    } else {
      displayUString(out, v);
    }
  }
  function printUString(out, v, printAsExpression, quoteDepth) {
    if (printAsExpression && quoteDepth !== 1 && Primitive.check(v)) {
      v.printUString(out);
    } else {
      writeUString(out, v);
    }
  }
  return {
    get displayUString() {
      return displayUString;
    },
    get writeUString() {
      return writeUString;
    },
    get printUString() {
      return printUString;
    }
  };
})();
var $__runtime_47_core_47_box_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/box.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var $__5 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__5.displayUString,
      writeUString = $__5.writeUString;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var BOX_PREFIX_USTRING = UString.makeInternedImmutable('#&');
  var Box = function($__super) {
    function Box(v) {
      $traceurRuntime.superConstructor(Box).call(this);
      this.value = v;
    }
    return ($traceurRuntime.createClass)(Box, {
      set: function(v) {
        this.value = v;
      },
      get: function() {
        return this.value;
      },
      equals: function(v) {
        return isEqual(v.value, this.value);
      },
      hashForEqual: function() {
        return hashForEqual(this.value);
      },
      displayNativeString: function(out) {
        out.consume('#&');
        displayNativeString(out, this.value);
      },
      displayUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        displayUString(out, this.value);
      },
      writeNativeString: function(out) {
        out.consume('#&');
        writeNativeString(out, this.value);
      },
      writeUString: function(out) {
        out.consume(BOX_PREFIX_USTRING);
        writeUString(out, this.value);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(v) {
    return new Box(v);
  }
  function check(v) {
    return (v instanceof Box);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_pair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/pair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__4 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__4.displayNativeString,
      writeNativeString = $__4.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var Empty = function($__super) {
    function Empty() {
      $traceurRuntime.superConstructor(Empty).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Empty, {
      equals: function(v) {
        return this === v;
      },
      get length() {
        return 0;
      },
      displayNativeString: function(out) {
        out.consume('()');
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var EMPTY = new Empty();
  function isEmpty(v) {
    return v === EMPTY;
  }
  var Pair = function($__super) {
    function Pair(hd, tl) {
      $traceurRuntime.superConstructor(Pair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Pair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Pair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === Pair;
  }
  function make(hd, tl) {
    return new Pair(hd, tl);
  }
  function makeList() {
    for (var items = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      items[$__2] = arguments[$__2];
    return items.reduceRight(function(result, item) {
      return make(item, result);
    }, EMPTY);
  }
  function listToArray(lst) {
    var r = [];
    listForEach(lst, function(x) {
      return r.push(x);
    });
    return r;
  }
  function listFromArray(lst) {
    return makeList.apply((void 0), $traceurRuntime.spread(lst));
  }
  function listForEach(lst, fn) {
    while (!isEmpty(lst)) {
      fn(lst.hd);
      lst = lst.tl;
    }
  }
  function listFind(lst, fn) {
    while (!isEmpty(lst)) {
      var result = fn(lst.hd);
      if (result !== false) {
        return result;
      }
      lst = lst.tl;
    }
    return false;
  }
  function listMap(lst, fn) {
    var result = [];
    var mapper = function(x) {
      return result.push(result, fn(x));
    };
    listForEach(lst, mapper);
    return listFromArray(result);
  }
  function isList(v) {
    return v === EMPTY || (check(v) && v._listLength !== -1);
  }
  return {
    get EMPTY() {
      return EMPTY;
    },
    get isEmpty() {
      return isEmpty;
    },
    get Pair() {
      return Pair;
    },
    get check() {
      return check;
    },
    get make() {
      return make;
    },
    get makeList() {
      return makeList;
    },
    get listToArray() {
      return listToArray;
    },
    get listFromArray() {
      return listFromArray;
    },
    get listForEach() {
      return listForEach;
    },
    get listFind() {
      return listFind;
    },
    get listMap() {
      return listMap;
    },
    get isList() {
      return isList;
    }
  };
})();
var $__runtime_47_core_47_regexp_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/regexp.js";
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var racketContractError = ($__runtime_47_core_47_errors_46_js__).racketContractError;
  function check(v) {
    return v instanceof RegExp;
  }
  function fromString(str) {
    return new RegExp(str.toString());
  }
  function match(pattern, input) {
    var isRegexpPattern = check(pattern);
    var isBytesPattern = !isRegexpPattern && Bytes.check(pattern);
    var isStringPattern = !isRegexpPattern && !isBytesPattern && UString.check(pattern);
    var isBytesInput = Bytes.check(input);
    var isStringInput = !isBytesInput && UString.check(input);
    if (!(isRegexpPattern || isBytesPattern || isStringPattern) || !(isBytesInput || isStringInput)) {
      throw racketContractError('expected regexp, string or byte pat, ' + 'and string or byte input, got pattern:', pattern, ', input:', input);
    }
    var stringInput = isBytesInput ? UString.fromBytesUtf8((input)) : input;
    var stringOrRegExpPattern = isBytesPattern ? UString.fromBytesUtf8((pattern)) : pattern;
    var result = stringInput.toString().match(stringOrRegExpPattern);
    if (result === null) {
      return false;
    }
    if ((isStringPattern || isRegexpPattern) && isStringInput) {
      return Pair.listFromArray(result.map(function(x) {
        return (x !== undefined ? UString.makeMutable(x) : false);
      }));
    }
    return Pair.listFromArray(result.map(function(x) {
      return (x !== undefined ? UString.toBytesUtf8(x) : false);
    }));
  }
  return {
    get check() {
      return check;
    },
    get fromString() {
      return fromString;
    },
    get match() {
      return match;
    }
  };
})();
var $__runtime_47_core_47_hash_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/hash.js";
  var $ = $__runtime_47_core_47_lib_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__13 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__13.displayNativeString,
      writeNativeString = $__13.writeNativeString;
  var $__14 = $__runtime_47_core_47_equality_46_js__,
      isEqual = $__14.isEqual,
      isEqv = $__14.isEqv,
      isEq = $__14.isEq;
  var $__15 = $__runtime_47_core_47_hashing_46_js__,
      hashForEqual = $__15.hashForEqual,
      hashForEqv = $__15.hashForEqv,
      hashForEq = $__15.hashForEq;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var hashConfigs = {
    eq: {
      hash: hashForEq,
      keyEq: isEq
    },
    eqv: {
      hash: hashForEqv,
      keyEq: isEqv
    },
    equal: {
      hash: hashForEqual,
      keyEq: isEqual
    }
  };
  var Hash = function($__super) {
    function Hash(hash, type, mutable) {
      $traceurRuntime.superConstructor(Hash).call(this);
      this._h = hash;
      this._mutable = mutable;
      this._type = type;
    }
    return ($traceurRuntime.createClass)(Hash, {
      writeToPort: function(out, itemFn) {
        var $__10,
            $__11;
        out.consume('#hash');
        if (this._type === 'eq' || this._type === 'eqv') {
          out.consume(this._type);
        }
        out.consume('(');
        var n = this._h.size;
        var i = 0;
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              out.consume('(');
              itemFn(out, k);
              out.consume(' . ');
              itemFn(out, v);
              out.consume(')');
              if (++i !== n)
                out.consume(' ');
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      toRawString: function() {
        return ("'" + this.toString());
      },
      isImmutable: function() {
        return !this._mutable;
      },
      ref: function(k, fail) {
        var result = this._h.get(k);
        if (result !== undefined) {
          return result;
        } else if (fail !== undefined) {
          return fail;
        }
        throw racketCoreError('hash-ref: no value found for key\n  key:', k);
      },
      set: function(k, v) {
        var newH = this._h.set(k, v);
        if (this._mutable) {
          this._h = newH;
        } else {
          return new Hash(newH, this._type, false);
        }
      },
      size: function() {
        return this._h.size;
      },
      equals: function(v) {
        var $__10,
            $__11;
        if (!check(v)) {
          return false;
        }
        if (this._h.size !== v._h.size || this._type !== v._type || this._mutable !== v._mutable) {
          return false;
        }
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (this._h)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__9 = $__3.value,
                key = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
                val = ($__11 = $__10.next()).done ? void 0 : $__11.value;
            {
              var vv = v._h.get(key);
              if (vv === undefined || !isEqual(val, vv)) {
                return false;
              }
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        return true;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, type, mutable) {
    var h = items.reduce(function(acc, item) {
      var $__10,
          $__11;
      var $__9 = item,
          k = ($__10 = $__9[Symbol.iterator](), ($__11 = $__10.next()).done ? void 0 : $__11.value),
          v = ($__11 = $__10.next()).done ? void 0 : $__11.value;
      return acc.set(k, v);
    }, $.hamt.make(hashConfigs[type]));
    return new Hash(h, type, mutable);
  }
  function makeEq(items, mutable) {
    return make(items, 'eq', mutable);
  }
  function makeEqv(items, mutable) {
    return make(items, 'eqv', mutable);
  }
  function makeEqual(items, mutable) {
    return make(items, 'equal', mutable);
  }
  function makeFromAssocs(assocs, type, mutable) {
    var items = [];
    Pair.listForEach(assocs, function(item) {
      items.push([item.hd, item.tl]);
    });
    return make(items, type, mutable);
  }
  function makeEqFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eq', mutable);
  }
  function makeEqvFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'eqv', mutable);
  }
  function makeEqualFromAssocs(assocs, mutable) {
    return makeFromAssocs(assocs, 'equal', mutable);
  }
  function map(hash, proc) {
    var result = Pair.EMPTY;
    hash._h.forEach(function(value, key) {
      result = Pair.make(proc(key, value), result);
    });
    return result;
  }
  function check(v1) {
    return (v1 instanceof Hash);
  }
  function isEqualHash(h) {
    return check(h) && h._type === 'equal';
  }
  function isEqvHash(h) {
    return check(h) && h._type === 'eqv';
  }
  function isEqHash(h) {
    return check(h) && h._type === 'eq';
  }
  return {
    get makeEq() {
      return makeEq;
    },
    get makeEqv() {
      return makeEqv;
    },
    get makeEqual() {
      return makeEqual;
    },
    get makeEqFromAssocs() {
      return makeEqFromAssocs;
    },
    get makeEqvFromAssocs() {
      return makeEqvFromAssocs;
    },
    get makeEqualFromAssocs() {
      return makeEqualFromAssocs;
    },
    get map() {
      return map;
    },
    get check() {
      return check;
    },
    get isEqualHash() {
      return isEqualHash;
    },
    get isEqvHash() {
      return isEqvHash;
    },
    get isEqHash() {
      return isEqHash;
    }
  };
})();
var $__runtime_47_core_47_keyword_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/keyword.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Keyword = function($__super) {
    function Keyword(v) {
      $traceurRuntime.superConstructor(Keyword).call(this);
      this.v = v;
    }
    return ($traceurRuntime.createClass)(Keyword, {
      displayNativeString: function(out) {
        out.consume('#:');
        out.consume(this.v);
      },
      equals: function(v) {
        return check(v) && this.v === v.v;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Keyword(v);
  });
  function check(v) {
    return (v instanceof Keyword);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_numbers_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/numbers.js";
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  function add() {
    for (var operands = [],
        $__0 = 0; $__0 < arguments.length; $__0++)
      operands[$__0] = arguments[$__0];
    return [].reduce.call(operands, function(a, b) {
      return a + b;
    }, 0);
  }
  function sub() {
    for (var operands = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      operands[$__1] = arguments[$__1];
    if (operands.length === 1) {
      return -operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result -= operands[i];
    }
    return result;
  }
  function mul() {
    for (var operands = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      operands[$__2] = arguments[$__2];
    return [].reduce.call(operands, function(a, b) {
      return a * b;
    }, 1);
  }
  function div() {
    for (var operands = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      operands[$__3] = arguments[$__3];
    if (operands.length === 1) {
      return 1 / operands[0];
    }
    var result = operands[0];
    for (var i = 1; i < operands.length; ++i) {
      result /= operands[i];
    }
    return result;
  }
  function compare(cmp, operands) {
    if (operands.length < 2) {
      throw racketCoreError.apply((void 0), $traceurRuntime.spread(['compare: at least 2 arguments required, given'], operands));
    }
    for (var i = 1; i < operands.length; i++) {
      if (!cmp(operands[i - 1], operands[i])) {
        return false;
      }
    }
    return true;
  }
  function lt() {
    for (var operands = [],
        $__4 = 0; $__4 < arguments.length; $__4++)
      operands[$__4] = arguments[$__4];
    return compare(function(a, b) {
      return a < b;
    }, operands);
  }
  function lte() {
    for (var operands = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      operands[$__5] = arguments[$__5];
    return compare(function(a, b) {
      return a <= b;
    }, operands);
  }
  function gt() {
    for (var operands = [],
        $__6 = 0; $__6 < arguments.length; $__6++)
      operands[$__6] = arguments[$__6];
    return compare(function(a, b) {
      return a > b;
    }, operands);
  }
  function gte() {
    for (var operands = [],
        $__7 = 0; $__7 < arguments.length; $__7++)
      operands[$__7] = arguments[$__7];
    return compare(function(a, b) {
      return a >= b;
    }, operands);
  }
  function equals() {
    for (var operands = [],
        $__8 = 0; $__8 < arguments.length; $__8++)
      operands[$__8] = arguments[$__8];
    return compare(function(a, b) {
      return a === b;
    }, operands);
  }
  function check(v) {
    return typeof v === 'number';
  }
  return {
    get add() {
      return add;
    },
    get sub() {
      return sub;
    },
    get mul() {
      return mul;
    },
    get div() {
      return div;
    },
    get compare() {
      return compare;
    },
    get lt() {
      return lt;
    },
    get lte() {
      return lte;
    },
    get gt() {
      return gt;
    },
    get gte() {
      return gte;
    },
    get equals() {
      return equals;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_ports_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/ports.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Port = function($__super) {
    function Port() {
      $traceurRuntime.superConstructor(Port).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(Port, {
      isOutputPort: function() {
        return false;
      },
      isInputPort: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var OutputPort = function($__super) {
    function OutputPort() {
      $traceurRuntime.superConstructor(OutputPort).apply(this, arguments);
    }
    return ($traceurRuntime.createClass)(OutputPort, {
      isOutputPort: function() {
        return true;
      },
      displayNativeString: function(out) {
        out.consume(("#<output-port:" + this.name + ">"));
      }
    }, {}, $__super);
  }(Port);
  function check(v) {
    return v instanceof Port;
  }
  function isInputPort(v) {
    return check(v) && v.isInputPort();
  }
  function isOutputPort(v) {
    return check(v) && v.isOutputPort();
  }
  var NewlineFlushingOutputPort = function($__super) {
    function NewlineFlushingOutputPort(consumeFn, name) {
      $traceurRuntime.superConstructor(NewlineFlushingOutputPort).call(this);
      this._buffer = [];
      this._consumeFn = consumeFn;
      this.name = name;
    }
    return ($traceurRuntime.createClass)(NewlineFlushingOutputPort, {
      consume: function(nativeString) {
        var lastNewlineIndex = nativeString.lastIndexOf('\n');
        if (lastNewlineIndex >= 0) {
          this._buffer.push(nativeString.slice(0, lastNewlineIndex));
          this._consumeFn(this._buffer.join(''));
          var restChars = nativeString.slice(lastNewlineIndex + 1);
          this._buffer = [];
          if (restChars !== '') {
            this._buffer.push(restChars);
          }
        } else {
          this._buffer.push(nativeString);
        }
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var standardOutputPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stdout');
  var standardErrorPort = new NewlineFlushingOutputPort(function(str) {
    return console.log(str);
  }, 'stderr');
  var NativeOutputStringPort = function($__super) {
    function NativeOutputStringPort() {
      $traceurRuntime.superConstructor(NativeOutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(NativeOutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return '';
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = '').concat.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return this._buffer[0];
      },
      get name() {
        return 'js-string';
      },
      isUStringPort: function() {
        return false;
      }
    }, {}, $__super);
  }(OutputPort);
  var OutputStringPort = function($__super) {
    function OutputStringPort() {
      $traceurRuntime.superConstructor(OutputStringPort).call(this);
      this._buffer = [];
    }
    return ($traceurRuntime.createClass)(OutputStringPort, {
      consume: function(s) {
        this._buffer.push(s);
      },
      getOutputString: function() {
        var $__5;
        if (this._buffer.length === 0) {
          return UString.makeMutable('');
        }
        if (this._buffer.length > 1) {
          this._buffer = [($__5 = UString).stringAppend.apply($__5, $traceurRuntime.spread(this._buffer))];
        }
        return UString.copyAsMutable(this._buffer[0]);
      },
      get name() {
        return 'string';
      },
      isUStringPort: function() {
        return true;
      }
    }, {}, $__super);
  }(OutputPort);
  function openOutputString() {
    return new OutputStringPort();
  }
  function getOutputString(outputStringPort) {
    return outputStringPort.getOutputString();
  }
  return {
    get check() {
      return check;
    },
    get isInputPort() {
      return isInputPort;
    },
    get isOutputPort() {
      return isOutputPort;
    },
    get standardOutputPort() {
      return standardOutputPort;
    },
    get standardErrorPort() {
      return standardErrorPort;
    },
    get NativeOutputStringPort() {
      return NativeOutputStringPort;
    },
    get openOutputString() {
      return openOutputString;
    },
    get getOutputString() {
      return getOutputString;
    }
  };
})();
var $__runtime_47_core_47_check_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/check.js";
  function raise(exp) {
    for (var args = [],
        $__0 = 1; $__0 < arguments.length; $__0++)
      args[$__0 - 1] = arguments[$__0];
    throw exp.apply(this, args);
  }
  function truthy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val !== true) {
      raise(exp, msg);
    }
    return true;
  }
  function falsy(val, exp) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    return truthy(val === false, exp, msg);
  }
  function type(val, type) {
    var msg = arguments[2] !== (void 0) ? arguments[2] : '';
    if (val instanceof type) {
      return true;
    }
    raise(TypeError, (msg + "(" + val + " : " + $traceurRuntime.typeof((val)) + " != " + type.name + ")"));
  }
  function eq(val1, val2, exp, msg) {
    if (val1 !== val2) {
      raise(exp, msg);
    }
    return true;
  }
  return {
    get raise() {
      return raise;
    },
    get truthy() {
      return truthy;
    },
    get falsy() {
      return falsy;
    },
    get type() {
      return type;
    },
    get eq() {
      return eq;
    }
  };
})();
var $__runtime_47_core_47_values_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/values.js";
  var Primitive = ($__runtime_47_core_47_primitive_46_js__).Primitive;
  var Values = function($__super) {
    function Values(vals) {
      $traceurRuntime.superConstructor(Values).call(this);
      this.v = vals;
    }
    return ($traceurRuntime.createClass)(Values, {
      getAt: function(i) {
        return this.v[i];
      },
      getAll: function() {
        return this.v;
      }
    }, {}, $__super);
  }(Primitive);
  function make(vals) {
    return new Values(vals);
  }
  function check(v) {
    return (v instanceof Values);
  }
  return {
    get make() {
      return make;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_struct_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/struct.js";
  var C = $__runtime_47_core_47_check_46_js__;
  var $ = $__runtime_47_core_47_lib_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__15 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__15.displayNativeString,
      writeNativeString = $__15.writeNativeString,
      printNativeString = $__15.printNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Struct = function($__super) {
    function Struct(desc, fields) {
      var callerName = arguments[2] !== (void 0) ? arguments[2] : false;
      $traceurRuntime.superConstructor(Struct).call(this);
      this._desc = desc;
      C.eq(fields.length, this._desc._totalInitFields, racketCoreError, 'arity mismatch');
      var guardLambda = this._desc._options.guard;
      var finalCallerName = callerName || this._desc._options.constructorName || this._desc._options.name;
      if (guardLambda) {
        var guardFields = fields.concat(finalCallerName);
        fields = guardLambda.apply((void 0), $traceurRuntime.spread(guardFields)).getAll();
      }
      this._superStructInstance = false;
      var superType = this._desc.getSuperType();
      if (superType !== false) {
        var superInitFields = fields.slice(0, superType._totalInitFields);
        this._fields = fields.slice(superType._totalInitFields);
        this._superStructInstance = superType.getStructConstructor(finalCallerName).apply((void 0), $traceurRuntime.spread(superInitFields));
      } else {
        this._fields = fields;
      }
      var autoV = this._desc._options.autoV;
      for (var i = 0; i < this._desc._options.autoFieldCount; i++) {
        this._fields.push(autoV);
      }
    }
    return ($traceurRuntime.createClass)(Struct, {
      writeToPort: function(out, itemFn) {
        if (this._desc._options.inspector) {
          out.consume('#<');
          out.consume(this._desc.getName());
          out.consume('>');
        } else {
          out.consume('#(struct:');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                itemFn(out, field);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      printNativeString: function(out) {
        if (this._desc._options.inspector) {
          this.writeNativeString(out);
        } else {
          out.consume('(');
          out.consume(this._desc.getName());
          var $__8 = true;
          var $__9 = false;
          var $__10 = undefined;
          try {
            for (var $__6 = void 0,
                $__5 = (this._fields)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
              var field = $__6.value;
              {
                out.consume(' ');
                printNativeString(out, field, true, 0);
              }
            }
          } catch ($__11) {
            $__9 = true;
            $__10 = $__11;
          } finally {
            try {
              if (!$__8 && $__5.return != null) {
                $__5.return();
              }
            } finally {
              if ($__9) {
                throw $__10;
              }
            }
          }
          out.consume(')');
        }
      },
      equals: function(v) {
        if (!check(v, this._desc)) {
          return false;
        }
        if (this._desc._options.inspector) {
          return this === v;
        }
        for (var i = 0; i < this._fields.length; i++) {
          if (!isEqual(this._fields[i], v._fields[i])) {
            return false;
          }
        }
        return true;
      },
      getField: function(n) {
        if (n >= this._fields.length) {
          throw new Error(("TypeError: invalid field at position " + n));
        }
        return this._fields[n];
      },
      setField: function(n, v) {
        C.truthy(n < this._fields.length, racketCoreError, 'invalid field at position');
        C.falsy(this._desc.isFieldImmutable(n), racketCoreError, 'field is immutable');
        this._fields[n] = v;
      },
      _maybeFindSuperInstance: function(targetDesc) {
        for (var s = this; s !== false; s = s._superStructInstance) {
          if (s._desc === targetDesc) {
            return s;
          }
        }
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var StructTypeDescriptor = function($__super) {
    function StructTypeDescriptor(options) {
      $traceurRuntime.superConstructor(StructTypeDescriptor).call(this);
      this._options = options;
      var props = options.props && Pair.listToArray(options.props);
      this._options.props = new Map();
      if (props) {
        var $__8 = true;
        var $__9 = false;
        var $__10 = undefined;
        try {
          for (var $__6 = void 0,
              $__5 = (props)[Symbol.iterator](); !($__8 = ($__6 = $__5.next()).done); $__8 = true) {
            var prop = $__6.value;
            {
              prop.hd.attachToStructTypeDescriptor(this, prop.tl);
            }
          }
        } catch ($__11) {
          $__9 = true;
          $__10 = $__11;
        } finally {
          try {
            if (!$__8 && $__5.return != null) {
              $__5.return();
            }
          } finally {
            if ($__9) {
              throw $__10;
            }
          }
        }
      }
      this._propProcedure = this._findProperty(propProcedure);
      this._options.autoV = this._options.autoV || false;
      this._totalInitFields = options.initFieldCount;
      if (options.superType) {
        this._totalInitFields += options.superType._totalInitFields;
      }
      var immutables = options.immutables || Pair.EMPTY;
      this._options.immutables = new Set(Pair.listToArray(immutables));
      this._options.immutables.forEach(function(e) {
        if (e < 0 || e >= options.initFieldCount) {
          C.raise('invalid index in immutables provided');
        }
      });
    }
    return ($traceurRuntime.createClass)(StructTypeDescriptor, {
      displayNativeString: function(out) {
        out.consume('#<struct-type:');
        out.consume(this._options.name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getName: function() {
        return this._options.name;
      },
      getSuperType: function() {
        return this._options.superType;
      },
      getApplicableStructObject: function(structObject, procSpec) {
        var structfn = function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var proc;
          if (typeof(procSpec) === 'function') {
            proc = procSpec;
            args.unshift(structObject);
          } else if (Number.isInteger(procSpec)) {
            proc = structObject.getField(procSpec);
          } else {
            throw new Error(("ValueError: invalid field at position " + procSpec));
          }
          return proc.apply((void 0), $traceurRuntime.spread(args));
        };
        structfn.__rjs_struct_object = structObject;
        return structfn;
      },
      maybeStructObject: function(s) {
        var structObject;
        if (s instanceof Struct) {
          return s;
        } else if (s instanceof Function && (s.__rjs_struct_object instanceof Struct)) {
          return s.__rjs_struct_object;
        }
        return false;
      },
      getStructConstructor: function() {
        var subtype = arguments[0] !== (void 0) ? arguments[0] : false;
        var $__4 = this;
        return $.attachReadOnlyProperty(function() {
          for (var args = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            args[$__12] = arguments[$__12];
          var structObject = new Struct($__4, args, subtype);
          var hasPropProc = $__4._propProcedure !== undefined && $__4._propProcedure !== false;
          var hasProcSpec = $__4._options.procSpec !== undefined && $__4._options.procSpec !== false;
          if (!hasPropProc && !hasProcSpec) {
            return structObject;
          } else if (hasPropProc) {
            return $__4.getApplicableStructObject(structObject, $__4._propProcedure);
          }
          return $__4.getApplicableStructObject(structObject, $__4._options.procSpec);
        }, 'racketProcedureType', 'struct-constructor');
      },
      getStructPredicate: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s) {
          var structObject = $__4.maybeStructObject(s);
          return structObject && structObject._maybeFindSuperInstance($__4) && true;
        }, 'racketProcedureType', 'struct-predicate');
      },
      getStructAccessor: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'accessor applied to invalid type');
          }
          return sobj.getField(pos);
        }, 'racketProcedureType', 'struct-accessor');
      },
      getStructMutator: function() {
        var $__4 = this;
        return $.attachReadOnlyProperty(function(s, pos, v) {
          var structObject = $__4.maybeStructObject(s);
          if (!structObject) {
            C.raise(TypeError, ("(" + s + " : " + $traceurRuntime.typeof((s)) + " != " + $__4._options.name + " object)"));
          }
          var sobj = structObject._maybeFindSuperInstance($__4);
          if (sobj === false) {
            C.raise(racketCoreError, 'mutator applied to invalid type');
          }
          return sobj.setField(pos, v);
        }, 'racketProcedureType', 'struct-mutator');
      },
      _findProperty: function(prop) {
        for (var desc = this; desc; desc = desc.getSuperType()) {
          var val = desc._options.props.get(prop);
          if (val !== undefined) {
            return val;
          }
        }
        return undefined;
      },
      isFieldImmutable: function(n) {
        return this._options.immutables.has(n);
      }
    }, {make: function(options) {
        return Object.freeze(new StructTypeDescriptor(options));
      }}, $__super);
  }(PrintablePrimitive);
  var StructTypeProperty = function($__super) {
    function StructTypeProperty(args) {
      $traceurRuntime.superConstructor(StructTypeProperty).call(this);
      this._name = args.name.toString();
      this._guard = args.guard || false;
      this._canImpersonate = args.canImpersonate || false;
      this._supers = (args.supers && Pair.listToArray(args.supers)) || [];
    }
    return ($traceurRuntime.createClass)(StructTypeProperty, {
      displayNativeString: function(out) {
        out.consume('#<struct-type-property:');
        out.consume(this._name);
        out.consume('>');
      },
      printNativeString: function(out) {
        this.writeNativeString(out);
      },
      getPropertyPredicate: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            return false;
          }
          return desc._findProperty($__4) !== undefined;
        };
      },
      getPropertyAccessor: function() {
        var $__4 = this;
        return function(v) {
          if (v instanceof StructTypeDescriptor) {
            var desc = v;
          } else if (v instanceof Struct) {
            var desc = v._desc;
          } else {
            C.raise(racketCoreError, 'invalid argument to accessor');
          }
          return desc._findProperty($__4) || C.raise(racketCoreError, 'property not in struct');
        };
      },
      attachToStructTypeDescriptor: function(desc, v) {
        var newV = v;
        if (this._guard) {
          newV = this._guard(v, Pair.listFromArray(structTypeInfo(desc)));
        }
        desc._options.props.set(this, newV);
        this._supers.forEach(function(superEntry) {
          var prop = superEntry.hd;
          var proc = superEntry.tl;
          prop.attachToStructTypeDescriptor(desc, proc(newV));
        });
      }
    }, {make: function(args) {
        return Object.freeze(new StructTypeProperty(args));
      }}, $__super);
  }(PrintablePrimitive);
  function makeStructTypeProperty(options) {
    var stProp = StructTypeProperty.make(options);
    return Values.make([stProp, stProp.getPropertyPredicate(), stProp.getPropertyAccessor()]);
  }
  function makeStructType(options) {
    var descriptor = new StructTypeDescriptor(options);
    return Values.make([descriptor, descriptor.getStructConstructor(), descriptor.getStructPredicate(), descriptor.getStructAccessor(), descriptor.getStructMutator()]);
  }
  function isStructType(v) {
    return v instanceof StructTypeDescriptor;
  }
  function structTypeInfo(desc) {
    return [desc._options.name, desc._options.initFieldCount, desc._options.autoFieldCount, desc.getStructAccessor(), desc.getStructMutator(), desc._options.immutables, desc._options.superType || false, false];
  }
  function isStructInstance(v) {
    return (v instanceof Struct) || (v instanceof Function) && (v.__rjs_struct_object instanceof Struct);
  }
  function check(v, desc) {
    return isStructInstance(v) && v._desc == desc;
  }
  var propProcedure = makeStructTypeProperty({name: 'prop:procedure'}).getAt(0);
  return {
    get makeStructTypeProperty() {
      return makeStructTypeProperty;
    },
    get makeStructType() {
      return makeStructType;
    },
    get isStructType() {
      return isStructType;
    },
    get structTypeInfo() {
      return structTypeInfo;
    },
    get isStructInstance() {
      return isStructInstance;
    },
    get check() {
      return check;
    },
    get propProcedure() {
      return propProcedure;
    }
  };
})();
var $__runtime_47_core_47_symbol_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/symbol.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var internedMake = ($__runtime_47_core_47_lib_46_js__).internedMake;
  var Symbol = function($__super) {
    function Symbol(v) {
      $traceurRuntime.superConstructor(Symbol).call(this);
      this.v = v;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(Symbol, {
      displayNativeString: function(out) {
        out.consume(this.v);
      },
      equals: function(v) {
        return v === this;
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, Symbol.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  var make = internedMake(function(v) {
    return new Symbol(v.toString());
  });
  var makeUninterned = function(v) {
    return new Symbol(v);
  };
  function check(v) {
    return (v instanceof Symbol);
  }
  return {
    get make() {
      return make;
    },
    get makeUninterned() {
      return makeUninterned;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_vector_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/vector.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var hashArray = ($__runtime_47_core_47_raw_95_hashing_46_js__).hashArray;
  var hashForEqual = ($__runtime_47_core_47_hashing_46_js__).hashForEqual;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var Vector = function($__super) {
    function Vector(items, mutable) {
      $traceurRuntime.superConstructor(Vector).call(this);
      this.mutable = mutable;
      this.items = items;
    }
    return ($traceurRuntime.createClass)(Vector, {
      writeToPort: function(out, itemFn) {
        var n = this.items.length;
        out.consume('#(');
        for (var i = 0; i < n; i++) {
          itemFn(out, this.items[i]);
          if (i !== n - 1)
            out.consume(' ');
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      isImmutable: function() {
        return !this.mutable;
      },
      ref: function(n) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-ref: index out of range\n  index: " + n));
        }
        return this.items[n];
      },
      set: function(n, v) {
        if (n < 0 || n > this.items.length) {
          throw racketCoreError(("vector-set: index out of range\n  index: " + n));
        } else if (!this.mutable) {
          throw racketCoreError('vector-set: immutable vector\n ', this);
        }
        this.items[n] = v;
      },
      length: function() {
        return this.items.length;
      },
      equals: function(v) {
        if (!check(v)) {
          return false;
        }
        var items1 = this.items;
        var items2 = v.items;
        if (items1.length != items2.length) {
          return false;
        }
        for (var i = 0; i < items1.length; i++) {
          if (!isEqual(items1[i], items2[i])) {
            return false;
          }
        }
        return true;
      },
      hashForEqual: function() {
        return hashArray(this.items, hashForEqual);
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function make(items, mutable) {
    return new Vector(items, mutable);
  }
  function copy(vec, mutable) {
    return new Vector(vec.items, mutable);
  }
  function makeInit(size, init) {
    var r = new Array(size);
    r.fill(init);
    return new Vector(r, true);
  }
  function check(v1) {
    return (v1 instanceof Vector);
  }
  return {
    get make() {
      return make;
    },
    get copy() {
      return copy;
    },
    get makeInit() {
      return makeInit;
    },
    get check() {
      return check;
    }
  };
})();
var $__runtime_47_core_47_marks_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/marks.js";
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var racketCoreError = ($__runtime_47_core_47_errors_46_js__).racketCoreError;
  var HASH = ($__runtime_47_core_47_hashing_46_js__).hashForEq;
  var __frames;
  var __prompts = new Map();
  var __async_callback_wrappers = [];
  var __defaultContinuationPromptTag = makeContinuationPromptTag(Symbol.make('default'));
  function init() {
    __frames = Pair.EMPTY;
    savePrompt(__defaultContinuationPromptTag);
    enterFrame();
  }
  function registerAsynCallbackWrapper(w) {
    __async_callback_wrappers.push(w);
  }
  function defaultContinuationPromptTag() {
    return __defaultContinuationPromptTag;
  }
  init();
  function ContinuationPromptTag(tag) {
    this.tag = tag;
    return this;
  }
  function AbortCurrentContinuation(promptTag, handlerArgs) {
    this.name = 'abort-current-continuation';
    this.promptTag = promptTag;
    this.handlerArgs = handlerArgs;
    this.stack = (new Error()).stack;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }
  }
  AbortCurrentContinuation.prototype = Object.create(Error.prototype);
  AbortCurrentContinuation.prototype.constructor = AbortCurrentContinuation;
  function savePrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      promptVal = [];
      __prompts.set(promptTag, promptVal);
    }
    promptVal.push(__frames.hd);
  }
  function deleteCurrentPrompt(promptTag) {
    var promptVal = __prompts.get(promptTag);
    if (promptVal === undefined) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    promptVal.pop();
    if (promptVal.length === 0) {
      __prompts.delete(promptTag);
    }
  }
  function getPromptFrame(promptTag) {
    if (promptTag === undefined) {
      return promptTag;
    }
    var result = __prompts.get(promptTag);
    return (result && result[result.length - 1]) || undefined;
  }
  function makeContinuationPromptTag(sym) {
    return new ContinuationPromptTag(sym);
  }
  function isContinuationPromptTag(tag) {
    return tag instanceof ContinuationPromptTag;
  }
  function callWithContinuationPrompt(proc, promptTag, handler) {
    for (var args = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      args[$__1 - 3] = arguments[$__1];
    promptTag = promptTag || __defaultContinuationPromptTag;
    try {
      savePrompt(promptTag);
      return proc.apply((void 0), $traceurRuntime.spread(args));
    } catch (e) {
      if (e instanceof AbortCurrentContinuation && e.promptTag === promptTag) {
        return handler.apply((void 0), $traceurRuntime.spread(e.handlerArgs));
      }
      throw e;
    } finally {
      deleteCurrentPrompt(promptTag);
    }
  }
  function getFrames() {
    return __frames;
  }
  function updateFrame(newFrames, oldFrames) {
    if (__frames !== oldFrames) {
      throw new Error("current frame doesn't match with old frame");
    }
    return __frames = newFrames;
  }
  function enterFrame() {
    __frames = Pair.make({}, __frames);
    return __frames;
  }
  function setMark(key, value) {
    var frame = __frames.hd;
    frame[HASH(key)] = value;
  }
  function getContinuationMarks(promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var frames = __frames;
    var promptFrame = getPromptFrame(promptTag);
    if (promptFrame === undefined && promptTag !== __defaultContinuationPromptTag) {
      throw racketCoreError('No corresponding tag in continuation!');
    }
    var result = [];
    while (!Pair.isEmpty(frames)) {
      if (frames.hd === promptFrame) {
        break;
      }
      result.push(frames.hd);
      frames = frames.tl;
    }
    return result;
  }
  function getMarks(framesArr, key, promptTag) {
    promptTag = promptTag || __defaultContinuationPromptTag;
    var keyHash = HASH(key);
    var promptFrame = getPromptFrame(promptTag);
    var result = [];
    for (var ii = 0; ii < framesArr.length; ++ii) {
      var fr = framesArr[ii];
      if (keyHash in fr) {
        if (fr === promptFrame) {
          break;
        }
        result.push(fr[keyHash]);
      }
    }
    return Pair.listFromArray(result);
  }
  function getFirstMark(frames, key, noneV) {
    var keyHash = HASH(key);
    return Pair.listFind(frames, function(fr) {
      if (keyHash in fr) {
        return fr[keyHash];
      }
    }) || noneV;
  }
  function wrapWithContext(fn) {
    return (function(currentFrames) {
      var state = {};
      __async_callback_wrappers.forEach(function(w) {
        return w.onCreate(state);
      });
      return function() {
        for (var args = [],
            $__2 = 0; $__2 < arguments.length; $__2++)
          args[$__2] = arguments[$__2];
        init();
        __async_callback_wrappers.forEach(function(w) {
          return w.onInvoke(state);
        });
        try {
          return fn.apply((void 0), $traceurRuntime.spread(args));
        } finally {
          __frames = undefined;
        }
      };
    }(__frames));
  }
  return {
    get init() {
      return init;
    },
    get registerAsynCallbackWrapper() {
      return registerAsynCallbackWrapper;
    },
    get defaultContinuationPromptTag() {
      return defaultContinuationPromptTag;
    },
    get AbortCurrentContinuation() {
      return AbortCurrentContinuation;
    },
    get makeContinuationPromptTag() {
      return makeContinuationPromptTag;
    },
    get isContinuationPromptTag() {
      return isContinuationPromptTag;
    },
    get callWithContinuationPrompt() {
      return callWithContinuationPrompt;
    },
    get getFrames() {
      return getFrames;
    },
    get updateFrame() {
      return updateFrame;
    },
    get enterFrame() {
      return enterFrame;
    },
    get setMark() {
      return setMark;
    },
    get getContinuationMarks() {
      return getContinuationMarks;
    },
    get getMarks() {
      return getMarks;
    },
    get getFirstMark() {
      return getFirstMark;
    },
    get wrapWithContext() {
      return wrapWithContext;
    }
  };
})();
var $__runtime_47_core_47_mpair_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/mpair.js";
  var PrintablePrimitive = ($__runtime_47_core_47_printable_95_primitive_46_js__).PrintablePrimitive;
  var $__2 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__2.displayNativeString,
      writeNativeString = $__2.writeNativeString;
  var isEqual = ($__runtime_47_core_47_equality_46_js__).isEqual;
  var $__4 = $__runtime_47_core_47_pair_46_js__,
      EMPTY = $__4.EMPTY,
      isEmpty = $__4.isEmpty,
      isList = $__4.isList;
  var MPair = function($__super) {
    function MPair(hd, tl) {
      $traceurRuntime.superConstructor(MPair).call(this);
      this.hd = hd;
      this.tl = tl;
      this._listLength = isList(tl) ? tl.length + 1 : -1;
      this._cachedHashCode = null;
    }
    return ($traceurRuntime.createClass)(MPair, {
      writeToPort: function(out, itemFn) {
        out.consume('(');
        var rest = this;
        while (true) {
          if (check(rest)) {
            itemFn(out, rest.hd);
          } else {
            out.consume('. ');
            itemFn(out, rest);
            break;
          }
          rest = rest.tl;
          if (isEmpty(rest)) {
            break;
          } else {
            out.consume(' ');
          }
        }
        out.consume(')');
      },
      displayNativeString: function(out) {
        this.writeToPort(out, displayNativeString);
      },
      writeNativeString: function(out) {
        this.writeToPort(out, writeNativeString);
      },
      equals: function(v) {
        if (!check(v) || this.length !== v.length) {
          return false;
        }
        var hd1 = this.hd;
        var tl1 = this.tl;
        var hd2 = v.hd;
        var tl2 = v.tl;
        while (true) {
          if (!isEqual(hd1, hd2)) {
            return false;
          }
          if (!check(tl1) || isEmpty(tl1)) {
            return isEqual(tl1, tl2);
          }
          hd1 = tl1.hd;
          tl1 = tl1.tl;
          hd2 = tl2.hd;
          tl2 = tl2.tl;
        }
      },
      hashForEqual: function() {
        if (this._cachedHashCode === null) {
          this._cachedHashCode = $traceurRuntime.superGet(this, MPair.prototype, "hashForEqual").call(this);
        }
        return this._cachedHashCode;
      },
      car: function() {
        return this.hd;
      },
      cdr: function() {
        return this.tl;
      },
      setCar: function(v) {
        if (this.hd !== v) {
          this.hd = v;
          this._cachedHashCode = null;
        }
      },
      setCdr: function(v) {
        if (this.tl !== v) {
          this.tl = v;
          this._listLength = isList(tl) ? tl.length + 1 : -1;
          this._cachedHashCode = null;
        }
      },
      get length() {
        return this._listLength;
      },
      isImmutable: function() {
        return false;
      }
    }, {}, $__super);
  }(PrintablePrimitive);
  function check(v) {
    return (typeof v === 'undefined' ? 'undefined' : $traceurRuntime.typeof(v)) === 'object' && v !== null && v.constructor === MPair;
  }
  function make(hd, tl) {
    return new MPair(hd, tl);
  }
  return {
    get check() {
      return check;
    },
    get make() {
      return make;
    }
  };
})();
var $__runtime_47_core_47_printing_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core/printing.js";
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var $__0 = $__runtime_47_core_47_print_95_native_95_string_46_js__,
      displayNativeString = $__0.displayNativeString,
      writeNativeString = $__0.writeNativeString,
      printNativeString = $__0.printNativeString;
  var $__1 = $__runtime_47_core_47_print_95_ustring_46_js__,
      displayUString = $__1.displayUString,
      writeUString = $__1.writeUString,
      printUString = $__1.printUString;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  function display(out, v) {
    if (out.isUStringPort()) {
      displayUString(out, v);
    } else {
      displayNativeString(out, v);
    }
  }
  function write(out, v) {
    if (out.isUStringPort()) {
      writeUString(out, v);
    } else {
      writeNativeString(out, v);
    }
  }
  function print(out, v, printAsExpression, quoteDepth) {
    if (out.isUStringPort()) {
      printUString(out, v, printAsExpression, quoteDepth);
    } else {
      printNativeString(out, v, printAsExpression, quoteDepth);
    }
  }
  return {
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    }
  };
})();
var $__runtime_47_core_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/core.js";
  var Box = $__runtime_47_core_47_box_46_js__;
  var Bytes = $__runtime_47_core_47_bytes_46_js__;
  var Char = $__runtime_47_core_47_char_46_js__;
  var UString = $__runtime_47_core_47_unicode_95_string_46_js__;
  var Regexp = $__runtime_47_core_47_regexp_46_js__;
  var Hash = $__runtime_47_core_47_hash_46_js__;
  var Keyword = $__runtime_47_core_47_keyword_46_js__;
  var Number = $__runtime_47_core_47_numbers_46_js__;
  var Pair = $__runtime_47_core_47_pair_46_js__;
  var Ports = $__runtime_47_core_47_ports_46_js__;
  var Primitive = $__runtime_47_core_47_primitive_46_js__;
  var Struct = $__runtime_47_core_47_struct_46_js__;
  var Symbol = $__runtime_47_core_47_symbol_46_js__;
  var Values = $__runtime_47_core_47_values_46_js__;
  var Vector = $__runtime_47_core_47_vector_46_js__;
  var Marks = $__runtime_47_core_47_marks_46_js__;
  var MPair = $__runtime_47_core_47_mpair_46_js__;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  function bitwiseNot(a) {
    return ~a;
  }
  return {
    get Bytes() {
      return Bytes;
    },
    get Number() {
      return Number;
    },
    get Char() {
      return Char;
    },
    get Pair() {
      return Pair;
    },
    get Primitive() {
      return Primitive;
    },
    get Struct() {
      return Struct;
    },
    get Symbol() {
      return Symbol;
    },
    get Keyword() {
      return Keyword;
    },
    get Values() {
      return Values;
    },
    get Vector() {
      return Vector;
    },
    get Hash() {
      return Hash;
    },
    get Box() {
      return Box;
    },
    get Marks() {
      return Marks;
    },
    get Ports() {
      return Ports;
    },
    get UString() {
      return UString;
    },
    get Regexp() {
      return Regexp;
    },
    get MPair() {
      return MPair;
    },
    get argumentsToArray() {
      return $__runtime_47_core_47_lib_46_js__.argumentsToArray;
    },
    get argumentsSlice() {
      return $__runtime_47_core_47_lib_46_js__.argumentsSlice;
    },
    get racketCoreError() {
      return $__runtime_47_core_47_errors_46_js__.racketCoreError;
    },
    get racketContractError() {
      return $__runtime_47_core_47_errors_46_js__.racketContractError;
    },
    get attachProcedureArity() {
      return $__runtime_47_core_47_procedure_46_js__.attachProcedureArity;
    },
    get isEq() {
      return $__runtime_47_core_47_equality_46_js__.isEq;
    },
    get isEqv() {
      return $__runtime_47_core_47_equality_46_js__.isEqv;
    },
    get isEqual() {
      return $__runtime_47_core_47_equality_46_js__.isEqual;
    },
    get hashForEq() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEq;
    },
    get hashForEqv() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqv;
    },
    get hashForEqual() {
      return $__runtime_47_core_47_hashing_46_js__.hashForEqual;
    },
    get display() {
      return $__runtime_47_core_47_printing_46_js__.display;
    },
    get write() {
      return $__runtime_47_core_47_printing_46_js__.write;
    },
    get print() {
      return $__runtime_47_core_47_printing_46_js__.print;
    },
    get bitwiseNot() {
      return bitwiseNot;
    }
  };
})();
var $__runtime_47_paramz_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.js";
  var Core = $__runtime_47_core_46_js__;
  var hamt = ($__runtime_47_core_47_lib_46_js__).hamt;
  var Marks = Core.Marks;
  var Box = Core.Box;
  var ParameterizationKey = {};
  var ExceptionHandlerKey = {};
  var __top;
  function getCurrentParameterization() {
    return Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false);
  }
  function makeParameter(initValue) {
    var param = function(maybeSetVal) {
      var current = getCurrentParameterization();
      var pv = (current && current.get(param, false)) || __top.get(param, false);
      if (!pv && maybeSetVal !== undefined) {
        pv = Box.make(initValue);
        __top.set(param, pv);
      }
      if (maybeSetVal === undefined) {
        return pv ? pv.get() : initValue;
      }
      pv.set(maybeSetVal);
    };
    return param;
  }
  function extendParameterization(parameterization) {
    for (var args = [],
        $__9 = 1; $__9 < arguments.length; $__9++)
      args[$__9 - 1] = arguments[$__9];
    var result = parameterization;
    for (var i = 0; i < args.length; i += 2) {
      result = result.set(args[i], Box.make(args[i + 1]));
    }
    return result;
  }
  function copyParameterization(parameterization) {
    var $__11,
        $__12;
    var result = hamt.make();
    var $__5 = true;
    var $__6 = false;
    var $__7 = undefined;
    try {
      for (var $__3 = void 0,
          $__2 = (parameterization)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
        var $__10 = $__3.value,
            key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
            val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
        {
          result = result.set(key, Box.make(val.get()));
        }
      }
    } catch ($__8) {
      $__6 = true;
      $__7 = $__8;
    } finally {
      try {
        if (!$__5 && $__2.return != null) {
          $__2.return();
        }
      } finally {
        if ($__6) {
          throw $__7;
        }
      }
    }
    return result;
  }
  (function() {
    var p = getCurrentParameterization();
    if (p !== false) {
      return;
    }
    Marks.setMark(ParameterizationKey, hamt.make());
    __top = new Map();
    Marks.registerAsynCallbackWrapper({
      onCreate: function(state) {
        var $__11,
            $__12;
        var paramz = {};
        paramz.top = new Map();
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (__top)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__10 = $__3.value,
                key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
                val = ($__12 = $__11.next()).done ? void 0 : $__12.value;
            {
              paramz.top.set(key, Box.make(val.get()));
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
        paramz.bottom = copyParameterization(Marks.getFirstMark(Marks.getFrames(), ParameterizationKey, false));
        state.paramz = paramz;
      },
      onInvoke: function(state) {
        __top = state.paramz.top;
        Marks.setMark(ParameterizationKey, state.paramz.bottom);
      }
    });
  }());
  return {
    get ParameterizationKey() {
      return ParameterizationKey;
    },
    get ExceptionHandlerKey() {
      return ExceptionHandlerKey;
    },
    get getCurrentParameterization() {
      return getCurrentParameterization;
    },
    get makeParameter() {
      return makeParameter;
    },
    get extendParameterization() {
      return extendParameterization;
    },
    get copyParameterization() {
      return copyParameterization;
    }
  };
})();
var $__runtime_47_kernel_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.js";
  var Core = $__runtime_47_core_46_js__;
  function isImmutable(v) {
    if (Core.Primitive.check(v)) {
      return v.isImmutable();
    } else if (Core.Bytes.check(v) || typeof v === 'string') {
      return true;
    } else if (typeof v === 'number' || typeof v === 'boolean' || typeof v === 'undefined' || v === null) {
      return false;
    }
    throw Core.racketCoreError('isImmutable not implemented for', v);
  }
  var NO_ARG_FORM_RE = /^~[\s~n%]/;
  function fprintf(isPrintAsExpression, out, form) {
    var $__4;
    for (var args = [],
        $__0 = 3; $__0 < arguments.length; $__0++)
      args[$__0 - 3] = arguments[$__0];
    var regex = /~(?:[aAsSvVbBoOxX~n%]|\s+)/g;
    var formStr = form.toString();
    var reExecResult;
    var currentMatchIndex = 0;
    var prevIndex = 0;
    var lastMatch = '';
    var matches = formStr.match(regex);
    var numExpected = matches ? matches.filter(function(m) {
      return !NO_ARG_FORM_RE.test(m);
    }).length : 0;
    if (numExpected !== args.length) {
      throw ($__4 = Core).racketContractError.apply($__4, $traceurRuntime.spread([("fprintf: format string requires " + numExpected + " arguments, ") + ("given " + args.length + "; arguments were:"), out, form], args));
    }
    while ((reExecResult = regex.exec(formStr)) !== null) {
      Core.display(out, formStr.slice(prevIndex + lastMatch.length, reExecResult.index));
      prevIndex = reExecResult.index;
      lastMatch = reExecResult[0];
      if (/^~\s/.test(lastMatch))
        continue;
      switch (lastMatch.charAt(1)) {
        case '~':
          Core.display(out, '~');
          continue;
        case 'n':
        case '%':
          Core.display(out, '\n');
          continue;
      }
      var v = args[currentMatchIndex];
      currentMatchIndex += 1;
      switch (lastMatch.charAt(1)) {
        case 'a':
        case 'A':
          Core.display(out, v);
          break;
        case 's':
        case 'S':
          Core.write(out, v);
          break;
        case 'v':
        case 'V':
          Core.print(out, v, isPrintAsExpression, 0);
          break;
        case 'b':
        case 'B':
          Core.display(out, v.toString(2));
          break;
        case 'o':
        case 'O':
          Core.display(out, v.toString(8));
          break;
        case 'x':
        case 'X':
          Core.display(out, v.toString(16));
          break;
        default:
          throw Core.racketContractError('Unsupported format:', lastMatch);
      }
    }
    if (lastMatch.length + prevIndex < form.length) {
      Core.display(out, formStr.slice(lastMatch.length + prevIndex));
    }
  }
  function format(form) {
    for (var args = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args[$__1 - 1] = arguments[$__1];
    var strOut = Core.Ports.openOutputString();
    fprintf.apply((void 0), $traceurRuntime.spread([strOut, form], args));
    return Core.Ports.getOutputString(strOut);
  }
  function listToString(charsList) {
    return Core.UString.makeMutableFromChars(Core.Pair.listToArray(charsList));
  }
  function error(firstArg) {
    var $__4,
        $__5;
    for (var rest = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      rest[$__2 - 1] = arguments[$__2];
    if (Core.Symbol.check(firstArg)) {
      if (rest.length === 0) {
        throw Core.racketCoreError(firstArg.toString());
      } else {
        throw ($__4 = Core).racketCoreError.apply($__4, $traceurRuntime.spread([(firstArg.toString() + ":")], rest));
      }
    } else if (Core.UString.check(firstArg) || typeof firstArg === 'string') {
      throw ($__5 = Core).racketCoreError.apply($__5, $traceurRuntime.spread([firstArg.toString()], rest));
    } else {
      throw Core.racketContractError('error: invalid arguments');
    }
  }
  function random() {
    for (var args = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      args[$__3] = arguments[$__3];
    switch (args.length) {
      case 0:
        return Math.random();
      case 1:
        if (args[0] > 0) {
          return Math.floor(Math.random() * args[0]);
        }
        error('random: argument should be positive');
      case 2:
        if (args[0] > 0 && args[1] > args[0]) {
          return Math.floor(args[0] + Math.random() * (args[1] - args[0]));
        }
        error('random: invalid arguments');
      default:
        error('random: invalid number of arguments');
    }
  }
  function memv(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEqv(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memq(v, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (Core.isEq(v, lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function memf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return lst;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function findf(f, lst) {
    while (Core.Pair.isEmpty(lst) == false) {
      if (f(lst.hd)) {
        return list.hd;
      }
      lst = lst.tl;
      continue;
    }
    return false;
  }
  function sort9(lst, cmp) {
    var arr = Core.Pair.listToArray(lst);
    var x2i = new Map();
    arr.forEach(function(x, i) {
      x2i.set(x, i);
    });
    var srted = arr.sort(function(x, y) {
      if (cmp(x, y)) {
        return -1;
      } else if (cmp(y, x)) {
        return 1;
      }
      return x2i.get(x) - x2i.get(y);
    });
    return Core.Pair.listFromArray(srted);
  }
  function assv(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEqv(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assq(k, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (Core.isEq(k, lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  function assf(f, lst) {
    while (Core.Pair.isEmpty(lst) === false) {
      if (f(lst.hd.hd)) {
        return lst.hd;
      }
      lst = lst.tl;
    }
    return false;
  }
  return {
    get isImmutable() {
      return isImmutable;
    },
    get fprintf() {
      return fprintf;
    },
    get format() {
      return format;
    },
    get listToString() {
      return listToString;
    },
    get error() {
      return error;
    },
    get random() {
      return random;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    }
  };
})();
var $__runtime_47_lib_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/lib.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var Kernel = $__runtime_47_kernel_46_js__;
  var Values = Core.Values;
  var Pair = Core.Pair;
  var __rjs_quoted__ = {};
  __rjs_quoted__.Core = Core;
  __rjs_quoted__.Pair = Pair;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get Kernel() {
      return Kernel;
    },
    get Core() {
      return Core;
    },
    get Paramz() {
      return Paramz;
    },
    get Values() {
      return Values;
    },
    get Pair() {
      return Pair;
    }
  };
})();
var $__runtime_47_kernel_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/kernel.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M2 = $__runtime_47_lib_46_rkt_46_js__;
  var equal_p = M2.Core.isEqual;
  var eqv_p = M2.Core.isEqv;
  var eq_p = M2.Core.isEq;
  var values = function() {
    var vals73 = M2.Core.argumentsToArray(arguments);
    if ((vals73.length === 1) !== false) {
      var if_res10 = vals73[0];
    } else {
      var if_res10 = M2.Values.make(vals73);
    }
    return if_res10;
  };
  var call_with_values = function(generator74, receiver75) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var vals76 = generator74();
    if (M2.Values.check(vals76) !== false) {
      var if_res12 = receiver75.apply(this, vals76.getAll());
    } else {
      if (not(eq_p(vals76, undefined) || eq_p(vals76, null)) !== false) {
        var if_res11 = receiver75.apply(this, [vals76]);
      } else {
        var if_res11 = rvoid();
      }
      var if_res12 = if_res11;
    }
    return if_res12;
  };
  var immutable_p = function(v77) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.isImmutable(v77);
  };
  var rvoid = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return null;
  };
  var void_p = function(v78) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (v78 === null) || (v78 === undefined);
  };
  var number_p = M2.Core.Number.check;
  var real_p = M2.Core.Number.check;
  var integer_p = Number.isInteger;
  var zero_p = function(v79) {
    if (number_p(v79) !== false) {
      var if_res13 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v79, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res13 = null;
    }
    if_res13;
    return v79 === 0;
  };
  var raise_mismatch_error = function(e80) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return error($rjs_core.Symbol.make("boo"));
  };
  var positive_p = function(v81) {
    if (real_p(v81) !== false) {
      var if_res14 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v81, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res14 = null;
    }
    if_res14;
    return v81 > 0;
  };
  var negative_p = function(v82) {
    if (real_p(v82) !== false) {
      var if_res15 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v82, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res15 = null;
    }
    if_res15;
    return v82 < 0;
  };
  var add1 = function(v83) {
    if (number_p(v83) !== false) {
      var if_res16 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v83, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res16 = null;
    }
    if_res16;
    return v83 + 1;
  };
  var sub1 = function(v84) {
    if (number_p(v84) !== false) {
      var if_res17 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v84, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res17 = null;
    }
    if_res17;
    return v84 - 1;
  };
  var quotient = function(dividend85, divisor86) {
    if (integer_p(dividend85) !== false) {
      var if_res18 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), dividend85, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res18 = null;
    }
    if_res18;
    if (integer_p(divisor86) !== false) {
      var if_res19 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), divisor86, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res19 = null;
    }
    if_res19;
    return (dividend85 / divisor86) | 0;
  };
  var even_p = function(v87) {
    if (integer_p(v87) !== false) {
      var if_res20 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), v87, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res20 = null;
    }
    if_res20;
    return (v87 % 2) === 0;
  };
  var odd_p = function(v88) {
    if (integer_p(v88) !== false) {
      var if_res21 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), v88, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res21 = null;
    }
    if_res21;
    return not((v88 % 2) === 0);
  };
  var exact_nonnegative_integer_p = function(v89) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v89) && (v89 >= 0);
  };
  var exact_integer_p = function(v90) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Number.isInteger(v90);
  };
  var __times_ = M2.Core.Number.mul;
  var __by_ = M2.Core.Number.div;
  var __plus_ = M2.Core.Number.add;
  var __ = M2.Core.Number.sub;
  var __lt_ = M2.Core.Number.lt;
  var __gt_ = M2.Core.Number.gt;
  var __lt__eq_ = M2.Core.Number.lte;
  var __gt__eq_ = M2.Core.Number.gte;
  var __eq_ = M2.Core.Number.equals;
  var floor = function(v91) {
    if (real_p(v91) !== false) {
      var if_res22 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v91, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res22 = null;
    }
    if_res22;
    return Math.floor(v91);
  };
  var abs = function(v92) {
    if (real_p(v92) !== false) {
      var if_res23 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v92, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res23 = null;
    }
    if_res23;
    return Math.abs(v92);
  };
  var sin = function(v93) {
    if (real_p(v93) !== false) {
      var if_res24 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v93, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res24 = null;
    }
    if_res24;
    return Math.sin(v93);
  };
  var cos = function(v94) {
    if (real_p(v94) !== false) {
      var if_res25 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v94, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res25 = null;
    }
    if_res25;
    return Math.cos(v94);
  };
  var tan = function(v95) {
    if (real_p(v95) !== false) {
      var if_res26 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v95, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res26 = null;
    }
    if_res26;
    return Math.tan(v95);
  };
  var atan = function(v96) {
    if (real_p(v96) !== false) {
      var if_res27 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v96, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res27 = null;
    }
    if_res27;
    return Math.atan(v96);
  };
  var ceiling = function(v97) {
    if (real_p(v97) !== false) {
      var if_res28 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v97, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res28 = null;
    }
    if_res28;
    return Math.ceil(v97);
  };
  var round = function(v98) {
    if (real_p(v98) !== false) {
      var if_res29 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v98, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res29 = null;
    }
    if_res29;
    return Math.round(v98);
  };
  var min = function(a99, b100) {
    if (real_p(a99) !== false) {
      var if_res30 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), a99, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res30 = null;
    }
    if_res30;
    if (real_p(b100) !== false) {
      var if_res31 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), b100, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res31 = null;
    }
    if_res31;
    return Math.min(a99, b100);
  };
  var max = function(a101, b102) {
    if (real_p(a101) !== false) {
      var if_res32 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), a101, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res32 = null;
    }
    if_res32;
    if (real_p(b102) !== false) {
      var if_res33 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), b102, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res33 = null;
    }
    if_res33;
    return Math.max(a101, b102);
  };
  var log = function(v103) {
    if (real_p(v103) !== false) {
      var if_res34 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("real?"), $rjs_core.UString.makeInternedImmutable(", given:"), v103, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res34 = null;
    }
    if_res34;
    return Math.log(v103);
  };
  var expt = function(w104, z105) {
    if (number_p(w104) !== false) {
      var if_res35 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), w104, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res35 = null;
    }
    if_res35;
    if (number_p(z105) !== false) {
      var if_res36 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), z105, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res36 = null;
    }
    if_res36;
    return Math.pow(w104, z105);
  };
  var sqrt = function(v106) {
    if (number_p(v106) !== false) {
      var if_res37 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v106, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res37 = null;
    }
    if_res37;
    return Math.sqrt(v106);
  };
  var sqr = function(v107) {
    if (number_p(v107) !== false) {
      var if_res38 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), v107, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res38 = null;
    }
    if_res38;
    return __times_(v107, v107);
  };
  var remainder = function(a108, b109) {
    if (integer_p(a108) !== false) {
      var if_res39 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), a108, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res39 = null;
    }
    if_res39;
    if (integer_p(b109) !== false) {
      var if_res40 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), b109, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res40 = null;
    }
    if_res40;
    return a108 % b109;
  };
  var number__gt_string = function(n110) {
    if (number_p(n110) !== false) {
      var if_res41 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("number?"), $rjs_core.UString.makeInternedImmutable(", given:"), n110, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res41 = null;
    }
    if_res41;
    return M2.Core.UString.makeMutable(n110.toString());
  };
  var inexact__gt_exact = function(x111) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x111;
  };
  var exact__gt_inexact = function(x112) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return x112;
  };
  var not = function(v113) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return equal_p(v113, false) || false;
  };
  var rfalse = false;
  var rtrue = true;
  var false_p = function(v114) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v114 === false;
  };
  var car = function(pair115) {
    if (pair_p(pair115) !== false) {
      var if_res42 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("pair?"), $rjs_core.UString.makeInternedImmutable(", given:"), pair115, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res42 = null;
    }
    if_res42;
    return pair115.hd;
  };
  var cdr = function(pair116) {
    if (pair_p(pair116) !== false) {
      var if_res43 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("pair?"), $rjs_core.UString.makeInternedImmutable(", given:"), pair116, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res43 = null;
    }
    if_res43;
    return pair116.tl;
  };
  var cons = M2.Core.Pair.make;
  var pair_p = M2.Core.Pair.check;
  var caar = function(v117) {
    if ((function(v118) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v118) && pair_p(v118.hd);
    })(v117) !== false) {
      var if_res44 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? pair? #t)"), $rjs_core.UString.makeInternedImmutable(", given:"), v117, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res44 = null;
    }
    if_res44;
    return v117.hd.hd;
  };
  var cadr = function(v119) {
    if ((function(v120) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v120) && pair_p(v120.tl);
    })(v119) !== false) {
      var if_res45 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t pair?)"), $rjs_core.UString.makeInternedImmutable(", given:"), v119, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res45 = null;
    }
    if_res45;
    return v119.tl.hd;
  };
  var cdar = function(v121) {
    if ((function(v122) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v122) && pair_p(v122.hd);
    })(v121) !== false) {
      var if_res46 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? pair? #t)"), $rjs_core.UString.makeInternedImmutable(", given:"), v121, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res46 = null;
    }
    if_res46;
    return v121.hd.tl;
  };
  var cddr = function(v123) {
    if ((function(v124) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v124) && pair_p(v124.tl);
    })(v123) !== false) {
      var if_res47 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t pair?)"), $rjs_core.UString.makeInternedImmutable(", given:"), v123, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res47 = null;
    }
    if_res47;
    return v123.tl.tl;
  };
  var caddr = function(v125) {
    if ((function(v126) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.Core.Pair.check(v126) && (function(v127) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.Core.Pair.check(v127) && pair_p(v127.tl);
      })(v126.tl);
    })(v125) !== false) {
      var if_res48 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/pair-of? #t (check/pair-of? #t pair?))"), $rjs_core.UString.makeInternedImmutable(", given:"), v125, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res48 = null;
    }
    if_res48;
    return v125.tl.tl.hd;
  };
  var rnull = M2.Core.Pair.EMPTY;
  var list = M2.Core.Pair.makeList;
  var null_p = M2.Core.Pair.isEmpty;
  var list_p = M2.Core.Pair.isList;
  var length = function(v128) {
    if (list_p(v128) !== false) {
      var if_res49 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("list?"), $rjs_core.UString.makeInternedImmutable(", given:"), v128, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res49 = null;
    }
    if_res49;
    return v128.length;
  };
  var reverse = function(lst129) {
    if (list_p(lst129) !== false) {
      var if_res50 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("list?"), $rjs_core.UString.makeInternedImmutable(", given:"), lst129, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res50 = null;
    }
    if_res50;
    var loop130 = function(lst131, result132) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst131) !== false) {
        var if_res51 = result132;
      } else {
        var if_res51 = loop130(lst131.tl, M2.Core.Pair.make(lst131.hd, result132));
      }
      return if_res51;
    };
    return loop130(lst129, $rjs_core.Pair.makeList());
  };
  var list_times_ = $rjs_core.attachProcedureArity(function(a0133) {
    for (var args13452 = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      args13452[$__1 - 1] = arguments[$__1];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args134 = $rjs_core.Pair.listFromArray(args13452);
    var lst135 = reverse(cons(a0133, args134));
    var loop136 = function(rst137, result138) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(rst137) !== false) {
        var if_res53 = rst137;
      } else {
        var if_res53 = loop136(cdr(rst137), cons(car(rst137), result138));
      }
      return if_res53;
    };
    return loop136(cdr(lst135), car(lst135));
  });
  var append = function() {
    var let_result54 = values();
    var result139 = $rjs_core.Pair.makeList();
    var lsts140 = arguments;
    var loop141 = function(i142) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i142 < lsts140.length) !== false) {
        var lst143 = lsts140[i142];
        result139 = foldr(M2.Core.Pair.make, lst143, result139);
        var if_res55 = loop141(i142 + 1);
      } else {
        var if_res55 = rvoid();
      }
      return if_res55;
    };
    loop141(0);
    return result139;
  };
  var for_each = function(lam144) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res56 = null;
    } else {
      var if_res56 = rvoid();
    }
    if_res56;
    var let_result57 = values();
    var lsts145 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam144) !== false) {
      var if_res58 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), lam144, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res58 = null;
    }
    if_res58;
    map.apply(null, [lam144].concat(lsts145));
    return null;
  };
  var mcons = function(hd146, tl147) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.make(hd146, tl147);
  };
  var mpair_p = function(v148) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.MPair.check(v148);
  };
  var mcar = function(p149) {
    if (mpair_p(p149) !== false) {
      var if_res59 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p149, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res59 = null;
    }
    if_res59;
    return p149.car();
  };
  var mcdr = function(p150) {
    if (mpair_p(p150) !== false) {
      var if_res60 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p150, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res60 = null;
    }
    if_res60;
    return p150.cdr();
  };
  var set_mcar_bang_ = function(p151, v152) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p151) !== false) {
      var if_res61 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p151, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res61 = null;
    }
    if_res61;
    return p151.setCar(v152);
  };
  var set_mcdr_bang_ = function(p153, v154) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (mpair_p(p153) !== false) {
      var if_res62 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("mpair?"), $rjs_core.UString.makeInternedImmutable(", given:"), p153, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res62 = null;
    }
    if_res62;
    return p153.setCdr(v154);
  };
  var make_struct_type = function(name155, super_type156, init_field_count157, auto_field_count158, auto_v159, props160, inspector161, proc_spec162, immutables163, guard164, constructor_name165) {
    return M2.Core.Struct.makeStructType({
      'name': name155.toString(),
      'superType': super_type156,
      'initFieldCount': init_field_count157,
      'autoFieldCount': auto_field_count158,
      'autoV': auto_v159,
      'props': props160,
      'inspector': inspector161,
      'procSpec': proc_spec162,
      'immutables': immutables163,
      'guard': guard164,
      'constructorName': constructor_name165
    });
  };
  var make_struct_field_accessor = function(ref166, index167, field_name168) {
    return function(s169) {
      if ((arguments.length !== 1) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
        var if_res63 = null;
      } else {
        var if_res63 = rvoid();
      }
      if_res63;
      return ref166(s169, index167);
    };
  };
  var make_struct_field_mutator = function(set170, index171, fieldName172) {
    return function(s173, v174) {
      if ((arguments.length !== 2) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
        var if_res64 = null;
      } else {
        var if_res64 = rvoid();
      }
      if_res64;
      return set170(s173, index171, v174);
    };
  };
  var make_struct_type_property = function(name175, guard176, supers177, can_impersonate_p178) {
    return M2.Core.Struct.makeStructTypeProperty({
      'name': name175,
      'guard': guard176,
      'supers': supers177,
      'canImpersonate': can_impersonate_p178
    });
  };
  var check_struct_type = function(name179, what180) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (what180 !== false) {
      if (M2.Core.Struct.isStructType(what180) !== false) {
        var if_res65 = rvoid();
      } else {
        throw M2.Core.racketCoreError($rjs_core.UString.makeInternedImmutable("not a struct type"));
        var if_res65 = null;
      }
      if_res65;
      var if_res66 = what180;
    } else {
      var if_res66 = rvoid();
    }
    return if_res66;
  };
  var struct_type_p = function(v181) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Struct.isStructType(v181);
  };
  var struct_type_info = function(desc182) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Values.make(M2.Core.Struct.structTypeInfo(desc182));
  };
  var vector = function() {
    return M2.Core.Vector.make(M2.Core.argumentsToArray(arguments), true);
  };
  var make_vector = function(size183, v184) {
    if (integer_p(size183) !== false) {
      var if_res67 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), size183, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res67 = null;
    }
    if_res67;
    return M2.Core.Vector.makeInit(size183, v184 || 0);
  };
  var vector_p = M2.Core.Vector.check;
  var vector_length = function(v185) {
    if (vector_p(v185) !== false) {
      var if_res68 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), v185, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res68 = null;
    }
    if_res68;
    return v185.length();
  };
  var vector_ref = function(vec186, i187) {
    if (vector_p(vec186) !== false) {
      var if_res69 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec186, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res69 = null;
    }
    if_res69;
    if (integer_p(i187) !== false) {
      var if_res70 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i187, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res70 = null;
    }
    if_res70;
    return vec186.ref(i187);
  };
  var vector_set_bang_ = function(vec188, i189, v190) {
    if (vector(vec188) !== false) {
      var if_res71 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable(", given:"), vec188, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res71 = null;
    }
    if_res71;
    if (integer_p(i189) !== false) {
      var if_res72 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i189, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res72 = null;
    }
    if_res72;
    return vec188.set(i189, v190);
  };
  var vector__gt_list = function(vec191) {
    if (vector_p(vec191) !== false) {
      var if_res73 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec191, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res73 = null;
    }
    if_res73;
    return M2.Core.Pair.listFromArray(vec191.items);
  };
  var vector__gt_immutable_vector = function(vec192) {
    if (vector_p(vec192) !== false) {
      var if_res74 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("vector?"), $rjs_core.UString.makeInternedImmutable(", given:"), vec192, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res74 = null;
    }
    if_res74;
    return M2.Core.Vector.copy(vec192, false);
  };
  var hash = function() {
    var let_result75 = values();
    var kv_times_193 = arguments;
    if (((kv_times_193.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res76 = null;
    } else {
      var if_res76 = rvoid();
    }
    if_res76;
    var items194 = [];
    var loop195 = function(i196) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i196 < kv_times_193.length) !== false) {
        items194.push([kv_times_193[i196], kv_times_193[__plus_(i196, 1)]]);
        var if_res77 = loop195(i196 + 2);
      } else {
        var if_res77 = rvoid();
      }
      return if_res77;
    };
    loop195(0);
    return M2.Core.Hash.makeEqual(items194, false);
  };
  var hasheqv = function() {
    var let_result78 = values();
    var kv_times_197 = arguments;
    if (((kv_times_197.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res79 = null;
    } else {
      var if_res79 = rvoid();
    }
    if_res79;
    var items198 = [];
    var loop199 = function(i200) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i200 < kv_times_197.length) !== false) {
        items198.push([kv_times_197[i200], kv_times_197[__plus_(i200, 1)]]);
        var if_res80 = loop199(i200 + 2);
      } else {
        var if_res80 = rvoid();
      }
      return if_res80;
    };
    loop199(0);
    return M2.Core.Hash.makeEqv(items198, false);
  };
  var hasheq = function() {
    var let_result81 = values();
    var kv_times_201 = arguments;
    if (((kv_times_201.length % 2) !== 0) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid number of arguments"));
      var if_res82 = null;
    } else {
      var if_res82 = rvoid();
    }
    if_res82;
    var items202 = [];
    var loop203 = function(i204) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i204 < kv_times_201.length) !== false) {
        items202.push([kv_times_201[i204], kv_times_201[__plus_(i204, 1)]]);
        var if_res83 = loop203(i204 + 2);
      } else {
        var if_res83 = rvoid();
      }
      return if_res83;
    };
    loop203(0);
    return M2.Core.Hash.makeEq(items202, false);
  };
  var make_hash = function(assocs205) {
    var let_result84 = values();
    var assocs_times_206 = assocs205 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_206, true);
  };
  var make_hasheqv = function(assocs207) {
    var let_result85 = values();
    var assocs_times_208 = assocs207 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_208, true);
  };
  var make_hasheq = function(assocs209) {
    var let_result86 = values();
    var assocs_times_210 = assocs209 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_210, true);
  };
  var make_immutable_hash = function(assocs211) {
    var let_result87 = values();
    var assocs_times_212 = assocs211 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqualFromAssocs(assocs_times_212, false);
  };
  var make_immutable_hasheqv = function(assocs213) {
    var let_result88 = values();
    var assocs_times_214 = assocs213 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqvFromAssocs(assocs_times_214, false);
  };
  var make_immutable_hasheq = function(assocs215) {
    var let_result89 = values();
    var assocs_times_216 = assocs215 || $rjs_core.Pair.makeList();
    return M2.Core.Hash.makeEqFromAssocs(assocs_times_216, false);
  };
  var hash_p = M2.Core.Hash.check;
  var hash_equal_p = M2.Core.Hash.isEqualHash;
  var hash_eqv_p = M2.Core.Hash.isEqvHash;
  var hash_eq_p = M2.Core.Hash.isEqHash;
  var hash_ref = function(h217, k218, fail219) {
    return h217.ref(k218, fail219);
  };
  var hash_set = function(h220, k221, v222) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h220.set(k221, v222);
  };
  var hash_set_bang_ = function(h223, k224, v225) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return h223.set(k224, v225);
  };
  var hash_map = function(h226, proc227) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Hash.map(h226, proc227);
  };
  var apply = function(lam228) {
    var let_result90 = values();
    var args229 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(lam228) !== false) {
      var if_res91 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), lam228, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res91 = null;
    }
    if_res91;
    var let_result92 = values();
    if (zero_p(args229.length) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res96 = null;
    } else {
      if (equal_p(args229.length, 1) !== false) {
        if (null_p(args229[0]) !== false) {
          var if_res94 = rvoid();
        } else {
          if (M2.Core.Pair.check(args229[0]) !== false) {
            var if_res93 = rvoid();
          } else {
            throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("expected a"), M2.Core.Pair, $rjs_core.UString.makeInternedImmutable(", but given"), args229[0]);
            var if_res93 = null;
          }
          var if_res94 = if_res93;
        }
        if_res94;
        var if_res95 = M2.Core.Pair.listToArray(args229[0]);
      } else {
        var if_res95 = args229.concat(M2.Core.Pair.listToArray(args229.pop()));
      }
      var if_res96 = if_res95;
    }
    var final_args230 = if_res96;
    return lam228.apply(null, final_args230);
  };
  var map = function(fn231) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res97 = null;
    } else {
      var if_res97 = rvoid();
    }
    if_res97;
    var let_result98 = values();
    var lists232 = Array.prototype.slice.call(arguments, 1);
    if (procedure_p(fn231) !== false) {
      var if_res99 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn231, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res99 = null;
    }
    if_res99;
    var let_result100 = values();
    if (__lt__eq_(lists232.length, 0) !== false) {
      var if_res101 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res101 = rvoid();
    }
    if_res101;
    var let_result102 = values();
    var lst_len233 = length(lists232[0]);
    var loop234 = function(i235) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i235 < lists232.length) !== false) {
        var v236 = lists232[i235];
        if (eq_p(length(v236), lst_len233) !== false) {
          var if_res103 = rvoid();
        } else {
          var if_res103 = error($rjs_core.Symbol.make("map"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res103;
        var if_res104 = loop234(i235 + 1);
      } else {
        var if_res104 = rvoid();
      }
      return if_res104;
    };
    loop234(1);
    var let_result105 = values();
    var result237 = Array(lst_len233);
    var args238 = Array(lists232.length);
    var loop239 = function(result_i240) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i240 < lst_len233) !== false) {
        var loop241 = function(lst_j242) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j242 < lists232.length) !== false) {
            var lst243 = lists232[lst_j242];
            args238[lst_j242] = lst243.hd;
            lists232[lst_j242] = lst243.tl;
            var if_res106 = loop241(lst_j242 + 1);
          } else {
            var if_res106 = rvoid();
          }
          return if_res106;
        };
        loop241(0);
        result237[result_i240] = fn231.apply(null, args238);
        var if_res107 = loop239(result_i240 + 1);
      } else {
        var if_res107 = rvoid();
      }
      return if_res107;
    };
    loop239(0);
    return M2.Core.Pair.listFromArray(result237);
  };
  var foldl = function(fn244, init245) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res108 = null;
    } else {
      var if_res108 = rvoid();
    }
    if_res108;
    var let_result109 = values();
    var lists246 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn244) !== false) {
      var if_res110 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn244, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res110 = null;
    }
    if_res110;
    var let_result111 = values();
    if (__lt__eq_(lists246.length, 0) !== false) {
      var if_res112 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res112 = rvoid();
    }
    if_res112;
    var let_result113 = values();
    var lst_len247 = length(lists246[0]);
    var loop248 = function(i249) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i249 < lists246.length) !== false) {
        var v250 = lists246[i249];
        if (eq_p(length(v250), lst_len247) !== false) {
          var if_res114 = rvoid();
        } else {
          var if_res114 = error($rjs_core.Symbol.make("foldl"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res114;
        var if_res115 = loop248(i249 + 1);
      } else {
        var if_res115 = rvoid();
      }
      return if_res115;
    };
    loop248(1);
    var let_result116 = values();
    var result251 = init245;
    var args252 = Array(lists246.length + 1);
    var loop253 = function(result_i254) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((result_i254 < lst_len247) !== false) {
        var loop255 = function(lst_j256) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((lst_j256 < lists246.length) !== false) {
            var lst257 = lists246[lst_j256];
            args252[lst_j256] = lst257.hd;
            lists246[lst_j256] = lst257.tl;
            var if_res117 = loop255(lst_j256 + 1);
          } else {
            var if_res117 = rvoid();
          }
          return if_res117;
        };
        loop255(0);
        args252[lists246.length] = result251;
        result251 = fn244.apply(null, args252);
        var if_res118 = loop253(result_i254 + 1);
      } else {
        var if_res118 = rvoid();
      }
      return if_res118;
    };
    loop253(0);
    return result251;
  };
  var _foldr = function(fn258, init259, lists260) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lists260[0]) !== false) {
      var if_res120 = init259;
    } else {
      var args261 = Array(add1(lists260.length));
      var loop262 = function(ii263) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((ii263 < lists260.length) !== false) {
          var lst264 = lists260[ii263];
          args261[ii263] = lst264.hd;
          lists260[ii263] = lst264.tl;
          var if_res119 = loop262(ii263 + 1);
        } else {
          var if_res119 = rvoid();
        }
        return if_res119;
      };
      loop262(0);
      args261[lists260.length] = _foldr(fn258, init259, lists260);
      var if_res120 = fn258.apply(null, args261);
    }
    return if_res120;
  };
  var foldr = function(fn265, init266) {
    if ((arguments.length < 2) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res121 = null;
    } else {
      var if_res121 = rvoid();
    }
    if_res121;
    var let_result122 = values();
    var lists267 = Array.prototype.slice.call(arguments, 2);
    if (procedure_p(fn265) !== false) {
      var if_res123 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("procedure?"), $rjs_core.UString.makeInternedImmutable(", given:"), fn265, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res123 = null;
    }
    if_res123;
    var let_result124 = values();
    if (__lt__eq_(lists267.length, 0) !== false) {
      var if_res125 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.makeInternedImmutable("need at-least two arguments"));
    } else {
      var if_res125 = rvoid();
    }
    if_res125;
    var let_result126 = values();
    var lst_len268 = length(lists267[0]);
    var loop269 = function(i270) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i270 < lists267.length) !== false) {
        var v271 = lists267[i270];
        if (eq_p(length(v271), lst_len268) !== false) {
          var if_res127 = rvoid();
        } else {
          var if_res127 = error($rjs_core.Symbol.make("foldr"), $rjs_core.UString.makeInternedImmutable("all input lists must have equal length"));
        }
        if_res127;
        var if_res128 = loop269(i270 + 1);
      } else {
        var if_res128 = rvoid();
      }
      return if_res128;
    };
    loop269(1);
    return _foldr(fn265, init266, lists267);
  };
  var cl129 = function(end272) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range(0, end272, 1);
  };
  var cl130 = function(start273, end274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (__lt_(start273, end274) !== false) {
      var if_res133 = 1;
    } else {
      var if_res133 = -1;
    }
    return range(start273, end274, if_res133);
  };
  var cl131 = function(start275, end276, step277) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result278 = [];
    if ((__gt__eq_(step277, 0) && __lt_(step277, end276)) !== false) {
      var loop279 = function(i280) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i280 < end276) !== false) {
          result278.push(i280);
          var if_res134 = loop279(i280 + step277);
        } else {
          var if_res134 = rvoid();
        }
        return if_res134;
      };
      var if_res137 = loop279(start275);
    } else {
      if ((__lt__eq_(step277, 0) && __lt_(end276, start275)) !== false) {
        var loop281 = function(i282) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if ((i282 < __(end276)) !== false) {
            result278.push(__(i282));
            var if_res135 = loop281(i282 + __(step277));
          } else {
            var if_res135 = rvoid();
          }
          return if_res135;
        };
        var if_res136 = loop281(__(start275));
      } else {
        var if_res136 = rvoid();
      }
      var if_res137 = if_res136;
    }
    if_res137;
    return M2.Core.Pair.listFromArray(result278);
  };
  var range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam132 = {
      '1': cl129,
      '2': cl130,
      '3': cl131
    }[arguments.length];
    if (fixed_lam132 !== undefined) {
      return fixed_lam132.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var remove = function(v283, lst284, proc285) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (eq_p(proc285, undefined) !== false) {
      proc285 = M2.Core.isEqual;
      var if_res138 = null;
    } else {
      var if_res138 = rvoid();
    }
    if_res138;
    var loop286 = function(result287, lst288) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst288) !== false) {
        var if_res140 = reverse(result287);
      } else {
        if (proc285(v283, car(lst288)) !== false) {
          var if_res139 = append(reverse(result287), cdr(lst288));
        } else {
          var if_res139 = rvoid();
        }
        if_res139;
        var if_res140 = loop286(cons(car(lst288), result287), cdr(lst288));
      }
      return if_res140;
    };
    return loop286($rjs_core.Pair.makeList(), lst284);
  };
  var filter = function(fn289, lst290) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop291 = function(result292, lst293) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst293) !== false) {
        var if_res142 = reverse(result292);
      } else {
        if (fn289(lst293.hd) !== false) {
          var if_res141 = loop291(M2.Core.Pair.make(lst293.hd, result292), lst293.tl);
        } else {
          var if_res141 = loop291(result292, lst293.tl);
        }
        var if_res142 = if_res141;
      }
      return if_res142;
    };
    return loop291($rjs_core.Pair.makeList(), lst290);
  };
  var ormap = function(fn294) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res143 = null;
    } else {
      var if_res143 = rvoid();
    }
    if_res143;
    var let_result144 = values();
    var lists295 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args296 = M2.Core.argumentsToArray(arguments);
      var final_arg297 = args296.pop();
      return (final_arg297 || fn294.apply(null, args296)) && true;
    }, false].concat(lists295));
  };
  var andmap = function(fn298) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res145 = null;
    } else {
      var if_res145 = rvoid();
    }
    if_res145;
    var let_result146 = values();
    var lists299 = Array.prototype.slice.call(arguments, 1);
    return foldl.apply(this, [function() {
      var args300 = M2.Core.argumentsToArray(arguments);
      var final_arg301 = args300.pop();
      return (final_arg301 && fn298.apply(null, args300)) && true;
    }, true].concat(lists299));
  };
  var member = function(v302, lst303) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop304 = function(lst305) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst305) !== false) {
        var if_res148 = false;
      } else {
        if (M2.Core.isEqual(v302, lst305.hd) !== false) {
          var if_res147 = lst305;
        } else {
          var if_res147 = loop304(lst305.tl);
        }
        var if_res148 = if_res147;
      }
      return if_res148;
    };
    return loop304(lst303);
  };
  var compose = function() {
    var procs306 = M2.Core.argumentsToArray(arguments);
    return function() {
      var let_result149 = values();
      var result307 = M2.Core.argumentsToArray(arguments);
      var procs_times_308 = procs306.reverse();
      var loop309 = function(i310) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i310 < procs_times_308.length) !== false) {
          var p311 = procs_times_308[i310];
          result307 = p311.apply(null, result307);
          if (M2.Core.Values.check(result307) !== false) {
            result307 = result307.getAll();
            var if_res150 = null;
          } else {
            result307 = [result307];
            var if_res150 = null;
          }
          if_res150;
          var if_res151 = loop309(i310 + 1);
        } else {
          var if_res151 = rvoid();
        }
        return if_res151;
      };
      loop309(0);
      if ((result307.length === 1) !== false) {
        var if_res152 = result307[0];
      } else {
        var if_res152 = M2.Core.Values.make(result307);
      }
      return if_res152;
    };
  };
  var compose1 = function() {
    var procs312 = M2.Core.argumentsToArray(arguments);
    return function(v313) {
      var let_result153 = values();
      var result314 = v313;
      var procs_times_315 = procs312.reverse();
      var loop316 = function(i317) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if ((i317 < procs_times_315.length) !== false) {
          var p318 = procs_times_315[i317];
          result314 = p318(result314);
          var if_res154 = loop316(i317 + 1);
        } else {
          var if_res154 = rvoid();
        }
        return if_res154;
      };
      loop316(0);
      return result314;
    };
  };
  var list_ref = function(lst319, pos320) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop321 = function(i322, lst323) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst323) !== false) {
        var if_res156 = error($rjs_core.Symbol.make("list-ref?"), $rjs_core.UString.makeInternedImmutable("insufficient elements"));
      } else {
        if ((i322 === pos320) !== false) {
          var if_res155 = lst323.hd;
        } else {
          var if_res155 = loop321(i322 + 1, lst323.tl);
        }
        var if_res156 = if_res155;
      }
      return if_res156;
    };
    return loop321(0, lst319);
  };
  var build_list = function(n324, proc325) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arr326 = Array(n324);
    var loop327 = function(i328) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i328 < n324) !== false) {
        arr326[i328] = proc325(i328);
        var if_res157 = loop327(i328 + 1);
      } else {
        var if_res157 = rvoid();
      }
      return if_res157;
    };
    loop327(0);
    return M2.Core.Pair.listFromArray(arr326);
  };
  var make_list = function(n329, v330) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop331 = function(result332, i333) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if ((i333 === n329) !== false) {
        var if_res158 = result332;
      } else {
        var if_res158 = loop331(M2.Core.Pair.make(v330, result332), i333 + 1);
      }
      return if_res158;
    };
    return loop331($rjs_core.Pair.makeList(), 0);
  };
  var flatten = function(lst334) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (null_p(lst334) !== false) {
      var if_res160 = lst334;
    } else {
      if (pair_p(lst334) !== false) {
        var if_res159 = append(flatten(lst334.hd), flatten(lst334.tl));
      } else {
        var if_res159 = list(lst334);
      }
      var if_res160 = if_res159;
    }
    return if_res160;
  };
  var assoc = function(k335, lst336) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop337 = function(lst338) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (null_p(lst338) !== false) {
        var if_res162 = false;
      } else {
        if (M2.Core.isEqual(k335, lst338.hd.hd) !== false) {
          var if_res161 = lst338.hd;
        } else {
          var if_res161 = loop337(lst338.tl);
        }
        var if_res162 = if_res161;
      }
      return if_res162;
    };
    return loop337(lst336);
  };
  var memv = M2.Kernel.memv;
  var memq = M2.Kernel.memq;
  var memf = M2.Kernel.memf;
  var findf = M2.Kernel.findf;
  var sort9 = M2.Kernel.sort9;
  var assv = M2.Kernel.assv;
  var assq = M2.Kernel.assq;
  var assf = M2.Kernel.assf;
  var alt_reverse = reverse;
  var string = M2.Core.UString.makeMutableFromCharsVarArgs;
  var string_append = M2.Core.UString.stringAppend;
  var string_ref = function(s339, i340) {
    if (string_p(s339) !== false) {
      var if_res163 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s339, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res163 = null;
    }
    if_res163;
    if (exact_nonnegative_integer_p(i340) !== false) {
      var if_res164 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), i340, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res164 = null;
    }
    if_res164;
    return s339.charAt(i340);
  };
  var string_eq__p = function(sa341, sb342) {
    if (string_p(sa341) !== false) {
      var if_res165 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa341, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res165 = null;
    }
    if_res165;
    if (string_p(sb342) !== false) {
      var if_res166 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb342, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res166 = null;
    }
    if_res166;
    return M2.Core.UString.eq(sa341, sb342);
  };
  var string_lt__p = function(sa343, sb344) {
    if (string_p(sa343) !== false) {
      var if_res167 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa343, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res167 = null;
    }
    if_res167;
    if (string_p(sb344) !== false) {
      var if_res168 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb344, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res168 = null;
    }
    if_res168;
    return M2.Core.UString.lt(sa343, sb344);
  };
  var string_lt__eq__p = function(sa345, sb346) {
    if (string_p(sa345) !== false) {
      var if_res169 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa345, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res169 = null;
    }
    if_res169;
    if (string_p(sb346) !== false) {
      var if_res170 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb346, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res170 = null;
    }
    if_res170;
    return M2.Core.UString.lte(sa345, sb346);
  };
  var string_gt__p = function(sa347, sb348) {
    if (string_p(sa347) !== false) {
      var if_res171 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa347, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res171 = null;
    }
    if_res171;
    if (string_p(sb348) !== false) {
      var if_res172 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb348, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res172 = null;
    }
    if_res172;
    return M2.Core.UString.gt(sa347, sb348);
  };
  var string_gt__eq__p = function(sa349, sb350) {
    if (string_p(sa349) !== false) {
      var if_res173 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sa349, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res173 = null;
    }
    if_res173;
    if (string_p(sb350) !== false) {
      var if_res174 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), sb350, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res174 = null;
    }
    if_res174;
    return M2.Core.UString.gte(sa349, sb350);
  };
  var string_p = function(v351) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.UString.check(v351);
  };
  var fprintf = $rjs_core.attachProcedureArity(function(out352, form353) {
    for (var args354175 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args354175[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args354 = $rjs_core.Pair.listFromArray(args354175);
    return apply(M2.Kernel.fprintf, print_as_expression(), out352, form353, args354);
  });
  var format = $rjs_core.attachProcedureArity(function(form355) {
    for (var args356176 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      args356176[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args356 = $rjs_core.Pair.listFromArray(args356176);
    var out357 = open_output_string();
    apply(fprintf, out357, form355, args356);
    return get_output_string(out357);
  });
  var symbol_p = M2.Core.Symbol.check;
  var make_string4358 = function(k3359, c1360, c2361) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var k362 = k3359;
    if (c2361 !== false) {
      var if_res177 = c1360;
    } else {
      var if_res177 = $rjs_core.Char.charFromCodepoint(0);
    }
    var c363 = if_res177;
    return M2.Core.UString.repeatChar(k362, c363);
  };
  var cl178 = function(k364) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4358(k364, false, false);
  };
  var cl179 = function(k365, c1366) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_string4358(k365, c1366, true);
  };
  var make_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam180 = {
      '1': cl178,
      '2': cl179
    }[arguments.length];
    if (fixed_lam180 !== undefined) {
      return fixed_lam180.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var list__gt_string = function(lst367) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Kernel.listToString(lst367);
  };
  var string__gt_immutable_string8368 = function(s6369, s7370) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (s7370 !== false) {
      var if_res181 = s6369;
    } else {
      var if_res181 = string_p;
    }
    var s371 = if_res181;
    return M2.Core.UString.stringToImmutableString(s371);
  };
  var cl182 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8368(false, false);
  };
  var cl183 = function(s6372) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return string__gt_immutable_string8368(s6372, true);
  };
  var string__gt_immutable_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam184 = {
      '0': cl182,
      '1': cl183
    }[arguments.length];
    if (fixed_lam184 !== undefined) {
      return fixed_lam184.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var symbol__gt_string = function(v373) {
    if (symbol_p(v373) !== false) {
      var if_res185 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("symbol?"), $rjs_core.UString.makeInternedImmutable(", given:"), v373, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res185 = null;
    }
    if_res185;
    return M2.Core.UString.makeMutable(v373.toString());
  };
  var string__gt_symbol = function(s374) {
    if (string_p(s374) !== false) {
      var if_res186 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s374, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res186 = null;
    }
    if_res186;
    return M2.Core.Symbol.make(s374);
  };
  var string__gt_uninterned_symbol = function(s375) {
    if (string_p(s375) !== false) {
      var if_res187 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s375, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res187 = null;
    }
    if_res187;
    return M2.Core.Symbol.makeUninterned(s375);
  };
  var symbol_interned_p = function(sym376) {
    if (symbol_p(sym376) !== false) {
      var if_res188 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("symbol?"), $rjs_core.UString.makeInternedImmutable(", given:"), sym376, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res188 = null;
    }
    if_res188;
    return sym376 === M2.Core.Symbol.make(sym376.v);
  };
  var symbol_eq__p = function(s377, v378) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return s377.equals(v378);
  };
  var string_length = function(s379) {
    if (string_p(s379) !== false) {
      var if_res189 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s379, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res189 = null;
    }
    if_res189;
    return s379.length;
  };
  var string_downcase = function(s380) {
    if (string_p(s380) !== false) {
      var if_res190 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s380, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res190 = null;
    }
    if_res190;
    return s380.toLowerCase();
  };
  var string_upcase = function(s381) {
    if (string_p(s381) !== false) {
      var if_res191 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), s381, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res191 = null;
    }
    if_res191;
    return s381.toUpperCase();
  };
  var substring14382 = function(str12383, start13384, end10385, end11386) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var str387 = str12383;
    var start388 = start13384;
    if (end11386 !== false) {
      var if_res192 = end10385;
    } else {
      var if_res192 = false;
    }
    var end389 = if_res192;
    if (not(M2.Core.UString.check(str387)) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("expected a string"));
      var if_res196 = null;
    } else {
      if ((start388 < 0) !== false) {
        throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid start index"));
        var if_res195 = null;
      } else {
        if (((end389 !== false) && (((end389 < 0) || (end389 > str387.length)) || (end389 < start388))) !== false) {
          throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("invalid end index"));
          var if_res194 = null;
        } else {
          if ((end389 === false) !== false) {
            end389 = str387.length;
            var if_res193 = null;
          } else {
            var if_res193 = rvoid();
          }
          var if_res194 = if_res193;
        }
        var if_res195 = if_res194;
      }
      var if_res196 = if_res195;
    }
    if_res196;
    return str387.substring(start388, end389);
  };
  var cl197 = function(str390, start391) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring14382(str390, start391, false, false);
  };
  var cl198 = function(str392, start393, end10394) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return substring14382(str392, start393, end10394, true);
  };
  var substring = $rjs_core.attachProcedureArity(function() {
    var fixed_lam199 = {
      '2': cl197,
      '3': cl198
    }[arguments.length];
    if (fixed_lam199 !== undefined) {
      return fixed_lam199.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var string_split = function(str395, sep396) {
    if (string_p(str395) !== false) {
      var if_res200 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str395, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res200 = null;
    }
    if_res200;
    if ((function(v397) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v397) || regexp_p(v397);
    })(sep396) !== false) {
      var if_res201 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/or string? regexp?)"), $rjs_core.UString.makeInternedImmutable(", given:"), sep396, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res201 = null;
    }
    if_res201;
    return M2.Core.Pair.listFromArray(str395.split(sep396));
  };
  var string_set_bang_ = function(str398, k399, char400) {
    if ((function(v401) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return string_p(v401) && (function(v402) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return not(immutable_p(v402));
      })(v401);
    })(str398) !== false) {
      var if_res202 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("(check/and string? (check/not immutable?))"), $rjs_core.UString.makeInternedImmutable(", given:"), str398, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res202 = null;
    }
    if_res202;
    if (exact_nonnegative_integer_p(k399) !== false) {
      var if_res203 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), k399, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res203 = null;
    }
    if_res203;
    if (char_p(char400) !== false) {
      var if_res204 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), char400, $rjs_core.UString.makeInternedImmutable(", at:"), 2);
      var if_res204 = null;
    }
    if_res204;
    return str398.setCharAt(k399, char400);
  };
  var char_p = function(c403) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Char.check(c403);
  };
  var char__gt_integer = function(c404) {
    if (char_p(c404) !== false) {
      var if_res205 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), c404, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res205 = null;
    }
    if_res205;
    return M2.Core.Char.charToInteger(c404);
  };
  var integer__gt_char = function(k405) {
    if (exact_nonnegative_integer_p(k405) !== false) {
      var if_res206 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), $rjs_core.UString.makeInternedImmutable(", given:"), k405, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res206 = null;
    }
    if_res206;
    return M2.Core.Char.integerToChar(k405);
  };
  var char_utf_8_length = function(c406) {
    if (char_p(c406) !== false) {
      var if_res207 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), c406, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res207 = null;
    }
    if_res207;
    return M2.Core.Char.charUtf8Length(c406);
  };
  var char_lt__p = function(a407, b408) {
    if (char_p(a407) !== false) {
      var if_res208 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a407, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res208 = null;
    }
    if_res208;
    if (char_p(b408) !== false) {
      var if_res209 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b408, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res209 = null;
    }
    if_res209;
    return a407 < b408;
  };
  var char_lt__eq__p = function(a409, b410) {
    if (char_p(a409) !== false) {
      var if_res210 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a409, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res210 = null;
    }
    if_res210;
    if (char_p(b410) !== false) {
      var if_res211 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b410, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res211 = null;
    }
    if_res211;
    return a409 <= b410;
  };
  var char_gt__p = function(a411, b412) {
    if (char_p(a411) !== false) {
      var if_res212 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a411, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res212 = null;
    }
    if_res212;
    if (char_p(b412) !== false) {
      var if_res213 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b412, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res213 = null;
    }
    if_res213;
    return a411 > b412;
  };
  var char_gt__eq__p = function(a413, b414) {
    if (char_p(a413) !== false) {
      var if_res214 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a413, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res214 = null;
    }
    if_res214;
    if (char_p(b414) !== false) {
      var if_res215 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b414, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res215 = null;
    }
    if_res215;
    return a413 >= b414;
  };
  var char_eq__p = function(a415, b416) {
    if (char_p(a415) !== false) {
      var if_res216 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), a415, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res216 = null;
    }
    if_res216;
    if (char_p(b416) !== false) {
      var if_res217 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("char?"), $rjs_core.UString.makeInternedImmutable(", given:"), b416, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res217 = null;
    }
    if_res217;
    return M2.Core.Char.eq(a415, b416);
  };
  var box = M2.Core.Box.make;
  var unbox = function(v417) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v417.get();
  };
  var set_box_bang_ = function(b418, v419) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return b418.set(v419);
  };
  var let_result218 = M2.Core.Struct.makeStructTypeProperty({'name': $rjs_core.UString.makeInternedImmutable("prop:evt")});
  var prop_evt = let_result218.getAt(0);
  var evt_p = let_result218.getAt(1);
  var prop_checked_procedure = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:checked-procedure")).getAt(0);
  var prop_impersonator_of = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:impersonator-of")).getAt(0);
  var prop_arity_string = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:arity-string")).getAt(0);
  var prop_incomplete_arity = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:incomplete-arity")).getAt(0);
  var prop_method_arity_error = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:method-arity-error")).getAt(0);
  var prop_exn_srclocs = make_struct_type_property($rjs_core.UString.makeInternedImmutable("prop:exn:srclocs")).getAt(0);
  var prop_procedure = M2.Core.Struct.propProcedure;
  var error = M2.Kernel.error;
  var bytes_p = function(bs420) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Bytes.check(bs420);
  };
  var bytes__gt_string_by_utf_8 = function(bs421) {
    if (bytes_p(bs421) !== false) {
      var if_res219 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bs421, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res219 = null;
    }
    if_res219;
    return M2.Core.UString.fromBytesUtf8(bs421);
  };
  var string__gt_bytes_by_utf_8 = function(str422) {
    if (string_p(str422) !== false) {
      var if_res220 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str422, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res220 = null;
    }
    if_res220;
    return M2.Core.UString.toBytesUtf8(str422);
  };
  var bytes_eq__p = function(bstr1423, bstr2424) {
    if (bytes_p(bstr1423) !== false) {
      var if_res221 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bstr1423, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res221 = null;
    }
    if_res221;
    if (bytes_p(bstr2424) !== false) {
      var if_res222 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bstr2424, $rjs_core.UString.makeInternedImmutable(", at:"), 1);
      var if_res222 = null;
    }
    if_res222;
    return M2.Core.Bytes.eq(bstr1423, bstr2424);
  };
  var current_continuation_marks = M2.Core.Marks.getContinuationMarks;
  var continuation_mark_set__gt_list = M2.Core.Marks.getMarks;
  var continuation_mark_set_first = function(mark_set425, key_v426, none_v427, prompt_tag428) {
    var let_result223 = values();
    var mark_set429 = mark_set429 || M2.Core.Marks.getContinuationMarks(prompt_tag428);
    var marks430 = M2.Core.Marks.getMarks(mark_set429, key_v426, prompt_tag428);
    if (null_p(marks430) !== false) {
      var if_res224 = none_v427;
    } else {
      var if_res224 = marks430.hd;
    }
    return if_res224;
  };
  var make_parameter = M2.Paramz.makeParameter;
  var call_with_continuation_prompt = M2.Core.Marks.callWithContinuationPrompt;
  var abort_current_continuation = function(prompt_tag431) {
    if ((arguments.length < 1) !== false) {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("arity mismatch"));
      var if_res225 = null;
    } else {
      var if_res225 = rvoid();
    }
    if_res225;
    var let_result226 = values();
    var args432 = Array.prototype.slice.call(arguments, 1);
    throw new M2.Core.Marks.AbortCurrentContinuation(prompt_tag431, args432);
    return null;
  };
  var make_continuation_prompt_tag = M2.Core.Marks.makeContinuationPromptTag;
  var default_continuation_prompt_tag = M2.Core.Marks.defaultContinuationPromptTag;
  var raise = function(e433) {
    var abort_ccp434 = continuation_mark_set_first(current_continuation_marks(), M2.Paramz.ExceptionHandlerKey);
    return abort_ccp434(e433);
  };
  var current_output_port = make_parameter(M2.Core.Ports.standardOutputPort);
  var current_error_port = make_parameter(M2.Core.Ports.standardErrorPort);
  var current_print = make_parameter(function(p435) {
    if (void_p(p435) !== false) {
      var if_res227 = rvoid();
    } else {
      print(p435);
      var if_res227 = newline();
    }
    return if_res227;
  });
  var port_p = function(p436) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.check(p436);
  };
  var input_port_p = function(p437) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isInputPort(p437);
  };
  var output_port_p = function(p438) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isOutputPort(p438);
  };
  var string_port_p = function(p439) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.isStringPort(p439);
  };
  var open_output_string = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.openOutputString();
  };
  var get_output_string = function(p440) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Ports.getOutputString(p440);
  };
  var print_as_expression = make_parameter(true);
  var display19441 = function(datum18442, out16443, out17444) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum445 = datum18442;
    if (out17444 !== false) {
      var if_res228 = out16443;
    } else {
      var if_res228 = current_output_port();
    }
    var out446 = if_res228;
    return M2.Core.display(out446, datum445);
  };
  var cl229 = function(datum447) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display19441(datum447, false, false);
  };
  var cl230 = function(datum448, out16449) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return display19441(datum448, out16449, true);
  };
  var display = $rjs_core.attachProcedureArity(function() {
    var fixed_lam231 = {
      '1': cl229,
      '2': cl230
    }[arguments.length];
    if (fixed_lam231 !== undefined) {
      return fixed_lam231.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var write24450 = function(datum23451, out21452, out22453) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum454 = datum23451;
    if (out22453 !== false) {
      var if_res232 = out21452;
    } else {
      var if_res232 = current_output_port();
    }
    var out455 = if_res232;
    return M2.Core.write(out455, datum454);
  };
  var cl233 = function(datum456) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write24450(datum456, false, false);
  };
  var cl234 = function(datum457, out21458) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return write24450(datum457, out21458, true);
  };
  var write = $rjs_core.attachProcedureArity(function() {
    var fixed_lam235 = {
      '1': cl233,
      '2': cl234
    }[arguments.length];
    if (fixed_lam235 !== undefined) {
      return fixed_lam235.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var print31459 = function(datum30460, out26461, quote_depth27462, out28463, quote_depth29464) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var datum465 = datum30460;
    if (out28463 !== false) {
      var if_res236 = out26461;
    } else {
      var if_res236 = current_output_port();
    }
    var out466 = if_res236;
    if (quote_depth29464 !== false) {
      var if_res237 = quote_depth27462;
    } else {
      var if_res237 = 0;
    }
    var quote_depth467 = if_res237;
    return M2.Core.print(out466, datum465, print_as_expression(), quote_depth467);
  };
  var cl238 = function(datum468) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum468, false, false, false, false);
  };
  var cl239 = function(datum469, out470, quote_depth27471) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum469, out470, quote_depth27471, true, true);
  };
  var cl240 = function(datum472, out26473) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return print31459(datum472, out26473, false, true, false);
  };
  var print = $rjs_core.attachProcedureArity(function() {
    var fixed_lam241 = {
      '1': cl238,
      '3': cl239,
      '2': cl240
    }[arguments.length];
    if (fixed_lam241 !== undefined) {
      return fixed_lam241.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var newline35474 = function(out33475, out34476) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (out34476 !== false) {
      var if_res242 = out33475;
    } else {
      var if_res242 = current_output_port();
    }
    var out477 = if_res242;
    return display($rjs_core.UString.makeInternedImmutable("\n"), out477);
  };
  var cl243 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline35474(false, false);
  };
  var cl244 = function(out33478) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return newline35474(out33478, true);
  };
  var newline = $rjs_core.attachProcedureArity(function() {
    var fixed_lam245 = {
      '0': cl243,
      '1': cl244
    }[arguments.length];
    if (fixed_lam245 !== undefined) {
      return fixed_lam245.apply(null, arguments);
    } else {
      return error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var current_inspector = function() {
    return true;
  };
  var raise_argument_error = error;
  var check_method = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var random = M2.Kernel.random;
  var current_seconds = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.floor(Date.now() / 1000);
  };
  var regexp_p = function(v479) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.check(v479);
  };
  var pregexp_p = regexp_p;
  var byte_regexp_p = regexp_p;
  var byte_pregexp_p = regexp_p;
  var regexp = function(str480) {
    if (string_p(str480) !== false) {
      var if_res246 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("string?"), $rjs_core.UString.makeInternedImmutable(", given:"), str480, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res246 = null;
    }
    if_res246;
    return M2.Core.Regexp.fromString(str480);
  };
  var pregexp = regexp;
  var byte_regexp = function(bs481) {
    if (bytes_p(bs481) !== false) {
      var if_res247 = rvoid();
    } else {
      throw M2.Core.racketContractError($rjs_core.UString.makeInternedImmutable("Expected:"), $rjs_core.UString.makeInternedImmutable("bytes?"), $rjs_core.UString.makeInternedImmutable(", given:"), bs481, $rjs_core.UString.makeInternedImmutable(", at:"), 0);
      var if_res247 = null;
    }
    if_res247;
    return M2.Core.Regexp.fromString(bytes__gt_string_by_utf_8(bs481));
  };
  var byte_pregexp = byte_regexp;
  var regexp_match = function(pattern482, input483) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.Core.Regexp.match(pattern482, input483);
  };
  var let_result248 = make_struct_type($rjs_core.Symbol.make("kernel:arity-at-least"), false, 1, 0, false, rnull, false, false, $rjs_core.Pair.makeList(0), false, $rjs_core.Symbol.make("kernel:arity-at-least"));
  var struct_484 = let_result248.getAt(0);
  var make_485 = let_result248.getAt(1);
  var __p486 = let_result248.getAt(2);
  var __ref487 = let_result248.getAt(3);
  var __set_bang_488 = let_result248.getAt(4);
  var let_result249 = values(struct_484, make_485, __p486, make_struct_field_accessor(__ref487, 0, $rjs_core.Symbol.make("value")));
  var struct_kernel_arity_at_least = let_result249.getAt(0);
  var make_arity_at_least = let_result249.getAt(1);
  var kernel_arity_at_least_p = let_result249.getAt(2);
  var kernel_arity_at_least_value = let_result249.getAt(3);
  var procedure_p = function(f489) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return typeof(f489) === "function";
  };
  var arity_at_least = make_arity_at_least;
  var arity_at_least_p = function(p490) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_p(p490);
  };
  var arity_at_least_value = function(p491) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kernel_arity_at_least_value(p491);
  };
  var procedure_arity_includes_p = function(f492) {
    return true;
  };
  var procedure_arity = function(fn493) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (Array.isArray(fn493.__rjs_arityValue) !== false) {
      if ((fn493.__rjs_arityValue.length === 1) !== false) {
        var if_res250 = fn493.__rjs_arityValue[0];
      } else {
        var if_res250 = M2.Core.Pair.listFromArray(fn493.__rjs_arityValue);
      }
      var if_res252 = if_res250;
    } else {
      if ((fn493.__rjs_arityValue === undefined) !== false) {
        var if_res251 = fn493.length;
      } else {
        var if_res251 = make_arity_at_least(fn493.__rjs_arityValue || fn493.length);
      }
      var if_res252 = if_res251;
    }
    return if_res252;
  };
  var procedure_arity_p = function(v494) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (exact_nonnegative_integer_p(v494) || kernel_arity_at_least_p(v494)) || ormap(function(v495) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return exact_nonnegative_integer_p(v495) || kernel_arity_at_least_p(v495);
    }, v494);
  };
  var checked_procedure_check_and_extract = function(type496, v497, proc498, v1499, v2500) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((M2.Core.Struct.check(v497, type496) && type496._findProperty(prop_checked_procedure)) !== false) {
      var fn501 = v497.getField(0);
      var r1502 = fn501(v1499, v2500);
      if (r1502 !== false) {
        var if_res253 = v497.getField(1);
      } else {
        var if_res253 = proc498(v497, v1499, v2500);
      }
      var if_res254 = if_res253;
    } else {
      var if_res254 = proc498(v497, v1499, v2500);
    }
    return if_res254;
  };
  var gensym = function(sym503) {
    var s504 = (sym503 && sym503.v) || $rjs_core.UString.makeInternedImmutable("");
    __count = __count + 1;
    return M2.Core.Symbol.makeUninterned(s504 + __count);
  };
  var eval_jit_enabled = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var variable_reference_constant_p = function(x505) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return false;
  };
  var inspector_p = function(p506) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  };
  var make_thread_cell = function(p507) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p507;
  };
  var __count = 1000;
  var system_type = function(system_type508, mod509) {
    return $rjs_core.Symbol.make("javascript");
  };
  var make_weak_hash = make_hash;
  var make_weak_hasheqv = make_hasheqv;
  var make_weak_hasheq = make_hasheq;
  var __rjs_quoted__ = {};
  __rjs_quoted__.make_struct_type_property = make_struct_type_property;
  __rjs_quoted__.__plus_ = __plus_;
  __rjs_quoted__.struct_kernel_arity_at_least = struct_kernel_arity_at_least;
  __rjs_quoted__.length = length;
  __rjs_quoted__.kernel_arity_at_least_value = kernel_arity_at_least_value;
  __rjs_quoted__.make_arity_at_least = make_arity_at_least;
  __rjs_quoted__.kernel_arity_at_least_p = kernel_arity_at_least_p;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get equal_p() {
      return equal_p;
    },
    get eqv_p() {
      return eqv_p;
    },
    get eq_p() {
      return eq_p;
    },
    get values() {
      return values;
    },
    get call_with_values() {
      return call_with_values;
    },
    get immutable_p() {
      return immutable_p;
    },
    get rvoid() {
      return rvoid;
    },
    get void_p() {
      return void_p;
    },
    get number_p() {
      return number_p;
    },
    get real_p() {
      return real_p;
    },
    get integer_p() {
      return integer_p;
    },
    get zero_p() {
      return zero_p;
    },
    get raise_mismatch_error() {
      return raise_mismatch_error;
    },
    get positive_p() {
      return positive_p;
    },
    get negative_p() {
      return negative_p;
    },
    get add1() {
      return add1;
    },
    get sub1() {
      return sub1;
    },
    get quotient() {
      return quotient;
    },
    get even_p() {
      return even_p;
    },
    get odd_p() {
      return odd_p;
    },
    get exact_nonnegative_integer_p() {
      return exact_nonnegative_integer_p;
    },
    get exact_integer_p() {
      return exact_integer_p;
    },
    get __times_() {
      return __times_;
    },
    get __by_() {
      return __by_;
    },
    get __plus_() {
      return __plus_;
    },
    get __() {
      return __;
    },
    get __lt_() {
      return __lt_;
    },
    get __gt_() {
      return __gt_;
    },
    get __lt__eq_() {
      return __lt__eq_;
    },
    get __gt__eq_() {
      return __gt__eq_;
    },
    get __eq_() {
      return __eq_;
    },
    get floor() {
      return floor;
    },
    get abs() {
      return abs;
    },
    get sin() {
      return sin;
    },
    get cos() {
      return cos;
    },
    get tan() {
      return tan;
    },
    get atan() {
      return atan;
    },
    get ceiling() {
      return ceiling;
    },
    get round() {
      return round;
    },
    get min() {
      return min;
    },
    get max() {
      return max;
    },
    get log() {
      return log;
    },
    get expt() {
      return expt;
    },
    get sqrt() {
      return sqrt;
    },
    get sqr() {
      return sqr;
    },
    get remainder() {
      return remainder;
    },
    get number__gt_string() {
      return number__gt_string;
    },
    get inexact__gt_exact() {
      return inexact__gt_exact;
    },
    get exact__gt_inexact() {
      return exact__gt_inexact;
    },
    get not() {
      return not;
    },
    get rfalse() {
      return rfalse;
    },
    get rtrue() {
      return rtrue;
    },
    get false_p() {
      return false_p;
    },
    get car() {
      return car;
    },
    get cdr() {
      return cdr;
    },
    get cons() {
      return cons;
    },
    get pair_p() {
      return pair_p;
    },
    get caar() {
      return caar;
    },
    get cadr() {
      return cadr;
    },
    get cdar() {
      return cdar;
    },
    get cddr() {
      return cddr;
    },
    get caddr() {
      return caddr;
    },
    get rnull() {
      return rnull;
    },
    get list() {
      return list;
    },
    get null_p() {
      return null_p;
    },
    get list_p() {
      return list_p;
    },
    get length() {
      return length;
    },
    get reverse() {
      return reverse;
    },
    get list_times_() {
      return list_times_;
    },
    get append() {
      return append;
    },
    get for_each() {
      return for_each;
    },
    get mcons() {
      return mcons;
    },
    get mpair_p() {
      return mpair_p;
    },
    get mcar() {
      return mcar;
    },
    get mcdr() {
      return mcdr;
    },
    get set_mcar_bang_() {
      return set_mcar_bang_;
    },
    get set_mcdr_bang_() {
      return set_mcdr_bang_;
    },
    get make_struct_type() {
      return make_struct_type;
    },
    get make_struct_field_accessor() {
      return make_struct_field_accessor;
    },
    get make_struct_field_mutator() {
      return make_struct_field_mutator;
    },
    get make_struct_type_property() {
      return make_struct_type_property;
    },
    get check_struct_type() {
      return check_struct_type;
    },
    get struct_type_p() {
      return struct_type_p;
    },
    get struct_type_info() {
      return struct_type_info;
    },
    get vector() {
      return vector;
    },
    get make_vector() {
      return make_vector;
    },
    get vector_p() {
      return vector_p;
    },
    get vector_length() {
      return vector_length;
    },
    get vector_ref() {
      return vector_ref;
    },
    get vector_set_bang_() {
      return vector_set_bang_;
    },
    get vector__gt_list() {
      return vector__gt_list;
    },
    get vector__gt_immutable_vector() {
      return vector__gt_immutable_vector;
    },
    get hash() {
      return hash;
    },
    get hasheqv() {
      return hasheqv;
    },
    get hasheq() {
      return hasheq;
    },
    get make_hash() {
      return make_hash;
    },
    get make_hasheqv() {
      return make_hasheqv;
    },
    get make_hasheq() {
      return make_hasheq;
    },
    get make_immutable_hash() {
      return make_immutable_hash;
    },
    get make_immutable_hasheqv() {
      return make_immutable_hasheqv;
    },
    get make_immutable_hasheq() {
      return make_immutable_hasheq;
    },
    get hash_p() {
      return hash_p;
    },
    get hash_equal_p() {
      return hash_equal_p;
    },
    get hash_eqv_p() {
      return hash_eqv_p;
    },
    get hash_eq_p() {
      return hash_eq_p;
    },
    get hash_ref() {
      return hash_ref;
    },
    get hash_set() {
      return hash_set;
    },
    get hash_set_bang_() {
      return hash_set_bang_;
    },
    get hash_map() {
      return hash_map;
    },
    get apply() {
      return apply;
    },
    get map() {
      return map;
    },
    get foldl() {
      return foldl;
    },
    get _foldr() {
      return _foldr;
    },
    get foldr() {
      return foldr;
    },
    get range() {
      return range;
    },
    get remove() {
      return remove;
    },
    get filter() {
      return filter;
    },
    get ormap() {
      return ormap;
    },
    get andmap() {
      return andmap;
    },
    get member() {
      return member;
    },
    get compose() {
      return compose;
    },
    get compose1() {
      return compose1;
    },
    get list_ref() {
      return list_ref;
    },
    get build_list() {
      return build_list;
    },
    get make_list() {
      return make_list;
    },
    get flatten() {
      return flatten;
    },
    get assoc() {
      return assoc;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    },
    get memf() {
      return memf;
    },
    get findf() {
      return findf;
    },
    get sort9() {
      return sort9;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get assf() {
      return assf;
    },
    get alt_reverse() {
      return alt_reverse;
    },
    get string() {
      return string;
    },
    get string_append() {
      return string_append;
    },
    get string_ref() {
      return string_ref;
    },
    get string_eq__p() {
      return string_eq__p;
    },
    get string_lt__p() {
      return string_lt__p;
    },
    get string_lt__eq__p() {
      return string_lt__eq__p;
    },
    get string_gt__p() {
      return string_gt__p;
    },
    get string_gt__eq__p() {
      return string_gt__eq__p;
    },
    get string_p() {
      return string_p;
    },
    get fprintf() {
      return fprintf;
    },
    get format() {
      return format;
    },
    get symbol_p() {
      return symbol_p;
    },
    get make_string() {
      return make_string;
    },
    get list__gt_string() {
      return list__gt_string;
    },
    get string__gt_immutable_string() {
      return string__gt_immutable_string;
    },
    get symbol__gt_string() {
      return symbol__gt_string;
    },
    get string__gt_symbol() {
      return string__gt_symbol;
    },
    get string__gt_uninterned_symbol() {
      return string__gt_uninterned_symbol;
    },
    get symbol_interned_p() {
      return symbol_interned_p;
    },
    get symbol_eq__p() {
      return symbol_eq__p;
    },
    get string_length() {
      return string_length;
    },
    get string_downcase() {
      return string_downcase;
    },
    get string_upcase() {
      return string_upcase;
    },
    get substring() {
      return substring;
    },
    get string_split() {
      return string_split;
    },
    get string_set_bang_() {
      return string_set_bang_;
    },
    get char_p() {
      return char_p;
    },
    get char__gt_integer() {
      return char__gt_integer;
    },
    get integer__gt_char() {
      return integer__gt_char;
    },
    get char_utf_8_length() {
      return char_utf_8_length;
    },
    get char_lt__p() {
      return char_lt__p;
    },
    get char_lt__eq__p() {
      return char_lt__eq__p;
    },
    get char_gt__p() {
      return char_gt__p;
    },
    get char_gt__eq__p() {
      return char_gt__eq__p;
    },
    get char_eq__p() {
      return char_eq__p;
    },
    get box() {
      return box;
    },
    get unbox() {
      return unbox;
    },
    get set_box_bang_() {
      return set_box_bang_;
    },
    get evt_p() {
      return evt_p;
    },
    get prop_evt() {
      return prop_evt;
    },
    get prop_checked_procedure() {
      return prop_checked_procedure;
    },
    get prop_impersonator_of() {
      return prop_impersonator_of;
    },
    get prop_arity_string() {
      return prop_arity_string;
    },
    get prop_incomplete_arity() {
      return prop_incomplete_arity;
    },
    get prop_method_arity_error() {
      return prop_method_arity_error;
    },
    get prop_exn_srclocs() {
      return prop_exn_srclocs;
    },
    get prop_procedure() {
      return prop_procedure;
    },
    get error() {
      return error;
    },
    get bytes_p() {
      return bytes_p;
    },
    get bytes__gt_string_by_utf_8() {
      return bytes__gt_string_by_utf_8;
    },
    get string__gt_bytes_by_utf_8() {
      return string__gt_bytes_by_utf_8;
    },
    get bytes_eq__p() {
      return bytes_eq__p;
    },
    get current_continuation_marks() {
      return current_continuation_marks;
    },
    get continuation_mark_set__gt_list() {
      return continuation_mark_set__gt_list;
    },
    get continuation_mark_set_first() {
      return continuation_mark_set_first;
    },
    get make_parameter() {
      return make_parameter;
    },
    get call_with_continuation_prompt() {
      return call_with_continuation_prompt;
    },
    get abort_current_continuation() {
      return abort_current_continuation;
    },
    get make_continuation_prompt_tag() {
      return make_continuation_prompt_tag;
    },
    get default_continuation_prompt_tag() {
      return default_continuation_prompt_tag;
    },
    get raise() {
      return raise;
    },
    get current_output_port() {
      return current_output_port;
    },
    get current_error_port() {
      return current_error_port;
    },
    get current_print() {
      return current_print;
    },
    get port_p() {
      return port_p;
    },
    get input_port_p() {
      return input_port_p;
    },
    get output_port_p() {
      return output_port_p;
    },
    get string_port_p() {
      return string_port_p;
    },
    get open_output_string() {
      return open_output_string;
    },
    get get_output_string() {
      return get_output_string;
    },
    get print_as_expression() {
      return print_as_expression;
    },
    get display() {
      return display;
    },
    get write() {
      return write;
    },
    get print() {
      return print;
    },
    get newline() {
      return newline;
    },
    get current_inspector() {
      return current_inspector;
    },
    get raise_argument_error() {
      return raise_argument_error;
    },
    get check_method() {
      return check_method;
    },
    get random() {
      return random;
    },
    get current_seconds() {
      return current_seconds;
    },
    get regexp_p() {
      return regexp_p;
    },
    get pregexp_p() {
      return pregexp_p;
    },
    get byte_regexp_p() {
      return byte_regexp_p;
    },
    get byte_pregexp_p() {
      return byte_pregexp_p;
    },
    get regexp() {
      return regexp;
    },
    get pregexp() {
      return pregexp;
    },
    get byte_regexp() {
      return byte_regexp;
    },
    get byte_pregexp() {
      return byte_pregexp;
    },
    get regexp_match() {
      return regexp_match;
    },
    get kernel_arity_at_least_value() {
      return kernel_arity_at_least_value;
    },
    get kernel_arity_at_least_p() {
      return kernel_arity_at_least_p;
    },
    get make_arity_at_least() {
      return make_arity_at_least;
    },
    get struct_kernel_arity_at_least() {
      return struct_kernel_arity_at_least;
    },
    get procedure_p() {
      return procedure_p;
    },
    get arity_at_least() {
      return arity_at_least;
    },
    get arity_at_least_p() {
      return arity_at_least_p;
    },
    get arity_at_least_value() {
      return arity_at_least_value;
    },
    get procedure_arity_includes_p() {
      return procedure_arity_includes_p;
    },
    get procedure_arity() {
      return procedure_arity;
    },
    get procedure_arity_p() {
      return procedure_arity_p;
    },
    get checked_procedure_check_and_extract() {
      return checked_procedure_check_and_extract;
    },
    get gensym() {
      return gensym;
    },
    get eval_jit_enabled() {
      return eval_jit_enabled;
    },
    get variable_reference_constant_p() {
      return variable_reference_constant_p;
    },
    get inspector_p() {
      return inspector_p;
    },
    get make_thread_cell() {
      return make_thread_cell;
    },
    get system_type() {
      return system_type;
    },
    get make_weak_hash() {
      return make_weak_hash;
    },
    get make_weak_hasheqv() {
      return make_weak_hasheqv;
    },
    get make_weak_hasheq() {
      return make_weak_hasheq;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/private/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var ___js_ffi = $rjs_core.attachProcedureArity(function() {
    for (var _613341 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      _613341[$__1] = arguments[$__1];
    var _613 = $rjs_core.Pair.listFromArray(_613341);
    return M0.error($rjs_core.Symbol.make("racketscript"), $rjs_core.UString.makeInternedImmutable("can't make JS ffi calls in Racket"));
  });
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ___js_ffi() {
      return ___js_ffi;
    }
  };
})();
var $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "links/racketscript-compiler/racketscript/interop.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var __eq__gt_$ = function(lam_expr636) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.Marks.wrapWithContext(lam_expr636);
  };
  var js_string = function(e637) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return e637.toString();
  };
  var racket_string = function(e638) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return $rjs_core.UString.makeImmutable(e638);
  };
  var assoc__gt_object = function(pairs639) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var result640 = {};
    var loop641 = function(pairs642) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(pairs642) !== false) {
        var if_res348 = result640;
      } else {
        var p643 = M0.car(pairs642);
        var k645 = M0.car(p643);
        if (M0.string_p(k645) !== false) {
          var if_res347 = k645;
        } else {
          if (M0.symbol_p(k645) !== false) {
            var if_res346 = M0.symbol__gt_string(k645);
          } else {
            var if_res346 = M0.error($rjs_core.Symbol.make("assoc->object"), $rjs_core.UString.makeInternedImmutable("invalid key value"));
          }
          var if_res347 = if_res346;
        }
        var key644 = if_res347;
        result640[key644] = M0.car(M0.cdr(p643));
        var if_res348 = loop641(M0.cdr(pairs642));
      }
      return if_res348;
    };
    return loop641(pairs639);
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.js_string = js_string;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get assoc__gt_object() {
      return assoc__gt_object;
    },
    get racket_string() {
      return racket_string;
    },
    get js_string() {
      return js_string;
    },
    get __eq__gt_$() {
      return __eq__gt_$;
    }
  };
})();
var $__collects_47_racket_47_private_47_member_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/member.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var bad_list = function(who3074, orig_l3075) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who3074, $rjs_core.UString.makeInternedImmutable("not a proper list: "), orig_l3075);
  };
  var memq3076 = function(v3077, orig_l3078) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3079 = function(ls3080) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3080) !== false) {
        var if_res2071 = false;
      } else {
        if (M0.not(M0.pair_p(ls3080)) !== false) {
          var if_res2070 = bad_list($rjs_core.Symbol.make("memq"), orig_l3078);
        } else {
          if (M0.eq_p(v3077, M0.car(ls3080)) !== false) {
            var if_res2069 = ls3080;
          } else {
            var if_res2069 = loop3079(M0.cdr(ls3080));
          }
          var if_res2070 = if_res2069;
        }
        var if_res2071 = if_res2070;
      }
      return if_res2071;
    };
    return loop3079(orig_l3078);
  };
  var memv3081 = function(v3082, orig_l3083) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3084 = function(ls3085) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3085) !== false) {
        var if_res2068 = false;
      } else {
        if (M0.not(M0.pair_p(ls3085)) !== false) {
          var if_res2067 = bad_list($rjs_core.Symbol.make("memv"), orig_l3083);
        } else {
          if (M0.eqv_p(v3082, M0.car(ls3085)) !== false) {
            var if_res2066 = ls3085;
          } else {
            var if_res2066 = loop3084(M0.cdr(ls3085));
          }
          var if_res2067 = if_res2066;
        }
        var if_res2068 = if_res2067;
      }
      return if_res2068;
    };
    return loop3084(orig_l3083);
  };
  var member3087 = function(v3088, orig_l3089) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop3090 = function(ls3091) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ls3091) !== false) {
        var if_res2057 = false;
      } else {
        if (M0.not(M0.pair_p(ls3091)) !== false) {
          var if_res2056 = bad_list($rjs_core.Symbol.make("member"), orig_l3089);
        } else {
          if (M0.equal_p(v3088, M0.car(ls3091)) !== false) {
            var if_res2055 = ls3091;
          } else {
            var if_res2055 = loop3090(M0.cdr(ls3091));
          }
          var if_res2056 = if_res2055;
        }
        var if_res2057 = if_res2056;
      }
      return if_res2057;
    };
    return loop3090(orig_l3089);
  };
  var default3086 = member3087;
  var cl2058 = function(v3093, orig_l3094) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return default3086(v3093, orig_l3094);
  };
  var cl2059 = function(v3095, orig_l3096, eq_p3097) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(eq_p3097) !== false) {
      var if_res2061 = M0.procedure_arity_includes_p(eq_p3097, 2);
    } else {
      var if_res2061 = false;
    }
    if (if_res2061 !== false) {
      var if_res2062 = M0.rvoid();
    } else {
      var if_res2062 = M0.raise_argument_error($rjs_core.Symbol.make("member"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 2)"), eq_p3097);
    }
    if_res2062;
    var member3098 = function(v3099, orig_l3100) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop3101 = function(ls3102) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls3102) !== false) {
          var if_res2065 = false;
        } else {
          if (M0.not(M0.pair_p(ls3102)) !== false) {
            var if_res2064 = bad_list($rjs_core.Symbol.make("member"), orig_l3100);
          } else {
            if (eq_p3097(v3099, M0.car(ls3102)) !== false) {
              var if_res2063 = ls3102;
            } else {
              var if_res2063 = loop3101(M0.cdr(ls3102));
            }
            var if_res2064 = if_res2063;
          }
          var if_res2065 = if_res2064;
        }
        return if_res2065;
      };
      return loop3101(orig_l3100);
    };
    return member3098(v3095, orig_l3096);
  };
  var member3092 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2060 = {
      '2': cl2058,
      '3': cl2059
    }[arguments.length];
    if (fixed_lam2060 !== undefined) {
      return fixed_lam2060.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var let_result2072 = M0.values(memq3076, memv3081, member3092);
  var memq = let_result2072.getAt(0);
  var memv = let_result2072.getAt(1);
  var member = let_result2072.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get member() {
      return member;
    },
    get memv() {
      return memv;
    },
    get memq() {
      return memq;
    }
  };
})();
var $__runtime_47_paramz_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/paramz.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Paramz = $__runtime_47_paramz_46_js__;
  var parameterization_key = Paramz.ParameterizationKey;
  var extend_parameterization = Paramz.extendParameterization;
  var exception_handler_key = Paramz.ExceptionHandlerKey;
  var check_for_break = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return undefined;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get parameterization_key() {
      return parameterization_key;
    },
    get extend_parameterization() {
      return extend_parameterization;
    },
    get exception_handler_key() {
      return exception_handler_key;
    },
    get check_for_break() {
      return check_for_break;
    }
  };
})();
var $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/more-scheme.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_paramz_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var current_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.extend_parameterization(M1.continuation_mark_set_first(false, M0.parameterization_key));
  };
  var call_with_parameterization = function(paramz3012, thunk3013) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.parameterization_p(paramz3012) !== false) {
      var if_res1981 = M1.rvoid();
    } else {
      var if_res1981 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("parameterization?"), 0, paramz3012, thunk3013);
    }
    if_res1981;
    if (M1.procedure_p(thunk3013) !== false) {
      var if_res1982 = M1.procedure_arity_includes_p(thunk3013, 0);
    } else {
      var if_res1982 = false;
    }
    if (if_res1982 !== false) {
      var if_res1983 = M1.rvoid();
    } else {
      var if_res1983 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("(-> any)"), 1, paramz3012, thunk3013);
    }
    if_res1983;
    var __context1984 = $rjs_core.Marks.getFrames();
    var __context1985;
    try {
      __context1985 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.parameterization_key, paramz3012);
      var __wcm_result1986 = thunk3013();
    } finally {
      $rjs_core.Marks.updateFrame(__context1984, __context1985);
    }
    return __wcm_result1986;
  };
  var let_result1988 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false);
  var struct_break_paramz = let_result1988.getAt(0);
  var make_break_paramz = let_result1988.getAt(1);
  var break_paramz_p = let_result1988.getAt(2);
  var break_paramz_ref = let_result1988.getAt(3);
  var break_paramz_set_bang_ = let_result1988.getAt(4);
  var inspector3014 = M1.current_inspector();
  if (inspector3014 !== false) {
    var if_res1989 = M1.not(M1.inspector_p(inspector3014));
  } else {
    var if_res1989 = false;
  }
  if (if_res1989 !== false) {
    var if_res1990 = M1.raise_argument_error($rjs_core.Symbol.make("define-struct"), $rjs_core.UString.makeInternedImmutable("(or/c inspector? #f)"), inspector3014);
  } else {
    var if_res1990 = M1.rvoid();
  }
  if_res1990;
  var let_result1991 = M1.make_struct_type($rjs_core.Symbol.make("break-parameterization"), false, 1, 0, false, M1.rnull, inspector3014);
  var type3015 = let_result1991.getAt(0);
  var maker3016 = let_result1991.getAt(1);
  var pred3017 = let_result1991.getAt(2);
  var access3018 = let_result1991.getAt(3);
  var mutate3019 = let_result1991.getAt(4);
  var let_result1992 = M1.values(type3015, maker3016, pred3017, M1.make_struct_field_accessor(access3018, 0, $rjs_core.Symbol.make("cell")), M1.make_struct_field_mutator(mutate3019, 0, $rjs_core.Symbol.make("cell")));
  var struct_break_parameterization = let_result1992.getAt(0);
  var make_break_parameterization = let_result1992.getAt(1);
  var break_parameterization_p = let_result1992.getAt(2);
  var break_parameterization_cell = let_result1992.getAt(3);
  var set_break_parameterization_cell_bang_ = let_result1992.getAt(4);
  var current_break_parameterization = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_break_paramz(M1.continuation_mark_set_first(false, M0.__rjs_quoted__.break_enabled_key));
  };
  var call_with_break_parameterization = function(paramz3020, thunk3021) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (break_paramz_p(paramz3020) !== false) {
      var if_res1993 = M1.rvoid();
    } else {
      var if_res1993 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-break-parameterization"), $rjs_core.UString.makeInternedImmutable("break-parameterization?"), 0, paramz3020, thunk3021);
    }
    if_res1993;
    if (M1.procedure_p(thunk3021) !== false) {
      var if_res1994 = M1.procedure_arity_includes_p(thunk3021, 0);
    } else {
      var if_res1994 = false;
    }
    if (if_res1994 !== false) {
      var if_res1995 = M1.rvoid();
    } else {
      var if_res1995 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-parameterization"), $rjs_core.UString.makeInternedImmutable("(-> any)"), 1, paramz3020, thunk3021);
    }
    if_res1995;
    var __context1997 = $rjs_core.Marks.getFrames();
    var __context1998;
    try {
      __context1998 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, break_paramz_ref(paramz3020, 0));
      M0.check_for_break();
      var __wcm_result1999 = thunk3021();
    } finally {
      $rjs_core.Marks.updateFrame(__context1997, __context1998);
    }
    var begin_res1996 = __wcm_result1999;
    M0.check_for_break();
    return begin_res1996;
  };
  var select_handler_by_no_breaks = function(e3022, bpz3023, l3024) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2008 = $rjs_core.Marks.getFrames();
    var __context2009;
    try {
      __context2009 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, M1.make_thread_cell(false));
      var loop3025 = function(l3026) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(l3026) !== false) {
          var if_res2007 = M1.raise(e3022);
        } else {
          if (M1.caar(l3026)(e3022) !== false) {
            var begin_res2001 = M1.cdar(l3026)(e3022);
            var __context2002 = $rjs_core.Marks.getFrames();
            var __context2003;
            try {
              __context2003 = $rjs_core.Marks.enterFrame();
              $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3023);
              var __wcm_result2004 = M0.check_for_break();
            } finally {
              $rjs_core.Marks.updateFrame(__context2002, __context2003);
            }
            __wcm_result2004;
            var if_res2006 = begin_res2001;
          } else {
            var if_res2006 = loop3025(M1.cdr(l3026));
          }
          var if_res2007 = if_res2006;
        }
        return if_res2007;
      };
      var __wcm_result2010 = loop3025(l3024);
    } finally {
      $rjs_core.Marks.updateFrame(__context2008, __context2009);
    }
    return __wcm_result2010;
  };
  var select_handler_by_breaks_as_is = function(e3027, bpz3028, l3029) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(l3029) !== false) {
      var if_res2017 = M1.raise(e3027);
    } else {
      if (M1.caar(l3029)(e3027) !== false) {
        var __context2012 = $rjs_core.Marks.getFrames();
        var __context2013;
        try {
          __context2013 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3028);
          M0.check_for_break();
          var __wcm_result2014 = M1.cdar(l3029)(e3027);
        } finally {
          $rjs_core.Marks.updateFrame(__context2012, __context2013);
        }
        var if_res2016 = __wcm_result2014;
      } else {
        var if_res2016 = select_handler_by_breaks_as_is(e3027, bpz3028, M1.cdr(l3029));
      }
      var if_res2017 = if_res2016;
    }
    return if_res2017;
  };
  var false_thread_cell = M1.make_thread_cell(false);
  var check_with_handlers_in_context = function(handler_prompt_key3030) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__rjs_quoted__.continuation_prompt_available_p(handler_prompt_key3030) !== false) {
      var if_res2018 = M1.rvoid();
    } else {
      var if_res2018 = M1.error($rjs_core.Symbol.make("with-handlers"), $rjs_core.UString.makeInternedImmutable("exception handler used out of context"));
    }
    return if_res2018;
  };
  var handler_prompt_key = M1.make_continuation_prompt_tag();
  var call_handled_body = function(bpz3031, handle_proc3032, body_thunk3033) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2027 = $rjs_core.Marks.getFrames();
    var __context2028;
    try {
      __context2028 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, false_thread_cell);
      var __wcm_result2029 = M1.call_with_continuation_prompt(function(bpz3034, body_thunk3035) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var __context2023 = $rjs_core.Marks.getFrames();
        var __context2024;
        try {
          __context2024 = $rjs_core.Marks.enterFrame();
          $rjs_core.Marks.setMark(M0.__rjs_quoted__.break_enabled_key, bpz3034);
          var __context2019 = $rjs_core.Marks.getFrames();
          var __context2020;
          try {
            __context2020 = __context2019;
            $rjs_core.Marks.setMark(M0.exception_handler_key, function(e3036) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M1.abort_current_continuation(handler_prompt_key, e3036);
            });
            var __wcm_result2021 = body_thunk3035();
          } finally {
            $rjs_core.Marks.updateFrame(__context2019, __context2020);
          }
          var __wcm_result2025 = __wcm_result2021;
        } finally {
          $rjs_core.Marks.updateFrame(__context2023, __context2024);
        }
        return __wcm_result2025;
      }, handler_prompt_key, handle_proc3032, bpz3031, body_thunk3033);
    } finally {
      $rjs_core.Marks.updateFrame(__context2027, __context2028);
    }
    return __wcm_result2029;
  };
  var call_with_exception_handler = function(exnh3037, thunk3038) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __context2032 = $rjs_core.Marks.getFrames();
    var __context2033;
    try {
      __context2033 = $rjs_core.Marks.enterFrame();
      $rjs_core.Marks.setMark(M0.exception_handler_key, exnh3037);
      var __wcm_result2034 = thunk3038();
    } finally {
      $rjs_core.Marks.updateFrame(__context2032, __context2033);
    }
    var begin_res2031 = __wcm_result2034;
    M1.rvoid();
    return begin_res2031;
  };
  var call_by_cc = M1.__rjs_quoted__.call_with_current_continuation;
  var not_there3039 = M1.gensym();
  var up3040 = function(who3041, mut_p3042, set3043, ht3044, key3045, xform3046, default3047) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3044) !== false) {
      if (mut_p3042 !== false) {
        var if_res2036 = M1.not(M1.immutable_p(ht3044));
      } else {
        var if_res2036 = M1.immutable_p(ht3044);
      }
      var if_res2037 = if_res2036;
    } else {
      var if_res2037 = false;
    }
    if (if_res2037 !== false) {
      var if_res2039 = M1.rvoid();
    } else {
      if (mut_p3042 !== false) {
        var if_res2038 = $rjs_core.UString.makeInternedImmutable("(and/c hash? (not/c immutable?))");
      } else {
        var if_res2038 = $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)");
      }
      var if_res2039 = M1.raise_argument_error(who3041, if_res2038, ht3044);
    }
    if_res2039;
    if (M1.procedure_p(xform3046) !== false) {
      var if_res2040 = M1.procedure_arity_includes_p(xform3046, 1);
    } else {
      var if_res2040 = false;
    }
    if (if_res2040 !== false) {
      var if_res2041 = M1.rvoid();
    } else {
      var if_res2041 = M1.raise_argument_error(who3041, $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), xform3046);
    }
    if_res2041;
    var v3048 = M1.hash_ref(ht3044, key3045, default3047);
    if (M1.eq_p(v3048, not_there3039) !== false) {
      var if_res2042 = M1.raise_mismatch_error(who3041, $rjs_core.UString.makeInternedImmutable("no value found for key: "), key3045);
    } else {
      var if_res2042 = set3043(ht3044, key3045, xform3046(v3048));
    }
    return if_res2042;
  };
  var cl2043 = function(ht3053, key3054, xform3055, default3056) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3040($rjs_core.Symbol.make("hash-update"), false, M1.hash_set, ht3053, key3054, xform3055, default3056);
  };
  var cl2044 = function(ht3057, key3058, xform3059) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update(ht3057, key3058, xform3059, not_there3039);
  };
  var hash_update3049 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2045 = {
      '4': cl2043,
      '3': cl2044
    }[arguments.length];
    if (fixed_lam2045 !== undefined) {
      return fixed_lam2045.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var cl2046 = function(ht3060, key3061, xform3062, default3063) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return up3040($rjs_core.Symbol.make("hash-update!"), true, M1.hash_set_bang_, ht3060, key3061, xform3062, default3063);
  };
  var cl2047 = function(ht3064, key3065, xform3066) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return hash_update_bang_(ht3064, key3065, xform3066, not_there3039);
  };
  var hash_update_bang_3050 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2048 = {
      '4': cl2046,
      '3': cl2047
    }[arguments.length];
    if (fixed_lam2048 !== undefined) {
      return fixed_lam2048.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var hash_has_key_p3051 = function(ht3067, key3068) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3067) !== false) {
      var if_res2049 = M1.rvoid();
    } else {
      var if_res2049 = M1.raise_argument_error($rjs_core.Symbol.make("hash-has-key?"), $rjs_core.UString.makeInternedImmutable("hash?"), 0, ht3067, key3068);
    }
    if_res2049;
    return M1.not(M1.eq_p(not_there3039, M1.hash_ref(ht3067, key3068, not_there3039)));
  };
  var hash_ref_bang_3052 = function(ht3069, key3070, new3071) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.hash_p(ht3069) !== false) {
      var if_res2050 = M1.not(M1.immutable_p(ht3069));
    } else {
      var if_res2050 = false;
    }
    if (if_res2050 !== false) {
      var if_res2051 = M1.rvoid();
    } else {
      var if_res2051 = M1.raise_argument_error($rjs_core.Symbol.make("hash-ref!"), $rjs_core.UString.makeInternedImmutable("(and/c hash? (not/c immutable?))"), 0, ht3069, key3070, new3071);
    }
    if_res2051;
    var v3072 = M1.hash_ref(ht3069, key3070, not_there3039);
    if (M1.eq_p(not_there3039, v3072) !== false) {
      if (M1.procedure_p(new3071) !== false) {
        var if_res2052 = new3071();
      } else {
        var if_res2052 = new3071;
      }
      var n3073 = if_res2052;
      M1.hash_set_bang_(ht3069, key3070, n3073);
      var if_res2053 = n3073;
    } else {
      var if_res2053 = v3072;
    }
    return if_res2053;
  };
  var let_result2054 = M1.values(hash_update3049, hash_update_bang_3050, hash_has_key_p3051, hash_ref_bang_3052);
  var hash_update = let_result2054.getAt(0);
  var hash_update_bang_ = let_result2054.getAt(1);
  var hash_has_key_p = let_result2054.getAt(2);
  var hash_ref_bang_ = let_result2054.getAt(3);
  var __rjs_quoted__ = {};
  __rjs_quoted__.select_handler_by_breaks_as_is = select_handler_by_breaks_as_is;
  __rjs_quoted__.call_by_cc = call_by_cc;
  __rjs_quoted__.select_handler_by_no_breaks = select_handler_by_no_breaks;
  __rjs_quoted__.call_handled_body = call_handled_body;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get hash_update_bang_() {
      return hash_update_bang_;
    },
    get hash_update() {
      return hash_update;
    },
    get hash_has_key_p() {
      return hash_has_key_p;
    },
    get hash_ref_bang_() {
      return hash_ref_bang_;
    },
    get call_by_cc() {
      return call_by_cc;
    },
    get call_with_exception_handler() {
      return call_with_exception_handler;
    },
    get break_parameterization_p() {
      return break_paramz_p;
    },
    get call_with_break_parameterization() {
      return call_with_break_parameterization;
    },
    get current_break_parameterization() {
      return current_break_parameterization;
    },
    get call_with_parameterization() {
      return call_with_parameterization;
    },
    get current_parameterization() {
      return current_parameterization;
    }
  };
})();
var $__runtime_47_flfxnum_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/flfxnum.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__runtime_47_unsafe_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/unsafe.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var Core = $__runtime_47_core_46_js__;
  var unsafe_fx_plus_ = function(a17, b18) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a17 + b18) | 0;
  };
  var unsafe_fx_ = function(a19, b20) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a19 - b20) | 0;
  };
  var unsafe_fx_times_ = function(a21, b22) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a21 * b22) | 0;
  };
  var unsafe_fxquotient = function(a23, b24) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a23 / b24) | 0;
  };
  var unsafe_fxremainder = function(a25, b26) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a25 % b26) | 0;
  };
  var unsafe_fxmodulo = function(a27, b28) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var remainder29 = a27 % b28;
    if ((remainder29 >= 0) !== false) {
      var if_res7 = remainder29;
    } else {
      var if_res7 = remainder29 + b28;
    }
    return Math.floor(if_res7);
  };
  var unsafe_fxabs = function(a30) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Math.abs(a30);
  };
  var unsafe_fx_eq_ = function(a31, b32) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a31 === b32;
  };
  var unsafe_fx_lt_ = function(a33, b34) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a33 < b34;
  };
  var unsafe_fx_lt__eq_ = function(a35, b36) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a35 <= b36;
  };
  var unsafe_fx_gt_ = function(a37, b38) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a37 > b38;
  };
  var unsafe_fx_gt__eq_ = function(a39, b40) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return a39 >= b40;
  };
  var unsafe_fxmin = function(a41, b42) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a41 < b42) !== false) {
      var if_res8 = a41;
    } else {
      var if_res8 = b42;
    }
    return if_res8;
  };
  var unsafe_fxmax = function(a43, b44) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((a43 > b44) !== false) {
      var if_res9 = b44;
    } else {
      var if_res9 = a43;
    }
    return if_res9;
  };
  var unsafe_fxrshift = function(a45, b46) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a45 >> b46) | 0;
  };
  var unsafe_fxlshift = function(a47, b48) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a47 << b48) | 0;
  };
  var unsafe_fxand = function(a49, b50) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a49 && b50) | 0;
  };
  var unsafe_fxior = function(a51, b52) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a51 || b52) | 0;
  };
  var unsafe_fxxor = function(a53, b54) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return (a53 ^ b54) | 0;
  };
  var unsafe_fxnot = Core.bitwiseNot;
  var unsafe_car = function(v55) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v55.hd;
  };
  var unsafe_cdr = function(v56) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v56.tl;
  };
  var unsafe_mcar = function(v57) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v57.hd;
  };
  var unsafe_mcdr = function(v58) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v58.tl;
  };
  var unsafe_set_mcar_bang_ = function(p59, v60) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p59.setCar(v60);
  };
  var unsafe_set_mcdr_bang_ = function(p61, v62) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return p61.setCdr(v62);
  };
  var unsafe_cons_list = function(v63, rest64) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return Core.Pair.make(v63, rest64);
  };
  var unsafe_struct_ref = function(v65, k66) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v65._fields[k66];
  };
  var unsafe_vector_ref = function(v67, k68) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v67.ref(k68);
  };
  var unsafe_vector_set_bang_ = function(v69, k70, val71) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v69.set(k70, val71);
  };
  var unsafe_vector_length = function(v72) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return v72.length();
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get unsafe_fx_plus_() {
      return unsafe_fx_plus_;
    },
    get unsafe_fx_() {
      return unsafe_fx_;
    },
    get unsafe_fx_times_() {
      return unsafe_fx_times_;
    },
    get unsafe_fxquotient() {
      return unsafe_fxquotient;
    },
    get unsafe_fxremainder() {
      return unsafe_fxremainder;
    },
    get unsafe_fxmodulo() {
      return unsafe_fxmodulo;
    },
    get unsafe_fxabs() {
      return unsafe_fxabs;
    },
    get unsafe_fx_eq_() {
      return unsafe_fx_eq_;
    },
    get unsafe_fx_lt_() {
      return unsafe_fx_lt_;
    },
    get unsafe_fx_lt__eq_() {
      return unsafe_fx_lt__eq_;
    },
    get unsafe_fx_gt_() {
      return unsafe_fx_gt_;
    },
    get unsafe_fx_gt__eq_() {
      return unsafe_fx_gt__eq_;
    },
    get unsafe_fxmin() {
      return unsafe_fxmin;
    },
    get unsafe_fxmax() {
      return unsafe_fxmax;
    },
    get unsafe_fxrshift() {
      return unsafe_fxrshift;
    },
    get unsafe_fxlshift() {
      return unsafe_fxlshift;
    },
    get unsafe_fxand() {
      return unsafe_fxand;
    },
    get unsafe_fxior() {
      return unsafe_fxior;
    },
    get unsafe_fxxor() {
      return unsafe_fxxor;
    },
    get unsafe_fxnot() {
      return unsafe_fxnot;
    },
    get unsafe_car() {
      return unsafe_car;
    },
    get unsafe_cdr() {
      return unsafe_cdr;
    },
    get unsafe_mcar() {
      return unsafe_mcar;
    },
    get unsafe_mcdr() {
      return unsafe_mcdr;
    },
    get unsafe_set_mcar_bang_() {
      return unsafe_set_mcar_bang_;
    },
    get unsafe_set_mcdr_bang_() {
      return unsafe_set_mcdr_bang_;
    },
    get unsafe_cons_list() {
      return unsafe_cons_list;
    },
    get unsafe_struct_ref() {
      return unsafe_struct_ref;
    },
    get unsafe_vector_ref() {
      return unsafe_vector_ref;
    },
    get unsafe_vector_set_bang_() {
      return unsafe_vector_set_bang_;
    },
    get unsafe_vector_length() {
      return unsafe_vector_length;
    }
  };
})();
var $__collects_47_racket_47_private_47_sort_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/sort.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sorts3443 = M0.make_hasheq();
  var sort_proc3444 = function(A3445, n3446) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3447 = M1.unsafe_fxrshift(n3446, 1);
    var n_by_2_plus_3448 = M1.unsafe_fx_(n3446, n_by_2_3447);
    var copying_mergesort3449 = function(Alo3450, Blo3451, n3452) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3452, 1) !== false) {
        var if_res2343 = M1.unsafe_vector_set_bang_(A3445, Blo3451, M1.unsafe_vector_ref(A3445, Alo3450));
      } else {
        if (M1.unsafe_fx_eq_(n3452, 2) !== false) {
          var x3453 = M1.unsafe_vector_ref(A3445, Alo3450);
          var y3454 = M1.unsafe_vector_ref(A3445, M1.unsafe_fx_plus_(Alo3450, 1));
          if (false !== false) {
            var if_res2328 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3454), false(x3453));
          } else {
            var if_res2328 = M1.__rjs_quoted__.unsafe_fl_lt_(y3454, x3453);
          }
          if (if_res2328 !== false) {
            M1.unsafe_vector_set_bang_(A3445, Blo3451, y3454);
            var if_res2329 = M1.unsafe_vector_set_bang_(A3445, M1.unsafe_fx_plus_(Blo3451, 1), x3453);
          } else {
            M1.unsafe_vector_set_bang_(A3445, Blo3451, x3453);
            var if_res2329 = M1.unsafe_vector_set_bang_(A3445, M1.unsafe_fx_plus_(Blo3451, 1), y3454);
          }
          var if_res2342 = if_res2329;
        } else {
          if (M1.unsafe_fx_lt_(n3452, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3445, Blo3451, M1.unsafe_vector_ref(A3445, Alo3450));
            var iloop3455 = function(i3456) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3456, n3452) !== false) {
                var ref_i3457 = M1.unsafe_vector_ref(A3445, M1.unsafe_fx_plus_(Alo3450, i3456));
                var jloop3458 = function(j3459) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13460 = M1.unsafe_vector_ref(A3445, M1.unsafe_fx_(j3459, 1));
                  if (M1.unsafe_fx_lt_(Blo3451, j3459) !== false) {
                    if (false !== false) {
                      var if_res2330 = M1.__rjs_quoted__.unsafe_fl_lt_(false(ref_i3457), false(ref_j_13460));
                    } else {
                      var if_res2330 = M1.__rjs_quoted__.unsafe_fl_lt_(ref_i3457, ref_j_13460);
                    }
                    var if_res2331 = if_res2330;
                  } else {
                    var if_res2331 = false;
                  }
                  if (if_res2331 !== false) {
                    M1.unsafe_vector_set_bang_(A3445, j3459, ref_j_13460);
                    var if_res2332 = jloop3458(M1.unsafe_fx_(j3459, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3445, j3459, ref_i3457);
                    var if_res2332 = iloop3455(M1.unsafe_fx_plus_(i3456, 1));
                  }
                  return if_res2332;
                };
                var if_res2333 = jloop3458(M1.unsafe_fx_plus_(Blo3451, i3456));
              } else {
                var if_res2333 = M0.rvoid();
              }
              return if_res2333;
            };
            var if_res2341 = iloop3455(1);
          } else {
            var n_by_2_3461 = M1.unsafe_fxrshift(n3452, 1);
            var n_by_2_plus_3462 = M1.unsafe_fx_(n3452, n_by_2_3461);
            var Amid13463 = M1.unsafe_fx_plus_(Alo3450, n_by_2_3461);
            var Amid23464 = M1.unsafe_fx_plus_(Alo3450, n_by_2_plus_3462);
            var Bmid13465 = M1.unsafe_fx_plus_(Blo3451, n_by_2_3461);
            copying_mergesort3449(Amid13463, Bmid13465, n_by_2_plus_3462);
            copying_mergesort3449(Alo3450, Amid23464, n_by_2_3461);
            var b23466 = M1.unsafe_fx_plus_(Blo3451, n3452);
            var loop3467 = function(a13468, b13469, c13470) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3471 = M1.unsafe_vector_ref(A3445, a13468);
              var y3472 = M1.unsafe_vector_ref(A3445, b13469);
              if (true !== false) {
                if (false !== false) {
                  var if_res2334 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3472), false(x3471));
                } else {
                  var if_res2334 = M1.__rjs_quoted__.unsafe_fl_lt_(y3472, x3471);
                }
                var if_res2336 = M0.not(if_res2334);
              } else {
                if (false !== false) {
                  var if_res2335 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3471), false(y3472));
                } else {
                  var if_res2335 = M1.__rjs_quoted__.unsafe_fl_lt_(x3471, y3472);
                }
                var if_res2336 = if_res2335;
              }
              if (if_res2336 !== false) {
                M1.unsafe_vector_set_bang_(A3445, c13470, x3471);
                var a13473 = M1.unsafe_fx_plus_(a13468, 1);
                var c13474 = M1.unsafe_fx_plus_(c13470, 1);
                if (M1.unsafe_fx_lt_(c13474, b13469) !== false) {
                  var if_res2337 = loop3467(a13473, b13469, c13474);
                } else {
                  var if_res2337 = M0.rvoid();
                }
                var if_res2340 = if_res2337;
              } else {
                M1.unsafe_vector_set_bang_(A3445, c13470, y3472);
                var b13475 = M1.unsafe_fx_plus_(b13469, 1);
                var c13476 = M1.unsafe_fx_plus_(c13470, 1);
                if (M1.unsafe_fx_lt__eq_(b23466, b13475) !== false) {
                  var loop3477 = function(a13478, c13479) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13479, b13475) !== false) {
                      M1.unsafe_vector_set_bang_(A3445, c13479, M1.unsafe_vector_ref(A3445, a13478));
                      var if_res2338 = loop3477(M1.unsafe_fx_plus_(a13478, 1), M1.unsafe_fx_plus_(c13479, 1));
                    } else {
                      var if_res2338 = M0.rvoid();
                    }
                    return if_res2338;
                  };
                  var if_res2339 = loop3477(a13468, c13476);
                } else {
                  var if_res2339 = loop3467(a13468, b13475, c13476);
                }
                var if_res2340 = if_res2339;
              }
              return if_res2340;
            };
            var if_res2341 = loop3467(Amid23464, Bmid13465, Blo3451);
          }
          var if_res2342 = if_res2341;
        }
        var if_res2343 = if_res2342;
      }
      return if_res2343;
    };
    var Alo3480 = 0;
    var Amid13481 = n_by_2_3447;
    var Amid23482 = n_by_2_plus_3448;
    var Ahi3483 = n3446;
    var B1lo3484 = n3446;
    copying_mergesort3449(Amid13481, B1lo3484, n_by_2_plus_3448);
    if (M0.zero_p(n_by_2_3447) !== false) {
      var if_res2344 = M0.rvoid();
    } else {
      var if_res2344 = copying_mergesort3449(Alo3480, Amid23482, n_by_2_3447);
    }
    if_res2344;
    var b23485 = Ahi3483;
    var loop3486 = function(a13487, b13488, c13489) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3490 = M1.unsafe_vector_ref(A3445, a13487);
      var y3491 = M1.unsafe_vector_ref(A3445, b13488);
      if (false !== false) {
        if (false !== false) {
          var if_res2345 = M1.__rjs_quoted__.unsafe_fl_lt_(false(y3491), false(x3490));
        } else {
          var if_res2345 = M1.__rjs_quoted__.unsafe_fl_lt_(y3491, x3490);
        }
        var if_res2347 = M0.not(if_res2345);
      } else {
        if (false !== false) {
          var if_res2346 = M1.__rjs_quoted__.unsafe_fl_lt_(false(x3490), false(y3491));
        } else {
          var if_res2346 = M1.__rjs_quoted__.unsafe_fl_lt_(x3490, y3491);
        }
        var if_res2347 = if_res2346;
      }
      if (if_res2347 !== false) {
        M1.unsafe_vector_set_bang_(A3445, c13489, x3490);
        var a13492 = M1.unsafe_fx_plus_(a13487, 1);
        var c13493 = M1.unsafe_fx_plus_(c13489, 1);
        if (M1.unsafe_fx_lt_(c13493, b13488) !== false) {
          var if_res2348 = loop3486(a13492, b13488, c13493);
        } else {
          var if_res2348 = M0.rvoid();
        }
        var if_res2351 = if_res2348;
      } else {
        M1.unsafe_vector_set_bang_(A3445, c13489, y3491);
        var b13494 = M1.unsafe_fx_plus_(b13488, 1);
        var c13495 = M1.unsafe_fx_plus_(c13489, 1);
        if (M1.unsafe_fx_lt__eq_(b23485, b13494) !== false) {
          var loop3496 = function(a13497, c13498) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13498, b13494) !== false) {
              M1.unsafe_vector_set_bang_(A3445, c13498, M1.unsafe_vector_ref(A3445, a13497));
              var if_res2349 = loop3496(M1.unsafe_fx_plus_(a13497, 1), M1.unsafe_fx_plus_(c13498, 1));
            } else {
              var if_res2349 = M0.rvoid();
            }
            return if_res2349;
          };
          var if_res2350 = loop3496(a13487, c13495);
        } else {
          var if_res2350 = loop3486(a13487, b13494, c13495);
        }
        var if_res2351 = if_res2350;
      }
      return if_res2351;
    };
    return loop3486(B1lo3484, Amid23482, Alo3480);
  };
  M0.hash_set_bang_(sorts3443, M1.__rjs_quoted__.unsafe_fl_lt_, sort_proc3444);
  M0.hash_set_bang_(sorts3443, M1.__rjs_quoted__.unsafe_fl_lt__eq_, sort_proc3444);
  var sort_proc3499 = function(A3500, n3501) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3502 = M1.unsafe_fxrshift(n3501, 1);
    var n_by_2_plus_3503 = M1.unsafe_fx_(n3501, n_by_2_3502);
    var copying_mergesort3504 = function(Alo3505, Blo3506, n3507) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3507, 1) !== false) {
        var if_res2367 = M1.unsafe_vector_set_bang_(A3500, Blo3506, M1.unsafe_vector_ref(A3500, Alo3505));
      } else {
        if (M1.unsafe_fx_eq_(n3507, 2) !== false) {
          var x3508 = M1.unsafe_vector_ref(A3500, Alo3505);
          var y3509 = M1.unsafe_vector_ref(A3500, M1.unsafe_fx_plus_(Alo3505, 1));
          if (false !== false) {
            var if_res2352 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3509), false(x3508));
          } else {
            var if_res2352 = M1.__rjs_quoted__.unsafe_fl_gt_(y3509, x3508);
          }
          if (if_res2352 !== false) {
            M1.unsafe_vector_set_bang_(A3500, Blo3506, y3509);
            var if_res2353 = M1.unsafe_vector_set_bang_(A3500, M1.unsafe_fx_plus_(Blo3506, 1), x3508);
          } else {
            M1.unsafe_vector_set_bang_(A3500, Blo3506, x3508);
            var if_res2353 = M1.unsafe_vector_set_bang_(A3500, M1.unsafe_fx_plus_(Blo3506, 1), y3509);
          }
          var if_res2366 = if_res2353;
        } else {
          if (M1.unsafe_fx_lt_(n3507, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3500, Blo3506, M1.unsafe_vector_ref(A3500, Alo3505));
            var iloop3510 = function(i3511) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3511, n3507) !== false) {
                var ref_i3512 = M1.unsafe_vector_ref(A3500, M1.unsafe_fx_plus_(Alo3505, i3511));
                var jloop3513 = function(j3514) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13515 = M1.unsafe_vector_ref(A3500, M1.unsafe_fx_(j3514, 1));
                  if (M1.unsafe_fx_lt_(Blo3506, j3514) !== false) {
                    if (false !== false) {
                      var if_res2354 = M1.__rjs_quoted__.unsafe_fl_gt_(false(ref_i3512), false(ref_j_13515));
                    } else {
                      var if_res2354 = M1.__rjs_quoted__.unsafe_fl_gt_(ref_i3512, ref_j_13515);
                    }
                    var if_res2355 = if_res2354;
                  } else {
                    var if_res2355 = false;
                  }
                  if (if_res2355 !== false) {
                    M1.unsafe_vector_set_bang_(A3500, j3514, ref_j_13515);
                    var if_res2356 = jloop3513(M1.unsafe_fx_(j3514, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3500, j3514, ref_i3512);
                    var if_res2356 = iloop3510(M1.unsafe_fx_plus_(i3511, 1));
                  }
                  return if_res2356;
                };
                var if_res2357 = jloop3513(M1.unsafe_fx_plus_(Blo3506, i3511));
              } else {
                var if_res2357 = M0.rvoid();
              }
              return if_res2357;
            };
            var if_res2365 = iloop3510(1);
          } else {
            var n_by_2_3516 = M1.unsafe_fxrshift(n3507, 1);
            var n_by_2_plus_3517 = M1.unsafe_fx_(n3507, n_by_2_3516);
            var Amid13518 = M1.unsafe_fx_plus_(Alo3505, n_by_2_3516);
            var Amid23519 = M1.unsafe_fx_plus_(Alo3505, n_by_2_plus_3517);
            var Bmid13520 = M1.unsafe_fx_plus_(Blo3506, n_by_2_3516);
            copying_mergesort3504(Amid13518, Bmid13520, n_by_2_plus_3517);
            copying_mergesort3504(Alo3505, Amid23519, n_by_2_3516);
            var b23521 = M1.unsafe_fx_plus_(Blo3506, n3507);
            var loop3522 = function(a13523, b13524, c13525) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3526 = M1.unsafe_vector_ref(A3500, a13523);
              var y3527 = M1.unsafe_vector_ref(A3500, b13524);
              if (true !== false) {
                if (false !== false) {
                  var if_res2358 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3527), false(x3526));
                } else {
                  var if_res2358 = M1.__rjs_quoted__.unsafe_fl_gt_(y3527, x3526);
                }
                var if_res2360 = M0.not(if_res2358);
              } else {
                if (false !== false) {
                  var if_res2359 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3526), false(y3527));
                } else {
                  var if_res2359 = M1.__rjs_quoted__.unsafe_fl_gt_(x3526, y3527);
                }
                var if_res2360 = if_res2359;
              }
              if (if_res2360 !== false) {
                M1.unsafe_vector_set_bang_(A3500, c13525, x3526);
                var a13528 = M1.unsafe_fx_plus_(a13523, 1);
                var c13529 = M1.unsafe_fx_plus_(c13525, 1);
                if (M1.unsafe_fx_lt_(c13529, b13524) !== false) {
                  var if_res2361 = loop3522(a13528, b13524, c13529);
                } else {
                  var if_res2361 = M0.rvoid();
                }
                var if_res2364 = if_res2361;
              } else {
                M1.unsafe_vector_set_bang_(A3500, c13525, y3527);
                var b13530 = M1.unsafe_fx_plus_(b13524, 1);
                var c13531 = M1.unsafe_fx_plus_(c13525, 1);
                if (M1.unsafe_fx_lt__eq_(b23521, b13530) !== false) {
                  var loop3532 = function(a13533, c13534) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13534, b13530) !== false) {
                      M1.unsafe_vector_set_bang_(A3500, c13534, M1.unsafe_vector_ref(A3500, a13533));
                      var if_res2362 = loop3532(M1.unsafe_fx_plus_(a13533, 1), M1.unsafe_fx_plus_(c13534, 1));
                    } else {
                      var if_res2362 = M0.rvoid();
                    }
                    return if_res2362;
                  };
                  var if_res2363 = loop3532(a13523, c13531);
                } else {
                  var if_res2363 = loop3522(a13523, b13530, c13531);
                }
                var if_res2364 = if_res2363;
              }
              return if_res2364;
            };
            var if_res2365 = loop3522(Amid23519, Bmid13520, Blo3506);
          }
          var if_res2366 = if_res2365;
        }
        var if_res2367 = if_res2366;
      }
      return if_res2367;
    };
    var Alo3535 = 0;
    var Amid13536 = n_by_2_3502;
    var Amid23537 = n_by_2_plus_3503;
    var Ahi3538 = n3501;
    var B1lo3539 = n3501;
    copying_mergesort3504(Amid13536, B1lo3539, n_by_2_plus_3503);
    if (M0.zero_p(n_by_2_3502) !== false) {
      var if_res2368 = M0.rvoid();
    } else {
      var if_res2368 = copying_mergesort3504(Alo3535, Amid23537, n_by_2_3502);
    }
    if_res2368;
    var b23540 = Ahi3538;
    var loop3541 = function(a13542, b13543, c13544) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3545 = M1.unsafe_vector_ref(A3500, a13542);
      var y3546 = M1.unsafe_vector_ref(A3500, b13543);
      if (false !== false) {
        if (false !== false) {
          var if_res2369 = M1.__rjs_quoted__.unsafe_fl_gt_(false(y3546), false(x3545));
        } else {
          var if_res2369 = M1.__rjs_quoted__.unsafe_fl_gt_(y3546, x3545);
        }
        var if_res2371 = M0.not(if_res2369);
      } else {
        if (false !== false) {
          var if_res2370 = M1.__rjs_quoted__.unsafe_fl_gt_(false(x3545), false(y3546));
        } else {
          var if_res2370 = M1.__rjs_quoted__.unsafe_fl_gt_(x3545, y3546);
        }
        var if_res2371 = if_res2370;
      }
      if (if_res2371 !== false) {
        M1.unsafe_vector_set_bang_(A3500, c13544, x3545);
        var a13547 = M1.unsafe_fx_plus_(a13542, 1);
        var c13548 = M1.unsafe_fx_plus_(c13544, 1);
        if (M1.unsafe_fx_lt_(c13548, b13543) !== false) {
          var if_res2372 = loop3541(a13547, b13543, c13548);
        } else {
          var if_res2372 = M0.rvoid();
        }
        var if_res2375 = if_res2372;
      } else {
        M1.unsafe_vector_set_bang_(A3500, c13544, y3546);
        var b13549 = M1.unsafe_fx_plus_(b13543, 1);
        var c13550 = M1.unsafe_fx_plus_(c13544, 1);
        if (M1.unsafe_fx_lt__eq_(b23540, b13549) !== false) {
          var loop3551 = function(a13552, c13553) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13553, b13549) !== false) {
              M1.unsafe_vector_set_bang_(A3500, c13553, M1.unsafe_vector_ref(A3500, a13552));
              var if_res2373 = loop3551(M1.unsafe_fx_plus_(a13552, 1), M1.unsafe_fx_plus_(c13553, 1));
            } else {
              var if_res2373 = M0.rvoid();
            }
            return if_res2373;
          };
          var if_res2374 = loop3551(a13542, c13550);
        } else {
          var if_res2374 = loop3541(a13542, b13549, c13550);
        }
        var if_res2375 = if_res2374;
      }
      return if_res2375;
    };
    return loop3541(B1lo3539, Amid23537, Alo3535);
  };
  M0.hash_set_bang_(sorts3443, M1.__rjs_quoted__.unsafe_fl_gt_, sort_proc3499);
  M0.hash_set_bang_(sorts3443, M1.__rjs_quoted__.unsafe_fl_gt__eq_, sort_proc3499);
  var sort_proc3554 = function(A3555, n3556) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3557 = M1.unsafe_fxrshift(n3556, 1);
    var n_by_2_plus_3558 = M1.unsafe_fx_(n3556, n_by_2_3557);
    var copying_mergesort3559 = function(Alo3560, Blo3561, n3562) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3562, 1) !== false) {
        var if_res2391 = M1.unsafe_vector_set_bang_(A3555, Blo3561, M1.unsafe_vector_ref(A3555, Alo3560));
      } else {
        if (M1.unsafe_fx_eq_(n3562, 2) !== false) {
          var x3563 = M1.unsafe_vector_ref(A3555, Alo3560);
          var y3564 = M1.unsafe_vector_ref(A3555, M1.unsafe_fx_plus_(Alo3560, 1));
          if (false !== false) {
            var if_res2376 = M1.unsafe_fx_lt_(false(y3564), false(x3563));
          } else {
            var if_res2376 = M1.unsafe_fx_lt_(y3564, x3563);
          }
          if (if_res2376 !== false) {
            M1.unsafe_vector_set_bang_(A3555, Blo3561, y3564);
            var if_res2377 = M1.unsafe_vector_set_bang_(A3555, M1.unsafe_fx_plus_(Blo3561, 1), x3563);
          } else {
            M1.unsafe_vector_set_bang_(A3555, Blo3561, x3563);
            var if_res2377 = M1.unsafe_vector_set_bang_(A3555, M1.unsafe_fx_plus_(Blo3561, 1), y3564);
          }
          var if_res2390 = if_res2377;
        } else {
          if (M1.unsafe_fx_lt_(n3562, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3555, Blo3561, M1.unsafe_vector_ref(A3555, Alo3560));
            var iloop3565 = function(i3566) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3566, n3562) !== false) {
                var ref_i3567 = M1.unsafe_vector_ref(A3555, M1.unsafe_fx_plus_(Alo3560, i3566));
                var jloop3568 = function(j3569) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13570 = M1.unsafe_vector_ref(A3555, M1.unsafe_fx_(j3569, 1));
                  if (M1.unsafe_fx_lt_(Blo3561, j3569) !== false) {
                    if (false !== false) {
                      var if_res2378 = M1.unsafe_fx_lt_(false(ref_i3567), false(ref_j_13570));
                    } else {
                      var if_res2378 = M1.unsafe_fx_lt_(ref_i3567, ref_j_13570);
                    }
                    var if_res2379 = if_res2378;
                  } else {
                    var if_res2379 = false;
                  }
                  if (if_res2379 !== false) {
                    M1.unsafe_vector_set_bang_(A3555, j3569, ref_j_13570);
                    var if_res2380 = jloop3568(M1.unsafe_fx_(j3569, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3555, j3569, ref_i3567);
                    var if_res2380 = iloop3565(M1.unsafe_fx_plus_(i3566, 1));
                  }
                  return if_res2380;
                };
                var if_res2381 = jloop3568(M1.unsafe_fx_plus_(Blo3561, i3566));
              } else {
                var if_res2381 = M0.rvoid();
              }
              return if_res2381;
            };
            var if_res2389 = iloop3565(1);
          } else {
            var n_by_2_3571 = M1.unsafe_fxrshift(n3562, 1);
            var n_by_2_plus_3572 = M1.unsafe_fx_(n3562, n_by_2_3571);
            var Amid13573 = M1.unsafe_fx_plus_(Alo3560, n_by_2_3571);
            var Amid23574 = M1.unsafe_fx_plus_(Alo3560, n_by_2_plus_3572);
            var Bmid13575 = M1.unsafe_fx_plus_(Blo3561, n_by_2_3571);
            copying_mergesort3559(Amid13573, Bmid13575, n_by_2_plus_3572);
            copying_mergesort3559(Alo3560, Amid23574, n_by_2_3571);
            var b23576 = M1.unsafe_fx_plus_(Blo3561, n3562);
            var loop3577 = function(a13578, b13579, c13580) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3581 = M1.unsafe_vector_ref(A3555, a13578);
              var y3582 = M1.unsafe_vector_ref(A3555, b13579);
              if (true !== false) {
                if (false !== false) {
                  var if_res2382 = M1.unsafe_fx_lt_(false(y3582), false(x3581));
                } else {
                  var if_res2382 = M1.unsafe_fx_lt_(y3582, x3581);
                }
                var if_res2384 = M0.not(if_res2382);
              } else {
                if (false !== false) {
                  var if_res2383 = M1.unsafe_fx_lt_(false(x3581), false(y3582));
                } else {
                  var if_res2383 = M1.unsafe_fx_lt_(x3581, y3582);
                }
                var if_res2384 = if_res2383;
              }
              if (if_res2384 !== false) {
                M1.unsafe_vector_set_bang_(A3555, c13580, x3581);
                var a13583 = M1.unsafe_fx_plus_(a13578, 1);
                var c13584 = M1.unsafe_fx_plus_(c13580, 1);
                if (M1.unsafe_fx_lt_(c13584, b13579) !== false) {
                  var if_res2385 = loop3577(a13583, b13579, c13584);
                } else {
                  var if_res2385 = M0.rvoid();
                }
                var if_res2388 = if_res2385;
              } else {
                M1.unsafe_vector_set_bang_(A3555, c13580, y3582);
                var b13585 = M1.unsafe_fx_plus_(b13579, 1);
                var c13586 = M1.unsafe_fx_plus_(c13580, 1);
                if (M1.unsafe_fx_lt__eq_(b23576, b13585) !== false) {
                  var loop3587 = function(a13588, c13589) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13589, b13585) !== false) {
                      M1.unsafe_vector_set_bang_(A3555, c13589, M1.unsafe_vector_ref(A3555, a13588));
                      var if_res2386 = loop3587(M1.unsafe_fx_plus_(a13588, 1), M1.unsafe_fx_plus_(c13589, 1));
                    } else {
                      var if_res2386 = M0.rvoid();
                    }
                    return if_res2386;
                  };
                  var if_res2387 = loop3587(a13578, c13586);
                } else {
                  var if_res2387 = loop3577(a13578, b13585, c13586);
                }
                var if_res2388 = if_res2387;
              }
              return if_res2388;
            };
            var if_res2389 = loop3577(Amid23574, Bmid13575, Blo3561);
          }
          var if_res2390 = if_res2389;
        }
        var if_res2391 = if_res2390;
      }
      return if_res2391;
    };
    var Alo3590 = 0;
    var Amid13591 = n_by_2_3557;
    var Amid23592 = n_by_2_plus_3558;
    var Ahi3593 = n3556;
    var B1lo3594 = n3556;
    copying_mergesort3559(Amid13591, B1lo3594, n_by_2_plus_3558);
    if (M0.zero_p(n_by_2_3557) !== false) {
      var if_res2392 = M0.rvoid();
    } else {
      var if_res2392 = copying_mergesort3559(Alo3590, Amid23592, n_by_2_3557);
    }
    if_res2392;
    var b23595 = Ahi3593;
    var loop3596 = function(a13597, b13598, c13599) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3600 = M1.unsafe_vector_ref(A3555, a13597);
      var y3601 = M1.unsafe_vector_ref(A3555, b13598);
      if (false !== false) {
        if (false !== false) {
          var if_res2393 = M1.unsafe_fx_lt_(false(y3601), false(x3600));
        } else {
          var if_res2393 = M1.unsafe_fx_lt_(y3601, x3600);
        }
        var if_res2395 = M0.not(if_res2393);
      } else {
        if (false !== false) {
          var if_res2394 = M1.unsafe_fx_lt_(false(x3600), false(y3601));
        } else {
          var if_res2394 = M1.unsafe_fx_lt_(x3600, y3601);
        }
        var if_res2395 = if_res2394;
      }
      if (if_res2395 !== false) {
        M1.unsafe_vector_set_bang_(A3555, c13599, x3600);
        var a13602 = M1.unsafe_fx_plus_(a13597, 1);
        var c13603 = M1.unsafe_fx_plus_(c13599, 1);
        if (M1.unsafe_fx_lt_(c13603, b13598) !== false) {
          var if_res2396 = loop3596(a13602, b13598, c13603);
        } else {
          var if_res2396 = M0.rvoid();
        }
        var if_res2399 = if_res2396;
      } else {
        M1.unsafe_vector_set_bang_(A3555, c13599, y3601);
        var b13604 = M1.unsafe_fx_plus_(b13598, 1);
        var c13605 = M1.unsafe_fx_plus_(c13599, 1);
        if (M1.unsafe_fx_lt__eq_(b23595, b13604) !== false) {
          var loop3606 = function(a13607, c13608) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13608, b13604) !== false) {
              M1.unsafe_vector_set_bang_(A3555, c13608, M1.unsafe_vector_ref(A3555, a13607));
              var if_res2397 = loop3606(M1.unsafe_fx_plus_(a13607, 1), M1.unsafe_fx_plus_(c13608, 1));
            } else {
              var if_res2397 = M0.rvoid();
            }
            return if_res2397;
          };
          var if_res2398 = loop3606(a13597, c13605);
        } else {
          var if_res2398 = loop3596(a13597, b13604, c13605);
        }
        var if_res2399 = if_res2398;
      }
      return if_res2399;
    };
    return loop3596(B1lo3594, Amid23592, Alo3590);
  };
  M0.hash_set_bang_(sorts3443, M1.unsafe_fx_lt_, sort_proc3554);
  M0.hash_set_bang_(sorts3443, M1.unsafe_fx_lt__eq_, sort_proc3554);
  var sort_proc3609 = function(A3610, n3611) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3612 = M1.unsafe_fxrshift(n3611, 1);
    var n_by_2_plus_3613 = M1.unsafe_fx_(n3611, n_by_2_3612);
    var copying_mergesort3614 = function(Alo3615, Blo3616, n3617) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3617, 1) !== false) {
        var if_res2415 = M1.unsafe_vector_set_bang_(A3610, Blo3616, M1.unsafe_vector_ref(A3610, Alo3615));
      } else {
        if (M1.unsafe_fx_eq_(n3617, 2) !== false) {
          var x3618 = M1.unsafe_vector_ref(A3610, Alo3615);
          var y3619 = M1.unsafe_vector_ref(A3610, M1.unsafe_fx_plus_(Alo3615, 1));
          if (false !== false) {
            var if_res2400 = M1.unsafe_fx_gt_(false(y3619), false(x3618));
          } else {
            var if_res2400 = M1.unsafe_fx_gt_(y3619, x3618);
          }
          if (if_res2400 !== false) {
            M1.unsafe_vector_set_bang_(A3610, Blo3616, y3619);
            var if_res2401 = M1.unsafe_vector_set_bang_(A3610, M1.unsafe_fx_plus_(Blo3616, 1), x3618);
          } else {
            M1.unsafe_vector_set_bang_(A3610, Blo3616, x3618);
            var if_res2401 = M1.unsafe_vector_set_bang_(A3610, M1.unsafe_fx_plus_(Blo3616, 1), y3619);
          }
          var if_res2414 = if_res2401;
        } else {
          if (M1.unsafe_fx_lt_(n3617, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3610, Blo3616, M1.unsafe_vector_ref(A3610, Alo3615));
            var iloop3620 = function(i3621) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3621, n3617) !== false) {
                var ref_i3622 = M1.unsafe_vector_ref(A3610, M1.unsafe_fx_plus_(Alo3615, i3621));
                var jloop3623 = function(j3624) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13625 = M1.unsafe_vector_ref(A3610, M1.unsafe_fx_(j3624, 1));
                  if (M1.unsafe_fx_lt_(Blo3616, j3624) !== false) {
                    if (false !== false) {
                      var if_res2402 = M1.unsafe_fx_gt_(false(ref_i3622), false(ref_j_13625));
                    } else {
                      var if_res2402 = M1.unsafe_fx_gt_(ref_i3622, ref_j_13625);
                    }
                    var if_res2403 = if_res2402;
                  } else {
                    var if_res2403 = false;
                  }
                  if (if_res2403 !== false) {
                    M1.unsafe_vector_set_bang_(A3610, j3624, ref_j_13625);
                    var if_res2404 = jloop3623(M1.unsafe_fx_(j3624, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3610, j3624, ref_i3622);
                    var if_res2404 = iloop3620(M1.unsafe_fx_plus_(i3621, 1));
                  }
                  return if_res2404;
                };
                var if_res2405 = jloop3623(M1.unsafe_fx_plus_(Blo3616, i3621));
              } else {
                var if_res2405 = M0.rvoid();
              }
              return if_res2405;
            };
            var if_res2413 = iloop3620(1);
          } else {
            var n_by_2_3626 = M1.unsafe_fxrshift(n3617, 1);
            var n_by_2_plus_3627 = M1.unsafe_fx_(n3617, n_by_2_3626);
            var Amid13628 = M1.unsafe_fx_plus_(Alo3615, n_by_2_3626);
            var Amid23629 = M1.unsafe_fx_plus_(Alo3615, n_by_2_plus_3627);
            var Bmid13630 = M1.unsafe_fx_plus_(Blo3616, n_by_2_3626);
            copying_mergesort3614(Amid13628, Bmid13630, n_by_2_plus_3627);
            copying_mergesort3614(Alo3615, Amid23629, n_by_2_3626);
            var b23631 = M1.unsafe_fx_plus_(Blo3616, n3617);
            var loop3632 = function(a13633, b13634, c13635) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3636 = M1.unsafe_vector_ref(A3610, a13633);
              var y3637 = M1.unsafe_vector_ref(A3610, b13634);
              if (true !== false) {
                if (false !== false) {
                  var if_res2406 = M1.unsafe_fx_gt_(false(y3637), false(x3636));
                } else {
                  var if_res2406 = M1.unsafe_fx_gt_(y3637, x3636);
                }
                var if_res2408 = M0.not(if_res2406);
              } else {
                if (false !== false) {
                  var if_res2407 = M1.unsafe_fx_gt_(false(x3636), false(y3637));
                } else {
                  var if_res2407 = M1.unsafe_fx_gt_(x3636, y3637);
                }
                var if_res2408 = if_res2407;
              }
              if (if_res2408 !== false) {
                M1.unsafe_vector_set_bang_(A3610, c13635, x3636);
                var a13638 = M1.unsafe_fx_plus_(a13633, 1);
                var c13639 = M1.unsafe_fx_plus_(c13635, 1);
                if (M1.unsafe_fx_lt_(c13639, b13634) !== false) {
                  var if_res2409 = loop3632(a13638, b13634, c13639);
                } else {
                  var if_res2409 = M0.rvoid();
                }
                var if_res2412 = if_res2409;
              } else {
                M1.unsafe_vector_set_bang_(A3610, c13635, y3637);
                var b13640 = M1.unsafe_fx_plus_(b13634, 1);
                var c13641 = M1.unsafe_fx_plus_(c13635, 1);
                if (M1.unsafe_fx_lt__eq_(b23631, b13640) !== false) {
                  var loop3642 = function(a13643, c13644) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13644, b13640) !== false) {
                      M1.unsafe_vector_set_bang_(A3610, c13644, M1.unsafe_vector_ref(A3610, a13643));
                      var if_res2410 = loop3642(M1.unsafe_fx_plus_(a13643, 1), M1.unsafe_fx_plus_(c13644, 1));
                    } else {
                      var if_res2410 = M0.rvoid();
                    }
                    return if_res2410;
                  };
                  var if_res2411 = loop3642(a13633, c13641);
                } else {
                  var if_res2411 = loop3632(a13633, b13640, c13641);
                }
                var if_res2412 = if_res2411;
              }
              return if_res2412;
            };
            var if_res2413 = loop3632(Amid23629, Bmid13630, Blo3616);
          }
          var if_res2414 = if_res2413;
        }
        var if_res2415 = if_res2414;
      }
      return if_res2415;
    };
    var Alo3645 = 0;
    var Amid13646 = n_by_2_3612;
    var Amid23647 = n_by_2_plus_3613;
    var Ahi3648 = n3611;
    var B1lo3649 = n3611;
    copying_mergesort3614(Amid13646, B1lo3649, n_by_2_plus_3613);
    if (M0.zero_p(n_by_2_3612) !== false) {
      var if_res2416 = M0.rvoid();
    } else {
      var if_res2416 = copying_mergesort3614(Alo3645, Amid23647, n_by_2_3612);
    }
    if_res2416;
    var b23650 = Ahi3648;
    var loop3651 = function(a13652, b13653, c13654) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3655 = M1.unsafe_vector_ref(A3610, a13652);
      var y3656 = M1.unsafe_vector_ref(A3610, b13653);
      if (false !== false) {
        if (false !== false) {
          var if_res2417 = M1.unsafe_fx_gt_(false(y3656), false(x3655));
        } else {
          var if_res2417 = M1.unsafe_fx_gt_(y3656, x3655);
        }
        var if_res2419 = M0.not(if_res2417);
      } else {
        if (false !== false) {
          var if_res2418 = M1.unsafe_fx_gt_(false(x3655), false(y3656));
        } else {
          var if_res2418 = M1.unsafe_fx_gt_(x3655, y3656);
        }
        var if_res2419 = if_res2418;
      }
      if (if_res2419 !== false) {
        M1.unsafe_vector_set_bang_(A3610, c13654, x3655);
        var a13657 = M1.unsafe_fx_plus_(a13652, 1);
        var c13658 = M1.unsafe_fx_plus_(c13654, 1);
        if (M1.unsafe_fx_lt_(c13658, b13653) !== false) {
          var if_res2420 = loop3651(a13657, b13653, c13658);
        } else {
          var if_res2420 = M0.rvoid();
        }
        var if_res2423 = if_res2420;
      } else {
        M1.unsafe_vector_set_bang_(A3610, c13654, y3656);
        var b13659 = M1.unsafe_fx_plus_(b13653, 1);
        var c13660 = M1.unsafe_fx_plus_(c13654, 1);
        if (M1.unsafe_fx_lt__eq_(b23650, b13659) !== false) {
          var loop3661 = function(a13662, c13663) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13663, b13659) !== false) {
              M1.unsafe_vector_set_bang_(A3610, c13663, M1.unsafe_vector_ref(A3610, a13662));
              var if_res2421 = loop3661(M1.unsafe_fx_plus_(a13662, 1), M1.unsafe_fx_plus_(c13663, 1));
            } else {
              var if_res2421 = M0.rvoid();
            }
            return if_res2421;
          };
          var if_res2422 = loop3661(a13652, c13660);
        } else {
          var if_res2422 = loop3651(a13652, b13659, c13660);
        }
        var if_res2423 = if_res2422;
      }
      return if_res2423;
    };
    return loop3651(B1lo3649, Amid23647, Alo3645);
  };
  M0.hash_set_bang_(sorts3443, M1.unsafe_fx_gt_, sort_proc3609);
  M0.hash_set_bang_(sorts3443, M1.unsafe_fx_gt__eq_, sort_proc3609);
  var sort_proc3664 = function(A3665, n3666) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3667 = M1.unsafe_fxrshift(n3666, 1);
    var n_by_2_plus_3668 = M1.unsafe_fx_(n3666, n_by_2_3667);
    var copying_mergesort3669 = function(Alo3670, Blo3671, n3672) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3672, 1) !== false) {
        var if_res2439 = M1.unsafe_vector_set_bang_(A3665, Blo3671, M1.unsafe_vector_ref(A3665, Alo3670));
      } else {
        if (M1.unsafe_fx_eq_(n3672, 2) !== false) {
          var x3673 = M1.unsafe_vector_ref(A3665, Alo3670);
          var y3674 = M1.unsafe_vector_ref(A3665, M1.unsafe_fx_plus_(Alo3670, 1));
          if (false !== false) {
            var if_res2424 = M0.__lt_(false(y3674), false(x3673));
          } else {
            var if_res2424 = M0.__lt_(y3674, x3673);
          }
          if (if_res2424 !== false) {
            M1.unsafe_vector_set_bang_(A3665, Blo3671, y3674);
            var if_res2425 = M1.unsafe_vector_set_bang_(A3665, M1.unsafe_fx_plus_(Blo3671, 1), x3673);
          } else {
            M1.unsafe_vector_set_bang_(A3665, Blo3671, x3673);
            var if_res2425 = M1.unsafe_vector_set_bang_(A3665, M1.unsafe_fx_plus_(Blo3671, 1), y3674);
          }
          var if_res2438 = if_res2425;
        } else {
          if (M1.unsafe_fx_lt_(n3672, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3665, Blo3671, M1.unsafe_vector_ref(A3665, Alo3670));
            var iloop3675 = function(i3676) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3676, n3672) !== false) {
                var ref_i3677 = M1.unsafe_vector_ref(A3665, M1.unsafe_fx_plus_(Alo3670, i3676));
                var jloop3678 = function(j3679) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13680 = M1.unsafe_vector_ref(A3665, M1.unsafe_fx_(j3679, 1));
                  if (M1.unsafe_fx_lt_(Blo3671, j3679) !== false) {
                    if (false !== false) {
                      var if_res2426 = M0.__lt_(false(ref_i3677), false(ref_j_13680));
                    } else {
                      var if_res2426 = M0.__lt_(ref_i3677, ref_j_13680);
                    }
                    var if_res2427 = if_res2426;
                  } else {
                    var if_res2427 = false;
                  }
                  if (if_res2427 !== false) {
                    M1.unsafe_vector_set_bang_(A3665, j3679, ref_j_13680);
                    var if_res2428 = jloop3678(M1.unsafe_fx_(j3679, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3665, j3679, ref_i3677);
                    var if_res2428 = iloop3675(M1.unsafe_fx_plus_(i3676, 1));
                  }
                  return if_res2428;
                };
                var if_res2429 = jloop3678(M1.unsafe_fx_plus_(Blo3671, i3676));
              } else {
                var if_res2429 = M0.rvoid();
              }
              return if_res2429;
            };
            var if_res2437 = iloop3675(1);
          } else {
            var n_by_2_3681 = M1.unsafe_fxrshift(n3672, 1);
            var n_by_2_plus_3682 = M1.unsafe_fx_(n3672, n_by_2_3681);
            var Amid13683 = M1.unsafe_fx_plus_(Alo3670, n_by_2_3681);
            var Amid23684 = M1.unsafe_fx_plus_(Alo3670, n_by_2_plus_3682);
            var Bmid13685 = M1.unsafe_fx_plus_(Blo3671, n_by_2_3681);
            copying_mergesort3669(Amid13683, Bmid13685, n_by_2_plus_3682);
            copying_mergesort3669(Alo3670, Amid23684, n_by_2_3681);
            var b23686 = M1.unsafe_fx_plus_(Blo3671, n3672);
            var loop3687 = function(a13688, b13689, c13690) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3691 = M1.unsafe_vector_ref(A3665, a13688);
              var y3692 = M1.unsafe_vector_ref(A3665, b13689);
              if (true !== false) {
                if (false !== false) {
                  var if_res2430 = M0.__lt_(false(y3692), false(x3691));
                } else {
                  var if_res2430 = M0.__lt_(y3692, x3691);
                }
                var if_res2432 = M0.not(if_res2430);
              } else {
                if (false !== false) {
                  var if_res2431 = M0.__lt_(false(x3691), false(y3692));
                } else {
                  var if_res2431 = M0.__lt_(x3691, y3692);
                }
                var if_res2432 = if_res2431;
              }
              if (if_res2432 !== false) {
                M1.unsafe_vector_set_bang_(A3665, c13690, x3691);
                var a13693 = M1.unsafe_fx_plus_(a13688, 1);
                var c13694 = M1.unsafe_fx_plus_(c13690, 1);
                if (M1.unsafe_fx_lt_(c13694, b13689) !== false) {
                  var if_res2433 = loop3687(a13693, b13689, c13694);
                } else {
                  var if_res2433 = M0.rvoid();
                }
                var if_res2436 = if_res2433;
              } else {
                M1.unsafe_vector_set_bang_(A3665, c13690, y3692);
                var b13695 = M1.unsafe_fx_plus_(b13689, 1);
                var c13696 = M1.unsafe_fx_plus_(c13690, 1);
                if (M1.unsafe_fx_lt__eq_(b23686, b13695) !== false) {
                  var loop3697 = function(a13698, c13699) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13699, b13695) !== false) {
                      M1.unsafe_vector_set_bang_(A3665, c13699, M1.unsafe_vector_ref(A3665, a13698));
                      var if_res2434 = loop3697(M1.unsafe_fx_plus_(a13698, 1), M1.unsafe_fx_plus_(c13699, 1));
                    } else {
                      var if_res2434 = M0.rvoid();
                    }
                    return if_res2434;
                  };
                  var if_res2435 = loop3697(a13688, c13696);
                } else {
                  var if_res2435 = loop3687(a13688, b13695, c13696);
                }
                var if_res2436 = if_res2435;
              }
              return if_res2436;
            };
            var if_res2437 = loop3687(Amid23684, Bmid13685, Blo3671);
          }
          var if_res2438 = if_res2437;
        }
        var if_res2439 = if_res2438;
      }
      return if_res2439;
    };
    var Alo3700 = 0;
    var Amid13701 = n_by_2_3667;
    var Amid23702 = n_by_2_plus_3668;
    var Ahi3703 = n3666;
    var B1lo3704 = n3666;
    copying_mergesort3669(Amid13701, B1lo3704, n_by_2_plus_3668);
    if (M0.zero_p(n_by_2_3667) !== false) {
      var if_res2440 = M0.rvoid();
    } else {
      var if_res2440 = copying_mergesort3669(Alo3700, Amid23702, n_by_2_3667);
    }
    if_res2440;
    var b23705 = Ahi3703;
    var loop3706 = function(a13707, b13708, c13709) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3710 = M1.unsafe_vector_ref(A3665, a13707);
      var y3711 = M1.unsafe_vector_ref(A3665, b13708);
      if (false !== false) {
        if (false !== false) {
          var if_res2441 = M0.__lt_(false(y3711), false(x3710));
        } else {
          var if_res2441 = M0.__lt_(y3711, x3710);
        }
        var if_res2443 = M0.not(if_res2441);
      } else {
        if (false !== false) {
          var if_res2442 = M0.__lt_(false(x3710), false(y3711));
        } else {
          var if_res2442 = M0.__lt_(x3710, y3711);
        }
        var if_res2443 = if_res2442;
      }
      if (if_res2443 !== false) {
        M1.unsafe_vector_set_bang_(A3665, c13709, x3710);
        var a13712 = M1.unsafe_fx_plus_(a13707, 1);
        var c13713 = M1.unsafe_fx_plus_(c13709, 1);
        if (M1.unsafe_fx_lt_(c13713, b13708) !== false) {
          var if_res2444 = loop3706(a13712, b13708, c13713);
        } else {
          var if_res2444 = M0.rvoid();
        }
        var if_res2447 = if_res2444;
      } else {
        M1.unsafe_vector_set_bang_(A3665, c13709, y3711);
        var b13714 = M1.unsafe_fx_plus_(b13708, 1);
        var c13715 = M1.unsafe_fx_plus_(c13709, 1);
        if (M1.unsafe_fx_lt__eq_(b23705, b13714) !== false) {
          var loop3716 = function(a13717, c13718) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13718, b13714) !== false) {
              M1.unsafe_vector_set_bang_(A3665, c13718, M1.unsafe_vector_ref(A3665, a13717));
              var if_res2445 = loop3716(M1.unsafe_fx_plus_(a13717, 1), M1.unsafe_fx_plus_(c13718, 1));
            } else {
              var if_res2445 = M0.rvoid();
            }
            return if_res2445;
          };
          var if_res2446 = loop3716(a13707, c13715);
        } else {
          var if_res2446 = loop3706(a13707, b13714, c13715);
        }
        var if_res2447 = if_res2446;
      }
      return if_res2447;
    };
    return loop3706(B1lo3704, Amid23702, Alo3700);
  };
  M0.hash_set_bang_(sorts3443, M0.__lt_, sort_proc3664);
  M0.hash_set_bang_(sorts3443, M0.__lt__eq_, sort_proc3664);
  var sort_proc3719 = function(A3720, n3721) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3722 = M1.unsafe_fxrshift(n3721, 1);
    var n_by_2_plus_3723 = M1.unsafe_fx_(n3721, n_by_2_3722);
    var copying_mergesort3724 = function(Alo3725, Blo3726, n3727) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3727, 1) !== false) {
        var if_res2463 = M1.unsafe_vector_set_bang_(A3720, Blo3726, M1.unsafe_vector_ref(A3720, Alo3725));
      } else {
        if (M1.unsafe_fx_eq_(n3727, 2) !== false) {
          var x3728 = M1.unsafe_vector_ref(A3720, Alo3725);
          var y3729 = M1.unsafe_vector_ref(A3720, M1.unsafe_fx_plus_(Alo3725, 1));
          if (false !== false) {
            var if_res2448 = M0.__gt_(false(y3729), false(x3728));
          } else {
            var if_res2448 = M0.__gt_(y3729, x3728);
          }
          if (if_res2448 !== false) {
            M1.unsafe_vector_set_bang_(A3720, Blo3726, y3729);
            var if_res2449 = M1.unsafe_vector_set_bang_(A3720, M1.unsafe_fx_plus_(Blo3726, 1), x3728);
          } else {
            M1.unsafe_vector_set_bang_(A3720, Blo3726, x3728);
            var if_res2449 = M1.unsafe_vector_set_bang_(A3720, M1.unsafe_fx_plus_(Blo3726, 1), y3729);
          }
          var if_res2462 = if_res2449;
        } else {
          if (M1.unsafe_fx_lt_(n3727, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3720, Blo3726, M1.unsafe_vector_ref(A3720, Alo3725));
            var iloop3730 = function(i3731) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3731, n3727) !== false) {
                var ref_i3732 = M1.unsafe_vector_ref(A3720, M1.unsafe_fx_plus_(Alo3725, i3731));
                var jloop3733 = function(j3734) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13735 = M1.unsafe_vector_ref(A3720, M1.unsafe_fx_(j3734, 1));
                  if (M1.unsafe_fx_lt_(Blo3726, j3734) !== false) {
                    if (false !== false) {
                      var if_res2450 = M0.__gt_(false(ref_i3732), false(ref_j_13735));
                    } else {
                      var if_res2450 = M0.__gt_(ref_i3732, ref_j_13735);
                    }
                    var if_res2451 = if_res2450;
                  } else {
                    var if_res2451 = false;
                  }
                  if (if_res2451 !== false) {
                    M1.unsafe_vector_set_bang_(A3720, j3734, ref_j_13735);
                    var if_res2452 = jloop3733(M1.unsafe_fx_(j3734, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3720, j3734, ref_i3732);
                    var if_res2452 = iloop3730(M1.unsafe_fx_plus_(i3731, 1));
                  }
                  return if_res2452;
                };
                var if_res2453 = jloop3733(M1.unsafe_fx_plus_(Blo3726, i3731));
              } else {
                var if_res2453 = M0.rvoid();
              }
              return if_res2453;
            };
            var if_res2461 = iloop3730(1);
          } else {
            var n_by_2_3736 = M1.unsafe_fxrshift(n3727, 1);
            var n_by_2_plus_3737 = M1.unsafe_fx_(n3727, n_by_2_3736);
            var Amid13738 = M1.unsafe_fx_plus_(Alo3725, n_by_2_3736);
            var Amid23739 = M1.unsafe_fx_plus_(Alo3725, n_by_2_plus_3737);
            var Bmid13740 = M1.unsafe_fx_plus_(Blo3726, n_by_2_3736);
            copying_mergesort3724(Amid13738, Bmid13740, n_by_2_plus_3737);
            copying_mergesort3724(Alo3725, Amid23739, n_by_2_3736);
            var b23741 = M1.unsafe_fx_plus_(Blo3726, n3727);
            var loop3742 = function(a13743, b13744, c13745) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3746 = M1.unsafe_vector_ref(A3720, a13743);
              var y3747 = M1.unsafe_vector_ref(A3720, b13744);
              if (true !== false) {
                if (false !== false) {
                  var if_res2454 = M0.__gt_(false(y3747), false(x3746));
                } else {
                  var if_res2454 = M0.__gt_(y3747, x3746);
                }
                var if_res2456 = M0.not(if_res2454);
              } else {
                if (false !== false) {
                  var if_res2455 = M0.__gt_(false(x3746), false(y3747));
                } else {
                  var if_res2455 = M0.__gt_(x3746, y3747);
                }
                var if_res2456 = if_res2455;
              }
              if (if_res2456 !== false) {
                M1.unsafe_vector_set_bang_(A3720, c13745, x3746);
                var a13748 = M1.unsafe_fx_plus_(a13743, 1);
                var c13749 = M1.unsafe_fx_plus_(c13745, 1);
                if (M1.unsafe_fx_lt_(c13749, b13744) !== false) {
                  var if_res2457 = loop3742(a13748, b13744, c13749);
                } else {
                  var if_res2457 = M0.rvoid();
                }
                var if_res2460 = if_res2457;
              } else {
                M1.unsafe_vector_set_bang_(A3720, c13745, y3747);
                var b13750 = M1.unsafe_fx_plus_(b13744, 1);
                var c13751 = M1.unsafe_fx_plus_(c13745, 1);
                if (M1.unsafe_fx_lt__eq_(b23741, b13750) !== false) {
                  var loop3752 = function(a13753, c13754) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13754, b13750) !== false) {
                      M1.unsafe_vector_set_bang_(A3720, c13754, M1.unsafe_vector_ref(A3720, a13753));
                      var if_res2458 = loop3752(M1.unsafe_fx_plus_(a13753, 1), M1.unsafe_fx_plus_(c13754, 1));
                    } else {
                      var if_res2458 = M0.rvoid();
                    }
                    return if_res2458;
                  };
                  var if_res2459 = loop3752(a13743, c13751);
                } else {
                  var if_res2459 = loop3742(a13743, b13750, c13751);
                }
                var if_res2460 = if_res2459;
              }
              return if_res2460;
            };
            var if_res2461 = loop3742(Amid23739, Bmid13740, Blo3726);
          }
          var if_res2462 = if_res2461;
        }
        var if_res2463 = if_res2462;
      }
      return if_res2463;
    };
    var Alo3755 = 0;
    var Amid13756 = n_by_2_3722;
    var Amid23757 = n_by_2_plus_3723;
    var Ahi3758 = n3721;
    var B1lo3759 = n3721;
    copying_mergesort3724(Amid13756, B1lo3759, n_by_2_plus_3723);
    if (M0.zero_p(n_by_2_3722) !== false) {
      var if_res2464 = M0.rvoid();
    } else {
      var if_res2464 = copying_mergesort3724(Alo3755, Amid23757, n_by_2_3722);
    }
    if_res2464;
    var b23760 = Ahi3758;
    var loop3761 = function(a13762, b13763, c13764) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3765 = M1.unsafe_vector_ref(A3720, a13762);
      var y3766 = M1.unsafe_vector_ref(A3720, b13763);
      if (false !== false) {
        if (false !== false) {
          var if_res2465 = M0.__gt_(false(y3766), false(x3765));
        } else {
          var if_res2465 = M0.__gt_(y3766, x3765);
        }
        var if_res2467 = M0.not(if_res2465);
      } else {
        if (false !== false) {
          var if_res2466 = M0.__gt_(false(x3765), false(y3766));
        } else {
          var if_res2466 = M0.__gt_(x3765, y3766);
        }
        var if_res2467 = if_res2466;
      }
      if (if_res2467 !== false) {
        M1.unsafe_vector_set_bang_(A3720, c13764, x3765);
        var a13767 = M1.unsafe_fx_plus_(a13762, 1);
        var c13768 = M1.unsafe_fx_plus_(c13764, 1);
        if (M1.unsafe_fx_lt_(c13768, b13763) !== false) {
          var if_res2468 = loop3761(a13767, b13763, c13768);
        } else {
          var if_res2468 = M0.rvoid();
        }
        var if_res2471 = if_res2468;
      } else {
        M1.unsafe_vector_set_bang_(A3720, c13764, y3766);
        var b13769 = M1.unsafe_fx_plus_(b13763, 1);
        var c13770 = M1.unsafe_fx_plus_(c13764, 1);
        if (M1.unsafe_fx_lt__eq_(b23760, b13769) !== false) {
          var loop3771 = function(a13772, c13773) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13773, b13769) !== false) {
              M1.unsafe_vector_set_bang_(A3720, c13773, M1.unsafe_vector_ref(A3720, a13772));
              var if_res2469 = loop3771(M1.unsafe_fx_plus_(a13772, 1), M1.unsafe_fx_plus_(c13773, 1));
            } else {
              var if_res2469 = M0.rvoid();
            }
            return if_res2469;
          };
          var if_res2470 = loop3771(a13762, c13770);
        } else {
          var if_res2470 = loop3761(a13762, b13769, c13770);
        }
        var if_res2471 = if_res2470;
      }
      return if_res2471;
    };
    return loop3761(B1lo3759, Amid23757, Alo3755);
  };
  M0.hash_set_bang_(sorts3443, M0.__gt_, sort_proc3719);
  M0.hash_set_bang_(sorts3443, M0.__gt__eq_, sort_proc3719);
  var sort_proc3774 = function(A3775, n3776) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3777 = M1.unsafe_fxrshift(n3776, 1);
    var n_by_2_plus_3778 = M1.unsafe_fx_(n3776, n_by_2_3777);
    var copying_mergesort3779 = function(Alo3780, Blo3781, n3782) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3782, 1) !== false) {
        var if_res2487 = M1.unsafe_vector_set_bang_(A3775, Blo3781, M1.unsafe_vector_ref(A3775, Alo3780));
      } else {
        if (M1.unsafe_fx_eq_(n3782, 2) !== false) {
          var x3783 = M1.unsafe_vector_ref(A3775, Alo3780);
          var y3784 = M1.unsafe_vector_ref(A3775, M1.unsafe_fx_plus_(Alo3780, 1));
          if (false !== false) {
            var if_res2472 = M0.string_lt__p(false(y3784), false(x3783));
          } else {
            var if_res2472 = M0.string_lt__p(y3784, x3783);
          }
          if (if_res2472 !== false) {
            M1.unsafe_vector_set_bang_(A3775, Blo3781, y3784);
            var if_res2473 = M1.unsafe_vector_set_bang_(A3775, M1.unsafe_fx_plus_(Blo3781, 1), x3783);
          } else {
            M1.unsafe_vector_set_bang_(A3775, Blo3781, x3783);
            var if_res2473 = M1.unsafe_vector_set_bang_(A3775, M1.unsafe_fx_plus_(Blo3781, 1), y3784);
          }
          var if_res2486 = if_res2473;
        } else {
          if (M1.unsafe_fx_lt_(n3782, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3775, Blo3781, M1.unsafe_vector_ref(A3775, Alo3780));
            var iloop3785 = function(i3786) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3786, n3782) !== false) {
                var ref_i3787 = M1.unsafe_vector_ref(A3775, M1.unsafe_fx_plus_(Alo3780, i3786));
                var jloop3788 = function(j3789) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13790 = M1.unsafe_vector_ref(A3775, M1.unsafe_fx_(j3789, 1));
                  if (M1.unsafe_fx_lt_(Blo3781, j3789) !== false) {
                    if (false !== false) {
                      var if_res2474 = M0.string_lt__p(false(ref_i3787), false(ref_j_13790));
                    } else {
                      var if_res2474 = M0.string_lt__p(ref_i3787, ref_j_13790);
                    }
                    var if_res2475 = if_res2474;
                  } else {
                    var if_res2475 = false;
                  }
                  if (if_res2475 !== false) {
                    M1.unsafe_vector_set_bang_(A3775, j3789, ref_j_13790);
                    var if_res2476 = jloop3788(M1.unsafe_fx_(j3789, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3775, j3789, ref_i3787);
                    var if_res2476 = iloop3785(M1.unsafe_fx_plus_(i3786, 1));
                  }
                  return if_res2476;
                };
                var if_res2477 = jloop3788(M1.unsafe_fx_plus_(Blo3781, i3786));
              } else {
                var if_res2477 = M0.rvoid();
              }
              return if_res2477;
            };
            var if_res2485 = iloop3785(1);
          } else {
            var n_by_2_3791 = M1.unsafe_fxrshift(n3782, 1);
            var n_by_2_plus_3792 = M1.unsafe_fx_(n3782, n_by_2_3791);
            var Amid13793 = M1.unsafe_fx_plus_(Alo3780, n_by_2_3791);
            var Amid23794 = M1.unsafe_fx_plus_(Alo3780, n_by_2_plus_3792);
            var Bmid13795 = M1.unsafe_fx_plus_(Blo3781, n_by_2_3791);
            copying_mergesort3779(Amid13793, Bmid13795, n_by_2_plus_3792);
            copying_mergesort3779(Alo3780, Amid23794, n_by_2_3791);
            var b23796 = M1.unsafe_fx_plus_(Blo3781, n3782);
            var loop3797 = function(a13798, b13799, c13800) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3801 = M1.unsafe_vector_ref(A3775, a13798);
              var y3802 = M1.unsafe_vector_ref(A3775, b13799);
              if (true !== false) {
                if (false !== false) {
                  var if_res2478 = M0.string_lt__p(false(y3802), false(x3801));
                } else {
                  var if_res2478 = M0.string_lt__p(y3802, x3801);
                }
                var if_res2480 = M0.not(if_res2478);
              } else {
                if (false !== false) {
                  var if_res2479 = M0.string_lt__p(false(x3801), false(y3802));
                } else {
                  var if_res2479 = M0.string_lt__p(x3801, y3802);
                }
                var if_res2480 = if_res2479;
              }
              if (if_res2480 !== false) {
                M1.unsafe_vector_set_bang_(A3775, c13800, x3801);
                var a13803 = M1.unsafe_fx_plus_(a13798, 1);
                var c13804 = M1.unsafe_fx_plus_(c13800, 1);
                if (M1.unsafe_fx_lt_(c13804, b13799) !== false) {
                  var if_res2481 = loop3797(a13803, b13799, c13804);
                } else {
                  var if_res2481 = M0.rvoid();
                }
                var if_res2484 = if_res2481;
              } else {
                M1.unsafe_vector_set_bang_(A3775, c13800, y3802);
                var b13805 = M1.unsafe_fx_plus_(b13799, 1);
                var c13806 = M1.unsafe_fx_plus_(c13800, 1);
                if (M1.unsafe_fx_lt__eq_(b23796, b13805) !== false) {
                  var loop3807 = function(a13808, c13809) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13809, b13805) !== false) {
                      M1.unsafe_vector_set_bang_(A3775, c13809, M1.unsafe_vector_ref(A3775, a13808));
                      var if_res2482 = loop3807(M1.unsafe_fx_plus_(a13808, 1), M1.unsafe_fx_plus_(c13809, 1));
                    } else {
                      var if_res2482 = M0.rvoid();
                    }
                    return if_res2482;
                  };
                  var if_res2483 = loop3807(a13798, c13806);
                } else {
                  var if_res2483 = loop3797(a13798, b13805, c13806);
                }
                var if_res2484 = if_res2483;
              }
              return if_res2484;
            };
            var if_res2485 = loop3797(Amid23794, Bmid13795, Blo3781);
          }
          var if_res2486 = if_res2485;
        }
        var if_res2487 = if_res2486;
      }
      return if_res2487;
    };
    var Alo3810 = 0;
    var Amid13811 = n_by_2_3777;
    var Amid23812 = n_by_2_plus_3778;
    var Ahi3813 = n3776;
    var B1lo3814 = n3776;
    copying_mergesort3779(Amid13811, B1lo3814, n_by_2_plus_3778);
    if (M0.zero_p(n_by_2_3777) !== false) {
      var if_res2488 = M0.rvoid();
    } else {
      var if_res2488 = copying_mergesort3779(Alo3810, Amid23812, n_by_2_3777);
    }
    if_res2488;
    var b23815 = Ahi3813;
    var loop3816 = function(a13817, b13818, c13819) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3820 = M1.unsafe_vector_ref(A3775, a13817);
      var y3821 = M1.unsafe_vector_ref(A3775, b13818);
      if (false !== false) {
        if (false !== false) {
          var if_res2489 = M0.string_lt__p(false(y3821), false(x3820));
        } else {
          var if_res2489 = M0.string_lt__p(y3821, x3820);
        }
        var if_res2491 = M0.not(if_res2489);
      } else {
        if (false !== false) {
          var if_res2490 = M0.string_lt__p(false(x3820), false(y3821));
        } else {
          var if_res2490 = M0.string_lt__p(x3820, y3821);
        }
        var if_res2491 = if_res2490;
      }
      if (if_res2491 !== false) {
        M1.unsafe_vector_set_bang_(A3775, c13819, x3820);
        var a13822 = M1.unsafe_fx_plus_(a13817, 1);
        var c13823 = M1.unsafe_fx_plus_(c13819, 1);
        if (M1.unsafe_fx_lt_(c13823, b13818) !== false) {
          var if_res2492 = loop3816(a13822, b13818, c13823);
        } else {
          var if_res2492 = M0.rvoid();
        }
        var if_res2495 = if_res2492;
      } else {
        M1.unsafe_vector_set_bang_(A3775, c13819, y3821);
        var b13824 = M1.unsafe_fx_plus_(b13818, 1);
        var c13825 = M1.unsafe_fx_plus_(c13819, 1);
        if (M1.unsafe_fx_lt__eq_(b23815, b13824) !== false) {
          var loop3826 = function(a13827, c13828) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13828, b13824) !== false) {
              M1.unsafe_vector_set_bang_(A3775, c13828, M1.unsafe_vector_ref(A3775, a13827));
              var if_res2493 = loop3826(M1.unsafe_fx_plus_(a13827, 1), M1.unsafe_fx_plus_(c13828, 1));
            } else {
              var if_res2493 = M0.rvoid();
            }
            return if_res2493;
          };
          var if_res2494 = loop3826(a13817, c13825);
        } else {
          var if_res2494 = loop3816(a13817, b13824, c13825);
        }
        var if_res2495 = if_res2494;
      }
      return if_res2495;
    };
    return loop3816(B1lo3814, Amid23812, Alo3810);
  };
  M0.hash_set_bang_(sorts3443, M0.string_lt__p, sort_proc3774);
  M0.hash_set_bang_(sorts3443, M0.string_lt__eq__p, sort_proc3774);
  var sort_proc3829 = function(A3830, n3831) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3832 = M1.unsafe_fxrshift(n3831, 1);
    var n_by_2_plus_3833 = M1.unsafe_fx_(n3831, n_by_2_3832);
    var copying_mergesort3834 = function(Alo3835, Blo3836, n3837) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3837, 1) !== false) {
        var if_res2511 = M1.unsafe_vector_set_bang_(A3830, Blo3836, M1.unsafe_vector_ref(A3830, Alo3835));
      } else {
        if (M1.unsafe_fx_eq_(n3837, 2) !== false) {
          var x3838 = M1.unsafe_vector_ref(A3830, Alo3835);
          var y3839 = M1.unsafe_vector_ref(A3830, M1.unsafe_fx_plus_(Alo3835, 1));
          if (false !== false) {
            var if_res2496 = M0.string_gt__p(false(y3839), false(x3838));
          } else {
            var if_res2496 = M0.string_gt__p(y3839, x3838);
          }
          if (if_res2496 !== false) {
            M1.unsafe_vector_set_bang_(A3830, Blo3836, y3839);
            var if_res2497 = M1.unsafe_vector_set_bang_(A3830, M1.unsafe_fx_plus_(Blo3836, 1), x3838);
          } else {
            M1.unsafe_vector_set_bang_(A3830, Blo3836, x3838);
            var if_res2497 = M1.unsafe_vector_set_bang_(A3830, M1.unsafe_fx_plus_(Blo3836, 1), y3839);
          }
          var if_res2510 = if_res2497;
        } else {
          if (M1.unsafe_fx_lt_(n3837, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3830, Blo3836, M1.unsafe_vector_ref(A3830, Alo3835));
            var iloop3840 = function(i3841) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3841, n3837) !== false) {
                var ref_i3842 = M1.unsafe_vector_ref(A3830, M1.unsafe_fx_plus_(Alo3835, i3841));
                var jloop3843 = function(j3844) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13845 = M1.unsafe_vector_ref(A3830, M1.unsafe_fx_(j3844, 1));
                  if (M1.unsafe_fx_lt_(Blo3836, j3844) !== false) {
                    if (false !== false) {
                      var if_res2498 = M0.string_gt__p(false(ref_i3842), false(ref_j_13845));
                    } else {
                      var if_res2498 = M0.string_gt__p(ref_i3842, ref_j_13845);
                    }
                    var if_res2499 = if_res2498;
                  } else {
                    var if_res2499 = false;
                  }
                  if (if_res2499 !== false) {
                    M1.unsafe_vector_set_bang_(A3830, j3844, ref_j_13845);
                    var if_res2500 = jloop3843(M1.unsafe_fx_(j3844, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3830, j3844, ref_i3842);
                    var if_res2500 = iloop3840(M1.unsafe_fx_plus_(i3841, 1));
                  }
                  return if_res2500;
                };
                var if_res2501 = jloop3843(M1.unsafe_fx_plus_(Blo3836, i3841));
              } else {
                var if_res2501 = M0.rvoid();
              }
              return if_res2501;
            };
            var if_res2509 = iloop3840(1);
          } else {
            var n_by_2_3846 = M1.unsafe_fxrshift(n3837, 1);
            var n_by_2_plus_3847 = M1.unsafe_fx_(n3837, n_by_2_3846);
            var Amid13848 = M1.unsafe_fx_plus_(Alo3835, n_by_2_3846);
            var Amid23849 = M1.unsafe_fx_plus_(Alo3835, n_by_2_plus_3847);
            var Bmid13850 = M1.unsafe_fx_plus_(Blo3836, n_by_2_3846);
            copying_mergesort3834(Amid13848, Bmid13850, n_by_2_plus_3847);
            copying_mergesort3834(Alo3835, Amid23849, n_by_2_3846);
            var b23851 = M1.unsafe_fx_plus_(Blo3836, n3837);
            var loop3852 = function(a13853, b13854, c13855) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3856 = M1.unsafe_vector_ref(A3830, a13853);
              var y3857 = M1.unsafe_vector_ref(A3830, b13854);
              if (true !== false) {
                if (false !== false) {
                  var if_res2502 = M0.string_gt__p(false(y3857), false(x3856));
                } else {
                  var if_res2502 = M0.string_gt__p(y3857, x3856);
                }
                var if_res2504 = M0.not(if_res2502);
              } else {
                if (false !== false) {
                  var if_res2503 = M0.string_gt__p(false(x3856), false(y3857));
                } else {
                  var if_res2503 = M0.string_gt__p(x3856, y3857);
                }
                var if_res2504 = if_res2503;
              }
              if (if_res2504 !== false) {
                M1.unsafe_vector_set_bang_(A3830, c13855, x3856);
                var a13858 = M1.unsafe_fx_plus_(a13853, 1);
                var c13859 = M1.unsafe_fx_plus_(c13855, 1);
                if (M1.unsafe_fx_lt_(c13859, b13854) !== false) {
                  var if_res2505 = loop3852(a13858, b13854, c13859);
                } else {
                  var if_res2505 = M0.rvoid();
                }
                var if_res2508 = if_res2505;
              } else {
                M1.unsafe_vector_set_bang_(A3830, c13855, y3857);
                var b13860 = M1.unsafe_fx_plus_(b13854, 1);
                var c13861 = M1.unsafe_fx_plus_(c13855, 1);
                if (M1.unsafe_fx_lt__eq_(b23851, b13860) !== false) {
                  var loop3862 = function(a13863, c13864) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13864, b13860) !== false) {
                      M1.unsafe_vector_set_bang_(A3830, c13864, M1.unsafe_vector_ref(A3830, a13863));
                      var if_res2506 = loop3862(M1.unsafe_fx_plus_(a13863, 1), M1.unsafe_fx_plus_(c13864, 1));
                    } else {
                      var if_res2506 = M0.rvoid();
                    }
                    return if_res2506;
                  };
                  var if_res2507 = loop3862(a13853, c13861);
                } else {
                  var if_res2507 = loop3852(a13853, b13860, c13861);
                }
                var if_res2508 = if_res2507;
              }
              return if_res2508;
            };
            var if_res2509 = loop3852(Amid23849, Bmid13850, Blo3836);
          }
          var if_res2510 = if_res2509;
        }
        var if_res2511 = if_res2510;
      }
      return if_res2511;
    };
    var Alo3865 = 0;
    var Amid13866 = n_by_2_3832;
    var Amid23867 = n_by_2_plus_3833;
    var Ahi3868 = n3831;
    var B1lo3869 = n3831;
    copying_mergesort3834(Amid13866, B1lo3869, n_by_2_plus_3833);
    if (M0.zero_p(n_by_2_3832) !== false) {
      var if_res2512 = M0.rvoid();
    } else {
      var if_res2512 = copying_mergesort3834(Alo3865, Amid23867, n_by_2_3832);
    }
    if_res2512;
    var b23870 = Ahi3868;
    var loop3871 = function(a13872, b13873, c13874) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3875 = M1.unsafe_vector_ref(A3830, a13872);
      var y3876 = M1.unsafe_vector_ref(A3830, b13873);
      if (false !== false) {
        if (false !== false) {
          var if_res2513 = M0.string_gt__p(false(y3876), false(x3875));
        } else {
          var if_res2513 = M0.string_gt__p(y3876, x3875);
        }
        var if_res2515 = M0.not(if_res2513);
      } else {
        if (false !== false) {
          var if_res2514 = M0.string_gt__p(false(x3875), false(y3876));
        } else {
          var if_res2514 = M0.string_gt__p(x3875, y3876);
        }
        var if_res2515 = if_res2514;
      }
      if (if_res2515 !== false) {
        M1.unsafe_vector_set_bang_(A3830, c13874, x3875);
        var a13877 = M1.unsafe_fx_plus_(a13872, 1);
        var c13878 = M1.unsafe_fx_plus_(c13874, 1);
        if (M1.unsafe_fx_lt_(c13878, b13873) !== false) {
          var if_res2516 = loop3871(a13877, b13873, c13878);
        } else {
          var if_res2516 = M0.rvoid();
        }
        var if_res2519 = if_res2516;
      } else {
        M1.unsafe_vector_set_bang_(A3830, c13874, y3876);
        var b13879 = M1.unsafe_fx_plus_(b13873, 1);
        var c13880 = M1.unsafe_fx_plus_(c13874, 1);
        if (M1.unsafe_fx_lt__eq_(b23870, b13879) !== false) {
          var loop3881 = function(a13882, c13883) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13883, b13879) !== false) {
              M1.unsafe_vector_set_bang_(A3830, c13883, M1.unsafe_vector_ref(A3830, a13882));
              var if_res2517 = loop3881(M1.unsafe_fx_plus_(a13882, 1), M1.unsafe_fx_plus_(c13883, 1));
            } else {
              var if_res2517 = M0.rvoid();
            }
            return if_res2517;
          };
          var if_res2518 = loop3881(a13872, c13880);
        } else {
          var if_res2518 = loop3871(a13872, b13879, c13880);
        }
        var if_res2519 = if_res2518;
      }
      return if_res2519;
    };
    return loop3871(B1lo3869, Amid23867, Alo3865);
  };
  M0.hash_set_bang_(sorts3443, M0.string_gt__p, sort_proc3829);
  M0.hash_set_bang_(sorts3443, M0.string_gt__eq__p, sort_proc3829);
  var sort_proc3884 = function(A3885, n3886) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3887 = M1.unsafe_fxrshift(n3886, 1);
    var n_by_2_plus_3888 = M1.unsafe_fx_(n3886, n_by_2_3887);
    var copying_mergesort3889 = function(Alo3890, Blo3891, n3892) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3892, 1) !== false) {
        var if_res2535 = M1.unsafe_vector_set_bang_(A3885, Blo3891, M1.unsafe_vector_ref(A3885, Alo3890));
      } else {
        if (M1.unsafe_fx_eq_(n3892, 2) !== false) {
          var x3893 = M1.unsafe_vector_ref(A3885, Alo3890);
          var y3894 = M1.unsafe_vector_ref(A3885, M1.unsafe_fx_plus_(Alo3890, 1));
          if (false !== false) {
            var if_res2520 = M0.__rjs_quoted__.string_ci_lt__p(false(y3894), false(x3893));
          } else {
            var if_res2520 = M0.__rjs_quoted__.string_ci_lt__p(y3894, x3893);
          }
          if (if_res2520 !== false) {
            M1.unsafe_vector_set_bang_(A3885, Blo3891, y3894);
            var if_res2521 = M1.unsafe_vector_set_bang_(A3885, M1.unsafe_fx_plus_(Blo3891, 1), x3893);
          } else {
            M1.unsafe_vector_set_bang_(A3885, Blo3891, x3893);
            var if_res2521 = M1.unsafe_vector_set_bang_(A3885, M1.unsafe_fx_plus_(Blo3891, 1), y3894);
          }
          var if_res2534 = if_res2521;
        } else {
          if (M1.unsafe_fx_lt_(n3892, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3885, Blo3891, M1.unsafe_vector_ref(A3885, Alo3890));
            var iloop3895 = function(i3896) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3896, n3892) !== false) {
                var ref_i3897 = M1.unsafe_vector_ref(A3885, M1.unsafe_fx_plus_(Alo3890, i3896));
                var jloop3898 = function(j3899) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13900 = M1.unsafe_vector_ref(A3885, M1.unsafe_fx_(j3899, 1));
                  if (M1.unsafe_fx_lt_(Blo3891, j3899) !== false) {
                    if (false !== false) {
                      var if_res2522 = M0.__rjs_quoted__.string_ci_lt__p(false(ref_i3897), false(ref_j_13900));
                    } else {
                      var if_res2522 = M0.__rjs_quoted__.string_ci_lt__p(ref_i3897, ref_j_13900);
                    }
                    var if_res2523 = if_res2522;
                  } else {
                    var if_res2523 = false;
                  }
                  if (if_res2523 !== false) {
                    M1.unsafe_vector_set_bang_(A3885, j3899, ref_j_13900);
                    var if_res2524 = jloop3898(M1.unsafe_fx_(j3899, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3885, j3899, ref_i3897);
                    var if_res2524 = iloop3895(M1.unsafe_fx_plus_(i3896, 1));
                  }
                  return if_res2524;
                };
                var if_res2525 = jloop3898(M1.unsafe_fx_plus_(Blo3891, i3896));
              } else {
                var if_res2525 = M0.rvoid();
              }
              return if_res2525;
            };
            var if_res2533 = iloop3895(1);
          } else {
            var n_by_2_3901 = M1.unsafe_fxrshift(n3892, 1);
            var n_by_2_plus_3902 = M1.unsafe_fx_(n3892, n_by_2_3901);
            var Amid13903 = M1.unsafe_fx_plus_(Alo3890, n_by_2_3901);
            var Amid23904 = M1.unsafe_fx_plus_(Alo3890, n_by_2_plus_3902);
            var Bmid13905 = M1.unsafe_fx_plus_(Blo3891, n_by_2_3901);
            copying_mergesort3889(Amid13903, Bmid13905, n_by_2_plus_3902);
            copying_mergesort3889(Alo3890, Amid23904, n_by_2_3901);
            var b23906 = M1.unsafe_fx_plus_(Blo3891, n3892);
            var loop3907 = function(a13908, b13909, c13910) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3911 = M1.unsafe_vector_ref(A3885, a13908);
              var y3912 = M1.unsafe_vector_ref(A3885, b13909);
              if (true !== false) {
                if (false !== false) {
                  var if_res2526 = M0.__rjs_quoted__.string_ci_lt__p(false(y3912), false(x3911));
                } else {
                  var if_res2526 = M0.__rjs_quoted__.string_ci_lt__p(y3912, x3911);
                }
                var if_res2528 = M0.not(if_res2526);
              } else {
                if (false !== false) {
                  var if_res2527 = M0.__rjs_quoted__.string_ci_lt__p(false(x3911), false(y3912));
                } else {
                  var if_res2527 = M0.__rjs_quoted__.string_ci_lt__p(x3911, y3912);
                }
                var if_res2528 = if_res2527;
              }
              if (if_res2528 !== false) {
                M1.unsafe_vector_set_bang_(A3885, c13910, x3911);
                var a13913 = M1.unsafe_fx_plus_(a13908, 1);
                var c13914 = M1.unsafe_fx_plus_(c13910, 1);
                if (M1.unsafe_fx_lt_(c13914, b13909) !== false) {
                  var if_res2529 = loop3907(a13913, b13909, c13914);
                } else {
                  var if_res2529 = M0.rvoid();
                }
                var if_res2532 = if_res2529;
              } else {
                M1.unsafe_vector_set_bang_(A3885, c13910, y3912);
                var b13915 = M1.unsafe_fx_plus_(b13909, 1);
                var c13916 = M1.unsafe_fx_plus_(c13910, 1);
                if (M1.unsafe_fx_lt__eq_(b23906, b13915) !== false) {
                  var loop3917 = function(a13918, c13919) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13919, b13915) !== false) {
                      M1.unsafe_vector_set_bang_(A3885, c13919, M1.unsafe_vector_ref(A3885, a13918));
                      var if_res2530 = loop3917(M1.unsafe_fx_plus_(a13918, 1), M1.unsafe_fx_plus_(c13919, 1));
                    } else {
                      var if_res2530 = M0.rvoid();
                    }
                    return if_res2530;
                  };
                  var if_res2531 = loop3917(a13908, c13916);
                } else {
                  var if_res2531 = loop3907(a13908, b13915, c13916);
                }
                var if_res2532 = if_res2531;
              }
              return if_res2532;
            };
            var if_res2533 = loop3907(Amid23904, Bmid13905, Blo3891);
          }
          var if_res2534 = if_res2533;
        }
        var if_res2535 = if_res2534;
      }
      return if_res2535;
    };
    var Alo3920 = 0;
    var Amid13921 = n_by_2_3887;
    var Amid23922 = n_by_2_plus_3888;
    var Ahi3923 = n3886;
    var B1lo3924 = n3886;
    copying_mergesort3889(Amid13921, B1lo3924, n_by_2_plus_3888);
    if (M0.zero_p(n_by_2_3887) !== false) {
      var if_res2536 = M0.rvoid();
    } else {
      var if_res2536 = copying_mergesort3889(Alo3920, Amid23922, n_by_2_3887);
    }
    if_res2536;
    var b23925 = Ahi3923;
    var loop3926 = function(a13927, b13928, c13929) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3930 = M1.unsafe_vector_ref(A3885, a13927);
      var y3931 = M1.unsafe_vector_ref(A3885, b13928);
      if (false !== false) {
        if (false !== false) {
          var if_res2537 = M0.__rjs_quoted__.string_ci_lt__p(false(y3931), false(x3930));
        } else {
          var if_res2537 = M0.__rjs_quoted__.string_ci_lt__p(y3931, x3930);
        }
        var if_res2539 = M0.not(if_res2537);
      } else {
        if (false !== false) {
          var if_res2538 = M0.__rjs_quoted__.string_ci_lt__p(false(x3930), false(y3931));
        } else {
          var if_res2538 = M0.__rjs_quoted__.string_ci_lt__p(x3930, y3931);
        }
        var if_res2539 = if_res2538;
      }
      if (if_res2539 !== false) {
        M1.unsafe_vector_set_bang_(A3885, c13929, x3930);
        var a13932 = M1.unsafe_fx_plus_(a13927, 1);
        var c13933 = M1.unsafe_fx_plus_(c13929, 1);
        if (M1.unsafe_fx_lt_(c13933, b13928) !== false) {
          var if_res2540 = loop3926(a13932, b13928, c13933);
        } else {
          var if_res2540 = M0.rvoid();
        }
        var if_res2543 = if_res2540;
      } else {
        M1.unsafe_vector_set_bang_(A3885, c13929, y3931);
        var b13934 = M1.unsafe_fx_plus_(b13928, 1);
        var c13935 = M1.unsafe_fx_plus_(c13929, 1);
        if (M1.unsafe_fx_lt__eq_(b23925, b13934) !== false) {
          var loop3936 = function(a13937, c13938) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13938, b13934) !== false) {
              M1.unsafe_vector_set_bang_(A3885, c13938, M1.unsafe_vector_ref(A3885, a13937));
              var if_res2541 = loop3936(M1.unsafe_fx_plus_(a13937, 1), M1.unsafe_fx_plus_(c13938, 1));
            } else {
              var if_res2541 = M0.rvoid();
            }
            return if_res2541;
          };
          var if_res2542 = loop3936(a13927, c13935);
        } else {
          var if_res2542 = loop3926(a13927, b13934, c13935);
        }
        var if_res2543 = if_res2542;
      }
      return if_res2543;
    };
    return loop3926(B1lo3924, Amid23922, Alo3920);
  };
  M0.hash_set_bang_(sorts3443, M0.__rjs_quoted__.string_ci_lt__p, sort_proc3884);
  M0.hash_set_bang_(sorts3443, M0.__rjs_quoted__.string_ci_lt__eq__p, sort_proc3884);
  var sort_proc3939 = function(A3940, n3941) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3942 = M1.unsafe_fxrshift(n3941, 1);
    var n_by_2_plus_3943 = M1.unsafe_fx_(n3941, n_by_2_3942);
    var copying_mergesort3944 = function(Alo3945, Blo3946, n3947) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n3947, 1) !== false) {
        var if_res2559 = M1.unsafe_vector_set_bang_(A3940, Blo3946, M1.unsafe_vector_ref(A3940, Alo3945));
      } else {
        if (M1.unsafe_fx_eq_(n3947, 2) !== false) {
          var x3948 = M1.unsafe_vector_ref(A3940, Alo3945);
          var y3949 = M1.unsafe_vector_ref(A3940, M1.unsafe_fx_plus_(Alo3945, 1));
          if (false !== false) {
            var if_res2544 = M0.__rjs_quoted__.string_ci_gt__p(false(y3949), false(x3948));
          } else {
            var if_res2544 = M0.__rjs_quoted__.string_ci_gt__p(y3949, x3948);
          }
          if (if_res2544 !== false) {
            M1.unsafe_vector_set_bang_(A3940, Blo3946, y3949);
            var if_res2545 = M1.unsafe_vector_set_bang_(A3940, M1.unsafe_fx_plus_(Blo3946, 1), x3948);
          } else {
            M1.unsafe_vector_set_bang_(A3940, Blo3946, x3948);
            var if_res2545 = M1.unsafe_vector_set_bang_(A3940, M1.unsafe_fx_plus_(Blo3946, 1), y3949);
          }
          var if_res2558 = if_res2545;
        } else {
          if (M1.unsafe_fx_lt_(n3947, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3940, Blo3946, M1.unsafe_vector_ref(A3940, Alo3945));
            var iloop3950 = function(i3951) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i3951, n3947) !== false) {
                var ref_i3952 = M1.unsafe_vector_ref(A3940, M1.unsafe_fx_plus_(Alo3945, i3951));
                var jloop3953 = function(j3954) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_13955 = M1.unsafe_vector_ref(A3940, M1.unsafe_fx_(j3954, 1));
                  if (M1.unsafe_fx_lt_(Blo3946, j3954) !== false) {
                    if (false !== false) {
                      var if_res2546 = M0.__rjs_quoted__.string_ci_gt__p(false(ref_i3952), false(ref_j_13955));
                    } else {
                      var if_res2546 = M0.__rjs_quoted__.string_ci_gt__p(ref_i3952, ref_j_13955);
                    }
                    var if_res2547 = if_res2546;
                  } else {
                    var if_res2547 = false;
                  }
                  if (if_res2547 !== false) {
                    M1.unsafe_vector_set_bang_(A3940, j3954, ref_j_13955);
                    var if_res2548 = jloop3953(M1.unsafe_fx_(j3954, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3940, j3954, ref_i3952);
                    var if_res2548 = iloop3950(M1.unsafe_fx_plus_(i3951, 1));
                  }
                  return if_res2548;
                };
                var if_res2549 = jloop3953(M1.unsafe_fx_plus_(Blo3946, i3951));
              } else {
                var if_res2549 = M0.rvoid();
              }
              return if_res2549;
            };
            var if_res2557 = iloop3950(1);
          } else {
            var n_by_2_3956 = M1.unsafe_fxrshift(n3947, 1);
            var n_by_2_plus_3957 = M1.unsafe_fx_(n3947, n_by_2_3956);
            var Amid13958 = M1.unsafe_fx_plus_(Alo3945, n_by_2_3956);
            var Amid23959 = M1.unsafe_fx_plus_(Alo3945, n_by_2_plus_3957);
            var Bmid13960 = M1.unsafe_fx_plus_(Blo3946, n_by_2_3956);
            copying_mergesort3944(Amid13958, Bmid13960, n_by_2_plus_3957);
            copying_mergesort3944(Alo3945, Amid23959, n_by_2_3956);
            var b23961 = M1.unsafe_fx_plus_(Blo3946, n3947);
            var loop3962 = function(a13963, b13964, c13965) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x3966 = M1.unsafe_vector_ref(A3940, a13963);
              var y3967 = M1.unsafe_vector_ref(A3940, b13964);
              if (true !== false) {
                if (false !== false) {
                  var if_res2550 = M0.__rjs_quoted__.string_ci_gt__p(false(y3967), false(x3966));
                } else {
                  var if_res2550 = M0.__rjs_quoted__.string_ci_gt__p(y3967, x3966);
                }
                var if_res2552 = M0.not(if_res2550);
              } else {
                if (false !== false) {
                  var if_res2551 = M0.__rjs_quoted__.string_ci_gt__p(false(x3966), false(y3967));
                } else {
                  var if_res2551 = M0.__rjs_quoted__.string_ci_gt__p(x3966, y3967);
                }
                var if_res2552 = if_res2551;
              }
              if (if_res2552 !== false) {
                M1.unsafe_vector_set_bang_(A3940, c13965, x3966);
                var a13968 = M1.unsafe_fx_plus_(a13963, 1);
                var c13969 = M1.unsafe_fx_plus_(c13965, 1);
                if (M1.unsafe_fx_lt_(c13969, b13964) !== false) {
                  var if_res2553 = loop3962(a13968, b13964, c13969);
                } else {
                  var if_res2553 = M0.rvoid();
                }
                var if_res2556 = if_res2553;
              } else {
                M1.unsafe_vector_set_bang_(A3940, c13965, y3967);
                var b13970 = M1.unsafe_fx_plus_(b13964, 1);
                var c13971 = M1.unsafe_fx_plus_(c13965, 1);
                if (M1.unsafe_fx_lt__eq_(b23961, b13970) !== false) {
                  var loop3972 = function(a13973, c13974) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c13974, b13970) !== false) {
                      M1.unsafe_vector_set_bang_(A3940, c13974, M1.unsafe_vector_ref(A3940, a13973));
                      var if_res2554 = loop3972(M1.unsafe_fx_plus_(a13973, 1), M1.unsafe_fx_plus_(c13974, 1));
                    } else {
                      var if_res2554 = M0.rvoid();
                    }
                    return if_res2554;
                  };
                  var if_res2555 = loop3972(a13963, c13971);
                } else {
                  var if_res2555 = loop3962(a13963, b13970, c13971);
                }
                var if_res2556 = if_res2555;
              }
              return if_res2556;
            };
            var if_res2557 = loop3962(Amid23959, Bmid13960, Blo3946);
          }
          var if_res2558 = if_res2557;
        }
        var if_res2559 = if_res2558;
      }
      return if_res2559;
    };
    var Alo3975 = 0;
    var Amid13976 = n_by_2_3942;
    var Amid23977 = n_by_2_plus_3943;
    var Ahi3978 = n3941;
    var B1lo3979 = n3941;
    copying_mergesort3944(Amid13976, B1lo3979, n_by_2_plus_3943);
    if (M0.zero_p(n_by_2_3942) !== false) {
      var if_res2560 = M0.rvoid();
    } else {
      var if_res2560 = copying_mergesort3944(Alo3975, Amid23977, n_by_2_3942);
    }
    if_res2560;
    var b23980 = Ahi3978;
    var loop3981 = function(a13982, b13983, c13984) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x3985 = M1.unsafe_vector_ref(A3940, a13982);
      var y3986 = M1.unsafe_vector_ref(A3940, b13983);
      if (false !== false) {
        if (false !== false) {
          var if_res2561 = M0.__rjs_quoted__.string_ci_gt__p(false(y3986), false(x3985));
        } else {
          var if_res2561 = M0.__rjs_quoted__.string_ci_gt__p(y3986, x3985);
        }
        var if_res2563 = M0.not(if_res2561);
      } else {
        if (false !== false) {
          var if_res2562 = M0.__rjs_quoted__.string_ci_gt__p(false(x3985), false(y3986));
        } else {
          var if_res2562 = M0.__rjs_quoted__.string_ci_gt__p(x3985, y3986);
        }
        var if_res2563 = if_res2562;
      }
      if (if_res2563 !== false) {
        M1.unsafe_vector_set_bang_(A3940, c13984, x3985);
        var a13987 = M1.unsafe_fx_plus_(a13982, 1);
        var c13988 = M1.unsafe_fx_plus_(c13984, 1);
        if (M1.unsafe_fx_lt_(c13988, b13983) !== false) {
          var if_res2564 = loop3981(a13987, b13983, c13988);
        } else {
          var if_res2564 = M0.rvoid();
        }
        var if_res2567 = if_res2564;
      } else {
        M1.unsafe_vector_set_bang_(A3940, c13984, y3986);
        var b13989 = M1.unsafe_fx_plus_(b13983, 1);
        var c13990 = M1.unsafe_fx_plus_(c13984, 1);
        if (M1.unsafe_fx_lt__eq_(b23980, b13989) !== false) {
          var loop3991 = function(a13992, c13993) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c13993, b13989) !== false) {
              M1.unsafe_vector_set_bang_(A3940, c13993, M1.unsafe_vector_ref(A3940, a13992));
              var if_res2565 = loop3991(M1.unsafe_fx_plus_(a13992, 1), M1.unsafe_fx_plus_(c13993, 1));
            } else {
              var if_res2565 = M0.rvoid();
            }
            return if_res2565;
          };
          var if_res2566 = loop3991(a13982, c13990);
        } else {
          var if_res2566 = loop3981(a13982, b13989, c13990);
        }
        var if_res2567 = if_res2566;
      }
      return if_res2567;
    };
    return loop3981(B1lo3979, Amid23977, Alo3975);
  };
  M0.hash_set_bang_(sorts3443, M0.__rjs_quoted__.string_ci_gt__p, sort_proc3939);
  M0.hash_set_bang_(sorts3443, M0.__rjs_quoted__.string_ci_gt__eq__p, sort_proc3939);
  var sort_proc3994 = function(A3995, n3996) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_3997 = M1.unsafe_fxrshift(n3996, 1);
    var n_by_2_plus_3998 = M1.unsafe_fx_(n3996, n_by_2_3997);
    var copying_mergesort3999 = function(Alo4000, Blo4001, n4002) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4002, 1) !== false) {
        var if_res2583 = M1.unsafe_vector_set_bang_(A3995, Blo4001, M1.unsafe_vector_ref(A3995, Alo4000));
      } else {
        if (M1.unsafe_fx_eq_(n4002, 2) !== false) {
          var x4003 = M1.unsafe_vector_ref(A3995, Alo4000);
          var y4004 = M1.unsafe_vector_ref(A3995, M1.unsafe_fx_plus_(Alo4000, 1));
          if (false !== false) {
            var if_res2568 = M0.char_lt__p(false(y4004), false(x4003));
          } else {
            var if_res2568 = M0.char_lt__p(y4004, x4003);
          }
          if (if_res2568 !== false) {
            M1.unsafe_vector_set_bang_(A3995, Blo4001, y4004);
            var if_res2569 = M1.unsafe_vector_set_bang_(A3995, M1.unsafe_fx_plus_(Blo4001, 1), x4003);
          } else {
            M1.unsafe_vector_set_bang_(A3995, Blo4001, x4003);
            var if_res2569 = M1.unsafe_vector_set_bang_(A3995, M1.unsafe_fx_plus_(Blo4001, 1), y4004);
          }
          var if_res2582 = if_res2569;
        } else {
          if (M1.unsafe_fx_lt_(n4002, 16) !== false) {
            M1.unsafe_vector_set_bang_(A3995, Blo4001, M1.unsafe_vector_ref(A3995, Alo4000));
            var iloop4005 = function(i4006) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4006, n4002) !== false) {
                var ref_i4007 = M1.unsafe_vector_ref(A3995, M1.unsafe_fx_plus_(Alo4000, i4006));
                var jloop4008 = function(j4009) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14010 = M1.unsafe_vector_ref(A3995, M1.unsafe_fx_(j4009, 1));
                  if (M1.unsafe_fx_lt_(Blo4001, j4009) !== false) {
                    if (false !== false) {
                      var if_res2570 = M0.char_lt__p(false(ref_i4007), false(ref_j_14010));
                    } else {
                      var if_res2570 = M0.char_lt__p(ref_i4007, ref_j_14010);
                    }
                    var if_res2571 = if_res2570;
                  } else {
                    var if_res2571 = false;
                  }
                  if (if_res2571 !== false) {
                    M1.unsafe_vector_set_bang_(A3995, j4009, ref_j_14010);
                    var if_res2572 = jloop4008(M1.unsafe_fx_(j4009, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A3995, j4009, ref_i4007);
                    var if_res2572 = iloop4005(M1.unsafe_fx_plus_(i4006, 1));
                  }
                  return if_res2572;
                };
                var if_res2573 = jloop4008(M1.unsafe_fx_plus_(Blo4001, i4006));
              } else {
                var if_res2573 = M0.rvoid();
              }
              return if_res2573;
            };
            var if_res2581 = iloop4005(1);
          } else {
            var n_by_2_4011 = M1.unsafe_fxrshift(n4002, 1);
            var n_by_2_plus_4012 = M1.unsafe_fx_(n4002, n_by_2_4011);
            var Amid14013 = M1.unsafe_fx_plus_(Alo4000, n_by_2_4011);
            var Amid24014 = M1.unsafe_fx_plus_(Alo4000, n_by_2_plus_4012);
            var Bmid14015 = M1.unsafe_fx_plus_(Blo4001, n_by_2_4011);
            copying_mergesort3999(Amid14013, Bmid14015, n_by_2_plus_4012);
            copying_mergesort3999(Alo4000, Amid24014, n_by_2_4011);
            var b24016 = M1.unsafe_fx_plus_(Blo4001, n4002);
            var loop4017 = function(a14018, b14019, c14020) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4021 = M1.unsafe_vector_ref(A3995, a14018);
              var y4022 = M1.unsafe_vector_ref(A3995, b14019);
              if (true !== false) {
                if (false !== false) {
                  var if_res2574 = M0.char_lt__p(false(y4022), false(x4021));
                } else {
                  var if_res2574 = M0.char_lt__p(y4022, x4021);
                }
                var if_res2576 = M0.not(if_res2574);
              } else {
                if (false !== false) {
                  var if_res2575 = M0.char_lt__p(false(x4021), false(y4022));
                } else {
                  var if_res2575 = M0.char_lt__p(x4021, y4022);
                }
                var if_res2576 = if_res2575;
              }
              if (if_res2576 !== false) {
                M1.unsafe_vector_set_bang_(A3995, c14020, x4021);
                var a14023 = M1.unsafe_fx_plus_(a14018, 1);
                var c14024 = M1.unsafe_fx_plus_(c14020, 1);
                if (M1.unsafe_fx_lt_(c14024, b14019) !== false) {
                  var if_res2577 = loop4017(a14023, b14019, c14024);
                } else {
                  var if_res2577 = M0.rvoid();
                }
                var if_res2580 = if_res2577;
              } else {
                M1.unsafe_vector_set_bang_(A3995, c14020, y4022);
                var b14025 = M1.unsafe_fx_plus_(b14019, 1);
                var c14026 = M1.unsafe_fx_plus_(c14020, 1);
                if (M1.unsafe_fx_lt__eq_(b24016, b14025) !== false) {
                  var loop4027 = function(a14028, c14029) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14029, b14025) !== false) {
                      M1.unsafe_vector_set_bang_(A3995, c14029, M1.unsafe_vector_ref(A3995, a14028));
                      var if_res2578 = loop4027(M1.unsafe_fx_plus_(a14028, 1), M1.unsafe_fx_plus_(c14029, 1));
                    } else {
                      var if_res2578 = M0.rvoid();
                    }
                    return if_res2578;
                  };
                  var if_res2579 = loop4027(a14018, c14026);
                } else {
                  var if_res2579 = loop4017(a14018, b14025, c14026);
                }
                var if_res2580 = if_res2579;
              }
              return if_res2580;
            };
            var if_res2581 = loop4017(Amid24014, Bmid14015, Blo4001);
          }
          var if_res2582 = if_res2581;
        }
        var if_res2583 = if_res2582;
      }
      return if_res2583;
    };
    var Alo4030 = 0;
    var Amid14031 = n_by_2_3997;
    var Amid24032 = n_by_2_plus_3998;
    var Ahi4033 = n3996;
    var B1lo4034 = n3996;
    copying_mergesort3999(Amid14031, B1lo4034, n_by_2_plus_3998);
    if (M0.zero_p(n_by_2_3997) !== false) {
      var if_res2584 = M0.rvoid();
    } else {
      var if_res2584 = copying_mergesort3999(Alo4030, Amid24032, n_by_2_3997);
    }
    if_res2584;
    var b24035 = Ahi4033;
    var loop4036 = function(a14037, b14038, c14039) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4040 = M1.unsafe_vector_ref(A3995, a14037);
      var y4041 = M1.unsafe_vector_ref(A3995, b14038);
      if (false !== false) {
        if (false !== false) {
          var if_res2585 = M0.char_lt__p(false(y4041), false(x4040));
        } else {
          var if_res2585 = M0.char_lt__p(y4041, x4040);
        }
        var if_res2587 = M0.not(if_res2585);
      } else {
        if (false !== false) {
          var if_res2586 = M0.char_lt__p(false(x4040), false(y4041));
        } else {
          var if_res2586 = M0.char_lt__p(x4040, y4041);
        }
        var if_res2587 = if_res2586;
      }
      if (if_res2587 !== false) {
        M1.unsafe_vector_set_bang_(A3995, c14039, x4040);
        var a14042 = M1.unsafe_fx_plus_(a14037, 1);
        var c14043 = M1.unsafe_fx_plus_(c14039, 1);
        if (M1.unsafe_fx_lt_(c14043, b14038) !== false) {
          var if_res2588 = loop4036(a14042, b14038, c14043);
        } else {
          var if_res2588 = M0.rvoid();
        }
        var if_res2591 = if_res2588;
      } else {
        M1.unsafe_vector_set_bang_(A3995, c14039, y4041);
        var b14044 = M1.unsafe_fx_plus_(b14038, 1);
        var c14045 = M1.unsafe_fx_plus_(c14039, 1);
        if (M1.unsafe_fx_lt__eq_(b24035, b14044) !== false) {
          var loop4046 = function(a14047, c14048) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14048, b14044) !== false) {
              M1.unsafe_vector_set_bang_(A3995, c14048, M1.unsafe_vector_ref(A3995, a14047));
              var if_res2589 = loop4046(M1.unsafe_fx_plus_(a14047, 1), M1.unsafe_fx_plus_(c14048, 1));
            } else {
              var if_res2589 = M0.rvoid();
            }
            return if_res2589;
          };
          var if_res2590 = loop4046(a14037, c14045);
        } else {
          var if_res2590 = loop4036(a14037, b14044, c14045);
        }
        var if_res2591 = if_res2590;
      }
      return if_res2591;
    };
    return loop4036(B1lo4034, Amid24032, Alo4030);
  };
  M0.hash_set_bang_(sorts3443, M0.char_lt__p, sort_proc3994);
  M0.hash_set_bang_(sorts3443, M0.char_lt__eq__p, sort_proc3994);
  var sort_proc4049 = function(A4050, n4051) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4052 = M1.unsafe_fxrshift(n4051, 1);
    var n_by_2_plus_4053 = M1.unsafe_fx_(n4051, n_by_2_4052);
    var copying_mergesort4054 = function(Alo4055, Blo4056, n4057) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4057, 1) !== false) {
        var if_res2607 = M1.unsafe_vector_set_bang_(A4050, Blo4056, M1.unsafe_vector_ref(A4050, Alo4055));
      } else {
        if (M1.unsafe_fx_eq_(n4057, 2) !== false) {
          var x4058 = M1.unsafe_vector_ref(A4050, Alo4055);
          var y4059 = M1.unsafe_vector_ref(A4050, M1.unsafe_fx_plus_(Alo4055, 1));
          if (false !== false) {
            var if_res2592 = M0.char_gt__p(false(y4059), false(x4058));
          } else {
            var if_res2592 = M0.char_gt__p(y4059, x4058);
          }
          if (if_res2592 !== false) {
            M1.unsafe_vector_set_bang_(A4050, Blo4056, y4059);
            var if_res2593 = M1.unsafe_vector_set_bang_(A4050, M1.unsafe_fx_plus_(Blo4056, 1), x4058);
          } else {
            M1.unsafe_vector_set_bang_(A4050, Blo4056, x4058);
            var if_res2593 = M1.unsafe_vector_set_bang_(A4050, M1.unsafe_fx_plus_(Blo4056, 1), y4059);
          }
          var if_res2606 = if_res2593;
        } else {
          if (M1.unsafe_fx_lt_(n4057, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4050, Blo4056, M1.unsafe_vector_ref(A4050, Alo4055));
            var iloop4060 = function(i4061) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4061, n4057) !== false) {
                var ref_i4062 = M1.unsafe_vector_ref(A4050, M1.unsafe_fx_plus_(Alo4055, i4061));
                var jloop4063 = function(j4064) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14065 = M1.unsafe_vector_ref(A4050, M1.unsafe_fx_(j4064, 1));
                  if (M1.unsafe_fx_lt_(Blo4056, j4064) !== false) {
                    if (false !== false) {
                      var if_res2594 = M0.char_gt__p(false(ref_i4062), false(ref_j_14065));
                    } else {
                      var if_res2594 = M0.char_gt__p(ref_i4062, ref_j_14065);
                    }
                    var if_res2595 = if_res2594;
                  } else {
                    var if_res2595 = false;
                  }
                  if (if_res2595 !== false) {
                    M1.unsafe_vector_set_bang_(A4050, j4064, ref_j_14065);
                    var if_res2596 = jloop4063(M1.unsafe_fx_(j4064, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4050, j4064, ref_i4062);
                    var if_res2596 = iloop4060(M1.unsafe_fx_plus_(i4061, 1));
                  }
                  return if_res2596;
                };
                var if_res2597 = jloop4063(M1.unsafe_fx_plus_(Blo4056, i4061));
              } else {
                var if_res2597 = M0.rvoid();
              }
              return if_res2597;
            };
            var if_res2605 = iloop4060(1);
          } else {
            var n_by_2_4066 = M1.unsafe_fxrshift(n4057, 1);
            var n_by_2_plus_4067 = M1.unsafe_fx_(n4057, n_by_2_4066);
            var Amid14068 = M1.unsafe_fx_plus_(Alo4055, n_by_2_4066);
            var Amid24069 = M1.unsafe_fx_plus_(Alo4055, n_by_2_plus_4067);
            var Bmid14070 = M1.unsafe_fx_plus_(Blo4056, n_by_2_4066);
            copying_mergesort4054(Amid14068, Bmid14070, n_by_2_plus_4067);
            copying_mergesort4054(Alo4055, Amid24069, n_by_2_4066);
            var b24071 = M1.unsafe_fx_plus_(Blo4056, n4057);
            var loop4072 = function(a14073, b14074, c14075) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4076 = M1.unsafe_vector_ref(A4050, a14073);
              var y4077 = M1.unsafe_vector_ref(A4050, b14074);
              if (true !== false) {
                if (false !== false) {
                  var if_res2598 = M0.char_gt__p(false(y4077), false(x4076));
                } else {
                  var if_res2598 = M0.char_gt__p(y4077, x4076);
                }
                var if_res2600 = M0.not(if_res2598);
              } else {
                if (false !== false) {
                  var if_res2599 = M0.char_gt__p(false(x4076), false(y4077));
                } else {
                  var if_res2599 = M0.char_gt__p(x4076, y4077);
                }
                var if_res2600 = if_res2599;
              }
              if (if_res2600 !== false) {
                M1.unsafe_vector_set_bang_(A4050, c14075, x4076);
                var a14078 = M1.unsafe_fx_plus_(a14073, 1);
                var c14079 = M1.unsafe_fx_plus_(c14075, 1);
                if (M1.unsafe_fx_lt_(c14079, b14074) !== false) {
                  var if_res2601 = loop4072(a14078, b14074, c14079);
                } else {
                  var if_res2601 = M0.rvoid();
                }
                var if_res2604 = if_res2601;
              } else {
                M1.unsafe_vector_set_bang_(A4050, c14075, y4077);
                var b14080 = M1.unsafe_fx_plus_(b14074, 1);
                var c14081 = M1.unsafe_fx_plus_(c14075, 1);
                if (M1.unsafe_fx_lt__eq_(b24071, b14080) !== false) {
                  var loop4082 = function(a14083, c14084) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14084, b14080) !== false) {
                      M1.unsafe_vector_set_bang_(A4050, c14084, M1.unsafe_vector_ref(A4050, a14083));
                      var if_res2602 = loop4082(M1.unsafe_fx_plus_(a14083, 1), M1.unsafe_fx_plus_(c14084, 1));
                    } else {
                      var if_res2602 = M0.rvoid();
                    }
                    return if_res2602;
                  };
                  var if_res2603 = loop4082(a14073, c14081);
                } else {
                  var if_res2603 = loop4072(a14073, b14080, c14081);
                }
                var if_res2604 = if_res2603;
              }
              return if_res2604;
            };
            var if_res2605 = loop4072(Amid24069, Bmid14070, Blo4056);
          }
          var if_res2606 = if_res2605;
        }
        var if_res2607 = if_res2606;
      }
      return if_res2607;
    };
    var Alo4085 = 0;
    var Amid14086 = n_by_2_4052;
    var Amid24087 = n_by_2_plus_4053;
    var Ahi4088 = n4051;
    var B1lo4089 = n4051;
    copying_mergesort4054(Amid14086, B1lo4089, n_by_2_plus_4053);
    if (M0.zero_p(n_by_2_4052) !== false) {
      var if_res2608 = M0.rvoid();
    } else {
      var if_res2608 = copying_mergesort4054(Alo4085, Amid24087, n_by_2_4052);
    }
    if_res2608;
    var b24090 = Ahi4088;
    var loop4091 = function(a14092, b14093, c14094) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4095 = M1.unsafe_vector_ref(A4050, a14092);
      var y4096 = M1.unsafe_vector_ref(A4050, b14093);
      if (false !== false) {
        if (false !== false) {
          var if_res2609 = M0.char_gt__p(false(y4096), false(x4095));
        } else {
          var if_res2609 = M0.char_gt__p(y4096, x4095);
        }
        var if_res2611 = M0.not(if_res2609);
      } else {
        if (false !== false) {
          var if_res2610 = M0.char_gt__p(false(x4095), false(y4096));
        } else {
          var if_res2610 = M0.char_gt__p(x4095, y4096);
        }
        var if_res2611 = if_res2610;
      }
      if (if_res2611 !== false) {
        M1.unsafe_vector_set_bang_(A4050, c14094, x4095);
        var a14097 = M1.unsafe_fx_plus_(a14092, 1);
        var c14098 = M1.unsafe_fx_plus_(c14094, 1);
        if (M1.unsafe_fx_lt_(c14098, b14093) !== false) {
          var if_res2612 = loop4091(a14097, b14093, c14098);
        } else {
          var if_res2612 = M0.rvoid();
        }
        var if_res2615 = if_res2612;
      } else {
        M1.unsafe_vector_set_bang_(A4050, c14094, y4096);
        var b14099 = M1.unsafe_fx_plus_(b14093, 1);
        var c14100 = M1.unsafe_fx_plus_(c14094, 1);
        if (M1.unsafe_fx_lt__eq_(b24090, b14099) !== false) {
          var loop4101 = function(a14102, c14103) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14103, b14099) !== false) {
              M1.unsafe_vector_set_bang_(A4050, c14103, M1.unsafe_vector_ref(A4050, a14102));
              var if_res2613 = loop4101(M1.unsafe_fx_plus_(a14102, 1), M1.unsafe_fx_plus_(c14103, 1));
            } else {
              var if_res2613 = M0.rvoid();
            }
            return if_res2613;
          };
          var if_res2614 = loop4101(a14092, c14100);
        } else {
          var if_res2614 = loop4091(a14092, b14099, c14100);
        }
        var if_res2615 = if_res2614;
      }
      return if_res2615;
    };
    return loop4091(B1lo4089, Amid24087, Alo4085);
  };
  M0.hash_set_bang_(sorts3443, M0.char_gt__p, sort_proc4049);
  M0.hash_set_bang_(sorts3443, M0.char_gt__eq__p, sort_proc4049);
  var sort_proc4104 = function(A4105, n4106) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4107 = M1.unsafe_fxrshift(n4106, 1);
    var n_by_2_plus_4108 = M1.unsafe_fx_(n4106, n_by_2_4107);
    var copying_mergesort4109 = function(Alo4110, Blo4111, n4112) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4112, 1) !== false) {
        var if_res2631 = M1.unsafe_vector_set_bang_(A4105, Blo4111, M1.unsafe_vector_ref(A4105, Alo4110));
      } else {
        if (M1.unsafe_fx_eq_(n4112, 2) !== false) {
          var x4113 = M1.unsafe_vector_ref(A4105, Alo4110);
          var y4114 = M1.unsafe_vector_ref(A4105, M1.unsafe_fx_plus_(Alo4110, 1));
          if (false !== false) {
            var if_res2616 = M0.__rjs_quoted__.keyword_lt__p(false(y4114), false(x4113));
          } else {
            var if_res2616 = M0.__rjs_quoted__.keyword_lt__p(y4114, x4113);
          }
          if (if_res2616 !== false) {
            M1.unsafe_vector_set_bang_(A4105, Blo4111, y4114);
            var if_res2617 = M1.unsafe_vector_set_bang_(A4105, M1.unsafe_fx_plus_(Blo4111, 1), x4113);
          } else {
            M1.unsafe_vector_set_bang_(A4105, Blo4111, x4113);
            var if_res2617 = M1.unsafe_vector_set_bang_(A4105, M1.unsafe_fx_plus_(Blo4111, 1), y4114);
          }
          var if_res2630 = if_res2617;
        } else {
          if (M1.unsafe_fx_lt_(n4112, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4105, Blo4111, M1.unsafe_vector_ref(A4105, Alo4110));
            var iloop4115 = function(i4116) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4116, n4112) !== false) {
                var ref_i4117 = M1.unsafe_vector_ref(A4105, M1.unsafe_fx_plus_(Alo4110, i4116));
                var jloop4118 = function(j4119) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14120 = M1.unsafe_vector_ref(A4105, M1.unsafe_fx_(j4119, 1));
                  if (M1.unsafe_fx_lt_(Blo4111, j4119) !== false) {
                    if (false !== false) {
                      var if_res2618 = M0.__rjs_quoted__.keyword_lt__p(false(ref_i4117), false(ref_j_14120));
                    } else {
                      var if_res2618 = M0.__rjs_quoted__.keyword_lt__p(ref_i4117, ref_j_14120);
                    }
                    var if_res2619 = if_res2618;
                  } else {
                    var if_res2619 = false;
                  }
                  if (if_res2619 !== false) {
                    M1.unsafe_vector_set_bang_(A4105, j4119, ref_j_14120);
                    var if_res2620 = jloop4118(M1.unsafe_fx_(j4119, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4105, j4119, ref_i4117);
                    var if_res2620 = iloop4115(M1.unsafe_fx_plus_(i4116, 1));
                  }
                  return if_res2620;
                };
                var if_res2621 = jloop4118(M1.unsafe_fx_plus_(Blo4111, i4116));
              } else {
                var if_res2621 = M0.rvoid();
              }
              return if_res2621;
            };
            var if_res2629 = iloop4115(1);
          } else {
            var n_by_2_4121 = M1.unsafe_fxrshift(n4112, 1);
            var n_by_2_plus_4122 = M1.unsafe_fx_(n4112, n_by_2_4121);
            var Amid14123 = M1.unsafe_fx_plus_(Alo4110, n_by_2_4121);
            var Amid24124 = M1.unsafe_fx_plus_(Alo4110, n_by_2_plus_4122);
            var Bmid14125 = M1.unsafe_fx_plus_(Blo4111, n_by_2_4121);
            copying_mergesort4109(Amid14123, Bmid14125, n_by_2_plus_4122);
            copying_mergesort4109(Alo4110, Amid24124, n_by_2_4121);
            var b24126 = M1.unsafe_fx_plus_(Blo4111, n4112);
            var loop4127 = function(a14128, b14129, c14130) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4131 = M1.unsafe_vector_ref(A4105, a14128);
              var y4132 = M1.unsafe_vector_ref(A4105, b14129);
              if (true !== false) {
                if (false !== false) {
                  var if_res2622 = M0.__rjs_quoted__.keyword_lt__p(false(y4132), false(x4131));
                } else {
                  var if_res2622 = M0.__rjs_quoted__.keyword_lt__p(y4132, x4131);
                }
                var if_res2624 = M0.not(if_res2622);
              } else {
                if (false !== false) {
                  var if_res2623 = M0.__rjs_quoted__.keyword_lt__p(false(x4131), false(y4132));
                } else {
                  var if_res2623 = M0.__rjs_quoted__.keyword_lt__p(x4131, y4132);
                }
                var if_res2624 = if_res2623;
              }
              if (if_res2624 !== false) {
                M1.unsafe_vector_set_bang_(A4105, c14130, x4131);
                var a14133 = M1.unsafe_fx_plus_(a14128, 1);
                var c14134 = M1.unsafe_fx_plus_(c14130, 1);
                if (M1.unsafe_fx_lt_(c14134, b14129) !== false) {
                  var if_res2625 = loop4127(a14133, b14129, c14134);
                } else {
                  var if_res2625 = M0.rvoid();
                }
                var if_res2628 = if_res2625;
              } else {
                M1.unsafe_vector_set_bang_(A4105, c14130, y4132);
                var b14135 = M1.unsafe_fx_plus_(b14129, 1);
                var c14136 = M1.unsafe_fx_plus_(c14130, 1);
                if (M1.unsafe_fx_lt__eq_(b24126, b14135) !== false) {
                  var loop4137 = function(a14138, c14139) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14139, b14135) !== false) {
                      M1.unsafe_vector_set_bang_(A4105, c14139, M1.unsafe_vector_ref(A4105, a14138));
                      var if_res2626 = loop4137(M1.unsafe_fx_plus_(a14138, 1), M1.unsafe_fx_plus_(c14139, 1));
                    } else {
                      var if_res2626 = M0.rvoid();
                    }
                    return if_res2626;
                  };
                  var if_res2627 = loop4137(a14128, c14136);
                } else {
                  var if_res2627 = loop4127(a14128, b14135, c14136);
                }
                var if_res2628 = if_res2627;
              }
              return if_res2628;
            };
            var if_res2629 = loop4127(Amid24124, Bmid14125, Blo4111);
          }
          var if_res2630 = if_res2629;
        }
        var if_res2631 = if_res2630;
      }
      return if_res2631;
    };
    var Alo4140 = 0;
    var Amid14141 = n_by_2_4107;
    var Amid24142 = n_by_2_plus_4108;
    var Ahi4143 = n4106;
    var B1lo4144 = n4106;
    copying_mergesort4109(Amid14141, B1lo4144, n_by_2_plus_4108);
    if (M0.zero_p(n_by_2_4107) !== false) {
      var if_res2632 = M0.rvoid();
    } else {
      var if_res2632 = copying_mergesort4109(Alo4140, Amid24142, n_by_2_4107);
    }
    if_res2632;
    var b24145 = Ahi4143;
    var loop4146 = function(a14147, b14148, c14149) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4150 = M1.unsafe_vector_ref(A4105, a14147);
      var y4151 = M1.unsafe_vector_ref(A4105, b14148);
      if (false !== false) {
        if (false !== false) {
          var if_res2633 = M0.__rjs_quoted__.keyword_lt__p(false(y4151), false(x4150));
        } else {
          var if_res2633 = M0.__rjs_quoted__.keyword_lt__p(y4151, x4150);
        }
        var if_res2635 = M0.not(if_res2633);
      } else {
        if (false !== false) {
          var if_res2634 = M0.__rjs_quoted__.keyword_lt__p(false(x4150), false(y4151));
        } else {
          var if_res2634 = M0.__rjs_quoted__.keyword_lt__p(x4150, y4151);
        }
        var if_res2635 = if_res2634;
      }
      if (if_res2635 !== false) {
        M1.unsafe_vector_set_bang_(A4105, c14149, x4150);
        var a14152 = M1.unsafe_fx_plus_(a14147, 1);
        var c14153 = M1.unsafe_fx_plus_(c14149, 1);
        if (M1.unsafe_fx_lt_(c14153, b14148) !== false) {
          var if_res2636 = loop4146(a14152, b14148, c14153);
        } else {
          var if_res2636 = M0.rvoid();
        }
        var if_res2639 = if_res2636;
      } else {
        M1.unsafe_vector_set_bang_(A4105, c14149, y4151);
        var b14154 = M1.unsafe_fx_plus_(b14148, 1);
        var c14155 = M1.unsafe_fx_plus_(c14149, 1);
        if (M1.unsafe_fx_lt__eq_(b24145, b14154) !== false) {
          var loop4156 = function(a14157, c14158) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14158, b14154) !== false) {
              M1.unsafe_vector_set_bang_(A4105, c14158, M1.unsafe_vector_ref(A4105, a14157));
              var if_res2637 = loop4156(M1.unsafe_fx_plus_(a14157, 1), M1.unsafe_fx_plus_(c14158, 1));
            } else {
              var if_res2637 = M0.rvoid();
            }
            return if_res2637;
          };
          var if_res2638 = loop4156(a14147, c14155);
        } else {
          var if_res2638 = loop4146(a14147, b14154, c14155);
        }
        var if_res2639 = if_res2638;
      }
      return if_res2639;
    };
    return loop4146(B1lo4144, Amid24142, Alo4140);
  };
  M0.hash_set_bang_(sorts3443, M0.__rjs_quoted__.keyword_lt__p, sort_proc4104);
  var precompiled_sorts3442 = M0.make_immutable_hasheq(M0.hash_map(sorts3443, M0.cons));
  var generic_sort4159 = function(A4160, less_than_p4161, n4162) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4163 = M1.unsafe_fxrshift(n4162, 1);
    var n_by_2_plus_4164 = M1.unsafe_fx_(n4162, n_by_2_4163);
    var copying_mergesort4165 = function(Alo4166, Blo4167, n4168) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4168, 1) !== false) {
        var if_res2655 = M1.unsafe_vector_set_bang_(A4160, Blo4167, M1.unsafe_vector_ref(A4160, Alo4166));
      } else {
        if (M1.unsafe_fx_eq_(n4168, 2) !== false) {
          var x4169 = M1.unsafe_vector_ref(A4160, Alo4166);
          var y4170 = M1.unsafe_vector_ref(A4160, M1.unsafe_fx_plus_(Alo4166, 1));
          if (false !== false) {
            var if_res2640 = less_than_p4161(false(y4170), false(x4169));
          } else {
            var if_res2640 = less_than_p4161(y4170, x4169);
          }
          if (if_res2640 !== false) {
            M1.unsafe_vector_set_bang_(A4160, Blo4167, y4170);
            var if_res2641 = M1.unsafe_vector_set_bang_(A4160, M1.unsafe_fx_plus_(Blo4167, 1), x4169);
          } else {
            M1.unsafe_vector_set_bang_(A4160, Blo4167, x4169);
            var if_res2641 = M1.unsafe_vector_set_bang_(A4160, M1.unsafe_fx_plus_(Blo4167, 1), y4170);
          }
          var if_res2654 = if_res2641;
        } else {
          if (M1.unsafe_fx_lt_(n4168, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4160, Blo4167, M1.unsafe_vector_ref(A4160, Alo4166));
            var iloop4171 = function(i4172) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4172, n4168) !== false) {
                var ref_i4173 = M1.unsafe_vector_ref(A4160, M1.unsafe_fx_plus_(Alo4166, i4172));
                var jloop4174 = function(j4175) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14176 = M1.unsafe_vector_ref(A4160, M1.unsafe_fx_(j4175, 1));
                  if (M1.unsafe_fx_lt_(Blo4167, j4175) !== false) {
                    if (false !== false) {
                      var if_res2642 = less_than_p4161(false(ref_i4173), false(ref_j_14176));
                    } else {
                      var if_res2642 = less_than_p4161(ref_i4173, ref_j_14176);
                    }
                    var if_res2643 = if_res2642;
                  } else {
                    var if_res2643 = false;
                  }
                  if (if_res2643 !== false) {
                    M1.unsafe_vector_set_bang_(A4160, j4175, ref_j_14176);
                    var if_res2644 = jloop4174(M1.unsafe_fx_(j4175, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4160, j4175, ref_i4173);
                    var if_res2644 = iloop4171(M1.unsafe_fx_plus_(i4172, 1));
                  }
                  return if_res2644;
                };
                var if_res2645 = jloop4174(M1.unsafe_fx_plus_(Blo4167, i4172));
              } else {
                var if_res2645 = M0.rvoid();
              }
              return if_res2645;
            };
            var if_res2653 = iloop4171(1);
          } else {
            var n_by_2_4177 = M1.unsafe_fxrshift(n4168, 1);
            var n_by_2_plus_4178 = M1.unsafe_fx_(n4168, n_by_2_4177);
            var Amid14179 = M1.unsafe_fx_plus_(Alo4166, n_by_2_4177);
            var Amid24180 = M1.unsafe_fx_plus_(Alo4166, n_by_2_plus_4178);
            var Bmid14181 = M1.unsafe_fx_plus_(Blo4167, n_by_2_4177);
            copying_mergesort4165(Amid14179, Bmid14181, n_by_2_plus_4178);
            copying_mergesort4165(Alo4166, Amid24180, n_by_2_4177);
            var b24182 = M1.unsafe_fx_plus_(Blo4167, n4168);
            var loop4183 = function(a14184, b14185, c14186) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4187 = M1.unsafe_vector_ref(A4160, a14184);
              var y4188 = M1.unsafe_vector_ref(A4160, b14185);
              if (true !== false) {
                if (false !== false) {
                  var if_res2646 = less_than_p4161(false(y4188), false(x4187));
                } else {
                  var if_res2646 = less_than_p4161(y4188, x4187);
                }
                var if_res2648 = M0.not(if_res2646);
              } else {
                if (false !== false) {
                  var if_res2647 = less_than_p4161(false(x4187), false(y4188));
                } else {
                  var if_res2647 = less_than_p4161(x4187, y4188);
                }
                var if_res2648 = if_res2647;
              }
              if (if_res2648 !== false) {
                M1.unsafe_vector_set_bang_(A4160, c14186, x4187);
                var a14189 = M1.unsafe_fx_plus_(a14184, 1);
                var c14190 = M1.unsafe_fx_plus_(c14186, 1);
                if (M1.unsafe_fx_lt_(c14190, b14185) !== false) {
                  var if_res2649 = loop4183(a14189, b14185, c14190);
                } else {
                  var if_res2649 = M0.rvoid();
                }
                var if_res2652 = if_res2649;
              } else {
                M1.unsafe_vector_set_bang_(A4160, c14186, y4188);
                var b14191 = M1.unsafe_fx_plus_(b14185, 1);
                var c14192 = M1.unsafe_fx_plus_(c14186, 1);
                if (M1.unsafe_fx_lt__eq_(b24182, b14191) !== false) {
                  var loop4193 = function(a14194, c14195) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14195, b14191) !== false) {
                      M1.unsafe_vector_set_bang_(A4160, c14195, M1.unsafe_vector_ref(A4160, a14194));
                      var if_res2650 = loop4193(M1.unsafe_fx_plus_(a14194, 1), M1.unsafe_fx_plus_(c14195, 1));
                    } else {
                      var if_res2650 = M0.rvoid();
                    }
                    return if_res2650;
                  };
                  var if_res2651 = loop4193(a14184, c14192);
                } else {
                  var if_res2651 = loop4183(a14184, b14191, c14192);
                }
                var if_res2652 = if_res2651;
              }
              return if_res2652;
            };
            var if_res2653 = loop4183(Amid24180, Bmid14181, Blo4167);
          }
          var if_res2654 = if_res2653;
        }
        var if_res2655 = if_res2654;
      }
      return if_res2655;
    };
    var Alo4196 = 0;
    var Amid14197 = n_by_2_4163;
    var Amid24198 = n_by_2_plus_4164;
    var Ahi4199 = n4162;
    var B1lo4200 = n4162;
    copying_mergesort4165(Amid14197, B1lo4200, n_by_2_plus_4164);
    if (M0.zero_p(n_by_2_4163) !== false) {
      var if_res2656 = M0.rvoid();
    } else {
      var if_res2656 = copying_mergesort4165(Alo4196, Amid24198, n_by_2_4163);
    }
    if_res2656;
    var b24201 = Ahi4199;
    var loop4202 = function(a14203, b14204, c14205) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4206 = M1.unsafe_vector_ref(A4160, a14203);
      var y4207 = M1.unsafe_vector_ref(A4160, b14204);
      if (false !== false) {
        if (false !== false) {
          var if_res2657 = less_than_p4161(false(y4207), false(x4206));
        } else {
          var if_res2657 = less_than_p4161(y4207, x4206);
        }
        var if_res2659 = M0.not(if_res2657);
      } else {
        if (false !== false) {
          var if_res2658 = less_than_p4161(false(x4206), false(y4207));
        } else {
          var if_res2658 = less_than_p4161(x4206, y4207);
        }
        var if_res2659 = if_res2658;
      }
      if (if_res2659 !== false) {
        M1.unsafe_vector_set_bang_(A4160, c14205, x4206);
        var a14208 = M1.unsafe_fx_plus_(a14203, 1);
        var c14209 = M1.unsafe_fx_plus_(c14205, 1);
        if (M1.unsafe_fx_lt_(c14209, b14204) !== false) {
          var if_res2660 = loop4202(a14208, b14204, c14209);
        } else {
          var if_res2660 = M0.rvoid();
        }
        var if_res2663 = if_res2660;
      } else {
        M1.unsafe_vector_set_bang_(A4160, c14205, y4207);
        var b14210 = M1.unsafe_fx_plus_(b14204, 1);
        var c14211 = M1.unsafe_fx_plus_(c14205, 1);
        if (M1.unsafe_fx_lt__eq_(b24201, b14210) !== false) {
          var loop4212 = function(a14213, c14214) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14214, b14210) !== false) {
              M1.unsafe_vector_set_bang_(A4160, c14214, M1.unsafe_vector_ref(A4160, a14213));
              var if_res2661 = loop4212(M1.unsafe_fx_plus_(a14213, 1), M1.unsafe_fx_plus_(c14214, 1));
            } else {
              var if_res2661 = M0.rvoid();
            }
            return if_res2661;
          };
          var if_res2662 = loop4212(a14203, c14211);
        } else {
          var if_res2662 = loop4202(a14203, b14210, c14211);
        }
        var if_res2663 = if_res2662;
      }
      return if_res2663;
    };
    return loop4202(B1lo4200, Amid24198, Alo4196);
  };
  var generic_sort_by_key4215 = function(A4216, less_than_p4217, n4218, key4219) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_by_2_4220 = M1.unsafe_fxrshift(n4218, 1);
    var n_by_2_plus_4221 = M1.unsafe_fx_(n4218, n_by_2_4220);
    var copying_mergesort4222 = function(Alo4223, Blo4224, n4225) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.unsafe_fx_eq_(n4225, 1) !== false) {
        var if_res2679 = M1.unsafe_vector_set_bang_(A4216, Blo4224, M1.unsafe_vector_ref(A4216, Alo4223));
      } else {
        if (M1.unsafe_fx_eq_(n4225, 2) !== false) {
          var x4226 = M1.unsafe_vector_ref(A4216, Alo4223);
          var y4227 = M1.unsafe_vector_ref(A4216, M1.unsafe_fx_plus_(Alo4223, 1));
          if (key4219 !== false) {
            var if_res2664 = less_than_p4217(key4219(y4227), key4219(x4226));
          } else {
            var if_res2664 = less_than_p4217(y4227, x4226);
          }
          if (if_res2664 !== false) {
            M1.unsafe_vector_set_bang_(A4216, Blo4224, y4227);
            var if_res2665 = M1.unsafe_vector_set_bang_(A4216, M1.unsafe_fx_plus_(Blo4224, 1), x4226);
          } else {
            M1.unsafe_vector_set_bang_(A4216, Blo4224, x4226);
            var if_res2665 = M1.unsafe_vector_set_bang_(A4216, M1.unsafe_fx_plus_(Blo4224, 1), y4227);
          }
          var if_res2678 = if_res2665;
        } else {
          if (M1.unsafe_fx_lt_(n4225, 16) !== false) {
            M1.unsafe_vector_set_bang_(A4216, Blo4224, M1.unsafe_vector_ref(A4216, Alo4223));
            var iloop4228 = function(i4229) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M1.unsafe_fx_lt_(i4229, n4225) !== false) {
                var ref_i4230 = M1.unsafe_vector_ref(A4216, M1.unsafe_fx_plus_(Alo4223, i4229));
                var jloop4231 = function(j4232) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var ref_j_14233 = M1.unsafe_vector_ref(A4216, M1.unsafe_fx_(j4232, 1));
                  if (M1.unsafe_fx_lt_(Blo4224, j4232) !== false) {
                    if (key4219 !== false) {
                      var if_res2666 = less_than_p4217(key4219(ref_i4230), key4219(ref_j_14233));
                    } else {
                      var if_res2666 = less_than_p4217(ref_i4230, ref_j_14233);
                    }
                    var if_res2667 = if_res2666;
                  } else {
                    var if_res2667 = false;
                  }
                  if (if_res2667 !== false) {
                    M1.unsafe_vector_set_bang_(A4216, j4232, ref_j_14233);
                    var if_res2668 = jloop4231(M1.unsafe_fx_(j4232, 1));
                  } else {
                    M1.unsafe_vector_set_bang_(A4216, j4232, ref_i4230);
                    var if_res2668 = iloop4228(M1.unsafe_fx_plus_(i4229, 1));
                  }
                  return if_res2668;
                };
                var if_res2669 = jloop4231(M1.unsafe_fx_plus_(Blo4224, i4229));
              } else {
                var if_res2669 = M0.rvoid();
              }
              return if_res2669;
            };
            var if_res2677 = iloop4228(1);
          } else {
            var n_by_2_4234 = M1.unsafe_fxrshift(n4225, 1);
            var n_by_2_plus_4235 = M1.unsafe_fx_(n4225, n_by_2_4234);
            var Amid14236 = M1.unsafe_fx_plus_(Alo4223, n_by_2_4234);
            var Amid24237 = M1.unsafe_fx_plus_(Alo4223, n_by_2_plus_4235);
            var Bmid14238 = M1.unsafe_fx_plus_(Blo4224, n_by_2_4234);
            copying_mergesort4222(Amid14236, Bmid14238, n_by_2_plus_4235);
            copying_mergesort4222(Alo4223, Amid24237, n_by_2_4234);
            var b24239 = M1.unsafe_fx_plus_(Blo4224, n4225);
            var loop4240 = function(a14241, b14242, c14243) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var x4244 = M1.unsafe_vector_ref(A4216, a14241);
              var y4245 = M1.unsafe_vector_ref(A4216, b14242);
              if (true !== false) {
                if (key4219 !== false) {
                  var if_res2670 = less_than_p4217(key4219(y4245), key4219(x4244));
                } else {
                  var if_res2670 = less_than_p4217(y4245, x4244);
                }
                var if_res2672 = M0.not(if_res2670);
              } else {
                if (key4219 !== false) {
                  var if_res2671 = less_than_p4217(key4219(x4244), key4219(y4245));
                } else {
                  var if_res2671 = less_than_p4217(x4244, y4245);
                }
                var if_res2672 = if_res2671;
              }
              if (if_res2672 !== false) {
                M1.unsafe_vector_set_bang_(A4216, c14243, x4244);
                var a14246 = M1.unsafe_fx_plus_(a14241, 1);
                var c14247 = M1.unsafe_fx_plus_(c14243, 1);
                if (M1.unsafe_fx_lt_(c14247, b14242) !== false) {
                  var if_res2673 = loop4240(a14246, b14242, c14247);
                } else {
                  var if_res2673 = M0.rvoid();
                }
                var if_res2676 = if_res2673;
              } else {
                M1.unsafe_vector_set_bang_(A4216, c14243, y4245);
                var b14248 = M1.unsafe_fx_plus_(b14242, 1);
                var c14249 = M1.unsafe_fx_plus_(c14243, 1);
                if (M1.unsafe_fx_lt__eq_(b24239, b14248) !== false) {
                  var loop4250 = function(a14251, c14252) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M1.unsafe_fx_lt_(c14252, b14248) !== false) {
                      M1.unsafe_vector_set_bang_(A4216, c14252, M1.unsafe_vector_ref(A4216, a14251));
                      var if_res2674 = loop4250(M1.unsafe_fx_plus_(a14251, 1), M1.unsafe_fx_plus_(c14252, 1));
                    } else {
                      var if_res2674 = M0.rvoid();
                    }
                    return if_res2674;
                  };
                  var if_res2675 = loop4250(a14241, c14249);
                } else {
                  var if_res2675 = loop4240(a14241, b14248, c14249);
                }
                var if_res2676 = if_res2675;
              }
              return if_res2676;
            };
            var if_res2677 = loop4240(Amid24237, Bmid14238, Blo4224);
          }
          var if_res2678 = if_res2677;
        }
        var if_res2679 = if_res2678;
      }
      return if_res2679;
    };
    var Alo4253 = 0;
    var Amid14254 = n_by_2_4220;
    var Amid24255 = n_by_2_plus_4221;
    var Ahi4256 = n4218;
    var B1lo4257 = n4218;
    copying_mergesort4222(Amid14254, B1lo4257, n_by_2_plus_4221);
    if (M0.zero_p(n_by_2_4220) !== false) {
      var if_res2680 = M0.rvoid();
    } else {
      var if_res2680 = copying_mergesort4222(Alo4253, Amid24255, n_by_2_4220);
    }
    if_res2680;
    var b24258 = Ahi4256;
    var loop4259 = function(a14260, b14261, c14262) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var x4263 = M1.unsafe_vector_ref(A4216, a14260);
      var y4264 = M1.unsafe_vector_ref(A4216, b14261);
      if (false !== false) {
        if (key4219 !== false) {
          var if_res2681 = less_than_p4217(key4219(y4264), key4219(x4263));
        } else {
          var if_res2681 = less_than_p4217(y4264, x4263);
        }
        var if_res2683 = M0.not(if_res2681);
      } else {
        if (key4219 !== false) {
          var if_res2682 = less_than_p4217(key4219(x4263), key4219(y4264));
        } else {
          var if_res2682 = less_than_p4217(x4263, y4264);
        }
        var if_res2683 = if_res2682;
      }
      if (if_res2683 !== false) {
        M1.unsafe_vector_set_bang_(A4216, c14262, x4263);
        var a14265 = M1.unsafe_fx_plus_(a14260, 1);
        var c14266 = M1.unsafe_fx_plus_(c14262, 1);
        if (M1.unsafe_fx_lt_(c14266, b14261) !== false) {
          var if_res2684 = loop4259(a14265, b14261, c14266);
        } else {
          var if_res2684 = M0.rvoid();
        }
        var if_res2687 = if_res2684;
      } else {
        M1.unsafe_vector_set_bang_(A4216, c14262, y4264);
        var b14267 = M1.unsafe_fx_plus_(b14261, 1);
        var c14268 = M1.unsafe_fx_plus_(c14262, 1);
        if (M1.unsafe_fx_lt__eq_(b24258, b14267) !== false) {
          var loop4269 = function(a14270, c14271) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(c14271, b14267) !== false) {
              M1.unsafe_vector_set_bang_(A4216, c14271, M1.unsafe_vector_ref(A4216, a14270));
              var if_res2685 = loop4269(M1.unsafe_fx_plus_(a14270, 1), M1.unsafe_fx_plus_(c14271, 1));
            } else {
              var if_res2685 = M0.rvoid();
            }
            return if_res2685;
          };
          var if_res2686 = loop4269(a14260, c14268);
        } else {
          var if_res2686 = loop4259(a14260, b14267, c14268);
        }
        var if_res2687 = if_res2686;
      }
      return if_res2687;
    };
    return loop4259(B1lo4257, Amid24255, Alo4253);
  };
  var cl2797 = function(lst4272, less_than_p4273) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4274 = M0.length(lst4272);
    if (M1.unsafe_fx_eq_(n4274, 0) !== false) {
      var if_res2822 = lst4272;
    } else {
      if (false !== false) {
        var vec4275 = M0.make_vector(n4274 + M0.ceiling(n4274 / 2));
        var loop4276 = function(i4277, lst4278) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.pair_p(lst4278) !== false) {
            var x4279 = M0.car(lst4278);
            M1.unsafe_vector_set_bang_(vec4275, i4277, M0.cons(false(x4279), x4279));
            var if_res2801 = loop4276(M1.unsafe_fx_plus_(i4277, 1), M0.cdr(lst4278));
          } else {
            var if_res2801 = M0.rvoid();
          }
          return if_res2801;
        };
        loop4276(0, lst4272);
        generic_sort_by_key4215(vec4275, less_than_p4273, n4274, M1.unsafe_car);
        var loop4280 = function(i4281, r4282) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var i4283 = M1.unsafe_fx_(i4281, 1);
          if (M1.unsafe_fx_lt_(i4283, 0) !== false) {
            var if_res2802 = r4282;
          } else {
            var if_res2802 = loop4280(i4283, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4275, i4283)), r4282));
          }
          return if_res2802;
        };
        var if_res2821 = loop4280(n4274, $rjs_core.Pair.makeList());
      } else {
        var loop4284 = function(last4285, next4286) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4287 = M0.null_p(next4286);
          if (or_part4287 !== false) {
            var if_res2805 = or_part4287;
          } else {
            if (false !== false) {
              var if_res2803 = less_than_p4273(false(M1.unsafe_car(next4286)), false(last4285));
            } else {
              var if_res2803 = less_than_p4273(M1.unsafe_car(next4286), last4285);
            }
            if (M0.not(if_res2803) !== false) {
              var if_res2804 = loop4284(M1.unsafe_car(next4286), M1.unsafe_cdr(next4286));
            } else {
              var if_res2804 = false;
            }
            var if_res2805 = if_res2804;
          }
          return if_res2805;
        };
        if (loop4284(M0.car(lst4272), M0.cdr(lst4272)) !== false) {
          var if_res2820 = lst4272;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4274, 3) !== false) {
            if (M1.unsafe_fx_eq_(n4274, 1) !== false) {
              var if_res2815 = lst4272;
            } else {
              if (M1.unsafe_fx_eq_(n4274, 2) !== false) {
                var if_res2814 = M0.list(M0.cadr(lst4272), M0.car(lst4272));
              } else {
                var a4288 = M0.car(lst4272);
                var b4289 = M0.cadr(lst4272);
                var c4290 = M0.caddr(lst4272);
                if (false !== false) {
                  var if_res2806 = less_than_p4273(false(b4289), false(a4288));
                } else {
                  var if_res2806 = less_than_p4273(b4289, a4288);
                }
                if (if_res2806 !== false) {
                  if (false !== false) {
                    var if_res2807 = less_than_p4273(false(c4290), false(b4289));
                  } else {
                    var if_res2807 = less_than_p4273(c4290, b4289);
                  }
                  if (if_res2807 !== false) {
                    var if_res2810 = M0.list(c4290, b4289, a4288);
                  } else {
                    if (false !== false) {
                      var if_res2808 = less_than_p4273(false(c4290), false(a4288));
                    } else {
                      var if_res2808 = less_than_p4273(c4290, a4288);
                    }
                    if (if_res2808 !== false) {
                      var if_res2809 = M0.list(b4289, c4290, a4288);
                    } else {
                      var if_res2809 = M0.list(b4289, a4288, c4290);
                    }
                    var if_res2810 = if_res2809;
                  }
                  var if_res2813 = if_res2810;
                } else {
                  if (false !== false) {
                    var if_res2811 = less_than_p4273(false(c4290), false(a4288));
                  } else {
                    var if_res2811 = less_than_p4273(c4290, a4288);
                  }
                  if (if_res2811 !== false) {
                    var if_res2812 = M0.list(c4290, a4288, b4289);
                  } else {
                    var if_res2812 = M0.list(a4288, c4290, b4289);
                  }
                  var if_res2813 = if_res2812;
                }
                var if_res2814 = if_res2813;
              }
              var if_res2815 = if_res2814;
            }
            var if_res2819 = if_res2815;
          } else {
            var vec4291 = M0.make_vector(n4274 + M0.ceiling(n4274 / 2));
            var loop4292 = function(i4293, lst4294) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.pair_p(lst4294) !== false) {
                M0.vector_set_bang_(vec4291, i4293, M0.car(lst4294));
                var if_res2816 = loop4292(M0.add1(i4293), M0.cdr(lst4294));
              } else {
                var if_res2816 = M0.rvoid();
              }
              return if_res2816;
            };
            loop4292(0, lst4272);
            var precomp4295 = M0.hash_ref(precompiled_sorts3442, less_than_p4273, false);
            if (precomp4295 !== false) {
              var if_res2817 = precomp4295(vec4291, n4274);
            } else {
              var if_res2817 = generic_sort4159(vec4291, less_than_p4273, n4274);
            }
            if_res2817;
            var loop4296 = function(i4297, r4298) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var i4299 = M0.sub1(i4297);
              if (M0.__lt_(i4299, 0) !== false) {
                var if_res2818 = r4298;
              } else {
                var if_res2818 = loop4296(i4299, M0.cons(M0.vector_ref(vec4291, i4299), r4298));
              }
              return if_res2818;
            };
            var if_res2819 = loop4296(n4274, $rjs_core.Pair.makeList());
          }
          var if_res2820 = if_res2819;
        }
        var if_res2821 = if_res2820;
      }
      var if_res2822 = if_res2821;
    }
    return if_res2822;
  };
  var cl2798 = function(lst4300, less_than_p4301, getkey4302) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4302 !== false) {
      var if_res2823 = M0.not(M0.eq_p(M0.values, getkey4302));
    } else {
      var if_res2823 = false;
    }
    if (if_res2823 !== false) {
      var if_res2824 = sort(lst4300, less_than_p4301, getkey4302, false);
    } else {
      var if_res2824 = sort(lst4300, less_than_p4301);
    }
    return if_res2824;
  };
  var cl2799 = function(lst4303, less_than_p4304, getkey4305, cache_keys_p4306) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4305 !== false) {
      var if_res2825 = M0.not(M0.eq_p(M0.values, getkey4305));
    } else {
      var if_res2825 = false;
    }
    if (if_res2825 !== false) {
      var n4307 = M0.length(lst4303);
      if (M1.unsafe_fx_eq_(n4307, 0) !== false) {
        var if_res2846 = lst4303;
      } else {
        if (cache_keys_p4306 !== false) {
          var vec4308 = M0.make_vector(n4307 + M0.ceiling(n4307 / 2));
          var loop4309 = function(i4310, lst4311) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.pair_p(lst4311) !== false) {
              var x4312 = M0.car(lst4311);
              M1.unsafe_vector_set_bang_(vec4308, i4310, M0.cons(getkey4305(x4312), x4312));
              var if_res2826 = loop4309(M1.unsafe_fx_plus_(i4310, 1), M0.cdr(lst4311));
            } else {
              var if_res2826 = M0.rvoid();
            }
            return if_res2826;
          };
          loop4309(0, lst4303);
          generic_sort_by_key4215(vec4308, less_than_p4304, n4307, M1.unsafe_car);
          var loop4313 = function(i4314, r4315) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var i4316 = M1.unsafe_fx_(i4314, 1);
            if (M1.unsafe_fx_lt_(i4316, 0) !== false) {
              var if_res2827 = r4315;
            } else {
              var if_res2827 = loop4313(i4316, M0.cons(M1.unsafe_cdr(M1.unsafe_vector_ref(vec4308, i4316)), r4315));
            }
            return if_res2827;
          };
          var if_res2845 = loop4313(n4307, $rjs_core.Pair.makeList());
        } else {
          var loop4317 = function(last4318, next4319) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4320 = M0.null_p(next4319);
            if (or_part4320 !== false) {
              var if_res2830 = or_part4320;
            } else {
              if (getkey4305 !== false) {
                var if_res2828 = less_than_p4304(getkey4305(M1.unsafe_car(next4319)), getkey4305(last4318));
              } else {
                var if_res2828 = less_than_p4304(M1.unsafe_car(next4319), last4318);
              }
              if (M0.not(if_res2828) !== false) {
                var if_res2829 = loop4317(M1.unsafe_car(next4319), M1.unsafe_cdr(next4319));
              } else {
                var if_res2829 = false;
              }
              var if_res2830 = if_res2829;
            }
            return if_res2830;
          };
          if (loop4317(M0.car(lst4303), M0.cdr(lst4303)) !== false) {
            var if_res2844 = lst4303;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4307, 3) !== false) {
              if (M1.unsafe_fx_eq_(n4307, 1) !== false) {
                var if_res2840 = lst4303;
              } else {
                if (M1.unsafe_fx_eq_(n4307, 2) !== false) {
                  var if_res2839 = M0.list(M0.cadr(lst4303), M0.car(lst4303));
                } else {
                  var a4321 = M0.car(lst4303);
                  var b4322 = M0.cadr(lst4303);
                  var c4323 = M0.caddr(lst4303);
                  if (getkey4305 !== false) {
                    var if_res2831 = less_than_p4304(getkey4305(b4322), getkey4305(a4321));
                  } else {
                    var if_res2831 = less_than_p4304(b4322, a4321);
                  }
                  if (if_res2831 !== false) {
                    if (getkey4305 !== false) {
                      var if_res2832 = less_than_p4304(getkey4305(c4323), getkey4305(b4322));
                    } else {
                      var if_res2832 = less_than_p4304(c4323, b4322);
                    }
                    if (if_res2832 !== false) {
                      var if_res2835 = M0.list(c4323, b4322, a4321);
                    } else {
                      if (getkey4305 !== false) {
                        var if_res2833 = less_than_p4304(getkey4305(c4323), getkey4305(a4321));
                      } else {
                        var if_res2833 = less_than_p4304(c4323, a4321);
                      }
                      if (if_res2833 !== false) {
                        var if_res2834 = M0.list(b4322, c4323, a4321);
                      } else {
                        var if_res2834 = M0.list(b4322, a4321, c4323);
                      }
                      var if_res2835 = if_res2834;
                    }
                    var if_res2838 = if_res2835;
                  } else {
                    if (getkey4305 !== false) {
                      var if_res2836 = less_than_p4304(getkey4305(c4323), getkey4305(a4321));
                    } else {
                      var if_res2836 = less_than_p4304(c4323, a4321);
                    }
                    if (if_res2836 !== false) {
                      var if_res2837 = M0.list(c4323, a4321, b4322);
                    } else {
                      var if_res2837 = M0.list(a4321, c4323, b4322);
                    }
                    var if_res2838 = if_res2837;
                  }
                  var if_res2839 = if_res2838;
                }
                var if_res2840 = if_res2839;
              }
              var if_res2843 = if_res2840;
            } else {
              var vec4324 = M0.make_vector(n4307 + M0.ceiling(n4307 / 2));
              var loop4325 = function(i4326, lst4327) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M0.pair_p(lst4327) !== false) {
                  M0.vector_set_bang_(vec4324, i4326, M0.car(lst4327));
                  var if_res2841 = loop4325(M0.add1(i4326), M0.cdr(lst4327));
                } else {
                  var if_res2841 = M0.rvoid();
                }
                return if_res2841;
              };
              loop4325(0, lst4303);
              generic_sort_by_key4215(vec4324, less_than_p4304, n4307, getkey4305);
              var loop4328 = function(i4329, r4330) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var i4331 = M0.sub1(i4329);
                if (M0.__lt_(i4331, 0) !== false) {
                  var if_res2842 = r4330;
                } else {
                  var if_res2842 = loop4328(i4331, M0.cons(M0.vector_ref(vec4324, i4331), r4330));
                }
                return if_res2842;
              };
              var if_res2843 = loop4328(n4307, $rjs_core.Pair.makeList());
            }
            var if_res2844 = if_res2843;
          }
          var if_res2845 = if_res2844;
        }
        var if_res2846 = if_res2845;
      }
      var if_res2847 = if_res2846;
    } else {
      var if_res2847 = sort(lst4303, less_than_p4304);
    }
    return if_res2847;
  };
  var temp2848 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2800 = {
      '2': cl2797,
      '3': cl2798,
      '4': cl2799
    }[arguments.length];
    if (fixed_lam2800 !== undefined) {
      return fixed_lam2800.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3, 4]);
  var cl2742 = function(vec4332, less_than_p4333, start4334, end4335) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4336 = end4335 - start4334;
    if (true !== false) {
      var if_res2745 = M0.make_vector(n4336);
    } else {
      var if_res2745 = vec4332;
    }
    var dst_vec4337 = if_res2745;
    if (true !== false) {
      var if_res2746 = 0;
    } else {
      var if_res2746 = start4334;
    }
    var dst_start4338 = if_res2746;
    if (M1.unsafe_fx_eq_(n4336, 0) !== false) {
      var if_res2768 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4339 = M0.make_vector(n4336 + M0.ceiling(n4336 / 2), true);
        var loop4340 = function(i4341) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4341, n4336) !== false) {
            var x4342 = M1.unsafe_vector_ref(vec4332, M1.unsafe_fx_plus_(i4341, start4334));
            M1.unsafe_vector_set_bang_(work_vec4339, i4341, M0.cons(false(x4342), x4342));
            var if_res2747 = loop4340(M1.unsafe_fx_plus_(i4341, 1));
          } else {
            var if_res2747 = M0.rvoid();
          }
          return if_res2747;
        };
        loop4340(0);
        generic_sort_by_key4215(work_vec4339, less_than_p4333, n4336, M1.unsafe_car);
        var loop4343 = function(i4344) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4344, n4336) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(i4344, dst_start4338), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4339, i4344)));
            var if_res2748 = loop4343(M1.unsafe_fx_plus_(i4344, 1));
          } else {
            var if_res2748 = M0.rvoid();
          }
          return if_res2748;
        };
        var if_res2767 = loop4343(0);
      } else {
        var loop4345 = function(prev_val4346, next_index4347) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4348 = M1.unsafe_fx_eq_(next_index4347, end4335);
          if (or_part4348 !== false) {
            var if_res2751 = or_part4348;
          } else {
            var next_val4349 = M1.unsafe_vector_ref(vec4332, next_index4347);
            if (false !== false) {
              var if_res2749 = less_than_p4333(false(next_val4349), false(prev_val4346));
            } else {
              var if_res2749 = less_than_p4333(next_val4349, prev_val4346);
            }
            if (M0.not(if_res2749) !== false) {
              var if_res2750 = loop4345(next_val4349, M1.unsafe_fx_plus_(next_index4347, 1));
            } else {
              var if_res2750 = false;
            }
            var if_res2751 = if_res2750;
          }
          return if_res2751;
        };
        if (loop4345(M1.unsafe_vector_ref(vec4332, start4334), M1.unsafe_fx_plus_(start4334, 1)) !== false) {
          if (true !== false) {
            var if_res2752 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4337, dst_start4338, vec4332, start4334, end4335);
          } else {
            var if_res2752 = M0.rvoid();
          }
          var if_res2766 = if_res2752;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4336, 3) !== false) {
            if (true !== false) {
              var if_res2753 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4337, dst_start4338, vec4332, start4334, end4335);
            } else {
              var if_res2753 = M0.rvoid();
            }
            if_res2753;
            if (M1.unsafe_fx_eq_(n4336, 1) !== false) {
              var if_res2763 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4336, 2) !== false) {
                var tmp4350 = M1.unsafe_vector_ref(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0));
                M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0), M1.unsafe_vector_ref(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1)));
                var if_res2762 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1), tmp4350);
              } else {
                var a4351 = M1.unsafe_vector_ref(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0));
                var b4352 = M1.unsafe_vector_ref(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1));
                var c4353 = M1.unsafe_vector_ref(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 2));
                if (false !== false) {
                  var if_res2754 = less_than_p4333(false(b4352), false(a4351));
                } else {
                  var if_res2754 = less_than_p4333(b4352, a4351);
                }
                if (if_res2754 !== false) {
                  if (false !== false) {
                    var if_res2755 = less_than_p4333(false(c4353), false(b4352));
                  } else {
                    var if_res2755 = less_than_p4333(c4353, b4352);
                  }
                  if (if_res2755 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0), c4353);
                    var if_res2758 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 2), a4351);
                  } else {
                    if (false !== false) {
                      var if_res2756 = less_than_p4333(false(c4353), false(a4351));
                    } else {
                      var if_res2756 = less_than_p4333(c4353, a4351);
                    }
                    if (if_res2756 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0), b4352);
                      M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1), c4353);
                      var if_res2757 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 2), a4351);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0), b4352);
                      var if_res2757 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1), a4351);
                    }
                    var if_res2758 = if_res2757;
                  }
                  var if_res2761 = if_res2758;
                } else {
                  if (false !== false) {
                    var if_res2759 = less_than_p4333(false(c4353), false(a4351));
                  } else {
                    var if_res2759 = less_than_p4333(c4353, a4351);
                  }
                  if (if_res2759 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 0), c4353);
                    M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1), a4351);
                    var if_res2760 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 2), b4352);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 1), c4353);
                    var if_res2760 = M1.unsafe_vector_set_bang_(dst_vec4337, M1.unsafe_fx_plus_(dst_start4338, 2), b4352);
                  }
                  var if_res2761 = if_res2760;
                }
                var if_res2762 = if_res2761;
              }
              var if_res2763 = if_res2762;
            }
            var if_res2765 = if_res2763;
          } else {
            var work_vec4354 = M0.make_vector(n4336 + M0.ceiling(n4336 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4354, 0, vec4332, start4334, end4335);
            var precomp4355 = M0.hash_ref(precompiled_sorts3442, less_than_p4333, false);
            if (precomp4355 !== false) {
              var if_res2764 = precomp4355(work_vec4354, n4336);
            } else {
              var if_res2764 = generic_sort4159(work_vec4354, less_than_p4333, n4336);
            }
            if_res2764;
            var if_res2765 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4337, dst_start4338, work_vec4354, 0, n4336);
          }
          var if_res2766 = if_res2765;
        }
        var if_res2767 = if_res2766;
      }
      var if_res2768 = if_res2767;
    }
    if_res2768;
    if (true !== false) {
      var if_res2769 = dst_vec4337;
    } else {
      var if_res2769 = M0.rvoid();
    }
    return if_res2769;
  };
  var cl2743 = function(vec4356, less_than_p4357, start4358, end4359, getkey4360, cache_keys_p4361) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4360 !== false) {
      var if_res2770 = M0.not(M0.eq_p(M0.values, getkey4360));
    } else {
      var if_res2770 = false;
    }
    if (if_res2770 !== false) {
      var n4362 = end4359 - start4358;
      if (true !== false) {
        var if_res2771 = M0.make_vector(n4362);
      } else {
        var if_res2771 = vec4356;
      }
      var dst_vec4363 = if_res2771;
      if (true !== false) {
        var if_res2772 = 0;
      } else {
        var if_res2772 = start4358;
      }
      var dst_start4364 = if_res2772;
      if (M1.unsafe_fx_eq_(n4362, 0) !== false) {
        var if_res2793 = M0.rvoid();
      } else {
        if (cache_keys_p4361 !== false) {
          var work_vec4365 = M0.make_vector(n4362 + M0.ceiling(n4362 / 2), true);
          var loop4366 = function(i4367) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4367, n4362) !== false) {
              var x4368 = M1.unsafe_vector_ref(vec4356, M1.unsafe_fx_plus_(i4367, start4358));
              M1.unsafe_vector_set_bang_(work_vec4365, i4367, M0.cons(getkey4360(x4368), x4368));
              var if_res2773 = loop4366(M1.unsafe_fx_plus_(i4367, 1));
            } else {
              var if_res2773 = M0.rvoid();
            }
            return if_res2773;
          };
          loop4366(0);
          generic_sort_by_key4215(work_vec4365, less_than_p4357, n4362, M1.unsafe_car);
          var loop4369 = function(i4370) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4370, n4362) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(i4370, dst_start4364), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4365, i4370)));
              var if_res2774 = loop4369(M1.unsafe_fx_plus_(i4370, 1));
            } else {
              var if_res2774 = M0.rvoid();
            }
            return if_res2774;
          };
          var if_res2792 = loop4369(0);
        } else {
          var loop4371 = function(prev_val4372, next_index4373) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4374 = M1.unsafe_fx_eq_(next_index4373, end4359);
            if (or_part4374 !== false) {
              var if_res2777 = or_part4374;
            } else {
              var next_val4375 = M1.unsafe_vector_ref(vec4356, next_index4373);
              if (getkey4360 !== false) {
                var if_res2775 = less_than_p4357(getkey4360(next_val4375), getkey4360(prev_val4372));
              } else {
                var if_res2775 = less_than_p4357(next_val4375, prev_val4372);
              }
              if (M0.not(if_res2775) !== false) {
                var if_res2776 = loop4371(next_val4375, M1.unsafe_fx_plus_(next_index4373, 1));
              } else {
                var if_res2776 = false;
              }
              var if_res2777 = if_res2776;
            }
            return if_res2777;
          };
          if (loop4371(M1.unsafe_vector_ref(vec4356, start4358), M1.unsafe_fx_plus_(start4358, 1)) !== false) {
            if (true !== false) {
              var if_res2778 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4363, dst_start4364, vec4356, start4358, end4359);
            } else {
              var if_res2778 = M0.rvoid();
            }
            var if_res2791 = if_res2778;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4362, 3) !== false) {
              if (true !== false) {
                var if_res2779 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4363, dst_start4364, vec4356, start4358, end4359);
              } else {
                var if_res2779 = M0.rvoid();
              }
              if_res2779;
              if (M1.unsafe_fx_eq_(n4362, 1) !== false) {
                var if_res2789 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4362, 2) !== false) {
                  var tmp4376 = M1.unsafe_vector_ref(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0), M1.unsafe_vector_ref(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1)));
                  var if_res2788 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1), tmp4376);
                } else {
                  var a4377 = M1.unsafe_vector_ref(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0));
                  var b4378 = M1.unsafe_vector_ref(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1));
                  var c4379 = M1.unsafe_vector_ref(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 2));
                  if (getkey4360 !== false) {
                    var if_res2780 = less_than_p4357(getkey4360(b4378), getkey4360(a4377));
                  } else {
                    var if_res2780 = less_than_p4357(b4378, a4377);
                  }
                  if (if_res2780 !== false) {
                    if (getkey4360 !== false) {
                      var if_res2781 = less_than_p4357(getkey4360(c4379), getkey4360(b4378));
                    } else {
                      var if_res2781 = less_than_p4357(c4379, b4378);
                    }
                    if (if_res2781 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0), c4379);
                      var if_res2784 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 2), a4377);
                    } else {
                      if (getkey4360 !== false) {
                        var if_res2782 = less_than_p4357(getkey4360(c4379), getkey4360(a4377));
                      } else {
                        var if_res2782 = less_than_p4357(c4379, a4377);
                      }
                      if (if_res2782 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0), b4378);
                        M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1), c4379);
                        var if_res2783 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 2), a4377);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0), b4378);
                        var if_res2783 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1), a4377);
                      }
                      var if_res2784 = if_res2783;
                    }
                    var if_res2787 = if_res2784;
                  } else {
                    if (getkey4360 !== false) {
                      var if_res2785 = less_than_p4357(getkey4360(c4379), getkey4360(a4377));
                    } else {
                      var if_res2785 = less_than_p4357(c4379, a4377);
                    }
                    if (if_res2785 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 0), c4379);
                      M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1), a4377);
                      var if_res2786 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 2), b4378);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 1), c4379);
                      var if_res2786 = M1.unsafe_vector_set_bang_(dst_vec4363, M1.unsafe_fx_plus_(dst_start4364, 2), b4378);
                    }
                    var if_res2787 = if_res2786;
                  }
                  var if_res2788 = if_res2787;
                }
                var if_res2789 = if_res2788;
              }
              var if_res2790 = if_res2789;
            } else {
              var work_vec4380 = M0.make_vector(n4362 + M0.ceiling(n4362 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4380, 0, vec4356, start4358, end4359);
              generic_sort_by_key4215(work_vec4380, less_than_p4357, n4362, getkey4360);
              var if_res2790 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4363, dst_start4364, work_vec4380, 0, n4362);
            }
            var if_res2791 = if_res2790;
          }
          var if_res2792 = if_res2791;
        }
        var if_res2793 = if_res2792;
      }
      if_res2793;
      if (true !== false) {
        var if_res2794 = dst_vec4363;
      } else {
        var if_res2794 = M0.rvoid();
      }
      var if_res2795 = if_res2794;
    } else {
      var if_res2795 = vector_sort(vec4356, less_than_p4357, start4358, end4359);
    }
    return if_res2795;
  };
  var temp2796 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2744 = {
      '4': cl2742,
      '6': cl2743
    }[arguments.length];
    if (fixed_lam2744 !== undefined) {
      return fixed_lam2744.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4, 6]);
  var cl2688 = function(vec4381, less_than_p4382, start4383, end4384) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n4385 = end4384 - start4383;
    if (false !== false) {
      var if_res2691 = M0.make_vector(n4385);
    } else {
      var if_res2691 = vec4381;
    }
    var dst_vec4386 = if_res2691;
    if (false !== false) {
      var if_res2692 = 0;
    } else {
      var if_res2692 = start4383;
    }
    var dst_start4387 = if_res2692;
    if (M1.unsafe_fx_eq_(n4385, 0) !== false) {
      var if_res2714 = M0.rvoid();
    } else {
      if (false !== false) {
        var work_vec4388 = M0.make_vector(n4385 + M0.ceiling(n4385 / 2), true);
        var loop4389 = function(i4390) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4390, n4385) !== false) {
            var x4391 = M1.unsafe_vector_ref(vec4381, M1.unsafe_fx_plus_(i4390, start4383));
            M1.unsafe_vector_set_bang_(work_vec4388, i4390, M0.cons(false(x4391), x4391));
            var if_res2693 = loop4389(M1.unsafe_fx_plus_(i4390, 1));
          } else {
            var if_res2693 = M0.rvoid();
          }
          return if_res2693;
        };
        loop4389(0);
        generic_sort_by_key4215(work_vec4388, less_than_p4382, n4385, M1.unsafe_car);
        var loop4392 = function(i4393) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M1.unsafe_fx_lt_(i4393, n4385) !== false) {
            M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(i4393, dst_start4387), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4388, i4393)));
            var if_res2694 = loop4392(M1.unsafe_fx_plus_(i4393, 1));
          } else {
            var if_res2694 = M0.rvoid();
          }
          return if_res2694;
        };
        var if_res2713 = loop4392(0);
      } else {
        var loop4394 = function(prev_val4395, next_index4396) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var or_part4397 = M1.unsafe_fx_eq_(next_index4396, end4384);
          if (or_part4397 !== false) {
            var if_res2697 = or_part4397;
          } else {
            var next_val4398 = M1.unsafe_vector_ref(vec4381, next_index4396);
            if (false !== false) {
              var if_res2695 = less_than_p4382(false(next_val4398), false(prev_val4395));
            } else {
              var if_res2695 = less_than_p4382(next_val4398, prev_val4395);
            }
            if (M0.not(if_res2695) !== false) {
              var if_res2696 = loop4394(next_val4398, M1.unsafe_fx_plus_(next_index4396, 1));
            } else {
              var if_res2696 = false;
            }
            var if_res2697 = if_res2696;
          }
          return if_res2697;
        };
        if (loop4394(M1.unsafe_vector_ref(vec4381, start4383), M1.unsafe_fx_plus_(start4383, 1)) !== false) {
          if (false !== false) {
            var if_res2698 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4386, dst_start4387, vec4381, start4383, end4384);
          } else {
            var if_res2698 = M0.rvoid();
          }
          var if_res2712 = if_res2698;
        } else {
          if (M1.unsafe_fx_lt__eq_(n4385, 3) !== false) {
            if (false !== false) {
              var if_res2699 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4386, dst_start4387, vec4381, start4383, end4384);
            } else {
              var if_res2699 = M0.rvoid();
            }
            if_res2699;
            if (M1.unsafe_fx_eq_(n4385, 1) !== false) {
              var if_res2709 = M0.rvoid();
            } else {
              if (M1.unsafe_fx_eq_(n4385, 2) !== false) {
                var tmp4399 = M1.unsafe_vector_ref(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0));
                M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0), M1.unsafe_vector_ref(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1)));
                var if_res2708 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1), tmp4399);
              } else {
                var a4400 = M1.unsafe_vector_ref(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0));
                var b4401 = M1.unsafe_vector_ref(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1));
                var c4402 = M1.unsafe_vector_ref(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 2));
                if (false !== false) {
                  var if_res2700 = less_than_p4382(false(b4401), false(a4400));
                } else {
                  var if_res2700 = less_than_p4382(b4401, a4400);
                }
                if (if_res2700 !== false) {
                  if (false !== false) {
                    var if_res2701 = less_than_p4382(false(c4402), false(b4401));
                  } else {
                    var if_res2701 = less_than_p4382(c4402, b4401);
                  }
                  if (if_res2701 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0), c4402);
                    var if_res2704 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 2), a4400);
                  } else {
                    if (false !== false) {
                      var if_res2702 = less_than_p4382(false(c4402), false(a4400));
                    } else {
                      var if_res2702 = less_than_p4382(c4402, a4400);
                    }
                    if (if_res2702 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0), b4401);
                      M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1), c4402);
                      var if_res2703 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 2), a4400);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0), b4401);
                      var if_res2703 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1), a4400);
                    }
                    var if_res2704 = if_res2703;
                  }
                  var if_res2707 = if_res2704;
                } else {
                  if (false !== false) {
                    var if_res2705 = less_than_p4382(false(c4402), false(a4400));
                  } else {
                    var if_res2705 = less_than_p4382(c4402, a4400);
                  }
                  if (if_res2705 !== false) {
                    M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 0), c4402);
                    M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1), a4400);
                    var if_res2706 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 2), b4401);
                  } else {
                    M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 1), c4402);
                    var if_res2706 = M1.unsafe_vector_set_bang_(dst_vec4386, M1.unsafe_fx_plus_(dst_start4387, 2), b4401);
                  }
                  var if_res2707 = if_res2706;
                }
                var if_res2708 = if_res2707;
              }
              var if_res2709 = if_res2708;
            }
            var if_res2711 = if_res2709;
          } else {
            var work_vec4403 = M0.make_vector(n4385 + M0.ceiling(n4385 / 2), false);
            M0.__rjs_quoted__.vector_copy_bang_(work_vec4403, 0, vec4381, start4383, end4384);
            var precomp4404 = M0.hash_ref(precompiled_sorts3442, less_than_p4382, false);
            if (precomp4404 !== false) {
              var if_res2710 = precomp4404(work_vec4403, n4385);
            } else {
              var if_res2710 = generic_sort4159(work_vec4403, less_than_p4382, n4385);
            }
            if_res2710;
            var if_res2711 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4386, dst_start4387, work_vec4403, 0, n4385);
          }
          var if_res2712 = if_res2711;
        }
        var if_res2713 = if_res2712;
      }
      var if_res2714 = if_res2713;
    }
    if_res2714;
    if (false !== false) {
      var if_res2715 = dst_vec4386;
    } else {
      var if_res2715 = M0.rvoid();
    }
    return if_res2715;
  };
  var cl2689 = function(vec4405, less_than_p4406, start4407, end4408, getkey4409, cache_keys_p4410) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (getkey4409 !== false) {
      var if_res2716 = M0.not(M0.eq_p(M0.values, getkey4409));
    } else {
      var if_res2716 = false;
    }
    if (if_res2716 !== false) {
      var n4411 = end4408 - start4407;
      if (false !== false) {
        var if_res2717 = M0.make_vector(n4411);
      } else {
        var if_res2717 = vec4405;
      }
      var dst_vec4412 = if_res2717;
      if (false !== false) {
        var if_res2718 = 0;
      } else {
        var if_res2718 = start4407;
      }
      var dst_start4413 = if_res2718;
      if (M1.unsafe_fx_eq_(n4411, 0) !== false) {
        var if_res2739 = M0.rvoid();
      } else {
        if (cache_keys_p4410 !== false) {
          var work_vec4414 = M0.make_vector(n4411 + M0.ceiling(n4411 / 2), true);
          var loop4415 = function(i4416) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4416, n4411) !== false) {
              var x4417 = M1.unsafe_vector_ref(vec4405, M1.unsafe_fx_plus_(i4416, start4407));
              M1.unsafe_vector_set_bang_(work_vec4414, i4416, M0.cons(getkey4409(x4417), x4417));
              var if_res2719 = loop4415(M1.unsafe_fx_plus_(i4416, 1));
            } else {
              var if_res2719 = M0.rvoid();
            }
            return if_res2719;
          };
          loop4415(0);
          generic_sort_by_key4215(work_vec4414, less_than_p4406, n4411, M1.unsafe_car);
          var loop4418 = function(i4419) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M1.unsafe_fx_lt_(i4419, n4411) !== false) {
              M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(i4419, dst_start4413), M1.unsafe_cdr(M1.unsafe_vector_ref(work_vec4414, i4419)));
              var if_res2720 = loop4418(M1.unsafe_fx_plus_(i4419, 1));
            } else {
              var if_res2720 = M0.rvoid();
            }
            return if_res2720;
          };
          var if_res2738 = loop4418(0);
        } else {
          var loop4420 = function(prev_val4421, next_index4422) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4423 = M1.unsafe_fx_eq_(next_index4422, end4408);
            if (or_part4423 !== false) {
              var if_res2723 = or_part4423;
            } else {
              var next_val4424 = M1.unsafe_vector_ref(vec4405, next_index4422);
              if (getkey4409 !== false) {
                var if_res2721 = less_than_p4406(getkey4409(next_val4424), getkey4409(prev_val4421));
              } else {
                var if_res2721 = less_than_p4406(next_val4424, prev_val4421);
              }
              if (M0.not(if_res2721) !== false) {
                var if_res2722 = loop4420(next_val4424, M1.unsafe_fx_plus_(next_index4422, 1));
              } else {
                var if_res2722 = false;
              }
              var if_res2723 = if_res2722;
            }
            return if_res2723;
          };
          if (loop4420(M1.unsafe_vector_ref(vec4405, start4407), M1.unsafe_fx_plus_(start4407, 1)) !== false) {
            if (false !== false) {
              var if_res2724 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4412, dst_start4413, vec4405, start4407, end4408);
            } else {
              var if_res2724 = M0.rvoid();
            }
            var if_res2737 = if_res2724;
          } else {
            if (M1.unsafe_fx_lt__eq_(n4411, 3) !== false) {
              if (false !== false) {
                var if_res2725 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4412, dst_start4413, vec4405, start4407, end4408);
              } else {
                var if_res2725 = M0.rvoid();
              }
              if_res2725;
              if (M1.unsafe_fx_eq_(n4411, 1) !== false) {
                var if_res2735 = M0.rvoid();
              } else {
                if (M1.unsafe_fx_eq_(n4411, 2) !== false) {
                  var tmp4425 = M1.unsafe_vector_ref(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0));
                  M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0), M1.unsafe_vector_ref(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1)));
                  var if_res2734 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1), tmp4425);
                } else {
                  var a4426 = M1.unsafe_vector_ref(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0));
                  var b4427 = M1.unsafe_vector_ref(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1));
                  var c4428 = M1.unsafe_vector_ref(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 2));
                  if (getkey4409 !== false) {
                    var if_res2726 = less_than_p4406(getkey4409(b4427), getkey4409(a4426));
                  } else {
                    var if_res2726 = less_than_p4406(b4427, a4426);
                  }
                  if (if_res2726 !== false) {
                    if (getkey4409 !== false) {
                      var if_res2727 = less_than_p4406(getkey4409(c4428), getkey4409(b4427));
                    } else {
                      var if_res2727 = less_than_p4406(c4428, b4427);
                    }
                    if (if_res2727 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0), c4428);
                      var if_res2730 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 2), a4426);
                    } else {
                      if (getkey4409 !== false) {
                        var if_res2728 = less_than_p4406(getkey4409(c4428), getkey4409(a4426));
                      } else {
                        var if_res2728 = less_than_p4406(c4428, a4426);
                      }
                      if (if_res2728 !== false) {
                        M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0), b4427);
                        M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1), c4428);
                        var if_res2729 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 2), a4426);
                      } else {
                        M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0), b4427);
                        var if_res2729 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1), a4426);
                      }
                      var if_res2730 = if_res2729;
                    }
                    var if_res2733 = if_res2730;
                  } else {
                    if (getkey4409 !== false) {
                      var if_res2731 = less_than_p4406(getkey4409(c4428), getkey4409(a4426));
                    } else {
                      var if_res2731 = less_than_p4406(c4428, a4426);
                    }
                    if (if_res2731 !== false) {
                      M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 0), c4428);
                      M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1), a4426);
                      var if_res2732 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 2), b4427);
                    } else {
                      M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 1), c4428);
                      var if_res2732 = M1.unsafe_vector_set_bang_(dst_vec4412, M1.unsafe_fx_plus_(dst_start4413, 2), b4427);
                    }
                    var if_res2733 = if_res2732;
                  }
                  var if_res2734 = if_res2733;
                }
                var if_res2735 = if_res2734;
              }
              var if_res2736 = if_res2735;
            } else {
              var work_vec4429 = M0.make_vector(n4411 + M0.ceiling(n4411 / 2), false);
              M0.__rjs_quoted__.vector_copy_bang_(work_vec4429, 0, vec4405, start4407, end4408);
              generic_sort_by_key4215(work_vec4429, less_than_p4406, n4411, getkey4409);
              var if_res2736 = M0.__rjs_quoted__.vector_copy_bang_(dst_vec4412, dst_start4413, work_vec4429, 0, n4411);
            }
            var if_res2737 = if_res2736;
          }
          var if_res2738 = if_res2737;
        }
        var if_res2739 = if_res2738;
      }
      if_res2739;
      if (false !== false) {
        var if_res2740 = dst_vec4412;
      } else {
        var if_res2740 = M0.rvoid();
      }
      var if_res2741 = if_res2740;
    } else {
      var if_res2741 = vector_sort_bang_(vec4405, less_than_p4406, start4407, end4408);
    }
    return if_res2741;
  };
  var let_result2849 = M0.values(temp2848, temp2796, $rjs_core.attachProcedureArity(function() {
    var fixed_lam2690 = {
      '4': cl2688,
      '6': cl2689
    }[arguments.length];
    if (fixed_lam2690 !== undefined) {
      return fixed_lam2690.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4, 6]));
  var sort = let_result2849.getAt(0);
  var vector_sort = let_result2849.getAt(1);
  var vector_sort_bang_ = let_result2849.getAt(2);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get vector_sort_bang_() {
      return vector_sort_bang_;
    },
    get vector_sort() {
      return vector_sort;
    },
    get sort() {
      return sort;
    }
  };
})();
var $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/reverse.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  if (M0.eval_jit_enabled() !== false) {
    var reverse2100 = function(l2101) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.list_p(l2101) !== false) {
        var if_res1362 = M0.rvoid();
      } else {
        var if_res1362 = M0.raise_argument_error($rjs_core.Symbol.make("reverse"), $rjs_core.UString.makeInternedImmutable("list?"), l2101);
      }
      if_res1362;
      var loop2102 = function(a2103, l2104) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l2104) !== false) {
          var if_res1363 = a2103;
        } else {
          var if_res1363 = loop2102(M0.cons(M0.car(l2104), a2103), M0.cdr(l2104));
        }
        return if_res1363;
      };
      return loop2102(M0.rnull, l2101);
    };
    var if_res1364 = reverse2100;
  } else {
    var if_res1364 = M0.reverse;
  }
  var alt_reverse = if_res1364;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get alt_reverse() {
      return alt_reverse;
    }
  };
})();
var $__collects_47_racket_47_private_47_for_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/for.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_flfxnum_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1653 = M2.make_struct_type($rjs_core.Symbol.make("sequence"), false, 1, 0, false);
  var struct_do_sequence = let_result1653.getAt(0);
  var make_do_sequence = let_result1653.getAt(1);
  var do_sequence_p = let_result1653.getAt(2);
  var do_sequence_ref = let_result1653.getAt(3);
  var do_sequence_set_bang_ = let_result1653.getAt(4);
  var let_result1662 = M2.make_struct_type_property($rjs_core.Symbol.make("stream"), function(v2505, si2506) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.vector_p(v2505) !== false) {
      if (M2.__eq_(3, M2.vector_length(v2505)) !== false) {
        if (M2.procedure_p(M2.vector_ref(v2505, 0)) !== false) {
          if (M2.procedure_arity_includes_p(M2.vector_ref(v2505, 0), 1) !== false) {
            if (M2.procedure_p(M2.vector_ref(v2505, 1)) !== false) {
              if (M2.procedure_arity_includes_p(M2.vector_ref(v2505, 1), 1) !== false) {
                if (M2.procedure_p(M2.vector_ref(v2505, 2)) !== false) {
                  var if_res1654 = M2.procedure_arity_includes_p(M2.vector_ref(v2505, 2), 1);
                } else {
                  var if_res1654 = false;
                }
                var if_res1655 = if_res1654;
              } else {
                var if_res1655 = false;
              }
              var if_res1656 = if_res1655;
            } else {
              var if_res1656 = false;
            }
            var if_res1657 = if_res1656;
          } else {
            var if_res1657 = false;
          }
          var if_res1658 = if_res1657;
        } else {
          var if_res1658 = false;
        }
        var if_res1659 = if_res1658;
      } else {
        var if_res1659 = false;
      }
      var if_res1660 = if_res1659;
    } else {
      var if_res1660 = false;
    }
    if (if_res1660 !== false) {
      var if_res1661 = M2.rvoid();
    } else {
      var if_res1661 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:stream"), M2.string_append($rjs_core.UString.makeInternedImmutable("(vector/c (procedure-arity-includes/c 1)\n"), $rjs_core.UString.makeInternedImmutable("          (procedure-arity-includes/c 1)\n"), $rjs_core.UString.makeInternedImmutable("          (procedure-arity-includes/c 1))")), v2505);
    }
    if_res1661;
    return M2.vector__gt_immutable_vector(v2505);
  });
  var prop_stream = let_result1662.getAt(0);
  var stream_via_prop_p = let_result1662.getAt(1);
  var stream_ref = let_result1662.getAt(2);
  var let_result1665 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2507, si2508) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2507) !== false) {
      var if_res1663 = M2.procedure_arity_includes_p(v2507, 1);
    } else {
      var if_res1663 = false;
    }
    if (if_res1663 !== false) {
      var if_res1664 = M2.rvoid();
    } else {
      var if_res1664 = M2.raise_argument_error($rjs_core.Symbol.make("guard-for-prop:sequence"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), v2507);
    }
    if_res1664;
    return v2507;
  });
  var prop_gen_sequence = let_result1665.getAt(0);
  var sequence_via_prop_p = let_result1665.getAt(1);
  var sequence_ref = let_result1665.getAt(2);
  var let_result1669 = M2.make_struct_type_property($rjs_core.Symbol.make("sequence"), function(v2509, sinfo2510) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(v2509) !== false) {
      var if_res1666 = M2.procedure_arity_includes_p(v2509, 1);
    } else {
      var if_res1666 = false;
    }
    if (if_res1666 !== false) {
      var if_res1667 = M2.rvoid();
    } else {
      var if_res1667 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-property-guard"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), v2509);
    }
    if_res1667;
    return function(self2511) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var s2512 = v2509(self2511);
      if (sequence_p(s2512) !== false) {
        var if_res1668 = M2.rvoid();
      } else {
        var if_res1668 = M2.raise_mismatch_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("procedure (value of prop:sequence) produced a non-sequence: "), s2512);
      }
      if_res1668;
      return s2512;
    };
  });
  var prop_sequence = let_result1669.getAt(0);
  var __sequence_p = let_result1669.getAt(1);
  var __sequence_ref = let_result1669.getAt(2);
  var stream_p = function(v2513) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2514 = M2.list_p(v2513);
    if (or_part2514 !== false) {
      var if_res1670 = or_part2514;
    } else {
      var if_res1670 = stream_via_prop_p(v2513);
    }
    return if_res1670;
  };
  var unsafe_stream_not_empty_p = function(v2515) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.null_p(v2515) !== false) {
      var if_res1672 = false;
    } else {
      var or_part2516 = M2.pair_p(v2515);
      if (or_part2516 !== false) {
        var if_res1671 = or_part2516;
      } else {
        var if_res1671 = M2.not(M5.unsafe_vector_ref(stream_ref(v2515), 0)(v2515));
      }
      var if_res1672 = if_res1671;
    }
    return if_res1672;
  };
  var stream_empty_p = function(v2517) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2518 = M2.null_p(v2517);
    if (or_part2518 !== false) {
      var if_res1675 = or_part2518;
    } else {
      if (stream_p(v2517) !== false) {
        if (M2.pair_p(v2517) !== false) {
          var if_res1673 = false;
        } else {
          var if_res1673 = M5.unsafe_vector_ref(stream_ref(v2517), 0)(v2517);
        }
        var if_res1674 = if_res1673;
      } else {
        var if_res1674 = M2.raise_argument_error($rjs_core.Symbol.make("stream-empty?"), $rjs_core.UString.makeInternedImmutable("stream?"), v2517);
      }
      var if_res1675 = if_res1674;
    }
    return if_res1675;
  };
  var unsafe_stream_first = function(v2519) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2519) !== false) {
      var if_res1676 = M2.car(v2519);
    } else {
      var if_res1676 = M5.unsafe_vector_ref(stream_ref(v2519), 1)(v2519);
    }
    return if_res1676;
  };
  var stream_first = function(v2520) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2520) !== false) {
      var if_res1677 = M2.not(stream_empty_p(v2520));
    } else {
      var if_res1677 = false;
    }
    if (if_res1677 !== false) {
      var if_res1678 = unsafe_stream_first(v2520);
    } else {
      var if_res1678 = M2.raise_argument_error($rjs_core.Symbol.make("stream-first"), $rjs_core.UString.makeInternedImmutable("(and/c stream? (not/c stream-empty?))"), v2520);
    }
    return if_res1678;
  };
  var unsafe_stream_rest = function(v2521) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(v2521) !== false) {
      var if_res1680 = M2.cdr(v2521);
    } else {
      var r2522 = M5.unsafe_vector_ref(stream_ref(v2521), 2)(v2521);
      if (stream_p(r2522) !== false) {
        var if_res1679 = M2.rvoid();
      } else {
        var if_res1679 = M2.raise_mismatch_error($rjs_core.Symbol.make("stream-rest-guard"), $rjs_core.UString.makeInternedImmutable("result is not a stream: "), r2522);
      }
      if_res1679;
      var if_res1680 = r2522;
    }
    return if_res1680;
  };
  var stream_rest = function(v2523) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(v2523) !== false) {
      var if_res1681 = M2.not(stream_empty_p(v2523));
    } else {
      var if_res1681 = false;
    }
    if (if_res1681 !== false) {
      var if_res1682 = unsafe_stream_rest(v2523);
    } else {
      var if_res1682 = M2.raise_argument_error($rjs_core.Symbol.make("stream-rest"), $rjs_core.UString.makeInternedImmutable("(and/c stream? (not/c stream-empty?))"), v2523);
    }
    return if_res1682;
  };
  var sequence_p = function(v2524) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part2525 = M2.exact_nonnegative_integer_p(v2524);
    if (or_part2525 !== false) {
      var if_res1695 = or_part2525;
    } else {
      var or_part2526 = do_sequence_p(v2524);
      if (or_part2526 !== false) {
        var if_res1694 = or_part2526;
      } else {
        var or_part2527 = sequence_via_prop_p(v2524);
        if (or_part2527 !== false) {
          var if_res1693 = or_part2527;
        } else {
          var or_part2528 = stream_p(v2524);
          if (or_part2528 !== false) {
            var if_res1692 = or_part2528;
          } else {
            var or_part2529 = M2.mpair_p(v2524);
            if (or_part2529 !== false) {
              var if_res1691 = or_part2529;
            } else {
              var or_part2530 = M2.vector_p(v2524);
              if (or_part2530 !== false) {
                var if_res1690 = or_part2530;
              } else {
                var or_part2531 = M1.__rjs_quoted__.flvector_p(v2524);
                if (or_part2531 !== false) {
                  var if_res1689 = or_part2531;
                } else {
                  var or_part2532 = M1.__rjs_quoted__.fxvector_p(v2524);
                  if (or_part2532 !== false) {
                    var if_res1688 = or_part2532;
                  } else {
                    var or_part2533 = M2.string_p(v2524);
                    if (or_part2533 !== false) {
                      var if_res1687 = or_part2533;
                    } else {
                      var or_part2534 = M2.bytes_p(v2524);
                      if (or_part2534 !== false) {
                        var if_res1686 = or_part2534;
                      } else {
                        var or_part2535 = M2.input_port_p(v2524);
                        if (or_part2535 !== false) {
                          var if_res1685 = or_part2535;
                        } else {
                          var or_part2536 = M2.hash_p(v2524);
                          if (or_part2536 !== false) {
                            var if_res1684 = or_part2536;
                          } else {
                            if (__sequence_p(v2524) !== false) {
                              var if_res1683 = M2.not(M2.struct_type_p(v2524));
                            } else {
                              var if_res1683 = false;
                            }
                            var if_res1684 = if_res1683;
                          }
                          var if_res1685 = if_res1684;
                        }
                        var if_res1686 = if_res1685;
                      }
                      var if_res1687 = if_res1686;
                    }
                    var if_res1688 = if_res1687;
                  }
                  var if_res1689 = if_res1688;
                }
                var if_res1690 = if_res1689;
              }
              var if_res1691 = if_res1690;
            }
            var if_res1692 = if_res1691;
          }
          var if_res1693 = if_res1692;
        }
        var if_res1694 = if_res1693;
      }
      var if_res1695 = if_res1694;
    }
    return if_res1695;
  };
  var make_sequence = function(who2537, v2538) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(v2538) !== false) {
      var if_res1714 = __integer_gen(v2538);
    } else {
      if (do_sequence_p(v2538) !== false) {
        var cl1696 = function(pos__gt_vals2539, pos_next2540, init2541, pos_cont_p2542, val_cont_p2543, all_cont_p2544) {
          if (arguments.length !== 6) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2539, false, pos_next2540, init2541, pos_cont_p2542, val_cont_p2543, all_cont_p2544);
        };
        var cl1697 = function(pos__gt_vals2545, pre_pos_next2546, pos_next2547, init2548, pos_cont_p2549, val_cont_p2550, all_cont_p2551) {
          if (arguments.length !== 7) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.values(pos__gt_vals2545, pre_pos_next2546, pos_next2547, init2548, pos_cont_p2549, val_cont_p2550, all_cont_p2551);
        };
        var if_res1713 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return do_sequence_ref(v2538, 0)();
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1698 = {
            '6': cl1696,
            '7': cl1697
          }[arguments.length];
          if (fixed_lam1698 !== undefined) {
            return fixed_lam1698.apply(null, arguments);
          } else {
            return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
        }, [6, 7]));
      } else {
        if (M2.mpair_p(v2538) !== false) {
          var if_res1712 = __mlist_gen(v2538);
        } else {
          if (M2.list_p(v2538) !== false) {
            var if_res1711 = __list_gen(v2538);
          } else {
            if (M2.vector_p(v2538) !== false) {
              var if_res1710 = __vector_gen(v2538, 0, M2.vector_length(v2538), 1);
            } else {
              if (M1.__rjs_quoted__.flvector_p(v2538) !== false) {
                var if_res1709 = __flvector_gen(v2538, 0, M1.__rjs_quoted__.flvector_length(v2538), 1);
              } else {
                if (M1.__rjs_quoted__.fxvector_p(v2538) !== false) {
                  var if_res1708 = __fxvector_gen(v2538, 0, M1.__rjs_quoted__.fxvector_length(v2538), 1);
                } else {
                  if (M2.string_p(v2538) !== false) {
                    var if_res1707 = __string_gen(v2538, 0, M2.string_length(v2538), 1);
                  } else {
                    if (M2.bytes_p(v2538) !== false) {
                      var if_res1706 = __bytes_gen(v2538, 0, M2.__rjs_quoted__.bytes_length(v2538), 1);
                    } else {
                      if (M2.input_port_p(v2538) !== false) {
                        var if_res1705 = __input_port_gen(v2538);
                      } else {
                        if (M2.hash_p(v2538) !== false) {
                          var if_res1704 = __hash_gen(v2538, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
                        } else {
                          if (sequence_via_prop_p(v2538) !== false) {
                            var if_res1703 = sequence_ref(v2538)(v2538);
                          } else {
                            if (__sequence_p(v2538) !== false) {
                              var if_res1702 = make_sequence(who2537, __sequence_ref(v2538)(v2538));
                            } else {
                              if (stream_p(v2538) !== false) {
                                var if_res1701 = __stream_gen(v2538);
                              } else {
                                var temp1700 = $rjs_core.UString.makeInternedImmutable("for: expected a sequence for ~a, got something else: ~v");
                                if (M2.__eq_(1, M2.length(who2537)) !== false) {
                                  var if_res1699 = M2.car(who2537);
                                } else {
                                  var if_res1699 = who2537;
                                }
                                var if_res1701 = M2.raise(M2.__rjs_quoted__.exn_fail_contract(M2.format(temp1700, if_res1699, v2538), M2.current_continuation_marks()));
                              }
                              var if_res1702 = if_res1701;
                            }
                            var if_res1703 = if_res1702;
                          }
                          var if_res1704 = if_res1703;
                        }
                        var if_res1705 = if_res1704;
                      }
                      var if_res1706 = if_res1705;
                    }
                    var if_res1707 = if_res1706;
                  }
                  var if_res1708 = if_res1707;
                }
                var if_res1709 = if_res1708;
              }
              var if_res1710 = if_res1709;
            }
            var if_res1711 = if_res1710;
          }
          var if_res1712 = if_res1711;
        }
        var if_res1713 = if_res1712;
      }
      var if_res1714 = if_res1713;
    }
    return if_res1714;
  };
  var let_result1716 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2552) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cont_p2553 = range_ref(v2552, 2);
    if (cont_p2553 !== false) {
      var if_res1715 = M2.not(cont_p2553(range_ref(v2552, 0)));
    } else {
      var if_res1715 = false;
    }
    return if_res1715;
  }, function(v2554) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return range_ref(v2554, 0);
  }, function(v2555) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_range(range_ref(v2555, 1)(range_ref(v2555, 0)), range_ref(v2555, 1), range_ref(v2555, 2));
  })), M2.cons(prop_gen_sequence, function(v2556) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, range_ref(v2556, 1), range_ref(v2556, 0), range_ref(v2556, 2), false, false);
  })));
  var struct_range = let_result1716.getAt(0);
  var make_range = let_result1716.getAt(1);
  var range_p = let_result1716.getAt(2);
  var range_ref = let_result1716.getAt(3);
  var range_set_bang_ = let_result1716.getAt(4);
  var cl1717 = function(b2557) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(0, b2557, 1);
  };
  var cl1718 = function(a2558, b2559) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_range(a2558, b2559, 1);
  };
  var cl1719 = function(a2560, b2561, step2562) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.real_p(a2560) !== false) {
      var if_res1721 = M2.rvoid();
    } else {
      var if_res1721 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), a2560);
    }
    if_res1721;
    if (M2.real_p(b2561) !== false) {
      var if_res1722 = M2.rvoid();
    } else {
      var if_res1722 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), b2561);
    }
    if_res1722;
    if (M2.real_p(step2562) !== false) {
      var if_res1723 = M2.rvoid();
    } else {
      var if_res1723 = M2.raise_argument_error($rjs_core.Symbol.make("in-range"), $rjs_core.UString.makeInternedImmutable("real?"), step2562);
    }
    if_res1723;
    if (M2.__gt__eq_(step2562, 0) !== false) {
      var if_res1724 = function(x2564) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(x2564, b2561);
      };
    } else {
      var if_res1724 = function(x2565) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(x2565, b2561);
      };
    }
    var cont_p2563 = if_res1724;
    var inc2566 = function(x2567) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return x2567 + step2562;
    };
    return make_range(a2560, inc2566, cont_p2563);
  };
  var in_range = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1720 = {
      '1': cl1717,
      '2': cl1718,
      '3': cl1719
    }[arguments.length];
    if (fixed_lam1720 !== undefined) {
      return fixed_lam1720.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var __integer_gen = function(v2568) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.values, false, M2.add1, 0, function(i2569) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__lt_(i2569, v2568);
    }, false, false);
  };
  var cl1725 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_naturals(0);
  };
  var cl1726 = function(n2570) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.integer_p(n2570) !== false) {
      if (M2.__rjs_quoted__.exact_p(n2570) !== false) {
        var if_res1728 = M2.__gt__eq_(n2570, 0);
      } else {
        var if_res1728 = false;
      }
      var if_res1729 = if_res1728;
    } else {
      var if_res1729 = false;
    }
    if (if_res1729 !== false) {
      var if_res1730 = M2.rvoid();
    } else {
      var if_res1730 = M2.raise_argument_error($rjs_core.Symbol.make("in-naturals"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2570);
    }
    if_res1730;
    return make_range(n2570, M2.add1, false);
  };
  var in_naturals = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1727 = {
      '0': cl1725,
      '1': cl1726
    }[arguments.length];
    if (fixed_lam1727 !== undefined) {
      return fixed_lam1727.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var let_result1731 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 1, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2571) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.pair_p(list_stream_ref(v2571, 0)));
  }, function(v2572) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.car(list_stream_ref(v2572, 0));
  }, function(v2573) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_list_stream(M2.cdr(list_stream_ref(v2573, 0)));
  })), M2.cons(prop_gen_sequence, function(v2574) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, list_stream_ref(v2574, 0), M2.pair_p, false, false);
  })));
  var struct_list_stream = let_result1731.getAt(0);
  var make_list_stream = let_result1731.getAt(1);
  var list_stream_p = let_result1731.getAt(2);
  var list_stream_ref = let_result1731.getAt(3);
  var list_stream_set_bang_ = let_result1731.getAt(4);
  var in_list = function(l2575) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l2575) !== false) {
      var if_res1732 = M2.rvoid();
    } else {
      var if_res1732 = M2.raise_argument_error($rjs_core.Symbol.make("in-list"), $rjs_core.UString.makeInternedImmutable("list?"), l2575);
    }
    if_res1732;
    return make_list_stream(l2575);
  };
  var __list_gen = function(l2576) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.car, M2.cdr, M2.values, l2576, M2.pair_p, false, false);
  };
  var in_mlist = function(l2577) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.mpair_p(l2577) !== false) {
      var if_res1733 = M2.rvoid();
    } else {
      var if_res1733 = M2.raise_argument_error($rjs_core.Symbol.make("in-mlist"), $rjs_core.UString.makeInternedImmutable("mpair?"), l2577);
    }
    if_res1733;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __mlist_gen(l2577);
    });
  };
  var __mlist_gen = function(l2578) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.mcar, false, M2.mcdr, l2578, M2.mpair_p, false, false);
  };
  var in_input_port_bytes = function(p2579) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2579) !== false) {
      var if_res1734 = M2.rvoid();
    } else {
      var if_res1734 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-bytes"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2579);
    }
    if_res1734;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __input_port_gen(p2579);
    });
  };
  var __input_port_gen = function(p2580) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(M2.__rjs_quoted__.read_byte, false, M2.values, p2580, false, function(x2581) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.not(M2.__rjs_quoted__.eof_object_p(x2581));
    }, false);
  };
  var in_input_port_chars = function(p2582) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2582) !== false) {
      var if_res1735 = M2.rvoid();
    } else {
      var if_res1735 = M2.raise_argument_error($rjs_core.Symbol.make("in-input-port-chars"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2582);
    }
    if_res1735;
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_char(p2582);
    }, M2.__rjs_quoted__.eof);
  };
  var check_in_port = function(r2583, p2584) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(r2583) !== false) {
      var if_res1736 = M2.procedure_arity_includes_p(r2583, 1);
    } else {
      var if_res1736 = false;
    }
    if (if_res1736 !== false) {
      var if_res1737 = M2.rvoid();
    } else {
      var if_res1737 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), r2583);
    }
    if_res1737;
    if (M2.input_port_p(p2584) !== false) {
      var if_res1738 = M2.rvoid();
    } else {
      var if_res1738 = M2.raise_argument_error($rjs_core.Symbol.make("in-port"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2584);
    }
    return if_res1738;
  };
  var cl1739 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(M2.__rjs_quoted__.read, M2.__rjs_quoted__.current_input_port());
  };
  var cl1740 = function(r2585) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_port(r2585, M2.__rjs_quoted__.current_input_port());
  };
  var cl1741 = function(r2586, p2587) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_port(r2586, p2587);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return r2586(p2587);
    }, M2.__rjs_quoted__.eof);
  };
  var in_port = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1742 = {
      '0': cl1739,
      '1': cl1740,
      '2': cl1741
    }[arguments.length];
    if (fixed_lam1742 !== undefined) {
      return fixed_lam1742.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_lines = function(p2588, mode2589) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2588) !== false) {
      var if_res1743 = M2.rvoid();
    } else {
      var if_res1743 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.makeInternedImmutable("input-port?"), p2588);
    }
    if_res1743;
    if (M0.memq(mode2589, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1744 = M2.rvoid();
    } else {
      var if_res1744 = M2.raise_argument_error($rjs_core.Symbol.make("in-lines"), $rjs_core.UString.makeInternedImmutable("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2589);
    }
    return if_res1744;
  };
  var cl1745 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1746 = function(p2590) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_lines(p2590, $rjs_core.Symbol.make("any"));
  };
  var cl1747 = function(p2591, mode2592) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_lines(p2591, mode2592);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_line(p2591, mode2592);
    }, M2.__rjs_quoted__.eof);
  };
  var in_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1748 = {
      '0': cl1745,
      '1': cl1746,
      '2': cl1747
    }[arguments.length];
    if (fixed_lam1748 !== undefined) {
      return fixed_lam1748.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var check_in_bytes_lines = function(p2593, mode2594) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.input_port_p(p2593) !== false) {
      var if_res1749 = M2.rvoid();
    } else {
      var if_res1749 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.makeInternedImmutable("input-port"), p2593);
    }
    if_res1749;
    if (M0.memq(mode2594, $rjs_core.Pair.makeList($rjs_core.Symbol.make("linefeed"), $rjs_core.Symbol.make("return"), $rjs_core.Symbol.make("return-linefeed"), $rjs_core.Symbol.make("any"), $rjs_core.Symbol.make("any-one"))) !== false) {
      var if_res1750 = M2.rvoid();
    } else {
      var if_res1750 = M2.raise_argument_error($rjs_core.Symbol.make("in-bytes-lines"), $rjs_core.UString.makeInternedImmutable("(or/c 'linefeed 'return 'return-linefeed 'any 'any-one)"), mode2594);
    }
    return if_res1750;
  };
  var cl1751 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(M2.__rjs_quoted__.current_input_port(), $rjs_core.Symbol.make("any"));
  };
  var cl1752 = function(p2595) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes_lines(p2595, $rjs_core.Symbol.make("any"));
  };
  var cl1753 = function(p2596, mode2597) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_in_bytes_lines(p2596, mode2597);
    return in_producer(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.__rjs_quoted__.read_bytes_line(p2596, mode2597);
    }, M2.__rjs_quoted__.eof);
  };
  var in_bytes_lines = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1754 = {
      '0': cl1751,
      '1': cl1752,
      '2': cl1753
    }[arguments.length];
    if (fixed_lam1754 !== undefined) {
      return fixed_lam1754.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var in_stream = function(l2598) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (stream_p(l2598) !== false) {
      var if_res1755 = M2.rvoid();
    } else {
      var if_res1755 = M2.raise_argument_error($rjs_core.Symbol.make("in-stream"), $rjs_core.UString.makeInternedImmutable("stream?"), l2598);
    }
    if_res1755;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __stream_gen(l2598);
    });
  };
  var __stream_gen = function(l2599) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(unsafe_stream_first, unsafe_stream_rest, M2.values, l2599, unsafe_stream_not_empty_p, false, false);
  };
  var __hash_gen = function(ht2600, __get2601, __first2602, __next2603) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.values(function(pos2604) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __get2601(ht2600, pos2604);
    }, false, function(pos2605) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __next2603(ht2600, pos2605);
    }, __first2602(ht2600), function(pos2606) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return pos2606;
    }, false, false);
  };
  var mutable_p = function(ht2607) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.immutable_p(ht2607));
  };
  var not_weak_p = function(ht2608) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.not(M2.__rjs_quoted__.hash_weak_p(ht2608));
  };
  var default_in_hash = function(ht2609) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2610) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2610);
    })(ht2609) !== false) {
      var if_res1756 = M2.rvoid();
    } else {
      var if_res1756 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2609);
    }
    if_res1756;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2609, M2.__rjs_quoted__.hash_iterate_key_plus_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash = function(ht2611) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2612) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2612) !== false) {
        if (mutable_p(ht2612) !== false) {
          var if_res1757 = not_weak_p(ht2612);
        } else {
          var if_res1757 = false;
        }
        var if_res1758 = if_res1757;
      } else {
        var if_res1758 = false;
      }
      return if_res1758;
    })(ht2611) !== false) {
      var if_res1759 = M2.rvoid();
    } else {
      var if_res1759 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2611);
    }
    if_res1759;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2611, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash = function(ht2613) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2614) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2614) !== false) {
        var if_res1760 = M2.immutable_p(ht2614);
      } else {
        var if_res1760 = false;
      }
      return if_res1760;
    })(ht2613) !== false) {
      var if_res1761 = M2.rvoid();
    } else {
      var if_res1761 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2613);
    }
    if_res1761;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2613, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash = function(ht2615) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2616) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2616) !== false) {
        var if_res1762 = M2.__rjs_quoted__.hash_weak_p(ht2616);
      } else {
        var if_res1762 = false;
      }
      return if_res1762;
    })(ht2615) !== false) {
      var if_res1763 = M2.rvoid();
    } else {
      var if_res1763 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2615);
    }
    if_res1763;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2615, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key_plus_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_keys = function(ht2617) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2618) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2618);
    })(ht2617) !== false) {
      var if_res1764 = M2.rvoid();
    } else {
      var if_res1764 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-keys"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2617);
    }
    if_res1764;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2617, M2.__rjs_quoted__.hash_iterate_key, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_keys = function(ht2619) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2620) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2620) !== false) {
        if (mutable_p(ht2620) !== false) {
          var if_res1765 = not_weak_p(ht2620);
        } else {
          var if_res1765 = false;
        }
        var if_res1766 = if_res1765;
      } else {
        var if_res1766 = false;
      }
      return if_res1766;
    })(ht2619) !== false) {
      var if_res1767 = M2.rvoid();
    } else {
      var if_res1767 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2619);
    }
    if_res1767;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2619, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_keys = function(ht2621) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2622) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2622) !== false) {
        var if_res1768 = M2.immutable_p(ht2622);
      } else {
        var if_res1768 = false;
      }
      return if_res1768;
    })(ht2621) !== false) {
      var if_res1769 = M2.rvoid();
    } else {
      var if_res1769 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2621);
    }
    if_res1769;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2621, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_key, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_keys = function(ht2623) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2624) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2624) !== false) {
        var if_res1770 = M2.__rjs_quoted__.hash_weak_p(ht2624);
      } else {
        var if_res1770 = false;
      }
      return if_res1770;
    })(ht2623) !== false) {
      var if_res1771 = M2.rvoid();
    } else {
      var if_res1771 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-keys"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2623);
    }
    if_res1771;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2623, M5.__rjs_quoted__.unsafe_weak_hash_iterate_key, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_values = function(ht2625) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2626) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2626);
    })(ht2625) !== false) {
      var if_res1772 = M2.rvoid();
    } else {
      var if_res1772 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-values"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2625);
    }
    if_res1772;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2625, M2.__rjs_quoted__.hash_iterate_value, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_values = function(ht2627) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2628) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2628) !== false) {
        if (mutable_p(ht2628) !== false) {
          var if_res1773 = not_weak_p(ht2628);
        } else {
          var if_res1773 = false;
        }
        var if_res1774 = if_res1773;
      } else {
        var if_res1774 = false;
      }
      return if_res1774;
    })(ht2627) !== false) {
      var if_res1775 = M2.rvoid();
    } else {
      var if_res1775 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2627);
    }
    if_res1775;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2627, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_values = function(ht2629) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2630) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2630) !== false) {
        var if_res1776 = M2.immutable_p(ht2630);
      } else {
        var if_res1776 = false;
      }
      return if_res1776;
    })(ht2629) !== false) {
      var if_res1777 = M2.rvoid();
    } else {
      var if_res1777 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2629);
    }
    if_res1777;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2629, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_value, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_values = function(ht2631) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2632) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2632) !== false) {
        var if_res1778 = M2.__rjs_quoted__.hash_weak_p(ht2632);
      } else {
        var if_res1778 = false;
      }
      return if_res1778;
    })(ht2631) !== false) {
      var if_res1779 = M2.rvoid();
    } else {
      var if_res1779 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-values"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2631);
    }
    if_res1779;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2631, M5.__rjs_quoted__.unsafe_weak_hash_iterate_value, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var default_in_hash_pairs = function(ht2633) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2634) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.hash_p(ht2634);
    })(ht2633) !== false) {
      var if_res1780 = M2.rvoid();
    } else {
      var if_res1780 = M2.raise_argument_error($rjs_core.Symbol.make("in-hash-pairs"), $rjs_core.UString.makeInternedImmutable("hash?"), ht2633);
    }
    if_res1780;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2633, M2.__rjs_quoted__.hash_iterate_pair, M2.__rjs_quoted__.hash_iterate_first, M2.__rjs_quoted__.hash_iterate_next);
    });
  };
  var default_in_mutable_hash_pairs = function(ht2635) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2636) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2636) !== false) {
        if (mutable_p(ht2636) !== false) {
          var if_res1781 = not_weak_p(ht2636);
        } else {
          var if_res1781 = false;
        }
        var if_res1782 = if_res1781;
      } else {
        var if_res1782 = false;
      }
      return if_res1782;
    })(ht2635) !== false) {
      var if_res1783 = M2.rvoid();
    } else {
      var if_res1783 = M2.raise_argument_error($rjs_core.Symbol.make("in-mutable-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? mutable? not-weak?)"), ht2635);
    }
    if_res1783;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2635, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_mutable_hash_iterate_next);
    });
  };
  var default_in_immutable_hash_pairs = function(ht2637) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2638) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2638) !== false) {
        var if_res1784 = M2.immutable_p(ht2638);
      } else {
        var if_res1784 = false;
      }
      return if_res1784;
    })(ht2637) !== false) {
      var if_res1785 = M2.rvoid();
    } else {
      var if_res1785 = M2.raise_argument_error($rjs_core.Symbol.make("in-immutable-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? immutable?)"), ht2637);
    }
    if_res1785;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2637, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_pair, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_first, M5.__rjs_quoted__.unsafe_immutable_hash_iterate_next);
    });
  };
  var default_in_weak_hash_pairs = function(ht2639) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if ((function(ht2640) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.hash_p(ht2640) !== false) {
        var if_res1786 = M2.__rjs_quoted__.hash_weak_p(ht2640);
      } else {
        var if_res1786 = false;
      }
      return if_res1786;
    })(ht2639) !== false) {
      var if_res1787 = M2.rvoid();
    } else {
      var if_res1787 = M2.raise_argument_error($rjs_core.Symbol.make("in-weak-hash-pairs"), $rjs_core.UString.makeInternedImmutable("(and/c hash? hash-weak?)"), ht2639);
    }
    if_res1787;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __hash_gen(ht2639, M5.__rjs_quoted__.unsafe_weak_hash_iterate_pair, M5.__rjs_quoted__.unsafe_weak_hash_iterate_first, M5.__rjs_quoted__.unsafe_weak_hash_iterate_next);
    });
  };
  var check_ranges = function(who2641, vec2642, start2643, stop2644, step2645, len2646) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(start2643) !== false) {
      var or_part2647 = M2.__lt_(start2643, len2646);
      if (or_part2647 !== false) {
        var if_res1788 = or_part2647;
      } else {
        var if_res1788 = M2.__eq_(len2646, start2643, stop2644);
      }
      var if_res1789 = if_res1788;
    } else {
      var if_res1789 = false;
    }
    if (if_res1789 !== false) {
      var if_res1790 = M2.rvoid();
    } else {
      var if_res1790 = M2.__rjs_quoted__.raise_range_error(who2641, $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable("starting "), start2643, vec2642, 0, M2.sub1(len2646));
    }
    if_res1790;
    if (M2.exact_integer_p(stop2644) !== false) {
      if (M2.__lt__eq_(-1, stop2644) !== false) {
        var if_res1791 = M2.__lt__eq_(stop2644, len2646);
      } else {
        var if_res1791 = false;
      }
      var if_res1792 = if_res1791;
    } else {
      var if_res1792 = false;
    }
    if (if_res1792 !== false) {
      var if_res1793 = M2.rvoid();
    } else {
      var if_res1793 = M2.__rjs_quoted__.raise_range_error(who2641, $rjs_core.UString.makeInternedImmutable("vector"), $rjs_core.UString.makeInternedImmutable("stopping "), stop2644, vec2642, -1, len2646);
    }
    if_res1793;
    if (M2.exact_integer_p(step2645) !== false) {
      var if_res1794 = M2.not(M2.zero_p(step2645));
    } else {
      var if_res1794 = false;
    }
    if (if_res1794 !== false) {
      var if_res1795 = M2.rvoid();
    } else {
      var if_res1795 = M2.raise_argument_error(who2641, $rjs_core.UString.makeInternedImmutable("(and/c exact-integer? (not/c zero?))"), step2645);
    }
    if_res1795;
    if (M2.__lt_(start2643, stop2644) !== false) {
      var if_res1796 = M2.__lt_(step2645, 0);
    } else {
      var if_res1796 = false;
    }
    if (if_res1796 !== false) {
      var if_res1797 = M2.__rjs_quoted__.raise_arguments_error(who2641, $rjs_core.UString.makeInternedImmutable("starting index less than stopping index, but given a negative step"), $rjs_core.UString.makeInternedImmutable("starting index"), start2643, $rjs_core.UString.makeInternedImmutable("stopping index"), stop2644, $rjs_core.UString.makeInternedImmutable("step"), step2645);
    } else {
      var if_res1797 = M2.rvoid();
    }
    if_res1797;
    if (M2.__lt_(stop2644, start2643) !== false) {
      var if_res1798 = M2.__gt_(step2645, 0);
    } else {
      var if_res1798 = false;
    }
    if (if_res1798 !== false) {
      var if_res1799 = M2.__rjs_quoted__.raise_arguments_error(who2641, $rjs_core.UString.makeInternedImmutable("starting index more than stopping index, but given a positive step"), $rjs_core.UString.makeInternedImmutable("starting index"), start2643, $rjs_core.UString.makeInternedImmutable("stopping index"), stop2644, $rjs_core.UString.makeInternedImmutable("step"), step2645);
    } else {
      var if_res1799 = M2.rvoid();
    }
    return if_res1799;
  };
  var normalise_inputs = function(who2648, type_name2649, vector_p2650, unsafe_vector_length2651, vec2652, start2653, stop2654, step2655) {
    if (arguments.length !== 8) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (vector_p2650(vec2652) !== false) {
      var if_res1800 = M2.rvoid();
    } else {
      var if_res1800 = M2.raise_argument_error(who2648, type_name2649, vec2652);
    }
    if_res1800;
    var len2656 = unsafe_vector_length2651(vec2652);
    if (stop2654 !== false) {
      var if_res1801 = stop2654;
    } else {
      var if_res1801 = len2656;
    }
    var stop_times_2657 = if_res1801;
    check_ranges(who2648, vec2652, start2653, stop_times_2657, step2655, len2656);
    return M2.values(vec2652, start2653, stop_times_2657, step2655);
  };
  var __vector_gen = function(v2658, start2659, stop2660, step2661) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2661, 1) !== false) {
      var if_res1803 = M2.add1;
    } else {
      var if_res1803 = function(i2663) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2663 + step2661;
      };
    }
    if (M2.__gt_(step2661, 0) !== false) {
      var if_res1802 = function(i2664) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2664, stop2660);
      };
    } else {
      var if_res1802 = function(i2665) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2665, stop2660);
      };
    }
    return M2.values(function(i2662) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.unsafe_vector_ref(v2658, i2662);
    }, false, if_res1803, start2659, if_res1802, false, false);
  };
  var cl1804 = function(v2666) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2666, 0, false, 1);
  };
  var cl1805 = function(v2667, start2668) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2667, start2668, false, 1);
  };
  var cl1806 = function(v2669, start2670, stop2671) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_vector(v2669, start2670, stop2671, 1);
  };
  var cl1807 = function(v2672, start2673, stop2674, step2675) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1809 = normalise_inputs($rjs_core.Symbol.make("in-vector"), $rjs_core.UString.makeInternedImmutable("vector"), M2.vector_p, M2.vector_length, v2672, start2673, stop2674, step2675);
    var v2676 = let_result1809.getAt(0);
    var start2677 = let_result1809.getAt(1);
    var stop2678 = let_result1809.getAt(2);
    var step2679 = let_result1809.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __vector_gen(v2676, start2677, stop2678, step2679);
    });
  };
  var in_vector = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1808 = {
      '1': cl1804,
      '2': cl1805,
      '3': cl1806,
      '4': cl1807
    }[arguments.length];
    if (fixed_lam1808 !== undefined) {
      return fixed_lam1808.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __string_gen = function(v2680, start2681, stop2682, step2683) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2683, 1) !== false) {
      var if_res1811 = M2.add1;
    } else {
      var if_res1811 = function(i2685) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2685 + step2683;
      };
    }
    if (M2.__gt_(step2683, 0) !== false) {
      var if_res1810 = function(i2686) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2686, stop2682);
      };
    } else {
      var if_res1810 = function(i2687) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2687, stop2682);
      };
    }
    return M2.values(function(i2684) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.string_ref(v2680, i2684);
    }, false, if_res1811, start2681, if_res1810, false, false);
  };
  var cl1812 = function(v2688) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2688, 0, false, 1);
  };
  var cl1813 = function(v2689, start2690) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2689, start2690, false, 1);
  };
  var cl1814 = function(v2691, start2692, stop2693) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_string(v2691, start2692, stop2693, 1);
  };
  var cl1815 = function(v2694, start2695, stop2696, step2697) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1817 = normalise_inputs($rjs_core.Symbol.make("in-string"), $rjs_core.UString.makeInternedImmutable("string"), M2.string_p, M2.string_length, v2694, start2695, stop2696, step2697);
    var v2698 = let_result1817.getAt(0);
    var start2699 = let_result1817.getAt(1);
    var stop2700 = let_result1817.getAt(2);
    var step2701 = let_result1817.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __string_gen(v2698, start2699, stop2700, step2701);
    });
  };
  var in_string = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1816 = {
      '1': cl1812,
      '2': cl1813,
      '3': cl1814,
      '4': cl1815
    }[arguments.length];
    if (fixed_lam1816 !== undefined) {
      return fixed_lam1816.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __bytes_gen = function(v2702, start2703, stop2704, step2705) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2705, 1) !== false) {
      var if_res1819 = M2.add1;
    } else {
      var if_res1819 = function(i2707) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2707 + step2705;
      };
    }
    if (M2.__gt_(step2705, 0) !== false) {
      var if_res1818 = function(i2708) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2708, stop2704);
      };
    } else {
      var if_res1818 = function(i2709) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2709, stop2704);
      };
    }
    return M2.values(function(i2706) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_bytes_ref(v2702, i2706);
    }, false, if_res1819, start2703, if_res1818, false, false);
  };
  var cl1820 = function(v2710) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2710, 0, false, 1);
  };
  var cl1821 = function(v2711, start2712) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2711, start2712, false, 1);
  };
  var cl1822 = function(v2713, start2714, stop2715) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_bytes(v2713, start2714, stop2715, 1);
  };
  var cl1823 = function(v2716, start2717, stop2718, step2719) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1825 = normalise_inputs($rjs_core.Symbol.make("in-bytes"), $rjs_core.UString.makeInternedImmutable("bytes"), M2.bytes_p, M2.__rjs_quoted__.bytes_length, v2716, start2717, stop2718, step2719);
    var v2720 = let_result1825.getAt(0);
    var start2721 = let_result1825.getAt(1);
    var stop2722 = let_result1825.getAt(2);
    var step2723 = let_result1825.getAt(3);
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return __bytes_gen(v2720, start2721, stop2722, step2723);
    });
  };
  var in_bytes = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1824 = {
      '1': cl1820,
      '2': cl1821,
      '3': cl1822,
      '4': cl1823
    }[arguments.length];
    if (fixed_lam1824 !== undefined) {
      return fixed_lam1824.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3, 4]);
  var __flvector_gen = function(v2724, start2725, stop2726, step2727) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2727, 1) !== false) {
      var if_res1827 = M2.add1;
    } else {
      var if_res1827 = function(i2729) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2729 + step2727;
      };
    }
    if (M2.__gt_(step2727, 0) !== false) {
      var if_res1826 = function(i2730) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2730, stop2726);
      };
    } else {
      var if_res1826 = function(i2731) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2731, stop2726);
      };
    }
    return M2.values(function(i2728) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_flvector_ref(v2724, i2728);
    }, false, if_res1827, start2725, if_res1826, false, false);
  };
  var __fxvector_gen = function(v2732, start2733, stop2734, step2735) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(step2735, 1) !== false) {
      var if_res1829 = M2.add1;
    } else {
      var if_res1829 = function(i2737) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return i2737 + step2735;
      };
    }
    if (M2.__gt_(step2735, 0) !== false) {
      var if_res1828 = function(i2738) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__lt_(i2738, stop2734);
      };
    } else {
      var if_res1828 = function(i2739) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__gt_(i2739, stop2734);
      };
    }
    return M2.values(function(i2736) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.__rjs_quoted__.unsafe_fxvector_ref(v2732, i2736);
    }, false, if_res1829, start2733, if_res1828, false, false);
  };
  var stop_before = function(g2740, pred2741) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2740) !== false) {
      var if_res1830 = M2.rvoid();
    } else {
      var if_res1830 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2740);
    }
    if_res1830;
    if (M2.procedure_p(pred2741) !== false) {
      var if_res1831 = M2.procedure_arity_includes_p(pred2741, 1);
    } else {
      var if_res1831 = false;
    }
    if (if_res1831 !== false) {
      var if_res1832 = M2.rvoid();
    } else {
      var if_res1832 = M2.raise_argument_error($rjs_core.Symbol.make("stop-before"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), pred2741);
    }
    if_res1832;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1833 = make_sequence(false, g2740);
      var pos__gt_val2742 = let_result1833.getAt(0);
      var pre_pos_next2743 = let_result1833.getAt(1);
      var pos_next2744 = let_result1833.getAt(2);
      var init2745 = let_result1833.getAt(3);
      var pos_cont_p2746 = let_result1833.getAt(4);
      var pre_cont_p2747 = let_result1833.getAt(5);
      var post_cont_p2748 = let_result1833.getAt(6);
      var cl1834 = function(val2749) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pre_cont_p2747 !== false) {
          var if_res1838 = pre_cont_p2747(val2749);
        } else {
          var if_res1838 = true;
        }
        if (if_res1838 !== false) {
          var if_res1839 = M2.not(pred2741(val2749));
        } else {
          var if_res1839 = false;
        }
        return if_res1839;
      };
      var cl1835 = $rjs_core.attachProcedureArity(function() {
        for (var vals27501840 = [],
            $__1 = 0; $__1 < arguments.length; $__1++)
          vals27501840[$__1] = arguments[$__1];
        var vals2750 = $rjs_core.Pair.listFromArray(vals27501840);
        if (pre_cont_p2747 !== false) {
          var if_res1841 = M2.apply(pre_cont_p2747, vals2750);
        } else {
          var if_res1841 = true;
        }
        if (if_res1841 !== false) {
          var if_res1842 = M2.not(M2.apply(pred2741, vals2750));
        } else {
          var if_res1842 = false;
        }
        return if_res1842;
      });
      return M2.values(pos__gt_val2742, pre_pos_next2743, pos_next2744, init2745, pos_cont_p2746, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1836 = {'1': cl1834}[arguments.length];
        if (fixed_lam1836 !== undefined) {
          return fixed_lam1836.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1837 = cl1835.apply(null, arguments);
          } else {
            var if_res1837 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1837;
        }
      }, [M2.make_arity_at_least(0)]), post_cont_p2748);
    });
  };
  var stop_after = function(g2751, pred2752) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2751) !== false) {
      var if_res1843 = M2.rvoid();
    } else {
      var if_res1843 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2751);
    }
    if_res1843;
    if (M2.procedure_p(pred2752) !== false) {
      var if_res1844 = M2.procedure_arity_includes_p(pred2752, 1);
    } else {
      var if_res1844 = false;
    }
    if (if_res1844 !== false) {
      var if_res1845 = M2.rvoid();
    } else {
      var if_res1845 = M2.raise_argument_error($rjs_core.Symbol.make("stop-after"), $rjs_core.UString.makeInternedImmutable("(procedure-arity-includes/c 1)"), pred2752);
    }
    if_res1845;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1846 = make_sequence(false, g2751);
      var pos__gt_val2753 = let_result1846.getAt(0);
      var pre_pos_next2754 = let_result1846.getAt(1);
      var pos_next2755 = let_result1846.getAt(2);
      var init2756 = let_result1846.getAt(3);
      var pos_cont_p2757 = let_result1846.getAt(4);
      var pre_cont_p2758 = let_result1846.getAt(5);
      var post_cont_p2759 = let_result1846.getAt(6);
      var cl1847 = function(pos2760, val2761) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (post_cont_p2759 !== false) {
          var if_res1851 = post_cont_p2759(pos2760, val2761);
        } else {
          var if_res1851 = true;
        }
        if (if_res1851 !== false) {
          var if_res1852 = M2.not(pred2752(val2761));
        } else {
          var if_res1852 = false;
        }
        return if_res1852;
      };
      var cl1848 = $rjs_core.attachProcedureArity(function(pos2762) {
        for (var vals27631853 = [],
            $__1 = 1; $__1 < arguments.length; $__1++)
          vals27631853[$__1 - 1] = arguments[$__1];
        if (arguments.length < 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var vals2763 = $rjs_core.Pair.listFromArray(vals27631853);
        if (post_cont_p2759 !== false) {
          var if_res1854 = M2.apply(post_cont_p2759, pos2762, vals2763);
        } else {
          var if_res1854 = true;
        }
        if (if_res1854 !== false) {
          var if_res1855 = M2.not(M2.apply(pred2752, vals2763));
        } else {
          var if_res1855 = false;
        }
        return if_res1855;
      });
      return M2.values(pos__gt_val2753, pre_pos_next2754, pos_next2755, init2756, pos_cont_p2757, pre_cont_p2758, $rjs_core.attachProcedureArity(function() {
        var fixed_lam1849 = {'2': cl1847}[arguments.length];
        if (fixed_lam1849 !== undefined) {
          return fixed_lam1849.apply(null, arguments);
        } else {
          if (M2.__gt__eq_(cl1848.length, 1) !== false) {
            var if_res1850 = cl1848.apply(null, arguments);
          } else {
            var if_res1850 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1850;
        }
      }, [M2.make_arity_at_least(1)]));
    });
  };
  var in_indexed = function(g2764) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2764) !== false) {
      var if_res1856 = M2.rvoid();
    } else {
      var if_res1856 = M2.raise_argument_error($rjs_core.Symbol.make("in-indexed"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2764);
    }
    if_res1856;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1857 = make_sequence(false, g2764);
      var pos__gt_val2765 = let_result1857.getAt(0);
      var pre_pos_next2766 = let_result1857.getAt(1);
      var pos_next2767 = let_result1857.getAt(2);
      var init2768 = let_result1857.getAt(3);
      var pos_cont_p2769 = let_result1857.getAt(4);
      var pre_cont_p2770 = let_result1857.getAt(5);
      var post_cont_p2771 = let_result1857.getAt(6);
      if (pre_pos_next2766 !== false) {
        var if_res1862 = function(pos2773) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.cons(pre_pos_next2766(M2.car(pos2773)), M2.cdr(pos2773));
        };
      } else {
        var if_res1862 = false;
      }
      var temp1861 = M2.cons(init2768, 0);
      if (pos_cont_p2769 !== false) {
        var if_res1860 = function(pos2775) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos_cont_p2769(M2.car(pos2775));
        };
      } else {
        var if_res1860 = false;
      }
      if (pre_cont_p2770 !== false) {
        var if_res1859 = function(val2776, idx2777) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pre_cont_p2770(val2776);
        };
      } else {
        var if_res1859 = false;
      }
      if (post_cont_p2771 !== false) {
        var if_res1858 = function(pos2778, val2779, idx2780) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return post_cont_p2771(pos2778, val2779);
        };
      } else {
        var if_res1858 = false;
      }
      return M2.values(function(pos2772) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.values(pos__gt_val2765(M2.car(pos2772)), M2.cdr(pos2772));
      }, if_res1862, function(pos2774) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cons(pos_next2767(M2.car(pos2774)), M2.add1(M2.cdr(pos2774)));
      }, temp1861, if_res1860, if_res1859, if_res1858);
    });
  };
  var in_value = function(v2781) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(pos2782) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return v2781;
      }, function(pos2783) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return false;
      }, true, function(pos2784) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return pos2784;
      }, false, false);
    });
  };
  var in_values_sequence = function(g2785) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2785) !== false) {
      var if_res1863 = M2.rvoid();
    } else {
      var if_res1863 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2785);
    }
    if_res1863;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1864 = make_sequence(false, g2785);
      var pos__gt_val2786 = let_result1864.getAt(0);
      var pre_pos_next2787 = let_result1864.getAt(1);
      var pos_next2788 = let_result1864.getAt(2);
      var init2789 = let_result1864.getAt(3);
      var pos_cont_p2790 = let_result1864.getAt(4);
      var pre_cont_p2791 = let_result1864.getAt(5);
      var post_cont_p2792 = let_result1864.getAt(6);
      if (pre_cont_p2791 !== false) {
        var if_res1866 = function(vals2794) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(pre_cont_p2791, vals2794);
        };
      } else {
        var if_res1866 = false;
      }
      if (post_cont_p2792 !== false) {
        var if_res1865 = function(pos2795, vals2796) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(post_cont_p2792, pos2795, vals2796);
        };
      } else {
        var if_res1865 = false;
      }
      return M2.values(function(pos2793) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2786(pos2793);
        }, M2.list);
      }, pre_pos_next2787, pos_next2788, init2789, pos_cont_p2790, if_res1866, if_res1865);
    });
  };
  var in_values_times__sequence = function(g2797) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2797) !== false) {
      var if_res1867 = M2.rvoid();
    } else {
      var if_res1867 = M2.raise_argument_error($rjs_core.Symbol.make("in-values-sequence"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2797);
    }
    if_res1867;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var let_result1868 = make_sequence(false, g2797);
      var pos__gt_val2798 = let_result1868.getAt(0);
      var pre_pos_next2799 = let_result1868.getAt(1);
      var pos_next2800 = let_result1868.getAt(2);
      var init2801 = let_result1868.getAt(3);
      var pos_cont_p2802 = let_result1868.getAt(4);
      var pre_cont_p2803 = let_result1868.getAt(5);
      var post_cont_p2804 = let_result1868.getAt(6);
      if (pre_cont_p2803 !== false) {
        var if_res1872 = function(vals2808) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2808) !== false) {
            var if_res1871 = M2.apply(pre_cont_p2803, vals2808);
          } else {
            var if_res1871 = pre_cont_p2803(vals2808);
          }
          return if_res1871;
        };
      } else {
        var if_res1872 = false;
      }
      if (post_cont_p2804 !== false) {
        var if_res1870 = function(pos2809, vals2810) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(vals2810) !== false) {
            var if_res1869 = M2.apply(post_cont_p2804, pos2809, vals2810);
          } else {
            var if_res1869 = post_cont_p2804(pos2809, vals2810);
          }
          return if_res1869;
        };
      } else {
        var if_res1870 = false;
      }
      return M2.values(function(pos2805) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var cl1873 = function(v2806) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.list_p(v2806) !== false) {
            var if_res1877 = M2.list(v2806);
          } else {
            var if_res1877 = v2806;
          }
          return if_res1877;
        };
        var cl1874 = $rjs_core.attachProcedureArity(function() {
          for (var vs28071878 = [],
              $__1 = 0; $__1 < arguments.length; $__1++)
            vs28071878[$__1] = arguments[$__1];
          var vs2807 = $rjs_core.Pair.listFromArray(vs28071878);
          return vs2807;
        });
        return M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return pos__gt_val2798(pos2805);
        }, $rjs_core.attachProcedureArity(function() {
          var fixed_lam1875 = {'1': cl1873}[arguments.length];
          if (fixed_lam1875 !== undefined) {
            return fixed_lam1875.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1876 = cl1874.apply(null, arguments);
            } else {
              var if_res1876 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1876;
          }
        }, [M2.make_arity_at_least(0)]));
      }, pre_pos_next2799, pos_next2800, init2801, pos_cont_p2802, if_res1872, if_res1870);
    });
  };
  var append_sequences = function(sequences2811, cyclic_p2812) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var seqs__gt_m_plus_g_plus_r2813 = function(seqs2814) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(seqs2814) !== false) {
        var let_result1879 = sequence_generate(M2.car(seqs2814));
        var more_p2815 = let_result1879.getAt(0);
        var get2816 = let_result1879.getAt(1);
        var seqs2817 = M2.cdr(seqs2814);
        if (more_p2815() !== false) {
          var if_res1880 = M2.list_times_(more_p2815, get2816, seqs2817);
        } else {
          var if_res1880 = seqs__gt_m_plus_g_plus_r2813(seqs2817);
        }
        var if_res1882 = if_res1880;
      } else {
        if (cyclic_p2812 !== false) {
          var if_res1881 = seqs__gt_m_plus_g_plus_r2813(sequences2811);
        } else {
          var if_res1881 = false;
        }
        var if_res1882 = if_res1881;
      }
      return if_res1882;
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(function(m_plus_g_plus_r2818) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.cadr(m_plus_g_plus_r2818)();
      }, function(m_plus_g_plus_r2819) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(m_plus_g_plus_r2819) !== false) {
          var if_res1883 = M2.not(M2.car(m_plus_g_plus_r2819)());
        } else {
          var if_res1883 = false;
        }
        if (if_res1883 !== false) {
          var if_res1884 = seqs__gt_m_plus_g_plus_r2813(M2.cddr(m_plus_g_plus_r2819));
        } else {
          var if_res1884 = m_plus_g_plus_r2819;
        }
        return if_res1884;
      }, seqs__gt_m_plus_g_plus_r2813(sequences2811), M2.values, false, false);
    });
  };
  var check_sequences = function(who2820, sequences2821) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.for_each(function(g2822) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (sequence_p(g2822) !== false) {
        var if_res1885 = M2.rvoid();
      } else {
        var if_res1885 = M2.raise_argument_error(who2820, $rjs_core.UString.makeInternedImmutable("sequence?"), g2822);
      }
      return if_res1885;
    }, sequences2821);
  };
  var in_sequences = $rjs_core.attachProcedureArity(function() {
    for (var sequences28231886 = [],
        $__1 = 0; $__1 < arguments.length; $__1++)
      sequences28231886[$__1] = arguments[$__1];
    var sequences2823 = $rjs_core.Pair.listFromArray(sequences28231886);
    check_sequences($rjs_core.Symbol.make("in-sequences"), sequences2823);
    if (M2.pair_p(sequences2823) !== false) {
      var if_res1887 = M2.null_p(M2.cdr(sequences2823));
    } else {
      var if_res1887 = false;
    }
    if (if_res1887 !== false) {
      var if_res1888 = M2.car(sequences2823);
    } else {
      var if_res1888 = append_sequences(sequences2823, false);
    }
    return if_res1888;
  });
  var in_cycle = $rjs_core.attachProcedureArity(function() {
    for (var sequences28241889 = [],
        $__2 = 0; $__2 < arguments.length; $__2++)
      sequences28241889[$__2] = arguments[$__2];
    var sequences2824 = $rjs_core.Pair.listFromArray(sequences28241889);
    check_sequences($rjs_core.Symbol.make("in-cycle"), sequences2824);
    return append_sequences(sequences2824, true);
  });
  var in_parallel = $rjs_core.attachProcedureArity(function() {
    for (var sequences28251890 = [],
        $__3 = 0; $__3 < arguments.length; $__3++)
      sequences28251890[$__3] = arguments[$__3];
    var sequences2825 = $rjs_core.Pair.listFromArray(sequences28251890);
    check_sequences($rjs_core.Symbol.make("in-parallel"), sequences2825);
    if (M2.__eq_(1, M2.length(sequences2825)) !== false) {
      var if_res1917 = M2.car(sequences2825);
    } else {
      var if_res1917 = make_do_sequence(function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var let_result1891 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("g")), sequences2825);
        var pos__gt_vals2840 = let_result1891.getAt(0);
        var pos_pre_inc2841 = let_result1891.getAt(1);
        var pos_next2842 = let_result1891.getAt(2);
        var init2843 = let_result1891.getAt(3);
        var pos_cont_p2844 = let_result1891.getAt(4);
        var val_cont_p2845 = let_result1891.getAt(5);
        var all_cont_p2846 = let_result1891.getAt(6);
        M2.rvoid();
        var for_loop2847 = function(p__gt_v2848, p_p_n2849, p_n2850, i2851, ps_p2852, pr_p2853, po_p2854, pos2855) {
          if (arguments.length !== 8) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (pos_cont_p2844 !== false) {
            var if_res1892 = pos_cont_p2844(pos2855);
          } else {
            var if_res1892 = true;
          }
          if (if_res1892 !== false) {
            var g2859 = pos__gt_vals2840(pos2855);
            if (all_cont_p2846 !== false) {
              var if_res1893 = function(pos2860) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return all_cont_p2846(pos2860, g2859);
              };
            } else {
              var if_res1893 = false;
            }
            var let_result1894 = M2.values(g2859, if_res1893);
            var g2856 = let_result1894.getAt(0);
            var all_cont_p_by_pos2857 = let_result1894.getAt(1);
            if (pos_pre_inc2841 !== false) {
              var if_res1895 = pos_pre_inc2841(pos2855);
            } else {
              var if_res1895 = pos2855;
            }
            var pos2858 = if_res1895;
            if (val_cont_p2845 !== false) {
              var if_res1896 = val_cont_p2845(g2856);
            } else {
              var if_res1896 = true;
            }
            if (if_res1896 !== false) {
              var p__gt_v2868 = p__gt_v2848;
              var p_p_n2869 = p_p_n2849;
              var p_n2870 = p_n2850;
              var i2871 = i2851;
              var ps_p2872 = ps_p2852;
              var pr_p2873 = pr_p2853;
              var po_p2874 = po_p2854;
              var let_result1897 = make_sequence(false, g2856);
              var p__gt_v12882 = let_result1897.getAt(0);
              var p_p_n22883 = let_result1897.getAt(1);
              var p_n32884 = let_result1897.getAt(2);
              var i42885 = let_result1897.getAt(3);
              var ps_p52886 = let_result1897.getAt(4);
              var pr_p62887 = let_result1897.getAt(5);
              var po_p72888 = let_result1897.getAt(6);
              var let_result1898 = M2.values(M2.cons(p__gt_v12882, p__gt_v2868), M2.cons(p_p_n22883, p_p_n2869), M2.cons(p_n32884, p_n2870), M2.cons(i42885, i2871), M2.cons(ps_p52886, ps_p2872), M2.cons(pr_p62887, pr_p2873), M2.cons(po_p72888, po_p2874));
              var p__gt_v2875 = let_result1898.getAt(0);
              var p_p_n2876 = let_result1898.getAt(1);
              var p_n2877 = let_result1898.getAt(2);
              var i2878 = let_result1898.getAt(3);
              var ps_p2879 = let_result1898.getAt(4);
              var pr_p2880 = let_result1898.getAt(5);
              var po_p2881 = let_result1898.getAt(6);
              var let_result1899 = M2.values(p__gt_v2875, p_p_n2876, p_n2877, i2878, ps_p2879, pr_p2880, po_p2881);
              var p__gt_v2861 = let_result1899.getAt(0);
              var p_p_n2862 = let_result1899.getAt(1);
              var p_n2863 = let_result1899.getAt(2);
              var i2864 = let_result1899.getAt(3);
              var ps_p2865 = let_result1899.getAt(4);
              var pr_p2866 = let_result1899.getAt(5);
              var po_p2867 = let_result1899.getAt(6);
              if (all_cont_p_by_pos2857 !== false) {
                var if_res1900 = all_cont_p_by_pos2857(pos2858);
              } else {
                var if_res1900 = true;
              }
              if (if_res1900 !== false) {
                var if_res1901 = M2.not(false);
              } else {
                var if_res1901 = false;
              }
              if (if_res1901 !== false) {
                var if_res1902 = for_loop2847(p__gt_v2861, p_p_n2862, p_n2863, i2864, ps_p2865, pr_p2866, po_p2867, pos_next2842(pos2858));
              } else {
                var if_res1902 = M2.values(p__gt_v2861, p_p_n2862, p_n2863, i2864, ps_p2865, pr_p2866, po_p2867);
              }
              var if_res1903 = if_res1902;
            } else {
              var if_res1903 = M2.values(p__gt_v2848, p_p_n2849, p_n2850, i2851, ps_p2852, pr_p2853, po_p2854);
            }
            var if_res1904 = if_res1903;
          } else {
            var if_res1904 = M2.values(p__gt_v2848, p_p_n2849, p_n2850, i2851, ps_p2852, pr_p2853, po_p2854);
          }
          return if_res1904;
        };
        var let_result1905 = for_loop2847(M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, M2.rnull, init2843);
        var p__gt_v2833 = let_result1905.getAt(0);
        var p_p_n2834 = let_result1905.getAt(1);
        var p_n2835 = let_result1905.getAt(2);
        var i2836 = let_result1905.getAt(3);
        var ps_p2837 = let_result1905.getAt(4);
        var pr_p2838 = let_result1905.getAt(5);
        var po_p2839 = let_result1905.getAt(6);
        var let_result1906 = M2.values(M4.alt_reverse(p__gt_v2833), M4.alt_reverse(p_p_n2834), M4.alt_reverse(p_n2835), M4.alt_reverse(i2836), M4.alt_reverse(ps_p2837), M4.alt_reverse(pr_p2838), M4.alt_reverse(po_p2839));
        var pos__gt_vals2826 = let_result1906.getAt(0);
        var pre_pos_nexts2827 = let_result1906.getAt(1);
        var pos_nexts2828 = let_result1906.getAt(2);
        var inits2829 = let_result1906.getAt(3);
        var pos_cont_ps2830 = let_result1906.getAt(4);
        var pre_cont_ps2831 = let_result1906.getAt(5);
        var post_cont_ps2832 = let_result1906.getAt(6);
        if (M2.ormap(M2.values, pre_pos_nexts2827) !== false) {
          var if_res1916 = function(poses2892) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.map(function(pre_pos_next2893, pos2894) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_pos_next2893 !== false) {
                var if_res1915 = pre_pos_next2893(pos2894);
              } else {
                var if_res1915 = pos2894;
              }
              return if_res1915;
            }, pre_pos_nexts2827, poses2892);
          };
        } else {
          var if_res1916 = false;
        }
        if (M2.ormap(M2.values, pos_cont_ps2830) !== false) {
          var if_res1914 = function(poses2898) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.andmap(function(pos_cont_p2899, pos2900) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pos_cont_p2899 !== false) {
                var if_res1913 = pos_cont_p2899(pos2900);
              } else {
                var if_res1913 = true;
              }
              return if_res1913;
            }, pos_cont_ps2830, poses2898);
          };
        } else {
          var if_res1914 = false;
        }
        if (M2.ormap(M2.values, pre_cont_ps2831) !== false) {
          var if_res1912 = $rjs_core.attachProcedureArity(function() {
            for (var vals29011910 = [],
                $__4 = 0; $__4 < arguments.length; $__4++)
              vals29011910[$__4] = arguments[$__4];
            var vals2901 = $rjs_core.Pair.listFromArray(vals29011910);
            return M2.andmap(function(pre_cont_p2902, val2903) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (pre_cont_p2902 !== false) {
                var if_res1911 = pre_cont_p2902(val2903);
              } else {
                var if_res1911 = true;
              }
              return if_res1911;
            }, pre_cont_ps2831, vals2901);
          });
        } else {
          var if_res1912 = false;
        }
        if (M2.ormap(M2.values, post_cont_ps2832) !== false) {
          var if_res1909 = $rjs_core.attachProcedureArity(function(poses2904) {
            for (var vals29051907 = [],
                $__5 = 1; $__5 < arguments.length; $__5++)
              vals29051907[$__5 - 1] = arguments[$__5];
            if (arguments.length < 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2905 = $rjs_core.Pair.listFromArray(vals29051907);
            return M2.andmap(function(post_cont_p2906, pos2907, val2908) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p2906 !== false) {
                var if_res1908 = post_cont_p2906(pos2907, val2908);
              } else {
                var if_res1908 = true;
              }
              return if_res1908;
            }, post_cont_ps2832, poses2904, vals2905);
          });
        } else {
          var if_res1909 = false;
        }
        return M2.values(function(poses2889) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.apply(M2.values, M2.map(function(pos__gt_val2890, pos2891) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos__gt_val2890(pos2891);
          }, pos__gt_vals2826, poses2889));
        }, if_res1916, function(poses2895) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.map(function(pos_next2896, pos2897) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return pos_next2896(pos2897);
          }, pos_nexts2828, poses2895);
        }, inits2829, if_res1914, if_res1912, if_res1909);
      });
    }
    return if_res1917;
  });
  var cl1918 = function(producer2909) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values($rjs_core.attachProcedureArity(function() {
        for (var _29101922 = [],
            $__4 = 0; $__4 < arguments.length; $__4++)
          _29101922[$__4] = arguments[$__4];
        var _2910 = $rjs_core.Pair.listFromArray(_29101922);
        return producer2909();
      }), M2.rvoid, M2.rvoid(), false, false, false);
    });
  };
  var cl1919 = $rjs_core.attachProcedureArity(function(producer2911, stop2912) {
    for (var more29131923 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      more29131923[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var more2913 = $rjs_core.Pair.listFromArray(more29131923);
    if (M2.null_p(more2913) !== false) {
      var if_res1924 = function(_2915) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return producer2911();
      };
    } else {
      var if_res1924 = function(_2916) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.apply(producer2911, more2913);
      };
    }
    var produce_bang_2914 = if_res1924;
    if (M2.not(M2.procedure_p(stop2912)) !== false) {
      var if_res1927 = function(x2918) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.not(M2.eq_p(x2918, stop2912));
      };
    } else {
      if (M2.equal_p(1, M2.procedure_arity(stop2912)) !== false) {
        var if_res1926 = function(x2919) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.not(stop2912(x2919));
        };
      } else {
        var if_res1926 = $rjs_core.attachProcedureArity(function() {
          for (var xs29201925 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            xs29201925[$__5] = arguments[$__5];
          var xs2920 = $rjs_core.Pair.listFromArray(xs29201925);
          return M2.not(M2.apply(stop2912, xs2920));
        });
      }
      var if_res1927 = if_res1926;
    }
    var stop_p2917 = if_res1927;
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(produce_bang_2914, M2.rvoid, M2.rvoid(), false, stop_p2917, false);
    });
  });
  var in_producer = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1920 = {'1': cl1918}[arguments.length];
    if (fixed_lam1920 !== undefined) {
      return fixed_lam1920.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl1919.length, 1) !== false) {
        var if_res1921 = cl1919.apply(null, arguments);
      } else {
        var if_res1921 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1921;
    }
  }, [1, M2.make_arity_at_least(2)]);
  var let_result1928 = M2.make_struct_type($rjs_core.Symbol.make("stream"), false, 3, 0, false, M2.list(M2.cons(prop_stream, M2.vector(function(v2921) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2921, 0)();
  }, function(v2922) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2922, 1)();
  }, function(v2923) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_stream_ref(v2923, 2)();
  }))));
  var struct_do_stream = let_result1928.getAt(0);
  var make_do_stream = let_result1928.getAt(1);
  var do_stream_p = let_result1928.getAt(2);
  var do_stream_ref = let_result1928.getAt(3);
  var do_stream_set_bang_ = let_result1928.getAt(4);
  var empty_stream = make_do_stream(function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return true;
  }, M2.rvoid, M2.rvoid);
  var sequence__gt_stream = function(s2924) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(s2924) !== false) {
      var if_res1929 = M2.rvoid();
    } else {
      var if_res1929 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("sequence?"), s2924);
    }
    if_res1929;
    if (stream_p(s2924) !== false) {
      var if_res1940 = s2924;
    } else {
      var let_result1930 = make_sequence(false, s2924);
      var pos__gt_val2925 = let_result1930.getAt(0);
      var pre_pos_next2926 = let_result1930.getAt(1);
      var pos_next2927 = let_result1930.getAt(2);
      var init2928 = let_result1930.getAt(3);
      var pos_cont_p2929 = let_result1930.getAt(4);
      var pre_cont_p2930 = let_result1930.getAt(5);
      var post_cont_p2931 = let_result1930.getAt(6);
      var gen_stream2932 = function(pos2933) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var done_p2934 = false;
        var vals2935 = false;
        var empty_p2936 = false;
        var next2937 = false;
        var force_bang_2938 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (done_p2934 !== false) {
            var if_res1936 = M2.rvoid();
          } else {
            if (pos_cont_p2929 !== false) {
              var if_res1931 = pos_cont_p2929(pos2933);
            } else {
              var if_res1931 = true;
            }
            if (if_res1931 !== false) {
              vals2935 = M2.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return pos__gt_val2925(pos2933);
              }, M2.list);
              if (pre_pos_next2926 !== false) {
                pos2933 = pre_pos_next2926(pos2933);
                var if_res1932 = null;
              } else {
                var if_res1932 = M2.rvoid();
              }
              if_res1932;
              if (pre_cont_p2930 !== false) {
                var if_res1933 = M2.apply(pre_cont_p2930, vals2935);
              } else {
                var if_res1933 = true;
              }
              if (if_res1933 !== false) {
                var if_res1934 = M2.rvoid();
              } else {
                vals2935 = false;
                empty_p2936 = true;
                var if_res1934 = null;
              }
              var if_res1935 = if_res1934;
            } else {
              empty_p2936 = true;
              var if_res1935 = null;
            }
            if_res1935;
            done_p2934 = true;
            var if_res1936 = null;
          }
          return if_res1936;
        };
        return make_do_stream(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2938();
          return empty_p2936;
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2938();
          return M2.apply(M2.values, vals2935);
        }, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          force_bang_2938();
          if (next2937 !== false) {
            var if_res1939 = next2937;
          } else {
            if (post_cont_p2931 !== false) {
              var if_res1937 = M2.apply(post_cont_p2931, pos2933, vals2935);
            } else {
              var if_res1937 = true;
            }
            if (if_res1937 !== false) {
              next2937 = gen_stream2932(pos_next2927(pos2933));
              var if_res1938 = null;
            } else {
              next2937 = empty_stream;
              var if_res1938 = null;
            }
            if_res1938;
            var if_res1939 = next2937;
          }
          return if_res1939;
        });
      };
      var if_res1940 = gen_stream2932(init2928);
    }
    return if_res1940;
  };
  var no_more = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.raise(M2.__rjs_quoted__.exn_fail_contract($rjs_core.UString.makeInternedImmutable("sequence has no more values"), M2.current_continuation_marks()));
  };
  var sequence_generate = function(g2939) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2939) !== false) {
      var if_res1941 = M2.rvoid();
    } else {
      var if_res1941 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2939);
    }
    if_res1941;
    var let_result1942 = make_sequence(false, g2939);
    var pos__gt_val2940 = let_result1942.getAt(0);
    var pre_pos_next2941 = let_result1942.getAt(1);
    var pos_next2942 = let_result1942.getAt(2);
    var init2943 = let_result1942.getAt(3);
    var pos_cont_p2944 = let_result1942.getAt(4);
    var pre_cont_p2945 = let_result1942.getAt(5);
    var post_cont_p2946 = let_result1942.getAt(6);
    var pos2947 = init2943;
    var more_p2948 = false;
    var prep_val_bang_2949 = false;
    var next2950 = false;
    var init_more_p2951 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2949();
      return more_p2948();
    };
    var init_next2952 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      prep_val_bang_2949();
      return next2950();
    };
    var init_prep_val_bang_2953 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2944 !== false) {
        var if_res1943 = pos_cont_p2944(pos2947);
      } else {
        var if_res1943 = true;
      }
      if (if_res1943 !== false) {
        var if_res1951 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1949 = pos__gt_val2940(pos2947);
          if (pre_pos_next2941 !== false) {
            pos2947 = pre_pos_next2941(pos2947);
            var if_res1950 = null;
          } else {
            var if_res1950 = M2.rvoid();
          }
          if_res1950;
          return begin_res1949;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals29541944 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals29541944[$__5] = arguments[$__5];
          var vals2954 = $rjs_core.Pair.listFromArray(vals29541944);
          if (pre_cont_p2945 !== false) {
            var if_res1945 = M2.apply(pre_cont_p2945, vals2954);
          } else {
            var if_res1945 = true;
          }
          if (if_res1945 !== false) {
            more_p2948 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return true;
            };
            next2950 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var v2955 = vals2954;
              prep_val_bang_2949 = function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (post_cont_p2946 !== false) {
                  var if_res1946 = M2.apply(post_cont_p2946, pos2947, vals2954);
                } else {
                  var if_res1946 = true;
                }
                if (if_res1946 !== false) {
                  pos2947 = pos_next2942(pos2947);
                  prep_val_bang_2949 = init_prep_val_bang_2953;
                  var if_res1947 = prep_val_bang_2949();
                } else {
                  more_p2948 = function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return false;
                  };
                  next2950 = no_more;
                  var if_res1947 = null;
                }
                return if_res1947;
              };
              more_p2948 = init_more_p2951;
              next2950 = init_next2952;
              return M2.apply(M2.values, v2955);
            };
            prep_val_bang_2949 = M2.rvoid;
            var if_res1948 = M2.apply(M2.values, vals2954);
          } else {
            more_p2948 = function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return false;
            };
            next2950 = no_more;
            var if_res1948 = null;
          }
          return if_res1948;
        }));
      } else {
        more_p2948 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return false;
        };
        next2950 = no_more;
        var if_res1951 = null;
      }
      return if_res1951;
    };
    more_p2948 = init_more_p2951;
    prep_val_bang_2949 = init_prep_val_bang_2953;
    next2950 = init_next2952;
    var sequence_more_p2956 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return more_p2948();
    };
    var sequence_next2957 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return next2950();
    };
    return M2.values(sequence_more_p2956, sequence_next2957);
  };
  var sequence_generate_times_ = function(g2958) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (sequence_p(g2958) !== false) {
      var if_res1952 = M2.rvoid();
    } else {
      var if_res1952 = M2.raise_argument_error($rjs_core.Symbol.make("sequence-generate*"), $rjs_core.UString.makeInternedImmutable("sequence?"), g2958);
    }
    if_res1952;
    var let_result1953 = make_sequence(false, g2958);
    var pos__gt_val2959 = let_result1953.getAt(0);
    var pre_pos_next2960 = let_result1953.getAt(1);
    var pos_next2961 = let_result1953.getAt(2);
    var init2962 = let_result1953.getAt(3);
    var pos_cont_p2963 = let_result1953.getAt(4);
    var pre_cont_p2964 = let_result1953.getAt(5);
    var post_cont_p2965 = let_result1953.getAt(6);
    var next_bang_2966 = function(pos2967) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2963 !== false) {
        var if_res1954 = pos_cont_p2963(pos2967);
      } else {
        var if_res1954 = true;
      }
      if (if_res1954 !== false) {
        var if_res1962 = M2.call_with_values(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res1960 = pos__gt_val2959(pos2967);
          if (pre_pos_next2960 !== false) {
            pos2967 = pre_pos_next2960(pos2967);
            var if_res1961 = null;
          } else {
            var if_res1961 = M2.rvoid();
          }
          if_res1961;
          return begin_res1960;
        }, $rjs_core.attachProcedureArity(function() {
          for (var vals29681955 = [],
              $__5 = 0; $__5 < arguments.length; $__5++)
            vals29681955[$__5] = arguments[$__5];
          var vals2968 = $rjs_core.Pair.listFromArray(vals29681955);
          if (pre_cont_p2964 !== false) {
            var if_res1956 = M2.apply(pre_cont_p2964, vals2968);
          } else {
            var if_res1956 = true;
          }
          if (if_res1956 !== false) {
            var if_res1959 = M2.values(vals2968, function() {
              if (arguments.length !== 0) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (post_cont_p2965 !== false) {
                var if_res1957 = M2.apply(post_cont_p2965, pos2967, vals2968);
              } else {
                var if_res1957 = true;
              }
              if (if_res1957 !== false) {
                var if_res1958 = next_bang_2966(pos_next2961(pos2967));
              } else {
                var if_res1958 = M2.values(false, no_more);
              }
              return if_res1958;
            });
          } else {
            var if_res1959 = M2.values(false, no_more);
          }
          return if_res1959;
        }));
      } else {
        var if_res1962 = M2.values(false, no_more);
      }
      return if_res1962;
    };
    return next_bang_2966(init2962);
  };
  var grow_vector = function(vec2969) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n2970 = M2.vector_length(vec2969);
    var new_vec2971 = M2.make_vector(2 * n2970);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec2971, 0, vec2969, 0, n2970);
    return new_vec2971;
  };
  var shrink_vector = function(vec2972, i2973) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var new_vec2974 = M2.make_vector(i2973);
    M2.__rjs_quoted__.vector_copy_bang_(new_vec2974, 0, vec2972, 0, i2973);
    return new_vec2974;
  };
  var dir_list = function(full_d2975, d2976, acc2977) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1963 = make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("f")), in_list(M2.reverse(M3.sort(M2.__rjs_quoted__.directory_list(full_d2975), M2.__rjs_quoted__.path_lt__p))));
    var pos__gt_vals2978 = let_result1963.getAt(0);
    var pos_pre_inc2979 = let_result1963.getAt(1);
    var pos_next2980 = let_result1963.getAt(2);
    var init2981 = let_result1963.getAt(3);
    var pos_cont_p2982 = let_result1963.getAt(4);
    var val_cont_p2983 = let_result1963.getAt(5);
    var all_cont_p2984 = let_result1963.getAt(6);
    M2.rvoid();
    var for_loop2985 = function(acc2986, pos2987) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p2982 !== false) {
        var if_res1964 = pos_cont_p2982(pos2987);
      } else {
        var if_res1964 = true;
      }
      if (if_res1964 !== false) {
        var f2991 = pos__gt_vals2978(pos2987);
        if (all_cont_p2984 !== false) {
          var if_res1965 = function(pos2992) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p2984(pos2992, f2991);
          };
        } else {
          var if_res1965 = false;
        }
        var let_result1966 = M2.values(f2991, if_res1965);
        var f2988 = let_result1966.getAt(0);
        var all_cont_p_by_pos2989 = let_result1966.getAt(1);
        if (pos_pre_inc2979 !== false) {
          var if_res1967 = pos_pre_inc2979(pos2987);
        } else {
          var if_res1967 = pos2987;
        }
        var pos2990 = if_res1967;
        if (val_cont_p2983 !== false) {
          var if_res1968 = val_cont_p2983(f2988);
        } else {
          var if_res1968 = true;
        }
        if (if_res1968 !== false) {
          var acc2994 = acc2986;
          var acc2995 = M2.cons(M2.__rjs_quoted__.build_path(d2976, f2988), acc2994);
          var acc2993 = M2.values(acc2995);
          if (all_cont_p_by_pos2989 !== false) {
            var if_res1969 = all_cont_p_by_pos2989(pos2990);
          } else {
            var if_res1969 = true;
          }
          if (if_res1969 !== false) {
            var if_res1970 = M2.not(false);
          } else {
            var if_res1970 = false;
          }
          if (if_res1970 !== false) {
            var if_res1971 = for_loop2985(acc2993, pos_next2980(pos2990));
          } else {
            var if_res1971 = acc2993;
          }
          var if_res1972 = if_res1971;
        } else {
          var if_res1972 = acc2986;
        }
        var if_res1973 = if_res1972;
      } else {
        var if_res1973 = acc2986;
      }
      return if_res1973;
    };
    return for_loop2985(acc2977, init2981);
  };
  var next_body = function(l2996, d2997, init_dir2998, use_dir_p2999) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var full_d3000 = M2.__rjs_quoted__.path__gt_complete_path(d2997, init_dir2998);
    if (M2.__rjs_quoted__.directory_exists_p(full_d3000) !== false) {
      var if_res1974 = use_dir_p2999(full_d3000);
    } else {
      var if_res1974 = false;
    }
    if (if_res1974 !== false) {
      var if_res1975 = dir_list(full_d3000, d2997, M2.cdr(l2996));
    } else {
      var if_res1975 = M2.cdr(l2996);
    }
    return if_res1975;
  };
  var initial_state = function(orig_dir3001, init_dir3002) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (orig_dir3001 !== false) {
      var if_res1976 = dir_list(M2.__rjs_quoted__.path__gt_complete_path(orig_dir3001, init_dir3002), orig_dir3001, M2.rnull);
    } else {
      var if_res1976 = M2.__rjs_quoted__.directory_list(init_dir3002);
    }
    return if_res1976;
  };
  var cl1977 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(false, function(d3003) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl1978 = function(orig_dir3004) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return __times_in_directory(orig_dir3004, function(d3005) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return true;
    });
  };
  var cl1979 = function(orig_dir3006, use_dir_p3007) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var init_dir3008 = M2.__rjs_quoted__.current_directory();
    var next3009 = function(l3010) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var d3011 = M2.car(l3010);
      return next_body(l3010, d3011, init_dir3008, use_dir_p3007);
    };
    return make_do_sequence(function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M2.values(M2.car, next3009, initial_state(orig_dir3006, init_dir3008), M2.pair_p, false, false);
    });
  };
  var __times_in_directory = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1980 = {
      '0': cl1977,
      '1': cl1978,
      '2': cl1979
    }[arguments.length];
    if (fixed_lam1980 !== undefined) {
      return fixed_lam1980.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2]);
  var __rjs_quoted__ = {};
  __rjs_quoted__.default_in_hash_pairs = default_in_hash_pairs;
  __rjs_quoted__.in_naturals = in_naturals;
  __rjs_quoted__.in_vector = in_vector;
  __rjs_quoted__.default_in_hash_values = default_in_hash_values;
  __rjs_quoted__.check_in_bytes_lines = check_in_bytes_lines;
  __rjs_quoted__.default_in_weak_hash_pairs = default_in_weak_hash_pairs;
  __rjs_quoted__.in_input_port_chars = in_input_port_chars;
  __rjs_quoted__.default_in_mutable_hash_values = default_in_mutable_hash_values;
  __rjs_quoted__.next_body = next_body;
  __rjs_quoted__.grow_vector = grow_vector;
  __rjs_quoted__.in_indexed = in_indexed;
  __rjs_quoted__.default_in_immutable_hash_keys = default_in_immutable_hash_keys;
  __rjs_quoted__.in_port = in_port;
  __rjs_quoted__.in_producer = in_producer;
  __rjs_quoted__.default_in_hash_keys = default_in_hash_keys;
  __rjs_quoted__.default_in_mutable_hash_pairs = default_in_mutable_hash_pairs;
  __rjs_quoted__.default_in_immutable_hash = default_in_immutable_hash;
  __rjs_quoted__.default_in_mutable_hash = default_in_mutable_hash;
  __rjs_quoted__.default_in_mutable_hash_keys = default_in_mutable_hash_keys;
  __rjs_quoted__.not_weak_p = not_weak_p;
  __rjs_quoted__.default_in_weak_hash = default_in_weak_hash;
  __rjs_quoted__.initial_state = initial_state;
  __rjs_quoted__.in_lines = in_lines;
  __rjs_quoted__.default_in_immutable_hash_pairs = default_in_immutable_hash_pairs;
  __rjs_quoted__.shrink_vector = shrink_vector;
  __rjs_quoted__.default_in_weak_hash_keys = default_in_weak_hash_keys;
  __rjs_quoted__.in_range = in_range;
  __rjs_quoted__.in_parallel = in_parallel;
  __rjs_quoted__.in_value = in_value;
  __rjs_quoted__.__times_in_directory = __times_in_directory;
  __rjs_quoted__.default_in_immutable_hash_values = default_in_immutable_hash_values;
  __rjs_quoted__.unsafe_stream_rest = unsafe_stream_rest;
  __rjs_quoted__.check_in_port = check_in_port;
  __rjs_quoted__.check_in_lines = check_in_lines;
  __rjs_quoted__.normalise_inputs = normalise_inputs;
  __rjs_quoted__.__hash_gen = __hash_gen;
  __rjs_quoted__.in_string = in_string;
  __rjs_quoted__.make_sequence = make_sequence;
  __rjs_quoted__.unsafe_stream_first = unsafe_stream_first;
  __rjs_quoted__.unsafe_stream_not_empty_p = unsafe_stream_not_empty_p;
  __rjs_quoted__.in_input_port_bytes = in_input_port_bytes;
  __rjs_quoted__.mutable_p = mutable_p;
  __rjs_quoted__.default_in_weak_hash_values = default_in_weak_hash_values;
  __rjs_quoted__.stream_p = stream_p;
  __rjs_quoted__.in_bytes = in_bytes;
  __rjs_quoted__.stop_after = stop_after;
  __rjs_quoted__.default_in_hash = default_in_hash;
  __rjs_quoted__.in_stream = in_stream;
  __rjs_quoted__.make_do_sequence = make_do_sequence;
  __rjs_quoted__.in_mlist = in_mlist;
  __rjs_quoted__.in_bytes_lines = in_bytes_lines;
  __rjs_quoted__.in_list = in_list;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_do_sequence() {
      return make_do_sequence;
    },
    get prop_sequence() {
      return prop_sequence;
    },
    get sequence_generate_times_() {
      return sequence_generate_times_;
    },
    get sequence_generate() {
      return sequence_generate;
    },
    get sequence_p() {
      return sequence_p;
    },
    get make_do_stream() {
      return make_do_stream;
    },
    get empty_stream() {
      return empty_stream;
    },
    get sequence__gt_stream() {
      return sequence__gt_stream;
    },
    get stream_via_prop_p() {
      return stream_via_prop_p;
    },
    get stream_ref() {
      return stream_ref;
    },
    get prop_stream() {
      return prop_stream;
    },
    get stream_rest() {
      return stream_rest;
    },
    get stream_first() {
      return stream_first;
    },
    get stream_empty_p() {
      return stream_empty_p;
    },
    get stream_p() {
      return stream_p;
    },
    get stop_after() {
      return stop_after;
    },
    get stop_before() {
      return stop_before;
    },
    get in_values_times__sequence() {
      return in_values_times__sequence;
    },
    get in_values_sequence() {
      return in_values_sequence;
    },
    get in_parallel() {
      return in_parallel;
    },
    get in_cycle() {
      return in_cycle;
    },
    get in_sequences() {
      return in_sequences;
    }
  };
})();
var $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/qq-and-or.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var qq_append = function(a2503, b2504) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(a2503) !== false) {
      var if_res1652 = M0.append(a2503, b2504);
    } else {
      var if_res1652 = M0.raise_argument_error($rjs_core.Symbol.make("unquote-splicing"), $rjs_core.UString.makeInternedImmutable("list?"), a2503);
    }
    return if_res1652;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.qq_append = qq_append;
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_map_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/map.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var cl399 = function(f751, l752) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f751) !== false) {
      if (M0.procedure_arity_includes_p(f751, 1) !== false) {
        var if_res404 = M0.list_p(l752);
      } else {
        var if_res404 = false;
      }
      var if_res405 = if_res404;
    } else {
      var if_res405 = false;
    }
    if (if_res405 !== false) {
      var loop753 = function(l754) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l754) !== false) {
          var if_res406 = M0.rnull;
        } else {
          var r755 = M0.cdr(l754);
          var if_res406 = M0.cons(f751(M0.car(l754)), loop753(r755));
        }
        return if_res406;
      };
      var if_res407 = loop753(l752);
    } else {
      var if_res407 = M0.map(f751, l752);
    }
    return if_res407;
  };
  var cl400 = function(f756, l1757, l2758) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f756) !== false) {
      if (M0.procedure_arity_includes_p(f756, 2) !== false) {
        if (M0.list_p(l1757) !== false) {
          if (M0.list_p(l2758) !== false) {
            var if_res408 = M0.__eq_(M0.length(l1757), M0.length(l2758));
          } else {
            var if_res408 = false;
          }
          var if_res409 = if_res408;
        } else {
          var if_res409 = false;
        }
        var if_res410 = if_res409;
      } else {
        var if_res410 = false;
      }
      var if_res411 = if_res410;
    } else {
      var if_res411 = false;
    }
    if (if_res411 !== false) {
      var loop759 = function(l1760, l2761) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1760) !== false) {
          var if_res412 = M0.rnull;
        } else {
          var r1762 = M0.cdr(l1760);
          var r2763 = M0.cdr(l2761);
          var if_res412 = M0.cons(f756(M0.car(l1760), M0.car(l2761)), loop759(r1762, r2763));
        }
        return if_res412;
      };
      var if_res413 = loop759(l1757, l2758);
    } else {
      var if_res413 = M0.map(f756, l1757, l2758);
    }
    return if_res413;
  };
  var cl401 = $rjs_core.attachProcedureArity(function(f764, l765) {
    for (var args766414 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      args766414[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args766 = $rjs_core.Pair.listFromArray(args766414);
    return M0.apply(M0.map, f764, l765, args766);
  });
  var map750 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam402 = {
      '2': cl399,
      '3': cl400
    }[arguments.length];
    if (fixed_lam402 !== undefined) {
      return fixed_lam402.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl401.length, 1) !== false) {
        var if_res403 = cl401.apply(null, arguments);
      } else {
        var if_res403 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res403;
    }
  }, [M0.make_arity_at_least(2)]);
  var map2 = map750;
  var cl415 = function(f768, l769) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f768) !== false) {
      if (M0.procedure_arity_includes_p(f768, 1) !== false) {
        var if_res420 = M0.list_p(l769);
      } else {
        var if_res420 = false;
      }
      var if_res421 = if_res420;
    } else {
      var if_res421 = false;
    }
    if (if_res421 !== false) {
      var loop770 = function(l771) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l771) !== false) {
          var if_res422 = M0.rvoid();
        } else {
          var r772 = M0.cdr(l771);
          f768(M0.car(l771));
          var if_res422 = loop770(r772);
        }
        return if_res422;
      };
      var if_res423 = loop770(l769);
    } else {
      var if_res423 = M0.for_each(f768, l769);
    }
    return if_res423;
  };
  var cl416 = function(f773, l1774, l2775) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f773) !== false) {
      if (M0.procedure_arity_includes_p(f773, 2) !== false) {
        if (M0.list_p(l1774) !== false) {
          if (M0.list_p(l2775) !== false) {
            var if_res424 = M0.__eq_(M0.length(l1774), M0.length(l2775));
          } else {
            var if_res424 = false;
          }
          var if_res425 = if_res424;
        } else {
          var if_res425 = false;
        }
        var if_res426 = if_res425;
      } else {
        var if_res426 = false;
      }
      var if_res427 = if_res426;
    } else {
      var if_res427 = false;
    }
    if (if_res427 !== false) {
      var loop776 = function(l1777, l2778) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(l1777) !== false) {
          var if_res428 = M0.rvoid();
        } else {
          var r1779 = M0.cdr(l1777);
          var r2780 = M0.cdr(l2778);
          f773(M0.car(l1777), M0.car(l2778));
          var if_res428 = loop776(r1779, r2780);
        }
        return if_res428;
      };
      var if_res429 = loop776(l1774, l2775);
    } else {
      var if_res429 = M0.for_each(f773, l1774, l2775);
    }
    return if_res429;
  };
  var cl417 = $rjs_core.attachProcedureArity(function(f781, l782) {
    for (var args783430 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      args783430[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args783 = $rjs_core.Pair.listFromArray(args783430);
    return M0.apply(M0.for_each, f781, l782, args783);
  });
  var for_each767 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam418 = {
      '2': cl415,
      '3': cl416
    }[arguments.length];
    if (fixed_lam418 !== undefined) {
      return fixed_lam418.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl417.length, 1) !== false) {
        var if_res419 = cl417.apply(null, arguments);
      } else {
        var if_res419 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res419;
    }
  }, [M0.make_arity_at_least(2)]);
  var for_each2 = for_each767;
  var cl431 = function(f785, l786) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f785) !== false) {
      if (M0.procedure_arity_includes_p(f785, 1) !== false) {
        var if_res436 = M0.list_p(l786);
      } else {
        var if_res436 = false;
      }
      var if_res437 = if_res436;
    } else {
      var if_res437 = false;
    }
    if (if_res437 !== false) {
      if (M0.null_p(l786) !== false) {
        var if_res440 = true;
      } else {
        var loop787 = function(l788) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l788)) !== false) {
            var if_res439 = f785(M0.car(l788));
          } else {
            var r789 = M0.cdr(l788);
            if (f785(M0.car(l788)) !== false) {
              var if_res438 = loop787(r789);
            } else {
              var if_res438 = false;
            }
            var if_res439 = if_res438;
          }
          return if_res439;
        };
        var if_res440 = loop787(l786);
      }
      var if_res441 = if_res440;
    } else {
      var if_res441 = M0.andmap(f785, l786);
    }
    return if_res441;
  };
  var cl432 = function(f790, l1791, l2792) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f790) !== false) {
      if (M0.procedure_arity_includes_p(f790, 2) !== false) {
        if (M0.list_p(l1791) !== false) {
          if (M0.list_p(l2792) !== false) {
            var if_res442 = M0.__eq_(M0.length(l1791), M0.length(l2792));
          } else {
            var if_res442 = false;
          }
          var if_res443 = if_res442;
        } else {
          var if_res443 = false;
        }
        var if_res444 = if_res443;
      } else {
        var if_res444 = false;
      }
      var if_res445 = if_res444;
    } else {
      var if_res445 = false;
    }
    if (if_res445 !== false) {
      if (M0.null_p(l1791) !== false) {
        var if_res448 = true;
      } else {
        var loop793 = function(l1794, l2795) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1794)) !== false) {
            var if_res447 = f790(M0.car(l1794), M0.car(l2795));
          } else {
            var r1796 = M0.cdr(l1794);
            var r2797 = M0.cdr(l2795);
            if (f790(M0.car(l1794), M0.car(l2795)) !== false) {
              var if_res446 = loop793(r1796, r2797);
            } else {
              var if_res446 = false;
            }
            var if_res447 = if_res446;
          }
          return if_res447;
        };
        var if_res448 = loop793(l1791, l2792);
      }
      var if_res449 = if_res448;
    } else {
      var if_res449 = M0.andmap(f790, l1791, l2792);
    }
    return if_res449;
  };
  var cl433 = $rjs_core.attachProcedureArity(function(f798, l799) {
    for (var args800450 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      args800450[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args800 = $rjs_core.Pair.listFromArray(args800450);
    return M0.apply(M0.andmap, f798, l799, args800);
  });
  var andmap784 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam434 = {
      '2': cl431,
      '3': cl432
    }[arguments.length];
    if (fixed_lam434 !== undefined) {
      return fixed_lam434.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl433.length, 1) !== false) {
        var if_res435 = cl433.apply(null, arguments);
      } else {
        var if_res435 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res435;
    }
  }, [M0.make_arity_at_least(2)]);
  var andmap2 = andmap784;
  var cl451 = function(f802, l803) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f802) !== false) {
      if (M0.procedure_arity_includes_p(f802, 1) !== false) {
        var if_res456 = M0.list_p(l803);
      } else {
        var if_res456 = false;
      }
      var if_res457 = if_res456;
    } else {
      var if_res457 = false;
    }
    if (if_res457 !== false) {
      if (M0.null_p(l803) !== false) {
        var if_res460 = false;
      } else {
        var loop804 = function(l805) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l805)) !== false) {
            var if_res459 = f802(M0.car(l805));
          } else {
            var r806 = M0.cdr(l805);
            var or_part807 = f802(M0.car(l805));
            if (or_part807 !== false) {
              var if_res458 = or_part807;
            } else {
              var if_res458 = loop804(r806);
            }
            var if_res459 = if_res458;
          }
          return if_res459;
        };
        var if_res460 = loop804(l803);
      }
      var if_res461 = if_res460;
    } else {
      var if_res461 = M0.ormap(f802, l803);
    }
    return if_res461;
  };
  var cl452 = function(f808, l1809, l2810) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f808) !== false) {
      if (M0.procedure_arity_includes_p(f808, 2) !== false) {
        if (M0.list_p(l1809) !== false) {
          if (M0.list_p(l2810) !== false) {
            var if_res462 = M0.__eq_(M0.length(l1809), M0.length(l2810));
          } else {
            var if_res462 = false;
          }
          var if_res463 = if_res462;
        } else {
          var if_res463 = false;
        }
        var if_res464 = if_res463;
      } else {
        var if_res464 = false;
      }
      var if_res465 = if_res464;
    } else {
      var if_res465 = false;
    }
    if (if_res465 !== false) {
      if (M0.null_p(l1809) !== false) {
        var if_res468 = false;
      } else {
        var loop811 = function(l1812, l2813) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(M0.cdr(l1812)) !== false) {
            var if_res467 = f808(M0.car(l1812), M0.car(l2813));
          } else {
            var r1814 = M0.cdr(l1812);
            var r2815 = M0.cdr(l2813);
            var or_part816 = f808(M0.car(l1812), M0.car(l2813));
            if (or_part816 !== false) {
              var if_res466 = or_part816;
            } else {
              var if_res466 = loop811(r1814, r2815);
            }
            var if_res467 = if_res466;
          }
          return if_res467;
        };
        var if_res468 = loop811(l1809, l2810);
      }
      var if_res469 = if_res468;
    } else {
      var if_res469 = M0.ormap(f808, l1809, l2810);
    }
    return if_res469;
  };
  var cl453 = $rjs_core.attachProcedureArity(function(f817, l818) {
    for (var args819470 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      args819470[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args819 = $rjs_core.Pair.listFromArray(args819470);
    return M0.apply(M0.ormap, f817, l818, args819);
  });
  var ormap801 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam454 = {
      '2': cl451,
      '3': cl452
    }[arguments.length];
    if (fixed_lam454 !== undefined) {
      return fixed_lam454.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl453.length, 1) !== false) {
        var if_res455 = cl453.apply(null, arguments);
      } else {
        var if_res455 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res455;
    }
  }, [M0.make_arity_at_least(2)]);
  var ormap2 = ormap801;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get ormap() {
      return ormap2;
    },
    get andmap() {
      return andmap2;
    },
    get for_each() {
      return for_each2;
    },
    get map() {
      return map2;
    }
  };
})();
var $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/norm-arity.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var procedure_arity4430 = function(p4431) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return normalize_arity(M0.procedure_arity(p4431));
  };
  var norm_procedure_arity = procedure_arity4430;
  var raise_arity_error4432 = $rjs_core.attachProcedureArity(function(name4433, arity_v4434) {
    for (var arg_vs44352850 = [],
        $__1 = 2; $__1 < arguments.length; $__1++)
      arg_vs44352850[$__1 - 2] = arguments[$__1];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arg_vs4435 = $rjs_core.Pair.listFromArray(arg_vs44352850);
    var or_part4436 = M0.exact_nonnegative_integer_p(arity_v4434);
    if (or_part4436 !== false) {
      var if_res2854 = or_part4436;
    } else {
      var or_part4437 = M0.arity_at_least_p(arity_v4434);
      if (or_part4437 !== false) {
        var if_res2853 = or_part4437;
      } else {
        if (M0.list_p(arity_v4434) !== false) {
          var if_res2852 = M0.andmap(function(x4438) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var or_part4439 = M0.exact_nonnegative_integer_p(x4438);
            if (or_part4439 !== false) {
              var if_res2851 = or_part4439;
            } else {
              var if_res2851 = M0.arity_at_least_p(x4438);
            }
            return if_res2851;
          }, arity_v4434);
        } else {
          var if_res2852 = false;
        }
        var if_res2853 = if_res2852;
      }
      var if_res2854 = if_res2853;
    }
    if (if_res2854 !== false) {
      var if_res2855 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4433, normalize_arity(arity_v4434), arg_vs4435);
    } else {
      var if_res2855 = M0.apply(M0.__rjs_quoted__.raise_arity_error, name4433, arity_v4434, arg_vs4435);
    }
    return if_res2855;
  });
  var norm_raise_arity_error = raise_arity_error4432;
  var normalize_arity = function(arity4440) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_arity_p(arity4440) !== false) {
      var if_res2856 = M0.rvoid();
    } else {
      var if_res2856 = M0.raise_argument_error($rjs_core.Symbol.make("normalize-arity"), $rjs_core.UString.makeInternedImmutable("procedure-arity?"), arity4440);
    }
    if_res2856;
    if (M0.pair_p(arity4440) !== false) {
      var reversed4441 = reverse_sort_arity(arity4440);
      var normalized4442 = normalize_reversed_arity(reversed4441, $rjs_core.Pair.makeList());
      var simplified4443 = normalize_singleton_arity(normalized4442);
      var if_res2857 = simplified4443;
    } else {
      var if_res2857 = arity4440;
    }
    return if_res2857;
  };
  var normalize_singleton_arity = function(arity4444) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4444) !== false) {
      var if_res2858 = M0.null_p(M0.cdr(arity4444));
    } else {
      var if_res2858 = false;
    }
    if (if_res2858 !== false) {
      var if_res2859 = M0.car(arity4444);
    } else {
      var if_res2859 = arity4444;
    }
    return if_res2859;
  };
  var normalize_reversed_arity = function(arity4445, tail4446) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4445) !== false) {
      var if_res2860 = normalize_reversed_arity(M0.cdr(arity4445), arity_insert(M0.car(arity4445), tail4446));
    } else {
      var if_res2860 = tail4446;
    }
    return if_res2860;
  };
  var arity_insert = function(elem4447, arity4448) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(arity4448) !== false) {
      var next4449 = M0.car(arity4448);
      if (M0.arity_at_least_p(next4449) !== false) {
        var next_value4450 = M0.arity_at_least_value(next4449);
        if (M0.arity_at_least_p(elem4447) !== false) {
          var elem_value4451 = M0.arity_at_least_value(elem4447);
          if (M0.__lt_(elem_value4451, next_value4450) !== false) {
            var if_res2861 = M0.cons(elem4447, M0.cdr(arity4448));
          } else {
            var if_res2861 = arity4448;
          }
          var if_res2864 = if_res2861;
        } else {
          if (M0.__lt_(elem4447, next_value4450 - 1) !== false) {
            var if_res2863 = M0.cons(elem4447, arity4448);
          } else {
            if (M0.__eq_(elem4447, next_value4450 - 1) !== false) {
              var if_res2862 = M0.cons(M0.arity_at_least(elem4447), M0.cdr(arity4448));
            } else {
              var if_res2862 = arity4448;
            }
            var if_res2863 = if_res2862;
          }
          var if_res2864 = if_res2863;
        }
        var if_res2866 = if_res2864;
      } else {
        if (M0.__lt_(elem4447, next4449) !== false) {
          var if_res2865 = M0.cons(elem4447, arity4448);
        } else {
          var if_res2865 = arity4448;
        }
        var if_res2866 = if_res2865;
      }
      var if_res2867 = if_res2866;
    } else {
      var if_res2867 = M0.cons(elem4447, arity4448);
    }
    return if_res2867;
  };
  var reverse_sort_arity = function(arity4452) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.sort(arity4452, arity_gt__p);
  };
  var arity_gt__p = function(a4453, b4454) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.arity_at_least_p(a4453) !== false) {
      if (M0.arity_at_least_p(b4454) !== false) {
        var if_res2868 = M0.__gt_(M0.arity_at_least_value(a4453), M0.arity_at_least_value(b4454));
      } else {
        var if_res2868 = true;
      }
      var if_res2870 = if_res2868;
    } else {
      if (M0.arity_at_least_p(b4454) !== false) {
        var if_res2869 = false;
      } else {
        var if_res2869 = M0.__gt_(a4453, b4454);
      }
      var if_res2870 = if_res2869;
    }
    return if_res2870;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get normalize_arity() {
      return normalize_arity;
    },
    get norm_raise_arity_error() {
      return norm_raise_arity_error;
    },
    get norm_procedure_arity() {
      return norm_procedure_arity;
    }
  };
})();
var $__collects_47_racket_47_private_47_path_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/path.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var path_string_p = function(s3387) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3388 = M0.__rjs_quoted__.path_p(s3387);
    if (or_part3388 !== false) {
      var if_res2269 = or_part3388;
    } else {
      if (M0.string_p(s3387) !== false) {
        var or_part3389 = M0.__rjs_quoted__.relative_path_p(s3387);
        if (or_part3389 !== false) {
          var if_res2267 = or_part3389;
        } else {
          var if_res2267 = M0.__rjs_quoted__.absolute_path_p(s3387);
        }
        var if_res2268 = if_res2267;
      } else {
        var if_res2268 = false;
      }
      var if_res2269 = if_res2268;
    }
    return if_res2269;
  };
  var bsbs = M0.string($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(92));
  var normal_case_path = function(s3390) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3391 = M0.__rjs_quoted__.path_for_some_system_p(s3390);
    if (or_part3391 !== false) {
      var if_res2270 = or_part3391;
    } else {
      var if_res2270 = path_string_p(s3390);
    }
    if (if_res2270 !== false) {
      var if_res2271 = M0.rvoid();
    } else {
      var if_res2271 = M0.raise_argument_error($rjs_core.Symbol.make("normal-path-case"), $rjs_core.UString.makeInternedImmutable("(or/c path-for-some-system? path-string?)"), s3390);
    }
    if_res2271;
    if (M0.__rjs_quoted__.path_for_some_system_p(s3390) !== false) {
      var if_res2272 = M0.eq_p(M0.__rjs_quoted__.path_convention_type(s3390), $rjs_core.Symbol.make("windows"));
    } else {
      var if_res2272 = M0.eq_p(M0.system_type(), $rjs_core.Symbol.make("windows"));
    }
    if (if_res2272 !== false) {
      if (M0.string_p(s3390) !== false) {
        var if_res2273 = s3390;
      } else {
        var if_res2273 = M0.__rjs_quoted__.bytes__gt_string_by_locale(M0.__rjs_quoted__.path__gt_bytes(s3390));
      }
      var str3392 = if_res2273;
      if (M0.__rjs_quoted__.regexp_match_p("/^[\\][\\][?][\\]/", str3392) !== false) {
        if (M0.string_p(s3390) !== false) {
          var if_res2274 = M0.__rjs_quoted__.string__gt_path(s3390);
        } else {
          var if_res2274 = s3390;
        }
        var if_res2276 = if_res2274;
      } else {
        var s3393 = M0.__rjs_quoted__.string_locale_downcase(str3392);
        if (M0.__rjs_quoted__.regexp_match_p("/[\\/\\][. ]+[\\/\\]*$/", s3393) !== false) {
          var if_res2275 = s3393;
        } else {
          var if_res2275 = M0.__rjs_quoted__.regexp_replace_times_("/[ .]+([\\/\\]*)$/", s3393, $rjs_core.UString.makeInternedImmutable("\\1"));
        }
        var if_res2276 = M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.string__gt_bytes_by_locale(M0.__rjs_quoted__.regexp_replace_times_("/\\//", if_res2275, bsbs)), $rjs_core.Symbol.make("windows"));
      }
      var if_res2278 = if_res2276;
    } else {
      if (M0.string_p(s3390) !== false) {
        var if_res2277 = M0.__rjs_quoted__.string__gt_path(s3390);
      } else {
        var if_res2277 = s3390;
      }
      var if_res2278 = if_res2277;
    }
    return if_res2278;
  };
  var check_extension_call = function(s3394, sfx3395, who3396, sep3397, trust_sep_p3398) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3401 = M0.__rjs_quoted__.path_for_some_system_p(s3394);
    if (or_part3401 !== false) {
      var if_res2279 = or_part3401;
    } else {
      var if_res2279 = path_string_p(s3394);
    }
    if (M0.not(if_res2279) !== false) {
      var if_res2285 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c path-for-some-system? path-string?)"), 0);
    } else {
      var or_part3402 = M0.string_p(sfx3395);
      if (or_part3402 !== false) {
        var if_res2280 = or_part3402;
      } else {
        var if_res2280 = M0.bytes_p(sfx3395);
      }
      if (M0.not(if_res2280) !== false) {
        var if_res2284 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c string? bytes?)"), 1);
      } else {
        var or_part3403 = trust_sep_p3398;
        if (or_part3403 !== false) {
          var if_res2282 = or_part3403;
        } else {
          var or_part3404 = M0.string_p(sep3397);
          if (or_part3404 !== false) {
            var if_res2281 = or_part3404;
          } else {
            var if_res2281 = M0.bytes_p(sep3397);
          }
          var if_res2282 = if_res2281;
        }
        if (M0.not(if_res2282) !== false) {
          var if_res2283 = M0.values($rjs_core.UString.makeInternedImmutable("(or/c string? bytes?)"), 2);
        } else {
          var if_res2283 = M0.values(false, false);
        }
        var if_res2284 = if_res2283;
      }
      var if_res2285 = if_res2284;
    }
    var let_result2286 = if_res2285;
    var err_msg3399 = let_result2286.getAt(0);
    var err_index3400 = let_result2286.getAt(1);
    if (err_msg3399 !== false) {
      if (trust_sep_p3398 !== false) {
        var if_res2287 = M0.raise_argument_error(who3396, err_msg3399, err_index3400, s3394, sfx3395);
      } else {
        var if_res2287 = M0.raise_argument_error(who3396, err_msg3399, err_index3400, s3394, sfx3395, sep3397);
      }
      var if_res2288 = if_res2287;
    } else {
      var if_res2288 = M0.rvoid();
    }
    if_res2288;
    var let_result2289 = M0.__rjs_quoted__.split_path(s3394);
    var base3405 = let_result2289.getAt(0);
    var name3406 = let_result2289.getAt(1);
    var dir_p3407 = let_result2289.getAt(2);
    if (M0.not(base3405) !== false) {
      var if_res2290 = M0.raise_mismatch_error(who3396, $rjs_core.UString.makeInternedImmutable("cannot add an extension to a root path: "), s3394);
    } else {
      var if_res2290 = M0.rvoid();
    }
    if_res2290;
    return M0.values(base3405, name3406);
  };
  var path_adjust_extension = function(name3408, sep3409, rest_bytes3410, s3411, sfx3412, trust_sep_p3413) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result2291 = check_extension_call(s3411, sfx3412, name3408, sep3409, trust_sep_p3413);
    var base3414 = let_result2291.getAt(0);
    var name3415 = let_result2291.getAt(1);
    var bs3416 = M0.__rjs_quoted__.path_element__gt_bytes(name3415);
    var finish3417 = function(i3418, sep3419, i23420) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp2296 = M0.__rjs_quoted__.subbytes(bs3416, 0, i3418);
      if (M0.string_p(sep3419) !== false) {
        var if_res2295 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sep3419, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2295 = sep3419;
      }
      var temp2294 = rest_bytes3410(bs3416, i23420);
      if (M0.string_p(sfx3412) !== false) {
        var if_res2293 = M0.__rjs_quoted__.string__gt_bytes_by_locale(sfx3412, M0.char__gt_integer($rjs_core.Char.charFromCodepoint(63)));
      } else {
        var if_res2293 = sfx3412;
      }
      var temp2297 = M0.__rjs_quoted__.bytes_append(temp2296, if_res2295, temp2294, if_res2293);
      if (M0.__rjs_quoted__.path_for_some_system_p(s3411) !== false) {
        var if_res2292 = M0.__rjs_quoted__.path_convention_type(s3411);
      } else {
        var if_res2292 = M0.__rjs_quoted__.system_path_convention_type();
      }
      return M0.__rjs_quoted__.bytes__gt_path_element(temp2297, if_res2292);
    };
    var loop3422 = function(i3423) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i3423) !== false) {
        var if_res2300 = finish3417(M0.__rjs_quoted__.bytes_length(bs3416), $rjs_core.Bytes.fromIntArray([]), M0.__rjs_quoted__.bytes_length(bs3416));
      } else {
        var i3424 = M0.sub1(i3423);
        if (M0.not(M0.zero_p(i3424)) !== false) {
          var if_res2298 = M0.eq_p(M0.char__gt_integer($rjs_core.Char.charFromCodepoint(46)), M0.__rjs_quoted__.bytes_ref(bs3416, i3424));
        } else {
          var if_res2298 = false;
        }
        if (if_res2298 !== false) {
          var if_res2299 = finish3417(i3424, sep3409, M0.add1(i3424));
        } else {
          var if_res2299 = loop3422(i3424);
        }
        var if_res2300 = if_res2299;
      }
      return if_res2300;
    };
    var new_name3421 = loop3422(M0.__rjs_quoted__.bytes_length(bs3416));
    if (M0.__rjs_quoted__.path_for_some_system_p(base3414) !== false) {
      var if_res2301 = M0.__rjs_quoted__.build_path(base3414, new_name3421);
    } else {
      var if_res2301 = new_name3421;
    }
    return if_res2301;
  };
  var path_replace_extension = function(s3425, sfx3426) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-replace-extension"), $rjs_core.Bytes.fromIntArray([]), function(bs3427, i3428) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return $rjs_core.Bytes.fromIntArray([]);
    }, s3425, sfx3426, true);
  };
  var cl2302 = function(s3429, sfx3430) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), $rjs_core.Bytes.fromIntArray([95]), M0.__rjs_quoted__.subbytes, s3429, sfx3430, true);
  };
  var cl2303 = function(s3431, sfx3432, sep3433) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return path_adjust_extension($rjs_core.Symbol.make("path-add-extension"), sep3433, M0.__rjs_quoted__.subbytes, s3431, sfx3432, false);
  };
  var path_add_extension = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2304 = {
      '2': cl2302,
      '3': cl2303
    }[arguments.length];
    if (fixed_lam2304 !== undefined) {
      return fixed_lam2304.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var reroot_path = function(p3434, root3435) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part3436 = path_string_p(p3434);
    if (or_part3436 !== false) {
      var if_res2305 = or_part3436;
    } else {
      var if_res2305 = M0.__rjs_quoted__.path_for_some_system_p(p3434);
    }
    if (if_res2305 !== false) {
      var if_res2306 = M0.rvoid();
    } else {
      var if_res2306 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("(or/c path-string? path-for-some-system?)"), 0, p3434, root3435);
    }
    if_res2306;
    var let_result2307 = M0.values();
    var or_part3437 = path_string_p(root3435);
    if (or_part3437 !== false) {
      var if_res2308 = or_part3437;
    } else {
      var if_res2308 = M0.__rjs_quoted__.path_for_some_system_p(root3435);
    }
    if (if_res2308 !== false) {
      var if_res2309 = M0.rvoid();
    } else {
      var if_res2309 = M0.raise_argument_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("(or/c path-string? path-for-some-system?)"), 1, p3434, root3435);
    }
    if_res2309;
    var let_result2310 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(p3434) !== false) {
      var if_res2311 = M0.__rjs_quoted__.path_convention_type(p3434);
    } else {
      var if_res2311 = M0.__rjs_quoted__.system_path_convention_type();
    }
    var conv3438 = if_res2311;
    var or_part3439 = M0.__rjs_quoted__.complete_path_p(p3434);
    if (or_part3439 !== false) {
      var if_res2312 = or_part3439;
    } else {
      var if_res2312 = M0.eq_p(M0.__rjs_quoted__.system_path_convention_type(), conv3438);
    }
    if (if_res2312 !== false) {
      var if_res2313 = M0.rvoid();
    } else {
      var if_res2313 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("path is not complete and not the platform's convention"), $rjs_core.UString.makeInternedImmutable("path"), p3434, $rjs_core.UString.makeInternedImmutable("platform convention type"), M0.__rjs_quoted__.system_path_convention_type());
    }
    if_res2313;
    var let_result2314 = M0.values();
    if (M0.__rjs_quoted__.path_for_some_system_p(root3435) !== false) {
      var if_res2315 = M0.__rjs_quoted__.path_convention_type(root3435);
    } else {
      var if_res2315 = M0.__rjs_quoted__.system_path_convention_type();
    }
    if (M0.eq_p(if_res2315, conv3438) !== false) {
      var if_res2316 = M0.rvoid();
    } else {
      var if_res2316 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("reroot-path"), $rjs_core.UString.makeInternedImmutable("given paths use different conventions"), $rjs_core.UString.makeInternedImmutable("path"), p3434, $rjs_core.UString.makeInternedImmutable("root path"), root3435);
    }
    if_res2316;
    var let_result2317 = M0.values();
    if (M0.__rjs_quoted__.complete_path_p(p3434) !== false) {
      var if_res2318 = p3434;
    } else {
      var if_res2318 = M0.__rjs_quoted__.path__gt_complete_path(p3434);
    }
    var c_p3440 = normal_case_path(M0.__rjs_quoted__.cleanse_path(if_res2318));
    var bstr3441 = M0.__rjs_quoted__.path__gt_bytes(c_p3440);
    if (M0.eq_p(conv3438, $rjs_core.Symbol.make("unix")) !== false) {
      if (M0.bytes_eq__p(bstr3441, $rjs_core.Bytes.fromIntArray([47])) !== false) {
        if (M0.__rjs_quoted__.path_for_some_system_p(root3435) !== false) {
          var if_res2319 = root3435;
        } else {
          var if_res2319 = M0.__rjs_quoted__.string__gt_path(root3435);
        }
        var if_res2320 = if_res2319;
      } else {
        var if_res2320 = M0.__rjs_quoted__.build_path(root3435, M0.__rjs_quoted__.bytes__gt_path(M0.__rjs_quoted__.subbytes(M0.__rjs_quoted__.path__gt_bytes(c_p3440), 1), conv3438));
      }
      var if_res2327 = if_res2320;
    } else {
      if (M0.eq_p(conv3438, $rjs_core.Symbol.make("windows")) !== false) {
        if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\[a-z]:/", bstr3441) !== false) {
          var if_res2325 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3441, 4, 5), $rjs_core.Bytes.fromIntArray([92]), M0.__rjs_quoted__.subbytes(bstr3441, 6));
        } else {
          if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3441) !== false) {
            var if_res2324 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3441, 4));
          } else {
            if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\[?]\\\\UNC\\\\/", bstr3441) !== false) {
              var if_res2323 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([92, 92, 63, 92, 82, 69, 76, 92]), M0.__rjs_quoted__.subbytes(bstr3441, 4));
            } else {
              if (M0.__rjs_quoted__.regexp_match_p("/^\\\\\\\\/", bstr3441) !== false) {
                var if_res2322 = M0.__rjs_quoted__.bytes_append($rjs_core.Bytes.fromIntArray([85, 78, 67, 92]), M0.__rjs_quoted__.subbytes(bstr3441, 2));
              } else {
                if (M0.__rjs_quoted__.regexp_match_p("/^[a-z]:/", bstr3441) !== false) {
                  var if_res2321 = M0.__rjs_quoted__.bytes_append(M0.__rjs_quoted__.subbytes(bstr3441, 0, 1), M0.__rjs_quoted__.subbytes(bstr3441, 2));
                } else {
                  var if_res2321 = M0.rvoid();
                }
                var if_res2322 = if_res2321;
              }
              var if_res2323 = if_res2322;
            }
            var if_res2324 = if_res2323;
          }
          var if_res2325 = if_res2324;
        }
        var if_res2326 = M0.__rjs_quoted__.build_path(root3435, M0.__rjs_quoted__.bytes__gt_path(if_res2325, conv3438));
      } else {
        var if_res2326 = M0.rvoid();
      }
      var if_res2327 = if_res2326;
    }
    return if_res2327;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get reroot_path() {
      return reroot_path;
    },
    get path_add_extension() {
      return path_add_extension;
    },
    get path_replace_extension() {
      return path_replace_extension;
    },
    get normal_case_path() {
      return normal_case_path;
    },
    get path_string_p() {
      return path_string_p;
    }
  };
})();
var $__runtime_47_utils_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "runtime/utils.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
var $__collects_47_racket_47_private_47_kw_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__runtime_47_unsafe_46_rkt_46_js__;
  var let_result1065 = M0.make_struct_type_property($rjs_core.Symbol.make("keyword-impersonator"));
  var prop_keyword_impersonator = let_result1065.getAt(0);
  var keyword_impersonator_p = let_result1065.getAt(1);
  var keyword_impersonator_ref = let_result1065.getAt(2);
  var keyword_procedure_impersonator_of = function(v1743) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_impersonator_p(v1743) !== false) {
      var if_res1066 = keyword_impersonator_ref(v1743)(v1743);
    } else {
      var if_res1066 = false;
    }
    return if_res1066;
  };
  var let_result1067 = M0.make_struct_type($rjs_core.Symbol.make("keyword-procedure"), false, 4, 0, false, M0.list(M0.cons(M0.prop_checked_procedure, true), M0.cons(M0.prop_impersonator_of, keyword_procedure_impersonator_of)), M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3));
  var struct_keyword_procedure = let_result1067.getAt(0);
  var mk_kw_proc = let_result1067.getAt(1);
  var keyword_procedure_p = let_result1067.getAt(2);
  var keyword_procedure_ref = let_result1067.getAt(3);
  var keyword_procedure_set_bang_ = let_result1067.getAt(4);
  var keyword_procedure_checker = M0.make_struct_field_accessor(keyword_procedure_ref, 0);
  var keyword_procedure_proc = M0.make_struct_field_accessor(keyword_procedure_ref, 1);
  var keyword_procedure_required = M0.make_struct_field_accessor(keyword_procedure_ref, 2);
  var keyword_procedure_allowed = M0.make_struct_field_accessor(keyword_procedure_ref, 3);
  var let_result1068 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_keyword_method = let_result1068.getAt(0);
  var make_km = let_result1068.getAt(1);
  var keyword_method_p = let_result1068.getAt(2);
  var km_ref = let_result1068.getAt(3);
  var km_set_bang_ = let_result1068.getAt(4);
  var generate_arity_string = function(proc1744) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var let_result1069 = procedure_keywords(proc1744);
    var req1745 = let_result1069.getAt(0);
    var allowed1746 = let_result1069.getAt(1);
    var a1747 = M0.procedure_arity(proc1744);
    var keywords_desc1748 = function(opt1750, req1751) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp1075 = $rjs_core.UString.makeInternedImmutable("~a with keyword~a~a");
      if (M0.null_p(M0.cdr(req1751)) !== false) {
        var if_res1074 = M0.format($rjs_core.UString.makeInternedImmutable("an ~aargument"), opt1750);
      } else {
        var if_res1074 = M0.format($rjs_core.UString.makeInternedImmutable("~aarguments"), opt1750);
      }
      if (M0.null_p(M0.cdr(req1751)) !== false) {
        var if_res1073 = $rjs_core.UString.makeInternedImmutable("");
      } else {
        var if_res1073 = $rjs_core.UString.makeInternedImmutable("s");
      }
      var tmp1752 = M0.length(req1751);
      if (M0.equal_p(tmp1752, 1) !== false) {
        var if_res1072 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a"), M0.car(req1751));
      } else {
        if (M0.equal_p(tmp1752, 2) !== false) {
          var if_res1071 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a and ~a"), M0.car(req1751), M0.cadr(req1751));
        } else {
          var loop1753 = function(req1754) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(M0.cdr(req1754)) !== false) {
              var if_res1070 = M0.format($rjs_core.UString.makeInternedImmutable(" and ~a"), M0.car(req1754));
            } else {
              var if_res1070 = M0.format($rjs_core.UString.makeInternedImmutable(" ~a,~a"), M0.car(req1754), loop1753(M0.cdr(req1754)));
            }
            return if_res1070;
          };
          var if_res1071 = loop1753(req1751);
        }
        var if_res1072 = if_res1071;
      }
      return M0.format(temp1075, if_res1074, if_res1073, if_res1072);
    };
    var method_adjust1749 = function(a1755) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part1756 = okm_p(proc1744);
      if (or_part1756 !== false) {
        var if_res1076 = or_part1756;
      } else {
        var if_res1076 = keyword_method_p(proc1744);
      }
      if (if_res1076 !== false) {
        if (M0.zero_p(a1755) !== false) {
          var if_res1077 = 0;
        } else {
          var if_res1077 = M0.sub1(a1755);
        }
        var if_res1078 = if_res1077;
      } else {
        var if_res1078 = a1755;
      }
      return if_res1078;
    };
    if (M0.number_p(a1747) !== false) {
      var a1757 = method_adjust1749(a1747);
      var if_res1085 = M0.format($rjs_core.UString.makeInternedImmutable("~a"), a1757);
    } else {
      if (M0.arity_at_least_p(a1747) !== false) {
        var a1758 = method_adjust1749(M0.arity_at_least_value(a1747));
        var if_res1084 = M0.format($rjs_core.UString.makeInternedImmutable("at least ~a"), a1758);
      } else {
        var if_res1084 = $rjs_core.UString.makeInternedImmutable("a different number");
      }
      var if_res1085 = if_res1084;
    }
    if (M0.null_p(req1745) !== false) {
      var if_res1083 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res1083 = M0.format($rjs_core.UString.makeInternedImmutable(" plus ~a"), keywords_desc1748($rjs_core.UString.makeInternedImmutable(""), req1745));
    }
    if (allowed1746 !== false) {
      var loop1760 = function(req1761, allowed1762) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(req1761) !== false) {
          var if_res1080 = allowed1762;
        } else {
          if (M0.eq_p(M0.car(req1761), M0.car(allowed1762)) !== false) {
            var if_res1079 = loop1760(M0.cdr(req1761), M0.cdr(allowed1762));
          } else {
            var if_res1079 = M0.cons(M0.car(allowed1762), loop1760(req1761, M0.cdr(allowed1762)));
          }
          var if_res1080 = if_res1079;
        }
        return if_res1080;
      };
      var others1759 = loop1760(req1745, allowed1746);
      if (M0.null_p(others1759) !== false) {
        var if_res1081 = $rjs_core.UString.makeInternedImmutable("");
      } else {
        var if_res1081 = M0.format($rjs_core.UString.makeInternedImmutable(" plus ~a"), keywords_desc1748($rjs_core.UString.makeInternedImmutable("optional "), others1759));
      }
      var if_res1082 = if_res1081;
    } else {
      var if_res1082 = $rjs_core.UString.makeInternedImmutable(" plus arbitrary keyword arguments");
    }
    return M0.string_append(if_res1085, if_res1083, if_res1082);
  };
  var let_result1086 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string)), M0.current_inspector(), 0);
  var struct_okp = let_result1086.getAt(0);
  var make_optional_keyword_procedure = let_result1086.getAt(1);
  var okp_p = let_result1086.getAt(2);
  var okp_ref = let_result1086.getAt(3);
  var okp_set_bang_ = let_result1086.getAt(4);
  var let_result1087 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 0, 0, false, M0.list(M0.cons(M0.prop_method_arity_error, true)));
  var struct_okm = let_result1087.getAt(0);
  var make_optional_keyword_method = let_result1087.getAt(1);
  var okm_p = let_result1087.getAt(2);
  var okm_ref = let_result1087.getAt(3);
  var okm_set_bang_ = let_result1087.getAt(4);
  var let_result1088 = M0.make_struct_type_property($rjs_core.Symbol.make("named-keyword-procedure"));
  var prop_named_keyword_procedure = let_result1088.getAt(0);
  var named_keyword_procedure_p = let_result1088.getAt(1);
  var keyword_procedure_name_plus_fail = let_result1088.getAt(2);
  var let_result1090 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), function(v1763, info_l1764) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(v1763) !== false) {
      var if_res1089 = M0.make_struct_field_accessor(M0.list_ref(info_l1764, 3), v1763);
    } else {
      var if_res1089 = false;
    }
    return if_res1089;
  });
  var prop_procedure_accessor = let_result1090.getAt(0);
  var procedure_accessor_p = let_result1090.getAt(1);
  var procedure_accessor_ref = let_result1090.getAt(2);
  var let_result1091 = M0.make_struct_type_property($rjs_core.Symbol.make("procedure"), false, M0.list(M0.cons(M0.prop_procedure, M0.values), M0.cons(prop_procedure_accessor, M0.values)), true);
  var new_prop_procedure = let_result1091.getAt(0);
  var new_procedure_p = let_result1091.getAt(1);
  var new_procedure_ref = let_result1091.getAt(2);
  var let_result1092 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1765) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kpp_ref(v1765, 0);
  })));
  var struct_keyword_procedure_impersonator = let_result1092.getAt(0);
  var make_kpp = let_result1092.getAt(1);
  var keyword_procedure_impersonator_p = let_result1092.getAt(2);
  var kpp_ref = let_result1092.getAt(3);
  var kpp_set_bang_ = let_result1092.getAt(4);
  var let_result1093 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1766) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return kmp_ref(v1766, 0);
  })));
  var struct_keyword_method_impersonator = let_result1093.getAt(0);
  var make_kmp = let_result1093.getAt(1);
  var keyword_method_impersonator_p = let_result1093.getAt(2);
  var kmp_ref = let_result1093.getAt(3);
  var kmp_set_bang_ = let_result1093.getAt(4);
  var let_result1094 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1767) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okpp_ref(v1767, 0);
  })));
  var struct_okpp = let_result1094.getAt(0);
  var make_optional_keyword_procedure_impersonator = let_result1094.getAt(1);
  var okpp_p = let_result1094.getAt(2);
  var okpp_ref = let_result1094.getAt(3);
  var okpp_set_bang_ = let_result1094.getAt(4);
  var let_result1095 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_okp, 1, 0, false, M0.list(M0.cons(prop_keyword_impersonator, function(v1768) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return okmp_ref(v1768, 0);
  })));
  var struct_okmp = let_result1095.getAt(0);
  var make_optional_keyword_method_impersonator = let_result1095.getAt(1);
  var okmp_p = let_result1095.getAt(2);
  var okmp_ref = let_result1095.getAt(3);
  var okmp_set_bang_ = let_result1095.getAt(4);
  var let_result1096 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_by_arity_error = let_result1096.getAt(0);
  var make_kp_by_ae = let_result1096.getAt(1);
  var kp_by_ae_p = let_result1096.getAt(2);
  var kp_by_ae_ref = let_result1096.getAt(3);
  var kp_by_ae_set_bang_ = let_result1096.getAt(4);
  var let_result1097 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_by_arity_error = let_result1097.getAt(0);
  var make_km_by_ae = let_result1097.getAt(1);
  var km_by_ae_p = let_result1097.getAt(2);
  var km_by_ae_ref = let_result1097.getAt(3);
  var km_by_ae_set_bang_ = let_result1097.getAt(4);
  var let_result1098 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_procedure_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_procedure_impersonator_by_arity_error = let_result1098.getAt(0);
  var make_kpi_by_ae = let_result1098.getAt(1);
  var kpi_by_ae_p = let_result1098.getAt(2);
  var kpi_by_ae_ref = let_result1098.getAt(3);
  var kpi_by_ae_set_bang_ = let_result1098.getAt(4);
  var let_result1099 = M0.make_struct_type($rjs_core.Symbol.make("procedure"), struct_keyword_method_impersonator, 0, 0, false, M0.list(M0.cons(M0.prop_arity_string, generate_arity_string), M0.cons(M0.prop_incomplete_arity, true)));
  var struct_keyword_method_impersonator_by_arity_error = let_result1099.getAt(0);
  var make_kmi_by_ae = let_result1099.getAt(1);
  var kmi_by_ae_p = let_result1099.getAt(2);
  var kmi_by_ae_ref = let_result1099.getAt(3);
  var kmi_by_ae_set_bang_ = let_result1099.getAt(4);
  var make_required = function(name1769, fail_proc1770, method_p1771, impersonator_p1772) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part1778 = name1769;
    if (or_part1778 !== false) {
      var if_res1103 = or_part1778;
    } else {
      var if_res1103 = $rjs_core.Symbol.make("unknown");
    }
    if (impersonator_p1772 !== false) {
      if (method_p1771 !== false) {
        var if_res1100 = struct_keyword_method_impersonator_by_arity_error;
      } else {
        var if_res1100 = struct_keyword_procedure_impersonator_by_arity_error;
      }
      var if_res1102 = if_res1100;
    } else {
      if (method_p1771 !== false) {
        var if_res1101 = struct_keyword_method_by_arity_error;
      } else {
        var if_res1101 = struct_keyword_procedure_by_arity_error;
      }
      var if_res1102 = if_res1101;
    }
    var let_result1104 = M0.make_struct_type(if_res1103, if_res1102, 0, 0, false, M0.list(M0.cons(prop_named_keyword_procedure, M0.cons(name1769, fail_proc1770))), M0.current_inspector(), fail_proc1770);
    var s_1773 = let_result1104.getAt(0);
    var mk1774 = let_result1104.getAt(1);
    var __p1775 = let_result1104.getAt(2);
    var __ref1776 = let_result1104.getAt(3);
    var __set_bang_1777 = let_result1104.getAt(4);
    return mk1774;
  };
  var cl1105 = function(proc1779) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_keyword_procedure(proc1779, $rjs_core.attachProcedureArity(function() {
      for (var args17801108 = [],
          $__1 = 0; $__1 < arguments.length; $__1++)
        args17801108[$__1] = arguments[$__1];
      var args1780 = $rjs_core.Pair.listFromArray(args17801108);
      return M0.apply(proc1779, M0.rnull, M0.rnull, args1780);
    }));
  };
  var cl1106 = function(proc1781, plain_proc1782) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return make_optional_keyword_procedure(make_keyword_checker(M0.rnull, false, M0.procedure_arity(proc1781)), proc1781, M0.rnull, false, plain_proc1782);
  };
  var make_keyword_procedure = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1107 = {
      '1': cl1105,
      '2': cl1106
    }[arguments.length];
    if (fixed_lam1107 !== undefined) {
      return fixed_lam1107.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var keyword_apply = $rjs_core.attachProcedureArity(function(proc1783, kws1784, kw_vals1785, normal_args1786) {
    for (var normal_argss17871109 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      normal_argss17871109[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var normal_argss1787 = $rjs_core.Pair.listFromArray(normal_argss17871109);
    var type_error1788 = function(what1789, which1790) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("keyword-apply"), what1789, which1790, proc1783, kws1784, kw_vals1785, normal_args1786, normal_argss1787);
    };
    if (M0.procedure_p(proc1783) !== false) {
      var if_res1110 = M0.rvoid();
    } else {
      var if_res1110 = type_error1788($rjs_core.UString.makeInternedImmutable("procedure?"), 0);
    }
    if_res1110;
    var loop1791 = function(ks1792) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(ks1792) !== false) {
        var if_res1117 = M0.rvoid();
      } else {
        var or_part1793 = M0.not(M0.pair_p(ks1792));
        if (or_part1793 !== false) {
          var if_res1111 = or_part1793;
        } else {
          var if_res1111 = M0.not(M0.__rjs_quoted__.keyword_p(M0.car(ks1792)));
        }
        if (if_res1111 !== false) {
          var if_res1116 = type_error1788($rjs_core.UString.makeInternedImmutable("(listof keyword?)"), 1);
        } else {
          if (M0.null_p(M0.cdr(ks1792)) !== false) {
            var if_res1115 = M0.rvoid();
          } else {
            var or_part1794 = M0.not(M0.pair_p(M0.cdr(ks1792)));
            if (or_part1794 !== false) {
              var if_res1112 = or_part1794;
            } else {
              var if_res1112 = M0.not(M0.__rjs_quoted__.keyword_p(M0.cadr(ks1792)));
            }
            if (if_res1112 !== false) {
              var if_res1114 = loop1791(M0.cdr(ks1792));
            } else {
              if (M0.__rjs_quoted__.keyword_lt__p(M0.car(ks1792), M0.cadr(ks1792)) !== false) {
                var if_res1113 = loop1791(M0.cdr(ks1792));
              } else {
                var if_res1113 = type_error1788($rjs_core.UString.makeInternedImmutable("(and/c (listof? keyword?) sorted? distinct?)"), 1);
              }
              var if_res1114 = if_res1113;
            }
            var if_res1115 = if_res1114;
          }
          var if_res1116 = if_res1115;
        }
        var if_res1117 = if_res1116;
      }
      return if_res1117;
    };
    loop1791(kws1784);
    if (M0.list_p(kw_vals1785) !== false) {
      var if_res1118 = M0.rvoid();
    } else {
      var if_res1118 = type_error1788($rjs_core.UString.makeInternedImmutable("list?"), 2);
    }
    if_res1118;
    if (M0.__eq_(M0.length(kws1784), M0.length(kw_vals1785)) !== false) {
      var if_res1119 = M0.rvoid();
    } else {
      var if_res1119 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.makeInternedImmutable("keyword list length does not match value list length"), $rjs_core.UString.makeInternedImmutable("keyword list length"), M0.length(kws1784), $rjs_core.UString.makeInternedImmutable("value list length"), M0.length(kw_vals1785), $rjs_core.UString.makeInternedImmutable("keyword list"), kws1784, $rjs_core.UString.makeInternedImmutable("value list"), kw_vals1785);
    }
    if_res1119;
    var loop1796 = function(normal_argss1797, pos1798) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(M0.cdr(normal_argss1797)) !== false) {
        var l1799 = M0.car(normal_argss1797);
        if (M0.list_p(l1799) !== false) {
          var if_res1120 = l1799;
        } else {
          var if_res1120 = type_error1788($rjs_core.UString.makeInternedImmutable("list?"), pos1798);
        }
        var if_res1121 = if_res1120;
      } else {
        var if_res1121 = M0.cons(M0.car(normal_argss1797), loop1796(M0.cdr(normal_argss1797), M0.add1(pos1798)));
      }
      return if_res1121;
    };
    var normal_args1795 = loop1796(M0.cons(normal_args1786, normal_argss1787), 3);
    if (M0.null_p(kws1784) !== false) {
      var if_res1122 = M0.apply(proc1783, normal_args1795);
    } else {
      var if_res1122 = M0.apply(keyword_procedure_extract_by_method(kws1784, 2 + M0.length(normal_args1795), proc1783, 0), kws1784, kw_vals1785, normal_args1795);
    }
    return if_res1122;
  });
  var procedure_keywords = function(p1800) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1800) !== false) {
      var if_res1127 = M0.values(keyword_procedure_required(p1800), keyword_procedure_allowed(p1800));
    } else {
      if (M0.procedure_p(p1800) !== false) {
        if (new_procedure_p(p1800) !== false) {
          var v1801 = new_procedure_ref(p1800);
          if (M0.procedure_p(v1801) !== false) {
            var if_res1124 = procedure_keywords(v1801);
          } else {
            var a1802 = procedure_accessor_ref(p1800);
            if (a1802 !== false) {
              var if_res1123 = procedure_keywords(a1802(p1800));
            } else {
              var if_res1123 = M0.values(M0.rnull, M0.rnull);
            }
            var if_res1124 = if_res1123;
          }
          var if_res1125 = if_res1124;
        } else {
          var if_res1125 = M0.values(M0.rnull, M0.rnull);
        }
        var if_res1126 = if_res1125;
      } else {
        var if_res1126 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-keywords"), $rjs_core.UString.makeInternedImmutable("procedure?"), p1800);
      }
      var if_res1127 = if_res1126;
    }
    return if_res1127;
  };
  var missing_kw = $rjs_core.attachProcedureArity(function(proc1803) {
    for (var args18041128 = [],
        $__2 = 1; $__2 < arguments.length; $__2++)
      args18041128[$__2 - 1] = arguments[$__2];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var args1804 = $rjs_core.Pair.listFromArray(args18041128);
    return M0.apply(keyword_procedure_extract_by_method(M0.rnull, 0, proc1803, 0), M0.rnull, M0.rnull, args1804);
  });
  var check_kw_args = function(p1805, kws1806) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1807 = function(kws1808, required1809, allowed1810) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws1808) !== false) {
        if (M0.null_p(required1809) !== false) {
          var if_res1129 = M0.values(false, false);
        } else {
          var if_res1129 = M0.values(M0.car(required1809), false);
        }
        var if_res1138 = if_res1129;
      } else {
        if (M0.pair_p(required1809) !== false) {
          var if_res1130 = M0.eq_p(M0.car(required1809), M0.car(kws1808));
        } else {
          var if_res1130 = false;
        }
        if (if_res1130 !== false) {
          var temp1133 = M0.cdr(kws1808);
          var temp1132 = M0.cdr(required1809);
          if (allowed1810 !== false) {
            var if_res1131 = M0.cdr(allowed1810);
          } else {
            var if_res1131 = false;
          }
          var if_res1137 = loop1807(temp1133, temp1132, if_res1131);
        } else {
          if (M0.not(allowed1810) !== false) {
            var if_res1136 = loop1807(M0.cdr(kws1808), required1809, false);
          } else {
            if (M0.pair_p(allowed1810) !== false) {
              if (M0.eq_p(M0.car(allowed1810), M0.car(kws1808)) !== false) {
                var if_res1134 = loop1807(M0.cdr(kws1808), required1809, M0.cdr(allowed1810));
              } else {
                var if_res1134 = loop1807(kws1808, required1809, M0.cdr(allowed1810));
              }
              var if_res1135 = if_res1134;
            } else {
              var if_res1135 = M0.values(false, M0.car(kws1808));
            }
            var if_res1136 = if_res1135;
          }
          var if_res1137 = if_res1136;
        }
        var if_res1138 = if_res1137;
      }
      return if_res1138;
    };
    return loop1807(kws1806, keyword_procedure_required(p1805), keyword_procedure_allowed(p1805));
  };
  var make_keyword_checker = function(req_kws1811, allowed_kws1812, arity1813) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.not(allowed_kws1812) !== false) {
      if (M0.null_p(req_kws1811) !== false) {
        if (M0.integer_p(arity1813) !== false) {
          var if_res1143 = function(kws1814, a1815) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (true !== false) {
              var if_res1139 = M0.__eq_(a1815, arity1813);
            } else {
              var if_res1139 = false;
            }
            return if_res1139;
          };
        } else {
          if (M0.arity_at_least_p(arity1813) !== false) {
            var arity1816 = M0.arity_at_least_value(arity1813);
            var if_res1142 = function(kws1817, a1818) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1140 = M0.__gt__eq_(a1818, arity1816);
              } else {
                var if_res1140 = false;
              }
              return if_res1140;
            };
          } else {
            var if_res1142 = function(kws1819, a1820) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (true !== false) {
                var if_res1141 = arity_includes_p(arity1813, a1820);
              } else {
                var if_res1141 = false;
              }
              return if_res1141;
            };
          }
          var if_res1143 = if_res1142;
        }
        var if_res1149 = if_res1143;
      } else {
        if (M0.integer_p(arity1813) !== false) {
          var if_res1148 = function(kws1821, a1822) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (subset_p(req_kws1811, kws1821) !== false) {
              var if_res1144 = M0.__eq_(a1822, arity1813);
            } else {
              var if_res1144 = false;
            }
            return if_res1144;
          };
        } else {
          if (M0.arity_at_least_p(arity1813) !== false) {
            var arity1823 = M0.arity_at_least_value(arity1813);
            var if_res1147 = function(kws1824, a1825) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1811, kws1824) !== false) {
                var if_res1145 = M0.__gt__eq_(a1825, arity1823);
              } else {
                var if_res1145 = false;
              }
              return if_res1145;
            };
          } else {
            var if_res1147 = function(kws1826, a1827) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(req_kws1811, kws1826) !== false) {
                var if_res1146 = arity_includes_p(arity1813, a1827);
              } else {
                var if_res1146 = false;
              }
              return if_res1146;
            };
          }
          var if_res1148 = if_res1147;
        }
        var if_res1149 = if_res1148;
      }
      var if_res1182 = if_res1149;
    } else {
      if (M0.null_p(allowed_kws1812) !== false) {
        if (M0.integer_p(arity1813) !== false) {
          var if_res1154 = function(kws1828, a1829) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.null_p(kws1828) !== false) {
              var if_res1150 = M0.__eq_(a1829, arity1813);
            } else {
              var if_res1150 = false;
            }
            return if_res1150;
          };
        } else {
          if (M0.arity_at_least_p(arity1813) !== false) {
            var arity1830 = M0.arity_at_least_value(arity1813);
            var if_res1153 = function(kws1831, a1832) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1831) !== false) {
                var if_res1151 = M0.__gt__eq_(a1832, arity1830);
              } else {
                var if_res1151 = false;
              }
              return if_res1151;
            };
          } else {
            var if_res1153 = function(kws1833, a1834) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M0.null_p(kws1833) !== false) {
                var if_res1152 = arity_includes_p(arity1813, a1834);
              } else {
                var if_res1152 = false;
              }
              return if_res1152;
            };
          }
          var if_res1154 = if_res1153;
        }
        var if_res1181 = if_res1154;
      } else {
        if (M0.null_p(req_kws1811) !== false) {
          if (M0.integer_p(arity1813) !== false) {
            var if_res1159 = function(kws1835, a1836) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (subset_p(kws1835, allowed_kws1812) !== false) {
                var if_res1155 = M0.__eq_(a1836, arity1813);
              } else {
                var if_res1155 = false;
              }
              return if_res1155;
            };
          } else {
            if (M0.arity_at_least_p(arity1813) !== false) {
              var arity1837 = M0.arity_at_least_value(arity1813);
              var if_res1158 = function(kws1838, a1839) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1838, allowed_kws1812) !== false) {
                  var if_res1156 = M0.__gt__eq_(a1839, arity1837);
                } else {
                  var if_res1156 = false;
                }
                return if_res1156;
              };
            } else {
              var if_res1158 = function(kws1840, a1841) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subset_p(kws1840, allowed_kws1812) !== false) {
                  var if_res1157 = arity_includes_p(arity1813, a1841);
                } else {
                  var if_res1157 = false;
                }
                return if_res1157;
              };
            }
            var if_res1159 = if_res1158;
          }
          var if_res1180 = if_res1159;
        } else {
          if (M0.equal_p(req_kws1811, allowed_kws1812) !== false) {
            if (M0.integer_p(arity1813) !== false) {
              var if_res1173 = function(kws1842, a1843) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                var loop1844 = function(kws1845, req_kws1846) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.null_p(req_kws1846) !== false) {
                    var if_res1162 = M0.null_p(kws1845);
                  } else {
                    if (M0.null_p(kws1845) !== false) {
                      var if_res1161 = false;
                    } else {
                      if (M0.eq_p(M0.car(kws1845), M0.car(req_kws1846)) !== false) {
                        var if_res1160 = loop1844(M0.cdr(kws1845), M0.cdr(req_kws1846));
                      } else {
                        var if_res1160 = false;
                      }
                      var if_res1161 = if_res1160;
                    }
                    var if_res1162 = if_res1161;
                  }
                  return if_res1162;
                };
                if (loop1844(kws1842, req_kws1811) !== false) {
                  var if_res1163 = M0.__eq_(a1843, arity1813);
                } else {
                  var if_res1163 = false;
                }
                return if_res1163;
              };
            } else {
              if (M0.arity_at_least_p(arity1813) !== false) {
                var arity1847 = M0.arity_at_least_value(arity1813);
                var if_res1172 = function(kws1848, a1849) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1850 = function(kws1851, req_kws1852) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1852) !== false) {
                      var if_res1166 = M0.null_p(kws1851);
                    } else {
                      if (M0.null_p(kws1851) !== false) {
                        var if_res1165 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1851), M0.car(req_kws1852)) !== false) {
                          var if_res1164 = loop1850(M0.cdr(kws1851), M0.cdr(req_kws1852));
                        } else {
                          var if_res1164 = false;
                        }
                        var if_res1165 = if_res1164;
                      }
                      var if_res1166 = if_res1165;
                    }
                    return if_res1166;
                  };
                  if (loop1850(kws1848, req_kws1811) !== false) {
                    var if_res1167 = M0.__gt__eq_(a1849, arity1847);
                  } else {
                    var if_res1167 = false;
                  }
                  return if_res1167;
                };
              } else {
                var if_res1172 = function(kws1853, a1854) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var loop1855 = function(kws1856, req_kws1857) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    if (M0.null_p(req_kws1857) !== false) {
                      var if_res1170 = M0.null_p(kws1856);
                    } else {
                      if (M0.null_p(kws1856) !== false) {
                        var if_res1169 = false;
                      } else {
                        if (M0.eq_p(M0.car(kws1856), M0.car(req_kws1857)) !== false) {
                          var if_res1168 = loop1855(M0.cdr(kws1856), M0.cdr(req_kws1857));
                        } else {
                          var if_res1168 = false;
                        }
                        var if_res1169 = if_res1168;
                      }
                      var if_res1170 = if_res1169;
                    }
                    return if_res1170;
                  };
                  if (loop1855(kws1853, req_kws1811) !== false) {
                    var if_res1171 = arity_includes_p(arity1813, a1854);
                  } else {
                    var if_res1171 = false;
                  }
                  return if_res1171;
                };
              }
              var if_res1173 = if_res1172;
            }
            var if_res1179 = if_res1173;
          } else {
            if (M0.integer_p(arity1813) !== false) {
              var if_res1178 = function(kws1858, a1859) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (subsets_p(req_kws1811, kws1858, allowed_kws1812) !== false) {
                  var if_res1174 = M0.__eq_(a1859, arity1813);
                } else {
                  var if_res1174 = false;
                }
                return if_res1174;
              };
            } else {
              if (M0.arity_at_least_p(arity1813) !== false) {
                var arity1860 = M0.arity_at_least_value(arity1813);
                var if_res1177 = function(kws1861, a1862) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1811, kws1861, allowed_kws1812) !== false) {
                    var if_res1175 = M0.__gt__eq_(a1862, arity1860);
                  } else {
                    var if_res1175 = false;
                  }
                  return if_res1175;
                };
              } else {
                var if_res1177 = function(kws1863, a1864) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (subsets_p(req_kws1811, kws1863, allowed_kws1812) !== false) {
                    var if_res1176 = arity_includes_p(arity1813, a1864);
                  } else {
                    var if_res1176 = false;
                  }
                  return if_res1176;
                };
              }
              var if_res1178 = if_res1177;
            }
            var if_res1179 = if_res1178;
          }
          var if_res1180 = if_res1179;
        }
        var if_res1181 = if_res1180;
      }
      var if_res1182 = if_res1181;
    }
    return if_res1182;
  };
  var arity_includes_p = function(arity1865, a1866) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.integer_p(arity1865) !== false) {
      var if_res1184 = M0.__eq_(arity1865, a1866);
    } else {
      if (M0.arity_at_least_p(arity1865) !== false) {
        var if_res1183 = M0.__gt__eq_(a1866, M0.arity_at_least_value(a1866));
      } else {
        var if_res1183 = M0.ormap(function(ar1867) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return arity_includes_p(ar1867, a1866);
        }, arity1865);
      }
      var if_res1184 = if_res1183;
    }
    return if_res1184;
  };
  var subset_p = function(l11868, l21869) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11868) !== false) {
      var if_res1187 = true;
    } else {
      if (M0.null_p(l21869) !== false) {
        var if_res1186 = false;
      } else {
        if (M0.eq_p(M0.car(l11868), M0.car(l21869)) !== false) {
          var if_res1185 = subset_p(M0.cdr(l11868), M0.cdr(l21869));
        } else {
          var if_res1185 = subset_p(l11868, M0.cdr(l21869));
        }
        var if_res1186 = if_res1185;
      }
      var if_res1187 = if_res1186;
    }
    return if_res1187;
  };
  var subsets_p = function(l11870, l21871, l31872) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(l11870) !== false) {
      var if_res1192 = subset_p(l21871, l31872);
    } else {
      if (M0.null_p(l21871) !== false) {
        var if_res1191 = false;
      } else {
        if (M0.null_p(l31872) !== false) {
          var if_res1190 = false;
        } else {
          var v21873 = M0.car(l21871);
          if (M0.eq_p(M0.car(l11870), v21873) !== false) {
            var if_res1189 = subsets_p(M0.cdr(l11870), M0.cdr(l21871), M0.cdr(l31872));
          } else {
            if (M0.eq_p(v21873, M0.car(l31872)) !== false) {
              var if_res1188 = subsets_p(l11870, M0.cdr(l21871), M0.cdr(l31872));
            } else {
              var if_res1188 = subsets_p(l11870, l21871, M0.cdr(l31872));
            }
            var if_res1189 = if_res1188;
          }
          var if_res1190 = if_res1189;
        }
        var if_res1191 = if_res1190;
      }
      var if_res1192 = if_res1191;
    }
    return if_res1192;
  };
  var keyword_procedure_extract_by_method = function(kws1874, n1875, p1876, method_n1877) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(p1876) !== false) {
      var if_res1193 = keyword_procedure_checker(p1876)(kws1874, n1875);
    } else {
      var if_res1193 = false;
    }
    if (if_res1193 !== false) {
      var if_res1221 = keyword_procedure_proc(p1876);
    } else {
      if (M0.not(keyword_procedure_p(p1876)) !== false) {
        if (M0.procedure_p(p1876) !== false) {
          if (new_procedure_p(p1876) !== false) {
            var a1880 = procedure_accessor_ref(p1876);
            if (a1880 !== false) {
              var if_res1194 = a1880(p1876);
            } else {
              var if_res1194 = false;
            }
            var if_res1195 = if_res1194;
          } else {
            var if_res1195 = false;
          }
          var or_part1879 = if_res1195;
          if (or_part1879 !== false) {
            var if_res1198 = or_part1879;
          } else {
            var or_part1881 = M0.__rjs_quoted__.procedure_extract_target(p1876);
            if (or_part1881 !== false) {
              var if_res1197 = or_part1881;
            } else {
              if (new_procedure_p(p1876) !== false) {
                var if_res1196 = $rjs_core.Symbol.make("method");
              } else {
                var if_res1196 = false;
              }
              var if_res1197 = if_res1196;
            }
            var if_res1198 = if_res1197;
          }
          var if_res1199 = if_res1198;
        } else {
          var if_res1199 = false;
        }
        var if_res1200 = if_res1199;
      } else {
        var if_res1200 = false;
      }
      var p21878 = if_res1200;
      if (p21878 !== false) {
        if (M0.eq_p(p21878, $rjs_core.Symbol.make("method")) !== false) {
          var p31882 = keyword_procedure_extract_by_method(kws1874, M0.add1(n1875), new_procedure_ref(p1876), M0.add1(method_n1877));
          var if_res1202 = $rjs_core.attachProcedureArity(function(kws1883, kw_args1884) {
            for (var args18851201 = [],
                $__3 = 2; $__3 < arguments.length; $__3++)
              args18851201[$__3 - 2] = arguments[$__3];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var args1885 = $rjs_core.Pair.listFromArray(args18851201);
            return M0.apply(p31882, kws1883, kw_args1884, M0.cons(p1876, args1885));
          });
        } else {
          var if_res1202 = keyword_procedure_extract_by_method(kws1874, n1875, p21878, method_n1877);
        }
        var if_res1220 = if_res1202;
      } else {
        var if_res1220 = $rjs_core.attachProcedureArity(function(kws1886, kw_args1887) {
          for (var args18881203 = [],
              $__4 = 2; $__4 < arguments.length; $__4++)
            args18881203[$__4 - 2] = arguments[$__4];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var args1888 = $rjs_core.Pair.listFromArray(args18881203);
          if (keyword_procedure_p(p1876) !== false) {
            var if_res1204 = check_kw_args(p1876, kws1886);
          } else {
            var if_res1204 = M0.values(false, M0.car(kws1886));
          }
          var let_result1205 = if_res1204;
          var missing_kw1889 = let_result1205.getAt(0);
          var extra_kw1890 = let_result1205.getAt(1);
          var or_part1895 = keyword_method_p(p1876);
          if (or_part1895 !== false) {
            var if_res1206 = or_part1895;
          } else {
            var if_res1206 = okm_p(p1876);
          }
          if (if_res1206 !== false) {
            var if_res1207 = 1;
          } else {
            var if_res1207 = 0;
          }
          var method_n1894 = method_n1877 + if_res1207;
          if (M0.__gt__eq_(n1875, method_n1894) !== false) {
            var if_res1208 = n1875 - method_n1894;
          } else {
            var if_res1208 = n1875;
          }
          var n1891 = if_res1208;
          if (M0.null_p(args1888) !== false) {
            var if_res1209 = M0.null_p(kws1886);
          } else {
            var if_res1209 = false;
          }
          if (if_res1209 !== false) {
            var if_res1210 = $rjs_core.UString.makeInternedImmutable("");
          } else {
            var if_res1210 = M0.apply(M0.string_append, $rjs_core.UString.makeInternedImmutable("\n  arguments...:"), M0.append(M0.map(function(v1896) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.makeInternedImmutable("\n   ~e"), v1896);
            }, args1888), M0.map(function(kw1897, kw_arg1898) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.format($rjs_core.UString.makeInternedImmutable("\n   ~a ~e"), kw1897, kw_arg1898);
            }, kws1886, kw_args1887)));
          }
          var args_str1892 = if_res1210;
          var proc_name1893 = function(p1899) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (named_keyword_procedure_p(p1899) !== false) {
              var if_res1211 = M0.car(keyword_procedure_name_plus_fail(p1899));
            } else {
              var if_res1211 = false;
            }
            var or_part1900 = if_res1211;
            if (or_part1900 !== false) {
              var if_res1213 = or_part1900;
            } else {
              var or_part1901 = M0.__rjs_quoted__.object_name(p1899);
              if (or_part1901 !== false) {
                var if_res1212 = or_part1901;
              } else {
                var if_res1212 = p1899;
              }
              var if_res1213 = if_res1212;
            }
            return if_res1213;
          };
          if (extra_kw1890 !== false) {
            if (keyword_procedure_p(p1876) !== false) {
              var if_res1215 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: procedure does not expect an argument with given keyword\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a\n"), $rjs_core.UString.makeInternedImmutable("  given keyword: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1893(p1876), extra_kw1890, args_str1892);
            } else {
              if (M0.procedure_p(p1876) !== false) {
                var if_res1214 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: procedure does not accept keyword arguments\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1893(p1876), args_str1892);
              } else {
                var if_res1214 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: not a procedure;\n"), $rjs_core.UString.makeInternedImmutable(" expected a procedure that can be applied to arguments\n"), $rjs_core.UString.makeInternedImmutable("  given: ~e"), $rjs_core.UString.makeInternedImmutable("~a")), p1876, args_str1892);
              }
              var if_res1215 = if_res1214;
            }
            var if_res1219 = if_res1215;
          } else {
            if (missing_kw1889 !== false) {
              var if_res1218 = M0.format(M0.string_append($rjs_core.UString.makeInternedImmutable("application: required keyword argument not supplied\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a\n"), $rjs_core.UString.makeInternedImmutable("  required keyword: ~a"), $rjs_core.UString.makeInternedImmutable("~a")), proc_name1893(p1876), missing_kw1889, args_str1892);
            } else {
              var temp1217 = M0.string_append($rjs_core.UString.makeInternedImmutable("application: no case matching ~a non-keyword argument~a\n"), $rjs_core.UString.makeInternedImmutable("  procedure: ~a"), $rjs_core.UString.makeInternedImmutable("~a"));
              if (M0.__eq_(1, n1891 - 2) !== false) {
                var if_res1216 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1216 = $rjs_core.UString.makeInternedImmutable("s");
              }
              var if_res1218 = M0.format(temp1217, n1891 - 2, if_res1216, proc_name1893(p1876), args_str1892);
            }
            var if_res1219 = if_res1218;
          }
          return M0.raise(M0.__rjs_quoted__.exn_fail_contract(if_res1219, M0.current_continuation_marks()));
        });
      }
      var if_res1221 = if_res1220;
    }
    return if_res1221;
  };
  var keyword_procedure_extract = function(p1902, kws1903, n1904) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return keyword_procedure_extract_by_method(kws1903, n1904, p1902, 0);
  };
  var procedure_reduce_keyword_arity = function(proc1905, arity1906, req_kw1907, allowed_kw1908) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (okp_p(proc1905) !== false) {
      var if_res1222 = okp_ref(proc1905, 0);
    } else {
      var if_res1222 = proc1905;
    }
    var plain_proc1909 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1222, arity1906);
    var sorted_p1910 = function(kws1911) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1912 = function(kws1913) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(kws1913) !== false) {
          var if_res1225 = true;
        } else {
          if (M0.null_p(M0.cdr(kws1913)) !== false) {
            var if_res1224 = true;
          } else {
            if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws1913), M0.cadr(kws1913)) !== false) {
              var if_res1223 = loop1912(M0.cdr(kws1913));
            } else {
              var if_res1223 = false;
            }
            var if_res1224 = if_res1223;
          }
          var if_res1225 = if_res1224;
        }
        return if_res1225;
      };
      return loop1912(kws1911);
    };
    if (M0.list_p(req_kw1907) !== false) {
      if (M0.andmap(M0.__rjs_quoted__.keyword_p, req_kw1907) !== false) {
        var if_res1226 = sorted_p1910(req_kw1907);
      } else {
        var if_res1226 = false;
      }
      var if_res1227 = if_res1226;
    } else {
      var if_res1227 = false;
    }
    if (if_res1227 !== false) {
      var if_res1228 = M0.rvoid();
    } else {
      var if_res1228 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("(and/c (listof? keyword?) sorted? distinct?)"), 2, proc1905, arity1906, req_kw1907, allowed_kw1908);
    }
    if_res1228;
    if (allowed_kw1908 !== false) {
      if (M0.list_p(allowed_kw1908) !== false) {
        if (M0.andmap(M0.__rjs_quoted__.keyword_p, allowed_kw1908) !== false) {
          var if_res1229 = sorted_p1910(allowed_kw1908);
        } else {
          var if_res1229 = false;
        }
        var if_res1230 = if_res1229;
      } else {
        var if_res1230 = false;
      }
      if (if_res1230 !== false) {
        var if_res1231 = M0.rvoid();
      } else {
        var if_res1231 = M0.raise_argument_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("(or/c (and/c (listof? keyword?) sorted? distinct?) #f)"), 3, proc1905, arity1906, req_kw1907, allowed_kw1908);
      }
      if_res1231;
      if (subset_p(req_kw1907, allowed_kw1908) !== false) {
        var if_res1232 = M0.rvoid();
      } else {
        var if_res1232 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("allowed-keyword list does not include all required keywords"), $rjs_core.UString.makeInternedImmutable("allowed-keyword list"), allowed_kw1908, $rjs_core.UString.makeInternedImmutable("required keywords"), req_kw1907);
      }
      var if_res1233 = if_res1232;
    } else {
      var if_res1233 = M0.rvoid();
    }
    if_res1233;
    var let_result1234 = procedure_keywords(proc1905);
    var old_req1914 = let_result1234.getAt(0);
    var old_allowed1915 = let_result1234.getAt(1);
    if (subset_p(old_req1914, req_kw1907) !== false) {
      var if_res1235 = M0.rvoid();
    } else {
      var if_res1235 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot reduce required keyword set"), $rjs_core.UString.makeInternedImmutable("required keywords"), old_req1914, $rjs_core.UString.makeInternedImmutable("requested required keywords"), req_kw1907);
    }
    if_res1235;
    if (old_allowed1915 !== false) {
      if (subset_p(req_kw1907, old_allowed1915) !== false) {
        var if_res1236 = M0.rvoid();
      } else {
        var if_res1236 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot require keywords not in original allowed set"), $rjs_core.UString.makeInternedImmutable("original allowed keywords"), old_allowed1915, $rjs_core.UString.makeInternedImmutable("requested required keywords"), req_kw1907);
      }
      if_res1236;
      var or_part1916 = M0.not(allowed_kw1908);
      if (or_part1916 !== false) {
        var if_res1237 = or_part1916;
      } else {
        var if_res1237 = subset_p(allowed_kw1908, old_allowed1915);
      }
      if (if_res1237 !== false) {
        var if_res1238 = M0.rvoid();
      } else {
        var if_res1238 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-keyword-arity"), $rjs_core.UString.makeInternedImmutable("cannot allow keywords not in original allowed set"), $rjs_core.UString.makeInternedImmutable("original allowed keywords"), old_allowed1915, $rjs_core.UString.makeInternedImmutable("requested allowed keywords"), allowed_kw1908);
      }
      var if_res1239 = if_res1238;
    } else {
      var if_res1239 = M0.rvoid();
    }
    if_res1239;
    if (M0.null_p(allowed_kw1908) !== false) {
      var if_res1248 = plain_proc1909;
    } else {
      var inc_arity1917 = function(arity1918, delta1919) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var loop1920 = function(a1921) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.integer_p(a1921) !== false) {
            var if_res1241 = a1921 + delta1919;
          } else {
            if (M0.arity_at_least_p(a1921) !== false) {
              var if_res1240 = M0.arity_at_least(M0.arity_at_least_value(a1921) + delta1919);
            } else {
              var if_res1240 = M0.map(loop1920, a1921);
            }
            var if_res1241 = if_res1240;
          }
          return if_res1241;
        };
        return loop1920(arity1918);
      };
      var new_arity1922 = inc_arity1917(arity1906, 2);
      var kw_checker1923 = make_keyword_checker(req_kw1907, allowed_kw1908, new_arity1922);
      var proc1924 = normalize_proc(proc1905);
      var new_kw_proc1925 = M0.__rjs_quoted__.procedure_reduce_arity(keyword_procedure_proc(proc1924), new_arity1922);
      if (M0.null_p(req_kw1907) !== false) {
        if (okm_p(proc1924) !== false) {
          var if_res1242 = make_optional_keyword_method;
        } else {
          var if_res1242 = make_optional_keyword_procedure;
        }
        var if_res1247 = if_res1242(kw_checker1923, new_kw_proc1925, req_kw1907, allowed_kw1908, plain_proc1909);
      } else {
        if (named_keyword_procedure_p(proc1924) !== false) {
          var if_res1245 = M0.car(keyword_procedure_name_plus_fail(proc1924));
        } else {
          var if_res1245 = false;
        }
        var or_part1926 = if_res1245;
        if (or_part1926 !== false) {
          var if_res1246 = or_part1926;
        } else {
          var if_res1246 = M0.__rjs_quoted__.object_name(proc1924);
        }
        var temp1244 = M0.__rjs_quoted__.procedure_reduce_arity(missing_kw, inc_arity1917(arity1906, 1));
        var or_part1927 = okm_p(proc1924);
        if (or_part1927 !== false) {
          var if_res1243 = or_part1927;
        } else {
          var if_res1243 = keyword_method_p(proc1924);
        }
        var if_res1247 = make_required(if_res1246, temp1244, if_res1243, false)(kw_checker1923, new_kw_proc1925, req_kw1907, allowed_kw1908);
      }
      var if_res1248 = if_res1247;
    }
    return if_res1248;
  };
  var procedure_reduce_arity1928 = function(proc1929, arity1930) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc1929) !== false) {
      var let_result1249 = procedure_keywords(proc1929);
      var req1931 = let_result1249.getAt(0);
      var allows1932 = let_result1249.getAt(1);
      if (M0.pair_p(req1931) !== false) {
        var if_res1250 = M0.not(M0.null_p(arity1930));
      } else {
        var if_res1250 = false;
      }
      var if_res1251 = if_res1250;
    } else {
      var if_res1251 = false;
    }
    if (if_res1251 !== false) {
      var if_res1253 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("procedure-reduce-arity"), $rjs_core.UString.makeInternedImmutable("procedure has required keyword arguments"), $rjs_core.UString.makeInternedImmutable("procedure"), proc1929);
    } else {
      if (okm_p(proc1929) !== false) {
        var if_res1252 = M0.__rjs_quoted__.procedure__gt_method(proc1929);
      } else {
        var if_res1252 = proc1929;
      }
      var if_res1253 = M0.__rjs_quoted__.procedure_reduce_arity(if_res1252, arity1930);
    }
    return if_res1253;
  };
  var new_procedure_reduce_arity = procedure_reduce_arity1928;
  var procedure__gt_method1933 = function(proc1934) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proc1935 = normalize_proc(proc1934);
    if (keyword_procedure_p(proc1935) !== false) {
      if (okm_p(proc1935) !== false) {
        var if_res1256 = proc1935;
      } else {
        if (keyword_method_p(proc1935) !== false) {
          var if_res1255 = proc1935;
        } else {
          if (okp_p(proc1935) !== false) {
            var if_res1254 = make_optional_keyword_method(keyword_procedure_checker(proc1935), keyword_procedure_proc(proc1935), keyword_procedure_required(proc1935), keyword_procedure_allowed(proc1935), okp_ref(proc1935, 0));
          } else {
            var name_plus_fail1936 = keyword_procedure_name_plus_fail(proc1935);
            var mk1937 = make_required(M0.car(name_plus_fail1936), M0.cdr(name_plus_fail1936), true, false);
            var if_res1254 = mk1937(keyword_procedure_checker(proc1935), keyword_procedure_proc(proc1935), keyword_procedure_required(proc1935), keyword_procedure_allowed(proc1935));
          }
          var if_res1255 = if_res1254;
        }
        var if_res1256 = if_res1255;
      }
      var if_res1257 = if_res1256;
    } else {
      var if_res1257 = M0.__rjs_quoted__.procedure__gt_method(proc1935);
    }
    return if_res1257;
  };
  var new_procedure__gt_method = procedure__gt_method1933;
  var procedure_rename1938 = function(proc1939, name1940) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc1939) !== false) {
      var if_res1258 = M0.symbol_p(name1940);
    } else {
      var if_res1258 = false;
    }
    if (M0.not(if_res1258) !== false) {
      var if_res1261 = M0.__rjs_quoted__.procedure_rename(proc1939, name1940);
    } else {
      if (okp_p(proc1939) !== false) {
        if (okm_p(proc1939) !== false) {
          var if_res1259 = make_optional_keyword_method;
        } else {
          var if_res1259 = make_optional_keyword_procedure;
        }
        var if_res1260 = if_res1259(keyword_procedure_checker(proc1939), keyword_procedure_proc(proc1939), keyword_procedure_required(proc1939), keyword_procedure_allowed(proc1939), M0.__rjs_quoted__.procedure_rename(okp_ref(proc1939, 0), name1940));
      } else {
        var name_plus_fail1941 = keyword_procedure_name_plus_fail(proc1939);
        var mk1942 = make_required(name1940, M0.cdr(name_plus_fail1941), keyword_method_p(proc1939), false);
        var if_res1260 = mk1942(keyword_procedure_checker(proc1939), keyword_procedure_proc(proc1939), keyword_procedure_required(proc1939), keyword_procedure_allowed(proc1939));
      }
      var if_res1261 = if_res1260;
    }
    return if_res1261;
  };
  var new_procedure_rename = procedure_rename1938;
  var chaperone_procedure1943 = $rjs_core.attachProcedureArity(function(proc1944, wrap_proc1945) {
    for (var props19461262 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      props19461262[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1946 = $rjs_core.Pair.listFromArray(props19461262);
    return do_chaperone_procedure(false, false, M0.__rjs_quoted__.chaperone_procedure, $rjs_core.Symbol.make("chaperone-procedure"), proc1944, wrap_proc1945, props1946);
  });
  var new_chaperone_procedure = chaperone_procedure1943;
  var unsafe_chaperone_procedure1947 = $rjs_core.attachProcedureArity(function(proc1948, wrap_proc1949) {
    for (var props19501263 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      props19501263[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1950 = $rjs_core.Pair.listFromArray(props19501263);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_chaperone_procedure, $rjs_core.Symbol.make("unsafe-chaperone-procedure"), proc1948, wrap_proc1949, props1950);
  });
  var new_unsafe_chaperone_procedure = unsafe_chaperone_procedure1947;
  var impersonate_procedure1951 = $rjs_core.attachProcedureArity(function(proc1952, wrap_proc1953) {
    for (var props19541264 = [],
        $__5 = 2; $__5 < arguments.length; $__5++)
      props19541264[$__5 - 2] = arguments[$__5];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1954 = $rjs_core.Pair.listFromArray(props19541264);
    return do_chaperone_procedure(true, false, M0.__rjs_quoted__.impersonate_procedure, $rjs_core.Symbol.make("impersonate-procedure"), proc1952, wrap_proc1953, props1954);
  });
  var new_impersonate_procedure = impersonate_procedure1951;
  var unsafe_impersonate_procedure1955 = $rjs_core.attachProcedureArity(function(proc1956, wrap_proc1957) {
    for (var props19581265 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      props19581265[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1958 = $rjs_core.Pair.listFromArray(props19581265);
    return do_unsafe_chaperone_procedure(M1.__rjs_quoted__.unsafe_impersonate_procedure, $rjs_core.Symbol.make("unsafe-impersonate-procedure"), proc1956, wrap_proc1957, props1958);
  });
  var new_unsafe_impersonate_procedure = unsafe_impersonate_procedure1955;
  var chaperone_procedure_times_1959 = $rjs_core.attachProcedureArity(function(proc1960, wrap_proc1961) {
    for (var props19621266 = [],
        $__7 = 2; $__7 < arguments.length; $__7++)
      props19621266[$__7 - 2] = arguments[$__7];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1962 = $rjs_core.Pair.listFromArray(props19621266);
    return do_chaperone_procedure(false, true, M0.__rjs_quoted__.chaperone_procedure_times_, $rjs_core.Symbol.make("chaperone-procedure"), proc1960, wrap_proc1961, props1962);
  });
  var new_chaperone_procedure_times_ = chaperone_procedure_times_1959;
  var impersonate_procedure_times_1963 = $rjs_core.attachProcedureArity(function(proc1964, wrap_proc1965) {
    for (var props19661267 = [],
        $__8 = 2; $__8 < arguments.length; $__8++)
      props19661267[$__8 - 2] = arguments[$__8];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var props1966 = $rjs_core.Pair.listFromArray(props19661267);
    return do_chaperone_procedure(true, true, M0.__rjs_quoted__.impersonate_procedure_times_, $rjs_core.Symbol.make("impersonate-procedure"), proc1964, wrap_proc1965, props1966);
  });
  var new_impersonate_procedure_times_ = impersonate_procedure_times_1963;
  var do_chaperone_procedure = function(is_impersonator_p1967, self_arg_p1968, chaperone_procedure1969, name1970, proc1971, wrap_proc1972, props1973) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc1974 = normalize_proc(proc1971);
    var n_wrap_proc1975 = normalize_proc(wrap_proc1972);
    var or_part1976 = M0.not(keyword_procedure_p(n_proc1974));
    if (or_part1976 !== false) {
      var if_res1269 = or_part1976;
    } else {
      var or_part1977 = M0.not(M0.procedure_p(wrap_proc1972));
      if (or_part1977 !== false) {
        var if_res1268 = or_part1977;
      } else {
        var if_res1268 = bad_props_p(props1973);
      }
      var if_res1269 = if_res1268;
    }
    if (if_res1269 !== false) {
      var if_res1333 = M0.apply(chaperone_procedure1969, proc1971, wrap_proc1972, props1973);
    } else {
      chaperone_arity_match_checking(self_arg_p1968, name1970, proc1971, wrap_proc1972, props1973);
      var p1979 = keyword_procedure_proc(n_wrap_proc1975);
      if (self_arg_p1968 !== false) {
        var cl1270 = $rjs_core.attachProcedureArity(function(self_proc1980, kws1981, args1982) {
          for (var rest19831275 = [],
              $__9 = 3; $__9 < arguments.length; $__9++)
            rest19831275[$__9 - 3] = arguments[$__9];
          if (arguments.length < 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest1983 = $rjs_core.Pair.listFromArray(rest19831275);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p1979, kws1981, args1982, self_proc1980, rest1983);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results19841276 = [],
                $__10 = 0; $__10 < arguments.length; $__10++)
              results19841276[$__10] = arguments[$__10];
            var results1984 = $rjs_core.Pair.listFromArray(results19841276);
            var len1985 = M0.length(results1984);
            var alen1986 = M0.length(rest1983);
            if (M0.__lt_(len1985, alen1986 + 1) !== false) {
              var if_res1277 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.makeInternedImmutable("wrong number of results from wrapper procedure"), $rjs_core.UString.makeInternedImmutable("expected minimum number of results"), alen1986 + 1, $rjs_core.UString.makeInternedImmutable("received number of results"), len1985, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
            } else {
              var if_res1277 = M0.rvoid();
            }
            if_res1277;
            var num_extra1987 = len1985 - (alen1986 + 1);
            var new_args1988 = M0.list_ref(results1984, num_extra1987);
            if (M0.list_p(new_args1988) !== false) {
              var if_res1278 = M0.__eq_(M0.length(new_args1988), M0.length(args1982));
            } else {
              var if_res1278 = false;
            }
            if (if_res1278 !== false) {
              var if_res1282 = M0.rvoid();
            } else {
              var temp1281 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1280 = $rjs_core.UString.makeInternedImmutable("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len1985, alen1986) !== false) {
                var if_res1279 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1279 = $rjs_core.UString.makeInternedImmutable(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1282 = M0.__rjs_quoted__.raise_arguments_error(temp1281, M0.format(temp1280, if_res1279), $rjs_core.UString.makeInternedImmutable("first result"), new_args1988, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
            }
            if_res1282;
            M0.for_each(function(kw1989, new_arg1990, arg1991) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1967 !== false) {
                var if_res1284 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg1990, arg1991) !== false) {
                  var if_res1283 = M0.rvoid();
                } else {
                  var if_res1283 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.makeInternedImmutable("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw1989), $rjs_core.UString.makeInternedImmutable("result"), new_arg1990, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
                }
                var if_res1284 = if_res1283;
              }
              return if_res1284;
            }, kws1981, new_args1988, args1982);
            var tmp1992 = num_extra1987;
            if (M0.equal_p(tmp1992, 0) !== false) {
              var if_res1287 = M0.apply(M0.values, kws1981, results1984);
            } else {
              if (M0.equal_p(tmp1992, 1) !== false) {
                var if_res1286 = M0.apply(M0.values, M0.car(results1984), kws1981, M0.cdr(results1984));
              } else {
                var loop1993 = function(results1994, c1995) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c1995) !== false) {
                    var if_res1285 = M0.cons(kws1981, results1994);
                  } else {
                    var if_res1285 = M0.cons(M0.car(results1994), loop1993(M0.cdr(results1994), M0.sub1(c1995)));
                  }
                  return if_res1285;
                };
                var if_res1286 = M0.apply(M0.values, loop1993(results1984, num_extra1987));
              }
              var if_res1287 = if_res1286;
            }
            return if_res1287;
          }));
        });
        var cl1271 = $rjs_core.attachProcedureArity(function() {
          for (var other19961288 = [],
              $__10 = 0; $__10 < arguments.length; $__10++)
            other19961288[$__10] = arguments[$__10];
          var other1996 = $rjs_core.Pair.listFromArray(other19961288);
          return M0.error($rjs_core.UString.makeInternedImmutable("shouldn't get here"));
        });
        var if_res1308 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1272 = {}[arguments.length];
          if (fixed_lam1272 !== undefined) {
            return fixed_lam1272.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1270.length, 1) !== false) {
              var if_res1274 = cl1270.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1273 = cl1271.apply(null, arguments);
              } else {
                var if_res1273 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
              }
              var if_res1274 = if_res1273;
            }
            return if_res1274;
          }
        }, [M0.make_arity_at_least(0)]);
      } else {
        var cl1289 = $rjs_core.attachProcedureArity(function(kws1997, args1998) {
          for (var rest19991294 = [],
              $__11 = 2; $__11 < arguments.length; $__11++)
            rest19991294[$__11 - 2] = arguments[$__11];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var rest1999 = $rjs_core.Pair.listFromArray(rest19991294);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(p1979, kws1997, args1998, rest1999);
          }, $rjs_core.attachProcedureArity(function() {
            for (var results20001295 = [],
                $__12 = 0; $__12 < arguments.length; $__12++)
              results20001295[$__12] = arguments[$__12];
            var results2000 = $rjs_core.Pair.listFromArray(results20001295);
            var len2001 = M0.length(results2000);
            var alen2002 = M0.length(rest1999);
            if (M0.__lt_(len2001, alen2002 + 1) !== false) {
              var if_res1296 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), $rjs_core.UString.makeInternedImmutable("wrong number of results from wrapper procedure"), $rjs_core.UString.makeInternedImmutable("expected minimum number of results"), alen2002 + 1, $rjs_core.UString.makeInternedImmutable("received number of results"), len2001, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
            } else {
              var if_res1296 = M0.rvoid();
            }
            if_res1296;
            var num_extra2003 = len2001 - (alen2002 + 1);
            var new_args2004 = M0.list_ref(results2000, num_extra2003);
            if (M0.list_p(new_args2004) !== false) {
              var if_res1297 = M0.__eq_(M0.length(new_args2004), M0.length(args1998));
            } else {
              var if_res1297 = false;
            }
            if (if_res1297 !== false) {
              var if_res1301 = M0.rvoid();
            } else {
              var temp1300 = $rjs_core.Symbol.make("keyword procedure chaperone");
              var temp1299 = $rjs_core.UString.makeInternedImmutable("expected a list of keyword-argument values as first result~a from wrapper procedure");
              if (M0.__eq_(len2001, alen2002) !== false) {
                var if_res1298 = $rjs_core.UString.makeInternedImmutable("");
              } else {
                var if_res1298 = $rjs_core.UString.makeInternedImmutable(" (after the result-wrapper procedure or mark specifications)");
              }
              var if_res1301 = M0.__rjs_quoted__.raise_arguments_error(temp1300, M0.format(temp1299, if_res1298), $rjs_core.UString.makeInternedImmutable("first result"), new_args2004, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
            }
            if_res1301;
            M0.for_each(function(kw2005, new_arg2006, arg2007) {
              if (arguments.length !== 3) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1967 !== false) {
                var if_res1303 = M0.rvoid();
              } else {
                if (M0.__rjs_quoted__.chaperone_of_p(new_arg2006, arg2007) !== false) {
                  var if_res1302 = M0.rvoid();
                } else {
                  var if_res1302 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("keyword procedure chaperone"), M0.format($rjs_core.UString.makeInternedImmutable("~a keyword result is not a chaperone of original argument from chaperoning procedure"), kw2005), $rjs_core.UString.makeInternedImmutable("result"), new_arg2006, $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc1972);
                }
                var if_res1303 = if_res1302;
              }
              return if_res1303;
            }, kws1997, new_args2004, args1998);
            var tmp2008 = num_extra2003;
            if (M0.equal_p(tmp2008, 0) !== false) {
              var if_res1306 = M0.apply(M0.values, kws1997, results2000);
            } else {
              if (M0.equal_p(tmp2008, 1) !== false) {
                var if_res1305 = M0.apply(M0.values, M0.car(results2000), kws1997, M0.cdr(results2000));
              } else {
                var loop2009 = function(results2010, c2011) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  if (M0.zero_p(c2011) !== false) {
                    var if_res1304 = M0.cons(kws1997, results2010);
                  } else {
                    var if_res1304 = M0.cons(M0.car(results2010), loop2009(M0.cdr(results2010), M0.sub1(c2011)));
                  }
                  return if_res1304;
                };
                var if_res1305 = M0.apply(M0.values, loop2009(results2000, num_extra2003));
              }
              var if_res1306 = if_res1305;
            }
            return if_res1306;
          }));
        });
        var cl1290 = $rjs_core.attachProcedureArity(function() {
          for (var other20121307 = [],
              $__12 = 0; $__12 < arguments.length; $__12++)
            other20121307[$__12] = arguments[$__12];
          var other2012 = $rjs_core.Pair.listFromArray(other20121307);
          return M0.error($rjs_core.UString.makeInternedImmutable("shouldn't get here"));
        });
        var if_res1308 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1291 = {}[arguments.length];
          if (fixed_lam1291 !== undefined) {
            return fixed_lam1291.apply(null, arguments);
          } else {
            if (M0.__gt__eq_(cl1289.length, 1) !== false) {
              var if_res1293 = cl1289.apply(null, arguments);
            } else {
              if (true !== false) {
                var if_res1292 = cl1290.apply(null, arguments);
              } else {
                var if_res1292 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
              }
              var if_res1293 = if_res1292;
            }
            return if_res1293;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var kw_chaperone1978 = if_res1308;
      var wrap2015 = function(proc2016, n_proc2017) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.not(M0.eq_p(n_proc2017, proc2016)) !== false) {
          var if_res1309 = new_procedure_p(proc2016);
        } else {
          var if_res1309 = false;
        }
        if (if_res1309 !== false) {
          var v2018 = new_procedure_ref(proc2016);
          if (M0.exact_integer_p(v2018) !== false) {
            var acc2019 = procedure_accessor_ref(proc2016);
            var if_res1325 = M0.values(M0.__rjs_quoted__.chaperone_struct(proc2016, acc2019, function(self2020, sub_proc2021) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              var let_result1310 = wrap2015(sub_proc2021, normalize_proc(sub_proc2021));
              var f2022 = let_result1310.getAt(0);
              var acc2023 = let_result1310.getAt(1);
              return f2022;
            }), acc2019);
          } else {
            if (is_impersonator_p1967 !== false) {
              var if_res1324 = M0.__rjs_quoted__.impersonate_struct;
            } else {
              var if_res1324 = M0.__rjs_quoted__.chaperone_struct;
            }
            if (okp_p(n_proc2017) !== false) {
              var if_res1323 = chaperone_procedure1969(proc2016, wrap_proc1972);
            } else {
              var if_res1323 = proc2016;
            }
            var new_kw_proc2024 = if_res1324(if_res1323, new_procedure_ref, function(self2025, proc2026) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (is_impersonator_p1967 !== false) {
                var if_res1322 = new_impersonate_procedure;
              } else {
                var if_res1322 = new_chaperone_procedure;
              }
              if (self_arg_p1968 !== false) {
                var if_res1321 = $rjs_core.attachProcedureArity(function(proc_self2027, kws2028, kw_args2029, self2030) {
                  for (var args20311311 = [],
                      $__13 = 4; $__13 < arguments.length; $__13++)
                    args20311311[$__13 - 4] = arguments[$__13];
                  if (arguments.length < 4) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2031 = $rjs_core.Pair.listFromArray(args20311311);
                  var len2032 = M0.length(args2031);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone1978, proc_self2027, kws2028, kw_args2029, args2031);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20331312 = [],
                        $__14 = 0; $__14 < arguments.length; $__14++)
                      results20331312[$__14] = arguments[$__14];
                    var results2033 = $rjs_core.Pair.listFromArray(results20331312);
                    var r_len2034 = M0.length(results2033);
                    var list_take2035 = function(l2036, n2037) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2037) !== false) {
                        var if_res1313 = M0.rnull;
                      } else {
                        var if_res1313 = M0.cons(M0.car(l2036), list_take2035(M0.cdr(l2036), M0.sub1(n2037)));
                      }
                      return if_res1313;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList($rjs_core.Symbol.make("proc-self"))) !== false) {
                      var if_res1314 = M0.__eq_(r_len2034, 2 + len2032);
                    } else {
                      var if_res1314 = false;
                    }
                    if (if_res1314 !== false) {
                      var if_res1315 = M0.apply(M0.values, M0.cadr(results2033), self2030, M0.cddr(results2033));
                    } else {
                      var skip2038 = r_len2034 - len2032;
                      var if_res1315 = M0.apply(M0.values, M0.append(list_take2035(results2033, skip2038 - 2), M0.list(M0.list_ref(results2033, M0.sub1(skip2038)), self2030), M0.__rjs_quoted__.list_tail(results2033, skip2038)));
                    }
                    return if_res1315;
                  }));
                });
              } else {
                var if_res1321 = $rjs_core.attachProcedureArity(function(kws2039, kw_args2040, self2041) {
                  for (var args20421316 = [],
                      $__14 = 3; $__14 < arguments.length; $__14++)
                    args20421316[$__14 - 3] = arguments[$__14];
                  if (arguments.length < 3) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  var args2042 = $rjs_core.Pair.listFromArray(args20421316);
                  var len2043 = M0.length(args2042);
                  return M0.call_with_values(function() {
                    if (arguments.length !== 0) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M0.apply(kw_chaperone1978, kws2039, kw_args2040, args2042);
                  }, $rjs_core.attachProcedureArity(function() {
                    for (var results20441317 = [],
                        $__15 = 0; $__15 < arguments.length; $__15++)
                      results20441317[$__15] = arguments[$__15];
                    var results2044 = $rjs_core.Pair.listFromArray(results20441317);
                    var r_len2045 = M0.length(results2044);
                    var list_take2046 = function(l2047, n2048) {
                      if (arguments.length !== 2) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      if (M0.zero_p(n2048) !== false) {
                        var if_res1318 = M0.rnull;
                      } else {
                        var if_res1318 = M0.cons(M0.car(l2047), list_take2046(M0.cdr(l2047), M0.sub1(n2048)));
                      }
                      return if_res1318;
                    };
                    if (M0.null_p($rjs_core.Pair.makeList()) !== false) {
                      var if_res1319 = M0.__eq_(r_len2045, 2 + len2043);
                    } else {
                      var if_res1319 = false;
                    }
                    if (if_res1319 !== false) {
                      var if_res1320 = M0.apply(M0.values, M0.cadr(results2044), self2041, M0.cddr(results2044));
                    } else {
                      var skip2049 = r_len2045 - len2043;
                      var if_res1320 = M0.apply(M0.values, M0.append(list_take2046(results2044, skip2049 - 2), M0.list(M0.list_ref(results2044, M0.sub1(skip2049)), self2041), M0.__rjs_quoted__.list_tail(results2044, skip2049)));
                    }
                    return if_res1320;
                  }));
                });
              }
              return if_res1322(proc2026, make_keyword_procedure(if_res1321));
            });
            var if_res1325 = M0.values(new_kw_proc2024, new_procedure_ref);
          }
          var if_res1330 = if_res1325;
        } else {
          if (okp_p(n_proc2017) !== false) {
            if (is_impersonator_p1967 !== false) {
              if (okm_p(n_proc2017) !== false) {
                var if_res1326 = make_optional_keyword_method_impersonator;
              } else {
                var if_res1326 = make_optional_keyword_procedure_impersonator;
              }
              var if_res1327 = if_res1326(keyword_procedure_checker(n_proc2017), chaperone_procedure1969(keyword_procedure_proc(n_proc2017), kw_chaperone1978), keyword_procedure_required(n_proc2017), keyword_procedure_allowed(n_proc2017), chaperone_procedure1969(okp_ref(n_proc2017, 0), okp_ref(n_wrap_proc1975, 0)), n_proc2017);
            } else {
              var if_res1327 = M0.__rjs_quoted__.chaperone_struct(proc2016, keyword_procedure_proc, function(self2050, proc2051) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1969(proc2051, kw_chaperone1978);
              }, M0.make_struct_field_accessor(okp_ref, 0), function(self2052, proc2053) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1969(proc2053, okp_ref(n_wrap_proc1975, 0));
              });
            }
            var if_res1329 = M0.values(if_res1327, keyword_procedure_proc);
          } else {
            if (is_impersonator_p1967 !== false) {
              var name_plus_fail2054 = keyword_procedure_name_plus_fail(n_proc2017);
              var mk2055 = make_required(M0.car(name_plus_fail2054), M0.cdr(name_plus_fail2054), keyword_method_p(n_proc2017), true);
              var if_res1328 = mk2055(keyword_procedure_checker(n_proc2017), chaperone_procedure1969(keyword_procedure_proc(n_proc2017), kw_chaperone1978), keyword_procedure_required(n_proc2017), keyword_procedure_allowed(n_proc2017), n_proc2017);
            } else {
              var if_res1328 = M0.__rjs_quoted__.chaperone_struct(n_proc2017, keyword_procedure_proc, function(self2056, proc2057) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return chaperone_procedure1969(proc2057, kw_chaperone1978);
              });
            }
            var if_res1329 = M0.values(if_res1328, keyword_procedure_proc);
          }
          var if_res1330 = if_res1329;
        }
        return if_res1330;
      };
      var let_result1331 = wrap2015(proc1971, n_proc1974);
      var new_proc2013 = let_result1331.getAt(0);
      var chap_accessor2014 = let_result1331.getAt(1);
      if (M0.null_p(props1973) !== false) {
        var if_res1332 = new_proc2013;
      } else {
        var if_res1332 = M0.apply(M0.__rjs_quoted__.chaperone_struct, new_proc2013, chap_accessor2014, false, props1973);
      }
      var if_res1333 = if_res1332;
    }
    return if_res1333;
  };
  var do_unsafe_chaperone_procedure = function(unsafe_chaperone_procedure2058, name2059, proc2060, wrap_proc2061, props2062) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var n_proc2063 = normalize_proc(proc2060);
    var n_wrap_proc2064 = normalize_proc(wrap_proc2061);
    var or_part2065 = M0.not(keyword_procedure_p(n_proc2063));
    if (or_part2065 !== false) {
      var if_res1335 = or_part2065;
    } else {
      var or_part2066 = M0.not(M0.procedure_p(wrap_proc2061));
      if (or_part2066 !== false) {
        var if_res1334 = or_part2066;
      } else {
        var if_res1334 = bad_props_p(props2062);
      }
      var if_res1335 = if_res1334;
    }
    if (if_res1335 !== false) {
      var if_res1336 = M0.apply(unsafe_chaperone_procedure2058, proc2060, wrap_proc2061, props2062);
    } else {
      chaperone_arity_match_checking(false, name2059, proc2060, wrap_proc2061, props2062);
      var if_res1336 = M0.apply(unsafe_chaperone_procedure2058, proc2060, wrap_proc2061, props2062);
    }
    return if_res1336;
  };
  var bad_props_p = function(props2067) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2068 = function(props2069) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(props2069) !== false) {
        var if_res1339 = false;
      } else {
        if (M0.__rjs_quoted__.impersonator_property_p(M0.car(props2069)) !== false) {
          var props2070 = M0.cdr(props2069);
          var or_part2071 = M0.null_p(props2070);
          if (or_part2071 !== false) {
            var if_res1337 = or_part2071;
          } else {
            var if_res1337 = loop2068(M0.cdr(props2070));
          }
          var if_res1338 = if_res1337;
        } else {
          var if_res1338 = true;
        }
        var if_res1339 = if_res1338;
      }
      return if_res1339;
    };
    return loop2068(props2067);
  };
  var chaperone_arity_match_checking = function(self_arg_p2072, name2073, proc2074, wrap_proc2075, props2076) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a2077 = M0.procedure_arity(proc2074);
    var b2078 = M0.procedure_arity(wrap_proc2075);
    if (self_arg_p2072 !== false) {
      var if_res1340 = 1;
    } else {
      var if_res1340 = 0;
    }
    var d2079 = if_res1340;
    var let_result1341 = procedure_keywords(proc2074);
    var a_req2080 = let_result1341.getAt(0);
    var a_allow2081 = let_result1341.getAt(1);
    var let_result1342 = procedure_keywords(wrap_proc2075);
    var b_req2082 = let_result1342.getAt(0);
    var b_allow2083 = let_result1342.getAt(1);
    var includes_p2084 = function(a2085, b2086) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.number_p(b2086) !== false) {
        if (M0.number_p(a2085) !== false) {
          var if_res1344 = M0.__eq_(b2086, a2085 + d2079);
        } else {
          if (M0.arity_at_least_p(a2085) !== false) {
            var if_res1343 = M0.__gt__eq_(b2086, M0.arity_at_least_value(a2085) + d2079);
          } else {
            var if_res1343 = M0.ormap(function(a2087) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return includes_p2084(a2087, b2086);
            }, a2085);
          }
          var if_res1344 = if_res1343;
        }
        var if_res1348 = if_res1344;
      } else {
        if (M0.arity_at_least_p(b2086) !== false) {
          if (M0.number_p(a2085) !== false) {
            var if_res1346 = false;
          } else {
            if (M0.arity_at_least_p(a2085) !== false) {
              var if_res1345 = M0.__gt__eq_(M0.arity_at_least_value(b2086), M0.arity_at_least_value(a2085) + d2079);
            } else {
              var if_res1345 = M0.ormap(function(a2088) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return includes_p2084(b2086, a2088);
              }, a2085);
            }
            var if_res1346 = if_res1345;
          }
          var if_res1347 = if_res1346;
        } else {
          var if_res1347 = M0.andmap(function(b2089) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return includes_p2084(a2085, b2089);
          }, b2086);
        }
        var if_res1348 = if_res1347;
      }
      return if_res1348;
    };
    if (includes_p2084(b2078, a2077) !== false) {
      var if_res1349 = M0.rvoid();
    } else {
      var if_res1349 = M0.apply(M0.__rjs_quoted__.chaperone_procedure, proc2074, wrap_proc2075, props2076);
    }
    if_res1349;
    if (subset_p(b_req2082, a_req2080) !== false) {
      var if_res1350 = M0.rvoid();
    } else {
      var if_res1350 = M0.__rjs_quoted__.raise_arguments_error(name2073, $rjs_core.UString.makeInternedImmutable("wrapper procedure requires more keywords than original procedure"), $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc2075, $rjs_core.UString.makeInternedImmutable("original procedure"), proc2074);
    }
    if_res1350;
    var or_part2090 = M0.not(b_allow2083);
    if (or_part2090 !== false) {
      var if_res1352 = or_part2090;
    } else {
      if (a_allow2081 !== false) {
        var if_res1351 = subset_p(a_allow2081, b_allow2083);
      } else {
        var if_res1351 = false;
      }
      var if_res1352 = if_res1351;
    }
    if (if_res1352 !== false) {
      var if_res1353 = M0.rvoid();
    } else {
      var if_res1353 = M0.__rjs_quoted__.raise_arguments_error(name2073, $rjs_core.UString.makeInternedImmutable("wrapper procedure does not accept all keywords of original procedure"), $rjs_core.UString.makeInternedImmutable("wrapper procedure"), wrap_proc2075, $rjs_core.UString.makeInternedImmutable("original procedure"), proc2074);
    }
    if_res1353;
    return M0.rvoid();
  };
  var normalize_proc = function(proc2091) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (keyword_procedure_p(proc2091) !== false) {
      var if_res1361 = proc2091;
    } else {
      if (new_procedure_p(proc2091) !== false) {
        var let_result1354 = procedure_keywords(proc2091);
        var req_kws2092 = let_result1354.getAt(0);
        var allowed_kws2093 = let_result1354.getAt(1);
        if (M0.null_p(allowed_kws2093) !== false) {
          var if_res1359 = proc2091;
        } else {
          var if_res1359 = make_optional_keyword_procedure(function(given_kws2094, given_argc2095) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M0.procedure_arity_includes_p(proc2091, given_argc2095 - 2, true) !== false) {
              var or_part2096 = M0.not(allowed_kws2093);
              if (or_part2096 !== false) {
                var if_res1356 = or_part2096;
              } else {
                var if_res1356 = subset_p(given_kws2094, allowed_kws2093);
              }
              if (if_res1356 !== false) {
                var if_res1357 = subset_p(req_kws2092, given_kws2094);
              } else {
                var if_res1357 = false;
              }
              var if_res1358 = if_res1357;
            } else {
              var if_res1358 = false;
            }
            return if_res1358;
          }, $rjs_core.attachProcedureArity(function(kws2097, kw_args2098) {
            for (var vals20991355 = [],
                $__9 = 2; $__9 < arguments.length; $__9++)
              vals20991355[$__9 - 2] = arguments[$__9];
            if (arguments.length < 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var vals2099 = $rjs_core.Pair.listFromArray(vals20991355);
            return keyword_apply(proc2091, kws2097, kw_args2098, vals2099);
          }), req_kws2092, allowed_kws2093, proc2091);
        }
        var if_res1360 = if_res1359;
      } else {
        var if_res1360 = proc2091;
      }
      var if_res1361 = if_res1360;
    }
    return if_res1361;
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.keyword_procedure_extract = keyword_procedure_extract;
  __rjs_quoted__.struct_keyword_method_by_arity_error = struct_keyword_method_by_arity_error;
  __rjs_quoted__.make_optional_keyword_method = make_optional_keyword_method;
  __rjs_quoted__.prop_named_keyword_procedure = prop_named_keyword_procedure;
  __rjs_quoted__.struct_keyword_procedure_by_arity_error = struct_keyword_procedure_by_arity_error;
  __rjs_quoted__.subsets_p = subsets_p;
  __rjs_quoted__.struct_keyword_procedure = struct_keyword_procedure;
  __rjs_quoted__.subset_p = subset_p;
  __rjs_quoted__.missing_kw = missing_kw;
  __rjs_quoted__.make_optional_keyword_procedure = make_optional_keyword_procedure;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get new_impersonate_procedure_times_() {
      return new_impersonate_procedure_times_;
    },
    get new_chaperone_procedure_times_() {
      return new_chaperone_procedure_times_;
    },
    get new_impersonate_procedure() {
      return new_impersonate_procedure;
    },
    get new_chaperone_procedure() {
      return new_chaperone_procedure;
    },
    get new_procedure_rename() {
      return new_procedure_rename;
    },
    get new_procedure__gt_method() {
      return new_procedure__gt_method;
    },
    get new_prop_procedure() {
      return new_prop_procedure;
    },
    get procedure_reduce_keyword_arity() {
      return procedure_reduce_keyword_arity;
    },
    get new_procedure_reduce_arity() {
      return new_procedure_reduce_arity;
    },
    get procedure_keywords() {
      return procedure_keywords;
    },
    get keyword_apply() {
      return keyword_apply;
    },
    get make_keyword_procedure() {
      return make_keyword_procedure;
    }
  };
})();
var $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/pre-base.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M2 = $__runtime_47_utils_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var new_apply_proc = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2105, kw_args2106, proc2107, args2108) {
    for (var rest21091365 = [],
        $__1 = 4; $__1 < arguments.length; $__1++)
      rest21091365[$__1 - 4] = arguments[$__1];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2109 = $rjs_core.Pair.listFromArray(rest21091365);
    return M3.keyword_apply(proc2107, kws2105, kw_args2106, M0.apply(M0.list_times_, args2108, rest2109));
  }), M0.apply);
  var new_keyword_apply = M3.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2110, kw_args2111, proc2112, orig_kws2113, orig_kw_args2114, args2115) {
    for (var rest21161366 = [],
        $__2 = 6; $__2 < arguments.length; $__2++)
      rest21161366[$__2 - 6] = arguments[$__2];
    if (arguments.length < 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var rest2116 = $rjs_core.Pair.listFromArray(rest21161366);
    var loop2119 = function(kws2120, kw_args2121, kws22122, kw_args22123, swapped_p2124) {
      if (arguments.length !== 5) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(kws2120) !== false) {
        var if_res1371 = M0.values(kws22122, kw_args22123);
      } else {
        if (M0.null_p(kws22122) !== false) {
          var if_res1370 = M0.values(kws2120, kw_args2121);
        } else {
          if (M0.__rjs_quoted__.keyword_lt__p(M0.car(kws2120), M0.car(kws22122)) !== false) {
            var let_result1367 = loop2119(M0.cdr(kws2120), M0.cdr(kw_args2121), kws22122, kw_args22123, false);
            var res_kws2125 = let_result1367.getAt(0);
            var res_kw_args2126 = let_result1367.getAt(1);
            var if_res1369 = M0.values(M0.cons(M0.car(kws2120), res_kws2125), M0.cons(M0.car(kw_args2121), res_kw_args2126));
          } else {
            if (swapped_p2124 !== false) {
              var if_res1368 = M0.raise_mismatch_error($rjs_core.Symbol.make("keyword-apply"), $rjs_core.UString.makeInternedImmutable("keyword duplicated in list and direct keyword arguments: "), M0.car(kws2120));
            } else {
              var if_res1368 = loop2119(kws22122, kw_args22123, kws2120, kw_args2121, true);
            }
            var if_res1369 = if_res1368;
          }
          var if_res1370 = if_res1369;
        }
        var if_res1371 = if_res1370;
      }
      return if_res1371;
    };
    var let_result1372 = loop2119(kws2110, kw_args2111, orig_kws2113, orig_kw_args2114, false);
    var kws2117 = let_result1372.getAt(0);
    var kw_args2118 = let_result1372.getAt(1);
    return M3.keyword_apply(proc2112, kws2117, kw_args2118, M0.apply(M0.list_times_, args2115, rest2116));
  }), M3.keyword_apply);
  var double_flonum_p = function(x2127) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.__rjs_quoted__.flonum_p(x2127);
  };
  var cl1373 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random();
  };
  var cl1374 = function(x2129) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.random(x2129);
  };
  var cl1375 = function(x2130, y2131) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(y2131) !== false) {
      if (M0.exact_integer_p(x2130) !== false) {
        var if_res1378 = M0.rvoid();
      } else {
        var if_res1378 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, x2130, y2131);
      }
      if_res1378;
      if (M0.__lt_(x2130, y2131) !== false) {
        var if_res1379 = M0.rvoid();
      } else {
        var if_res1379 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.makeInternedImmutable("(>/c "), M0.number__gt_string(x2130), $rjs_core.UString.makeInternedImmutable(")")), 1, x2130, y2131);
      }
      if_res1379;
      var d2132 = y2131 - x2130;
      if (M0.__lt__eq_(d2132, 4294967087) !== false) {
        var if_res1380 = M0.rvoid();
      } else {
        var if_res1380 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("difference between arguments is greater than 4294967087"), $rjs_core.UString.makeInternedImmutable("min"), x2130, $rjs_core.UString.makeInternedImmutable("max"), y2131);
      }
      if_res1380;
      var if_res1385 = x2130 + M0.random(d2132);
    } else {
      if (M0.__rjs_quoted__.pseudo_random_generator_p(y2131) !== false) {
        if (M0.exact_integer_p(x2130) !== false) {
          var if_res1381 = M0.__lt__eq_(1, x2130, 4294967087);
        } else {
          var if_res1381 = false;
        }
        if (if_res1381 !== false) {
          var if_res1382 = M0.rvoid();
        } else {
          var if_res1382 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("(integer-in 1 4294967087)"), 0, x2130, y2131);
        }
        if_res1382;
        var if_res1384 = M0.random(x2130, y2131);
      } else {
        if (M0.exact_integer_p(x2130) !== false) {
          var if_res1383 = M0.rvoid();
        } else {
          var if_res1383 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, x2130, y2131);
        }
        if_res1383;
        var if_res1384 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("(or/c exact-integer? pseudo-random-generator?)"), 1, x2130, y2131);
      }
      var if_res1385 = if_res1384;
    }
    return if_res1385;
  };
  var cl1376 = function(min2133, max2134, prng2135) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_integer_p(min2133) !== false) {
      var if_res1386 = M0.rvoid();
    } else {
      var if_res1386 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 0, min2133, max2134, prng2135);
    }
    if_res1386;
    if (M0.exact_integer_p(max2134) !== false) {
      var if_res1387 = M0.rvoid();
    } else {
      var if_res1387 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("exact-integer?"), 1, min2133, max2134, prng2135);
    }
    if_res1387;
    if (M0.__lt_(min2133, max2134) !== false) {
      var if_res1388 = M0.rvoid();
    } else {
      var if_res1388 = M0.raise_argument_error($rjs_core.Symbol.make("random"), M0.string_append($rjs_core.UString.makeInternedImmutable("(>/c "), M0.number__gt_string(min2133), $rjs_core.UString.makeInternedImmutable(")")), 1, min2133, max2134, prng2135);
    }
    if_res1388;
    var d2136 = max2134 - min2133;
    if (M0.__lt__eq_(d2136, 4294967087) !== false) {
      var if_res1389 = M0.rvoid();
    } else {
      var if_res1389 = M0.__rjs_quoted__.raise_arguments_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("difference between first and second arguments is greater than 4294967087"), $rjs_core.UString.makeInternedImmutable("min"), min2133, $rjs_core.UString.makeInternedImmutable("max"), max2134, $rjs_core.UString.makeInternedImmutable("rand-gen"), prng2135);
    }
    if_res1389;
    if (M0.__rjs_quoted__.pseudo_random_generator_p(prng2135) !== false) {
      var if_res1390 = M0.rvoid();
    } else {
      var if_res1390 = M0.raise_argument_error($rjs_core.Symbol.make("random"), $rjs_core.UString.makeInternedImmutable("pseudo-random-generator?"), 2, min2133, max2134, prng2135);
    }
    if_res1390;
    return min2133 + M0.random(d2136, prng2135);
  };
  var random2128 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1377 = {
      '0': cl1373,
      '1': cl1374,
      '2': cl1375,
      '3': cl1376
    }[arguments.length];
    if (fixed_lam1377 !== undefined) {
      return fixed_lam1377.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1, 2, 3]);
  var __random = random2128;
  var core42138 = function(fail12139, fail22140, collection32141, new_rest2142) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collection2143 = collection32141;
    if (fail22140 !== false) {
      var if_res1391 = fail12139;
    } else {
      var if_res1391 = function(s2145) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.makeInternedImmutable("collection-path: "), s2145), M0.current_continuation_marks()));
      };
    }
    var fail2144 = if_res1391;
    var collections2146 = new_rest2142;
    return M2.collection_path(fail2144, collection2143, collections2146);
  };
  var unpack52147 = function(given_kws2148, given_args2149, collection32150, new_rest2151) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fail22152 = M0.pair_p(given_kws2148);
    if (fail22152 !== false) {
      var if_res1392 = M0.car(given_args2149);
    } else {
      var if_res1392 = M0.rvoid();
    }
    var fail12153 = if_res1392;
    return core42138(fail12153, fail22152, collection32150, new_rest2151);
  };
  var cl1398 = $rjs_core.attachProcedureArity(function(given_kws2158, given_args2159, collection2160) {
    for (var collections21611401 = [],
        $__3 = 3; $__3 < arguments.length; $__3++)
      collections21611401[$__3 - 3] = arguments[$__3];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2161 = $rjs_core.Pair.listFromArray(collections21611401);
    return unpack52147(given_kws2158, given_args2159, collection2160, collections2161);
  });
  var temp1402 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1399 = {}[arguments.length];
    if (fixed_lam1399 !== undefined) {
      return fixed_lam1399.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1398.length, 1) !== false) {
        var if_res1400 = cl1398.apply(null, arguments);
      } else {
        var if_res1400 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1400;
    }
  }, [M0.make_arity_at_least(3)]);
  var temp1397 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("fail"));
  var cl1393 = $rjs_core.attachProcedureArity(function(collection2163) {
    for (var collections21641396 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      collections21641396[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2164 = $rjs_core.Pair.listFromArray(collections21641396);
    return unpack52147(M0.rnull, M0.rnull, collection2163, collections2164);
  });
  var collection_path2162 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1394 = {}[arguments.length];
    if (fixed_lam1394 !== undefined) {
      return fixed_lam1394.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1393.length, 1) !== false) {
        var if_res1395 = cl1393.apply(null, arguments);
      } else {
        var if_res1395 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1395;
    }
  }, [M0.make_arity_at_least(1)]);
  var collection_path2137 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2154, given_argc2155) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2155, 3) !== false) {
      var l12156 = given_kws2154;
      if (M0.null_p(l12156) !== false) {
        var if_res1404 = l12156;
      } else {
        if (M0.eq_p(M0.car(l12156), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1403 = M0.cdr(l12156);
        } else {
          var if_res1403 = l12156;
        }
        var if_res1404 = if_res1403;
      }
      var l12157 = if_res1404;
      var if_res1405 = M0.null_p(l12157);
    } else {
      var if_res1405 = false;
    }
    return if_res1405;
  }, temp1402, M0.rnull, temp1397, collection_path2162);
  var new_collection_path = collection_path2137;
  var core122166 = function(check_compiled_p62167, check_compiled_p82168, fail72169, fail92170, file_name102171, collection112172, new_rest2173) {
    if (arguments.length !== 7) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var file_name2174 = file_name102171;
    var collection2175 = collection112172;
    if (check_compiled_p82168 !== false) {
      var if_res1407 = check_compiled_p62167;
    } else {
      if (M1.path_string_p(file_name2174) !== false) {
        var if_res1406 = M0.__rjs_quoted__.regexp_match_p("/.[.]rkt$/", file_name2174);
      } else {
        var if_res1406 = false;
      }
      var if_res1407 = if_res1406;
    }
    var check_compiled_p2176 = if_res1407;
    if (fail92170 !== false) {
      var if_res1408 = fail72169;
    } else {
      var if_res1408 = function(s2178) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M0.raise(M0.__rjs_quoted__.kernel_exn_fail_filesystem(M0.string_append($rjs_core.UString.makeInternedImmutable("collection-file-path: "), s2178), M0.current_continuation_marks()));
      };
    }
    var fail2177 = if_res1408;
    var collections2179 = new_rest2173;
    return M2.collection_file_path(fail2177, check_compiled_p2176, file_name2174, collection2175, collections2179);
  };
  var unpack132180 = function(given_kws2181, given_args2182, file_name102183, collection112184, new_rest2185) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2181) !== false) {
      var if_res1409 = M0.eq_p($rjs_core.Keyword.make("check-compiled?"), M0.car(given_kws2181));
    } else {
      var if_res1409 = false;
    }
    var check_compiled_p82186 = if_res1409;
    if (check_compiled_p82186 !== false) {
      var if_res1410 = M0.car(given_args2182);
    } else {
      var if_res1410 = M0.rvoid();
    }
    var check_compiled_p62187 = if_res1410;
    if (check_compiled_p82186 !== false) {
      var if_res1411 = M0.cdr(given_kws2181);
    } else {
      var if_res1411 = given_kws2181;
    }
    var given_kws2188 = if_res1411;
    if (check_compiled_p82186 !== false) {
      var if_res1412 = M0.cdr(given_args2182);
    } else {
      var if_res1412 = given_args2182;
    }
    var given_args2189 = if_res1412;
    var fail92190 = M0.pair_p(given_kws2188);
    if (fail92190 !== false) {
      var if_res1413 = M0.car(given_args2189);
    } else {
      var if_res1413 = M0.rvoid();
    }
    var fail72191 = if_res1413;
    return core122166(check_compiled_p62187, check_compiled_p82186, fail72191, fail92190, file_name102183, collection112184, new_rest2185);
  };
  var cl1419 = $rjs_core.attachProcedureArity(function(given_kws2198, given_args2199, file_name2200, collection2201) {
    for (var collections22021422 = [],
        $__5 = 4; $__5 < arguments.length; $__5++)
      collections22021422[$__5 - 4] = arguments[$__5];
    if (arguments.length < 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2202 = $rjs_core.Pair.listFromArray(collections22021422);
    return unpack132180(given_kws2198, given_args2199, file_name2200, collection2201, collections2202);
  });
  var temp1423 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1420 = {}[arguments.length];
    if (fixed_lam1420 !== undefined) {
      return fixed_lam1420.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1419.length, 1) !== false) {
        var if_res1421 = cl1419.apply(null, arguments);
      } else {
        var if_res1421 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1421;
    }
  }, [M0.make_arity_at_least(4)]);
  var temp1418 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("check-compiled?"), $rjs_core.Keyword.make("fail"));
  var cl1414 = $rjs_core.attachProcedureArity(function(file_name2204, collection2205) {
    for (var collections22061417 = [],
        $__6 = 2; $__6 < arguments.length; $__6++)
      collections22061417[$__6 - 2] = arguments[$__6];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var collections2206 = $rjs_core.Pair.listFromArray(collections22061417);
    return unpack132180(M0.rnull, M0.rnull, file_name2204, collection2205, collections2206);
  });
  var collection_file_path2203 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1415 = {}[arguments.length];
    if (fixed_lam1415 !== undefined) {
      return fixed_lam1415.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1414.length, 1) !== false) {
        var if_res1416 = cl1414.apply(null, arguments);
      } else {
        var if_res1416 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1416;
    }
  }, [M0.make_arity_at_least(2)]);
  var collection_file_path2165 = M3.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2192, given_argc2193) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__gt__eq_(given_argc2193, 4) !== false) {
      var l12194 = given_kws2192;
      if (M0.null_p(l12194) !== false) {
        var if_res1425 = l12194;
      } else {
        if (M0.eq_p(M0.car(l12194), $rjs_core.Keyword.make("check-compiled?")) !== false) {
          var if_res1424 = M0.cdr(l12194);
        } else {
          var if_res1424 = l12194;
        }
        var if_res1425 = if_res1424;
      }
      var l12195 = if_res1425;
      var l12196 = l12195;
      if (M0.null_p(l12196) !== false) {
        var if_res1427 = l12196;
      } else {
        if (M0.eq_p(M0.car(l12196), $rjs_core.Keyword.make("fail")) !== false) {
          var if_res1426 = M0.cdr(l12196);
        } else {
          var if_res1426 = l12196;
        }
        var if_res1427 = if_res1426;
      }
      var l12197 = if_res1427;
      var if_res1428 = M0.null_p(l12197);
    } else {
      var if_res1428 = false;
    }
    return if_res1428;
  }, temp1423, M0.rnull, temp1418, collection_file_path2203);
  var new_collection_file_path = collection_file_path2165;
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get random() {
      return __random;
    },
    get double_flonum_p() {
      return double_flonum_p;
    },
    get keyword_apply() {
      return new_keyword_apply;
    },
    get collection_file_path() {
      return new_collection_file_path;
    },
    get collection_path() {
      return new_collection_path;
    },
    get new_apply_proc() {
      return new_apply_proc;
    }
  };
})();
var $__collects_47_racket_47_private_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_norm_45_arity_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M7 = $__runtime_47_unsafe_46_rkt_46_js__;
  var sort7 = function(cache_keys_p22207, cache_keys_p42208, key12209, key32210, lst52211, less_p62212) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lst2213 = lst52211;
    var less_p2214 = less_p62212;
    if (key32210 !== false) {
      var if_res1429 = key12209;
    } else {
      var if_res1429 = false;
    }
    var getkey2215 = if_res1429;
    if (cache_keys_p42208 !== false) {
      var if_res1430 = cache_keys_p22207;
    } else {
      var if_res1430 = false;
    }
    var cache_keys_p2216 = if_res1430;
    if (M0.list_p(lst2213) !== false) {
      var if_res1431 = M0.rvoid();
    } else {
      var if_res1431 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("list?"), lst2213);
    }
    if_res1431;
    if (M0.procedure_p(less_p2214) !== false) {
      var if_res1432 = M0.procedure_arity_includes_p(less_p2214, 2);
    } else {
      var if_res1432 = false;
    }
    if (if_res1432 !== false) {
      var if_res1433 = M0.rvoid();
    } else {
      var if_res1433 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), less_p2214);
    }
    if_res1433;
    if (getkey2215 !== false) {
      if (M0.procedure_p(getkey2215) !== false) {
        var if_res1434 = M0.procedure_arity_includes_p(getkey2215, 1);
      } else {
        var if_res1434 = false;
      }
      var if_res1435 = M0.not(if_res1434);
    } else {
      var if_res1435 = false;
    }
    if (if_res1435 !== false) {
      var if_res1436 = M0.raise_argument_error($rjs_core.Symbol.make("sort"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), getkey2215);
    } else {
      var if_res1436 = M0.rvoid();
    }
    if_res1436;
    if (getkey2215 !== false) {
      var if_res1437 = M4.sort(lst2213, less_p2214, getkey2215, cache_keys_p2216);
    } else {
      var if_res1437 = M4.sort(lst2213, less_p2214);
    }
    return if_res1437;
  };
  var unpack8 = function(given_kws2217, given_args2218, lst52219, less_p62220) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.pair_p(given_kws2217) !== false) {
      var if_res1438 = M0.eq_p($rjs_core.Keyword.make("cache-keys?"), M0.car(given_kws2217));
    } else {
      var if_res1438 = false;
    }
    var cache_keys_p42221 = if_res1438;
    if (cache_keys_p42221 !== false) {
      var if_res1439 = M0.car(given_args2218);
    } else {
      var if_res1439 = M0.rvoid();
    }
    var cache_keys_p22222 = if_res1439;
    if (cache_keys_p42221 !== false) {
      var if_res1440 = M0.cdr(given_kws2217);
    } else {
      var if_res1440 = given_kws2217;
    }
    var given_kws2223 = if_res1440;
    if (cache_keys_p42221 !== false) {
      var if_res1441 = M0.cdr(given_args2218);
    } else {
      var if_res1441 = given_args2218;
    }
    var given_args2224 = if_res1441;
    var key32225 = M0.pair_p(given_kws2223);
    if (key32225 !== false) {
      var if_res1442 = M0.car(given_args2224);
    } else {
      var if_res1442 = M0.rvoid();
    }
    var key12226 = if_res1442;
    return sort7(cache_keys_p22222, cache_keys_p42221, key12226, key32225, lst52219, less_p62220);
  };
  var cl1446 = function(given_kws2233, given_args2234, lst2235, less_p2236) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(given_kws2233, given_args2234, lst2235, less_p2236);
  };
  var temp1448 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1447 = {'4': cl1446}[arguments.length];
    if (fixed_lam1447 !== undefined) {
      return fixed_lam1447.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp1445 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("cache-keys?"), $rjs_core.Keyword.make("key"));
  var cl1443 = function(lst2238, less_p2239) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack8(M0.rnull, M0.rnull, lst2238, less_p2239);
  };
  var sort2237 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1444 = {'2': cl1443}[arguments.length];
    if (fixed_lam1444 !== undefined) {
      return fixed_lam1444.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var sort9 = M6.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws2227, given_argc2228) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.__eq_(given_argc2228, 4) !== false) {
      var l12229 = given_kws2227;
      if (M0.null_p(l12229) !== false) {
        var if_res1450 = l12229;
      } else {
        if (M0.eq_p(M0.car(l12229), $rjs_core.Keyword.make("cache-keys?")) !== false) {
          var if_res1449 = M0.cdr(l12229);
        } else {
          var if_res1449 = l12229;
        }
        var if_res1450 = if_res1449;
      }
      var l12230 = if_res1450;
      var l12231 = l12230;
      if (M0.null_p(l12231) !== false) {
        var if_res1452 = l12231;
      } else {
        if (M0.eq_p(M0.car(l12231), $rjs_core.Keyword.make("key")) !== false) {
          var if_res1451 = M0.cdr(l12231);
        } else {
          var if_res1451 = l12231;
        }
        var if_res1452 = if_res1451;
      }
      var l12232 = if_res1452;
      var if_res1453 = M0.null_p(l12232);
    } else {
      var if_res1453 = false;
    }
    return if_res1453;
  }, temp1448, M0.rnull, temp1445, sort2237);
  var do_remove = function(who2240, item2241, list2242, equal_p2243) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(list2242) !== false) {
      var if_res1454 = M0.rvoid();
    } else {
      var if_res1454 = M0.raise_argument_error(who2240, $rjs_core.UString.makeInternedImmutable("list?"), list2242);
    }
    if_res1454;
    var loop2244 = function(list2245) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(list2245) !== false) {
        var if_res1456 = M0.rnull;
      } else {
        if (equal_p2243(item2241, M0.car(list2245)) !== false) {
          var if_res1455 = M0.cdr(list2245);
        } else {
          var if_res1455 = M0.cons(M0.car(list2245), loop2244(M0.cdr(list2245)));
        }
        var if_res1456 = if_res1455;
      }
      return if_res1456;
    };
    return loop2244(list2242);
  };
  var cl1457 = function(item2246, list2247) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remove"), item2246, list2247, M0.equal_p);
  };
  var cl1458 = function(item2248, list2249, equal_p2250) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2250) !== false) {
      var if_res1460 = M0.procedure_arity_includes_p(equal_p2250, 2);
    } else {
      var if_res1460 = false;
    }
    if (if_res1460 !== false) {
      var if_res1461 = M0.rvoid();
    } else {
      var if_res1461 = M0.raise_argument_error($rjs_core.Symbol.make("remove"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), equal_p2250);
    }
    if_res1461;
    return do_remove($rjs_core.Symbol.make("remove"), item2248, list2249, equal_p2250);
  };
  var remove = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1459 = {
      '2': cl1457,
      '3': cl1458
    }[arguments.length];
    if (fixed_lam1459 !== undefined) {
      return fixed_lam1459.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq = function(item2251, list2252) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remq"), item2251, list2252, M0.eq_p);
  };
  var remv = function(item2253, list2254) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove($rjs_core.Symbol.make("remv"), item2253, list2254, M0.eqv_p);
  };
  var do_remove_times_ = function(who2255, l2256, r2257, equal_p2258) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.list_p(l2256) !== false) {
      var if_res1462 = M0.rvoid();
    } else {
      var if_res1462 = M0.raise_argument_error(who2255, $rjs_core.UString.makeInternedImmutable("list?"), l2256);
    }
    if_res1462;
    if (M0.list_p(r2257) !== false) {
      var if_res1463 = M0.rvoid();
    } else {
      var if_res1463 = M0.raise_argument_error(who2255, $rjs_core.UString.makeInternedImmutable("list?"), r2257);
    }
    if_res1463;
    var rloop2259 = function(r2260) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(r2260) !== false) {
        var if_res1466 = M0.rnull;
      } else {
        var first_r2261 = M0.car(r2260);
        var loop2262 = function(l_rest2263) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.null_p(l_rest2263) !== false) {
            var if_res1465 = M0.cons(first_r2261, rloop2259(M0.cdr(r2260)));
          } else {
            if (equal_p2258(M0.car(l_rest2263), first_r2261) !== false) {
              var if_res1464 = rloop2259(M0.cdr(r2260));
            } else {
              var if_res1464 = loop2262(M0.cdr(l_rest2263));
            }
            var if_res1465 = if_res1464;
          }
          return if_res1465;
        };
        var if_res1466 = loop2262(l2256);
      }
      return if_res1466;
    };
    return rloop2259(r2257);
  };
  var cl1467 = function(l2264, r2265) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2264, r2265, M0.equal_p);
  };
  var cl1468 = function(l2266, r2267, equal_p2268) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(equal_p2268) !== false) {
      var if_res1470 = M0.procedure_arity_includes_p(equal_p2268, 2);
    } else {
      var if_res1470 = false;
    }
    if (if_res1470 !== false) {
      var if_res1471 = M0.rvoid();
    } else {
      var if_res1471 = M0.raise_argument_error($rjs_core.Symbol.make("remove*"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), equal_p2268);
    }
    if_res1471;
    return do_remove_times_($rjs_core.Symbol.make("remove*"), l2266, r2267, equal_p2268);
  };
  var remove_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1469 = {
      '2': cl1467,
      '3': cl1468
    }[arguments.length];
    if (fixed_lam1469 !== undefined) {
      return fixed_lam1469.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var remq_times_ = function(l2269, r2270) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remq*"), l2269, r2270, M0.eq_p);
  };
  var remv_times_ = function(l2271, r2272) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return do_remove_times_($rjs_core.Symbol.make("remv*"), l2271, r2272, M0.eqv_p);
  };
  var memf = function(f2273, list2274) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2273) !== false) {
      var if_res1472 = M0.procedure_arity_includes_p(f2273, 1);
    } else {
      var if_res1472 = false;
    }
    if (if_res1472 !== false) {
      var if_res1473 = M0.rvoid();
    } else {
      var if_res1473 = M0.raise_argument_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.makeInternedImmutable("(any/c . -> any/c)"), f2273);
    }
    if_res1473;
    var loop2275 = function(l2276) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2276) !== false) {
        var if_res1476 = false;
      } else {
        if (M0.not(M0.pair_p(l2276)) !== false) {
          var if_res1475 = M0.raise_mismatch_error($rjs_core.Symbol.make("memf"), $rjs_core.UString.makeInternedImmutable("not a proper list: "), list2274);
        } else {
          if (f2273(M0.car(l2276)) !== false) {
            var if_res1474 = l2276;
          } else {
            var if_res1474 = loop2275(M0.cdr(l2276));
          }
          var if_res1475 = if_res1474;
        }
        var if_res1476 = if_res1475;
      }
      return if_res1476;
    };
    return loop2275(list2274);
  };
  var findf = function(f2277, list2278) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2277) !== false) {
      var if_res1477 = M0.procedure_arity_includes_p(f2277, 1);
    } else {
      var if_res1477 = false;
    }
    if (if_res1477 !== false) {
      var if_res1478 = M0.rvoid();
    } else {
      var if_res1478 = M0.raise_argument_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), f2277);
    }
    if_res1478;
    var loop2279 = function(l2280) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2280) !== false) {
        var if_res1481 = false;
      } else {
        if (M0.not(M0.pair_p(l2280)) !== false) {
          var if_res1480 = M0.raise_mismatch_error($rjs_core.Symbol.make("findf"), $rjs_core.UString.makeInternedImmutable("not a proper list: "), list2278);
        } else {
          var a2281 = M0.car(l2280);
          if (f2277(a2281) !== false) {
            var if_res1479 = a2281;
          } else {
            var if_res1479 = loop2279(M0.cdr(l2280));
          }
          var if_res1480 = if_res1479;
        }
        var if_res1481 = if_res1480;
      }
      return if_res1481;
    };
    return loop2279(list2278);
  };
  var bad_list = function(who2282, orig_l2283) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2282, $rjs_core.UString.makeInternedImmutable("not a proper list: "), orig_l2283);
  };
  var bad_item = function(who2284, a2285, orig_l2286) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.raise_mismatch_error(who2284, $rjs_core.UString.makeInternedImmutable("non-pair found in list: "), a2285, $rjs_core.UString.makeInternedImmutable(" in "), orig_l2286);
  };
  var assq2287 = function(x2291, l2292) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2293 = function(l2294, t2295) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2294) !== false) {
        var a2296 = M7.unsafe_car(l2294);
        if (M0.pair_p(a2296) !== false) {
          if (M0.eq_p(x2291, M7.unsafe_car(a2296)) !== false) {
            var if_res1487 = a2296;
          } else {
            var l2297 = M7.unsafe_cdr(l2294);
            if (M0.pair_p(l2297) !== false) {
              var a2298 = M7.unsafe_car(l2297);
              if (M0.pair_p(a2298) !== false) {
                if (M0.eq_p(x2291, M7.unsafe_car(a2298)) !== false) {
                  var if_res1483 = a2298;
                } else {
                  var t2299 = M7.unsafe_cdr(t2295);
                  var l2300 = M7.unsafe_cdr(l2297);
                  if (M0.eq_p(l2300, t2299) !== false) {
                    var if_res1482 = bad_list($rjs_core.Symbol.make("assq"), l2292);
                  } else {
                    var if_res1482 = loop2293(l2300, t2299);
                  }
                  var if_res1483 = if_res1482;
                }
                var if_res1484 = if_res1483;
              } else {
                var if_res1484 = bad_item($rjs_core.Symbol.make("assq"), a2298, l2292);
              }
              var if_res1486 = if_res1484;
            } else {
              if (M0.null_p(l2297) !== false) {
                var if_res1485 = false;
              } else {
                var if_res1485 = bad_list($rjs_core.Symbol.make("assq"), l2292);
              }
              var if_res1486 = if_res1485;
            }
            var if_res1487 = if_res1486;
          }
          var if_res1488 = if_res1487;
        } else {
          var if_res1488 = bad_item($rjs_core.Symbol.make("assq"), a2296, l2292);
        }
        var if_res1490 = if_res1488;
      } else {
        if (M0.null_p(l2294) !== false) {
          var if_res1489 = false;
        } else {
          var if_res1489 = bad_list($rjs_core.Symbol.make("assq"), l2292);
        }
        var if_res1490 = if_res1489;
      }
      return if_res1490;
    };
    return loop2293(l2292, l2292);
  };
  var assv2288 = function(x2301, l2302) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2303 = function(l2304, t2305) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2304) !== false) {
        var a2306 = M7.unsafe_car(l2304);
        if (M0.pair_p(a2306) !== false) {
          if (M0.eqv_p(x2301, M7.unsafe_car(a2306)) !== false) {
            var if_res1496 = a2306;
          } else {
            var l2307 = M7.unsafe_cdr(l2304);
            if (M0.pair_p(l2307) !== false) {
              var a2308 = M7.unsafe_car(l2307);
              if (M0.pair_p(a2308) !== false) {
                if (M0.eqv_p(x2301, M7.unsafe_car(a2308)) !== false) {
                  var if_res1492 = a2308;
                } else {
                  var t2309 = M7.unsafe_cdr(t2305);
                  var l2310 = M7.unsafe_cdr(l2307);
                  if (M0.eq_p(l2310, t2309) !== false) {
                    var if_res1491 = bad_list($rjs_core.Symbol.make("assv"), l2302);
                  } else {
                    var if_res1491 = loop2303(l2310, t2309);
                  }
                  var if_res1492 = if_res1491;
                }
                var if_res1493 = if_res1492;
              } else {
                var if_res1493 = bad_item($rjs_core.Symbol.make("assv"), a2308, l2302);
              }
              var if_res1495 = if_res1493;
            } else {
              if (M0.null_p(l2307) !== false) {
                var if_res1494 = false;
              } else {
                var if_res1494 = bad_list($rjs_core.Symbol.make("assv"), l2302);
              }
              var if_res1495 = if_res1494;
            }
            var if_res1496 = if_res1495;
          }
          var if_res1497 = if_res1496;
        } else {
          var if_res1497 = bad_item($rjs_core.Symbol.make("assv"), a2306, l2302);
        }
        var if_res1499 = if_res1497;
      } else {
        if (M0.null_p(l2304) !== false) {
          var if_res1498 = false;
        } else {
          var if_res1498 = bad_list($rjs_core.Symbol.make("assv"), l2302);
        }
        var if_res1499 = if_res1498;
      }
      return if_res1499;
    };
    return loop2303(l2302, l2302);
  };
  var cl1500 = function(x2311, l2312) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2313 = function(l2314, t2315) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2314) !== false) {
        var a2316 = M7.unsafe_car(l2314);
        if (M0.pair_p(a2316) !== false) {
          if (M0.equal_p(x2311, M7.unsafe_car(a2316)) !== false) {
            var if_res1508 = a2316;
          } else {
            var l2317 = M7.unsafe_cdr(l2314);
            if (M0.pair_p(l2317) !== false) {
              var a2318 = M7.unsafe_car(l2317);
              if (M0.pair_p(a2318) !== false) {
                if (M0.equal_p(x2311, M7.unsafe_car(a2318)) !== false) {
                  var if_res1504 = a2318;
                } else {
                  var t2319 = M7.unsafe_cdr(t2315);
                  var l2320 = M7.unsafe_cdr(l2317);
                  if (M0.eq_p(l2320, t2319) !== false) {
                    var if_res1503 = bad_list($rjs_core.Symbol.make("assoc"), l2312);
                  } else {
                    var if_res1503 = loop2313(l2320, t2319);
                  }
                  var if_res1504 = if_res1503;
                }
                var if_res1505 = if_res1504;
              } else {
                var if_res1505 = bad_item($rjs_core.Symbol.make("assoc"), a2318, l2312);
              }
              var if_res1507 = if_res1505;
            } else {
              if (M0.null_p(l2317) !== false) {
                var if_res1506 = false;
              } else {
                var if_res1506 = bad_list($rjs_core.Symbol.make("assoc"), l2312);
              }
              var if_res1507 = if_res1506;
            }
            var if_res1508 = if_res1507;
          }
          var if_res1509 = if_res1508;
        } else {
          var if_res1509 = bad_item($rjs_core.Symbol.make("assoc"), a2316, l2312);
        }
        var if_res1511 = if_res1509;
      } else {
        if (M0.null_p(l2314) !== false) {
          var if_res1510 = false;
        } else {
          var if_res1510 = bad_list($rjs_core.Symbol.make("assoc"), l2312);
        }
        var if_res1511 = if_res1510;
      }
      return if_res1511;
    };
    return loop2313(l2312, l2312);
  };
  var cl1501 = function(x2321, l2322, is_equal_p2323) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(is_equal_p2323) !== false) {
      var if_res1512 = M0.procedure_arity_includes_p(is_equal_p2323, 2);
    } else {
      var if_res1512 = false;
    }
    if (if_res1512 !== false) {
      var if_res1513 = M0.rvoid();
    } else {
      var if_res1513 = M0.raise_argument_error($rjs_core.Symbol.make("assoc"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), is_equal_p2323);
    }
    if_res1513;
    var loop2324 = function(l2325, t2326) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2325) !== false) {
        var a2327 = M7.unsafe_car(l2325);
        if (M0.pair_p(a2327) !== false) {
          if (is_equal_p2323(x2321, M7.unsafe_car(a2327)) !== false) {
            var if_res1519 = a2327;
          } else {
            var l2328 = M7.unsafe_cdr(l2325);
            if (M0.pair_p(l2328) !== false) {
              var a2329 = M7.unsafe_car(l2328);
              if (M0.pair_p(a2329) !== false) {
                if (is_equal_p2323(x2321, M7.unsafe_car(a2329)) !== false) {
                  var if_res1515 = a2329;
                } else {
                  var t2330 = M7.unsafe_cdr(t2326);
                  var l2331 = M7.unsafe_cdr(l2328);
                  if (M0.eq_p(l2331, t2330) !== false) {
                    var if_res1514 = bad_list($rjs_core.Symbol.make("assoc"), l2322);
                  } else {
                    var if_res1514 = loop2324(l2331, t2330);
                  }
                  var if_res1515 = if_res1514;
                }
                var if_res1516 = if_res1515;
              } else {
                var if_res1516 = bad_item($rjs_core.Symbol.make("assoc"), a2329, l2322);
              }
              var if_res1518 = if_res1516;
            } else {
              if (M0.null_p(l2328) !== false) {
                var if_res1517 = false;
              } else {
                var if_res1517 = bad_list($rjs_core.Symbol.make("assoc"), l2322);
              }
              var if_res1518 = if_res1517;
            }
            var if_res1519 = if_res1518;
          }
          var if_res1520 = if_res1519;
        } else {
          var if_res1520 = bad_item($rjs_core.Symbol.make("assoc"), a2327, l2322);
        }
        var if_res1522 = if_res1520;
      } else {
        if (M0.null_p(l2325) !== false) {
          var if_res1521 = false;
        } else {
          var if_res1521 = bad_list($rjs_core.Symbol.make("assoc"), l2322);
        }
        var if_res1522 = if_res1521;
      }
      return if_res1522;
    };
    return loop2324(l2322, l2322);
  };
  var assoc2289 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1502 = {
      '2': cl1500,
      '3': cl1501
    }[arguments.length];
    if (fixed_lam1502 !== undefined) {
      return fixed_lam1502.apply(null, arguments);
    } else {
      return M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var assf2290 = function(f2332, l2333) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2332) !== false) {
      var if_res1523 = M0.procedure_arity_includes_p(f2332, 1);
    } else {
      var if_res1523 = false;
    }
    if (if_res1523 !== false) {
      var if_res1524 = M0.rvoid();
    } else {
      var if_res1524 = M0.raise_argument_error($rjs_core.Symbol.make("assf"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), f2332);
    }
    if_res1524;
    var loop2334 = function(l2335, t2336) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(l2335) !== false) {
        var a2337 = M7.unsafe_car(l2335);
        if (M0.pair_p(a2337) !== false) {
          if ((function(_2338, a2339) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return f2332(a2339);
          })(false, M7.unsafe_car(a2337)) !== false) {
            var if_res1530 = a2337;
          } else {
            var l2340 = M7.unsafe_cdr(l2335);
            if (M0.pair_p(l2340) !== false) {
              var a2341 = M7.unsafe_car(l2340);
              if (M0.pair_p(a2341) !== false) {
                if ((function(_2342, a2343) {
                  if (arguments.length !== 2) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return f2332(a2343);
                })(false, M7.unsafe_car(a2341)) !== false) {
                  var if_res1526 = a2341;
                } else {
                  var t2344 = M7.unsafe_cdr(t2336);
                  var l2345 = M7.unsafe_cdr(l2340);
                  if (M0.eq_p(l2345, t2344) !== false) {
                    var if_res1525 = bad_list($rjs_core.Symbol.make("assf"), l2333);
                  } else {
                    var if_res1525 = loop2334(l2345, t2344);
                  }
                  var if_res1526 = if_res1525;
                }
                var if_res1527 = if_res1526;
              } else {
                var if_res1527 = bad_item($rjs_core.Symbol.make("assf"), a2341, l2333);
              }
              var if_res1529 = if_res1527;
            } else {
              if (M0.null_p(l2340) !== false) {
                var if_res1528 = false;
              } else {
                var if_res1528 = bad_list($rjs_core.Symbol.make("assf"), l2333);
              }
              var if_res1529 = if_res1528;
            }
            var if_res1530 = if_res1529;
          }
          var if_res1531 = if_res1530;
        } else {
          var if_res1531 = bad_item($rjs_core.Symbol.make("assf"), a2337, l2333);
        }
        var if_res1533 = if_res1531;
      } else {
        if (M0.null_p(l2335) !== false) {
          var if_res1532 = false;
        } else {
          var if_res1532 = bad_list($rjs_core.Symbol.make("assf"), l2333);
        }
        var if_res1533 = if_res1532;
      }
      return if_res1533;
    };
    return loop2334(l2333, l2333);
  };
  var let_result1534 = M0.values(assq2287, assv2288, assoc2289, assf2290);
  var assq = let_result1534.getAt(0);
  var assv = let_result1534.getAt(1);
  var assoc = let_result1534.getAt(2);
  var assf = let_result1534.getAt(3);
  var mapadd = function(f2346, l2347, last2348) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop2349 = function(l2350) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2350) !== false) {
        var if_res1535 = M0.list(last2348);
      } else {
        var if_res1535 = M0.cons(f2346(M0.car(l2350)), loop2349(M0.cdr(l2350)));
      }
      return if_res1535;
    };
    return loop2349(l2347);
  };
  var check_fold = function(name2351, proc2352, init2353, l2354, more2355) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(proc2352) !== false) {
      var if_res1536 = M0.rvoid();
    } else {
      var if_res1536 = M0.apply(M0.raise_argument_error, name2351, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, proc2352, init2353, l2354, more2355);
    }
    if_res1536;
    if (M0.list_p(l2354) !== false) {
      var if_res1537 = M0.rvoid();
    } else {
      var if_res1537 = M0.apply(M0.raise_argument_error, name2351, $rjs_core.UString.makeInternedImmutable("list?"), 2, proc2352, init2353, l2354, more2355);
    }
    if_res1537;
    if (M0.null_p(more2355) !== false) {
      if (M0.procedure_arity_includes_p(proc2352, 2) !== false) {
        var if_res1538 = M0.rvoid();
      } else {
        var if_res1538 = M0.raise_mismatch_error(name2351, $rjs_core.UString.makeInternedImmutable("given procedure does not accept 2 arguments: "), proc2352);
      }
      var if_res1543 = if_res1538;
    } else {
      var len2356 = M0.length(l2354);
      var loop2357 = function(more2358, n2359) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(more2358) !== false) {
          var if_res1541 = M0.rvoid();
        } else {
          if (M0.list_p(M0.car(more2358)) !== false) {
            var if_res1539 = M0.rvoid();
          } else {
            var if_res1539 = M0.apply(M0.raise_argument_error, name2351, $rjs_core.UString.makeInternedImmutable("list?"), n2359, proc2352, init2353, l2354, more2358);
          }
          if_res1539;
          if (M0.__eq_(len2356, M0.length(M0.car(more2358))) !== false) {
            var if_res1540 = M0.rvoid();
          } else {
            var if_res1540 = M0.raise_mismatch_error(name2351, $rjs_core.UString.makeInternedImmutable("given list does not have the same size as the first list: "), M0.car(more2358));
          }
          if_res1540;
          var if_res1541 = loop2357(M0.cdr(more2358), M0.add1(n2359));
        }
        return if_res1541;
      };
      loop2357(more2355, 3);
      if (M0.procedure_arity_includes_p(proc2352, 2 + M0.length(more2355)) !== false) {
        var if_res1542 = M0.rvoid();
      } else {
        var if_res1542 = M0.raise_mismatch_error(name2351, M0.format($rjs_core.UString.makeInternedImmutable("given procedure does not accept ~a arguments: "), 2 + M0.length(more2355)), proc2352);
      }
      var if_res1543 = if_res1542;
    }
    return if_res1543;
  };
  var cl1544 = function(f2360, init2361, l2362) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldl"), f2360, init2361, l2362, M0.rnull);
    var loop2363 = function(init2364, l2365) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2365) !== false) {
        var if_res1548 = init2364;
      } else {
        var if_res1548 = loop2363(f2360(M0.car(l2365), init2364), M0.cdr(l2365));
      }
      return if_res1548;
    };
    return loop2363(init2361, l2362);
  };
  var cl1545 = $rjs_core.attachProcedureArity(function(f2366, init2367, l2368) {
    for (var ls23691549 = [],
        $__1 = 3; $__1 < arguments.length; $__1++)
      ls23691549[$__1 - 3] = arguments[$__1];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2369 = $rjs_core.Pair.listFromArray(ls23691549);
    check_fold($rjs_core.Symbol.make("foldl"), f2366, init2367, l2368, ls2369);
    var loop2370 = function(init2371, ls2372) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2372)) !== false) {
        var if_res1550 = loop2370(M0.apply(f2366, mapadd(M0.car, ls2372, init2371)), M2.map(M0.cdr, ls2372));
      } else {
        var if_res1550 = init2371;
      }
      return if_res1550;
    };
    return loop2370(init2367, M0.cons(l2368, ls2369));
  });
  var foldl = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1546 = {'3': cl1544}[arguments.length];
    if (fixed_lam1546 !== undefined) {
      return fixed_lam1546.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1545.length, 1) !== false) {
        var if_res1547 = cl1545.apply(null, arguments);
      } else {
        var if_res1547 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1547;
    }
  }, [M0.make_arity_at_least(3)]);
  var cl1551 = function(f2373, init2374, l2375) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    check_fold($rjs_core.Symbol.make("foldr"), f2373, init2374, l2375, M0.rnull);
    var loop2376 = function(init2377, l2378) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2378) !== false) {
        var if_res1555 = init2377;
      } else {
        var if_res1555 = f2373(M0.car(l2378), loop2376(init2377, M0.cdr(l2378)));
      }
      return if_res1555;
    };
    return loop2376(init2374, l2375);
  };
  var cl1552 = $rjs_core.attachProcedureArity(function(f2379, init2380, l2381) {
    for (var ls23821556 = [],
        $__2 = 3; $__2 < arguments.length; $__2++)
      ls23821556[$__2 - 3] = arguments[$__2];
    if (arguments.length < 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls2382 = $rjs_core.Pair.listFromArray(ls23821556);
    check_fold($rjs_core.Symbol.make("foldr"), f2379, init2380, l2381, ls2382);
    var loop2383 = function(ls2384) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.pair_p(M0.car(ls2384)) !== false) {
        var if_res1557 = M0.apply(f2379, mapadd(M0.car, ls2384, loop2383(M2.map(M0.cdr, ls2384))));
      } else {
        var if_res1557 = init2380;
      }
      return if_res1557;
    };
    return loop2383(M0.cons(l2381, ls2382));
  });
  var foldr = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1553 = {'3': cl1551}[arguments.length];
    if (fixed_lam1553 !== undefined) {
      return fixed_lam1553.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1552.length, 1) !== false) {
        var if_res1554 = cl1552.apply(null, arguments);
      } else {
        var if_res1554 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1554;
    }
  }, [M0.make_arity_at_least(3)]);
  var filter = function(f2385, list2386) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2385) !== false) {
      var if_res1558 = M0.procedure_arity_includes_p(f2385, 1);
    } else {
      var if_res1558 = false;
    }
    if (if_res1558 !== false) {
      var if_res1559 = M0.rvoid();
    } else {
      var if_res1559 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), f2385);
    }
    if_res1559;
    if (M0.list_p(list2386) !== false) {
      var if_res1560 = M0.rvoid();
    } else {
      var if_res1560 = M0.raise_argument_error($rjs_core.Symbol.make("filter"), $rjs_core.UString.makeInternedImmutable("list?"), list2386);
    }
    if_res1560;
    var loop2387 = function(l2388, result2389) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(l2388) !== false) {
        var if_res1563 = M5.alt_reverse(result2389);
      } else {
        var temp1562 = M0.cdr(l2388);
        if (f2385(M0.car(l2388)) !== false) {
          var if_res1561 = M0.cons(M0.car(l2388), result2389);
        } else {
          var if_res1561 = result2389;
        }
        var if_res1563 = loop2387(temp1562, if_res1561);
      }
      return if_res1563;
    };
    return loop2387(list2386, M0.rnull);
  };
  var build_vector = function(n2390, fcn2391) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2390) !== false) {
      var if_res1564 = M0.rvoid();
    } else {
      var if_res1564 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2390);
    }
    if_res1564;
    if (M0.procedure_p(fcn2391) !== false) {
      var if_res1565 = M0.procedure_arity_includes_p(fcn2391, 1);
    } else {
      var if_res1565 = false;
    }
    if (if_res1565 !== false) {
      var if_res1566 = M0.rvoid();
    } else {
      var if_res1566 = M0.raise_argument_error($rjs_core.Symbol.make("build-vector"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . any/c)"), fcn2391);
    }
    if_res1566;
    var vec2392 = M0.make_vector(n2390);
    var loop2393 = function(i2394) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2394, n2390) !== false) {
        var if_res1567 = vec2392;
      } else {
        M0.vector_set_bang_(vec2392, i2394, fcn2391(i2394));
        var if_res1567 = loop2393(M0.add1(i2394));
      }
      return if_res1567;
    };
    return loop2393(0);
  };
  var build_string = function(n2395, fcn2396) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2395) !== false) {
      var if_res1568 = M0.rvoid();
    } else {
      var if_res1568 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2395);
    }
    if_res1568;
    if (M0.procedure_p(fcn2396) !== false) {
      var if_res1569 = M0.procedure_arity_includes_p(fcn2396, 1);
    } else {
      var if_res1569 = false;
    }
    if (if_res1569 !== false) {
      var if_res1570 = M0.rvoid();
    } else {
      var if_res1570 = M0.raise_argument_error($rjs_core.Symbol.make("build-string"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . char?)"), fcn2396);
    }
    if_res1570;
    var str2397 = M0.make_string(n2395);
    var loop2398 = function(i2399) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__eq_(i2399, n2395) !== false) {
        var if_res1571 = str2397;
      } else {
        M0.string_set_bang_(str2397, i2399, fcn2396(i2399));
        var if_res1571 = loop2398(M0.add1(i2399));
      }
      return if_res1571;
    };
    return loop2398(0);
  };
  var build_list = function(n2400, fcn2401) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.exact_nonnegative_integer_p(n2400) !== false) {
      var if_res1572 = M0.rvoid();
    } else {
      var if_res1572 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), n2400);
    }
    if_res1572;
    if (M0.procedure_p(fcn2401) !== false) {
      var if_res1573 = M0.procedure_arity_includes_p(fcn2401, 1);
    } else {
      var if_res1573 = false;
    }
    if (if_res1573 !== false) {
      var if_res1574 = M0.rvoid();
    } else {
      var if_res1574 = M0.raise_argument_error($rjs_core.Symbol.make("build-list"), $rjs_core.UString.makeInternedImmutable("(exact-nonnegative-integer? . -> . any/c)"), fcn2401);
    }
    if_res1574;
    var recr2402 = function(j2403, i2404) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.zero_p(i2404) !== false) {
        var if_res1575 = M0.rnull;
      } else {
        var if_res1575 = M0.cons(fcn2401(j2403), recr2402(M0.add1(j2403), M0.sub1(i2404)));
      }
      return if_res1575;
    };
    return recr2402(0, n2400);
  };
  var pipeline12405 = function(f2406, rfuns2407) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(x2408) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop2409 = function(x2410, f2411, rfuns2412) {
        if (arguments.length !== 3) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2412) !== false) {
          var if_res1576 = f2411(x2410);
        } else {
          var if_res1576 = loop2409(f2411(x2410), M0.car(rfuns2412), M0.cdr(rfuns2412));
        }
        return if_res1576;
      };
      return loop2409(x2408, f2406, rfuns2407);
    };
  };
  var pipeline_times_2413 = function(f2414, rfuns2415) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2414)) !== false) {
      var loop2416 = function(f2417, rfuns2418) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(rfuns2418) !== false) {
          var if_res1578 = f2417;
        } else {
          var fst2419 = M0.car(rfuns2418);
          if (M0.eqv_p(1, M1.norm_procedure_arity(fst2419)) !== false) {
            var if_res1577 = function(x2420) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return fst2419(f2417(x2420));
            };
          } else {
            var if_res1577 = function(x2421) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return M0.call_with_values(function() {
                if (arguments.length !== 0) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2417(x2421);
              }, fst2419);
            };
          }
          var if_res1578 = loop2416(if_res1577, M0.cdr(rfuns2418));
        }
        return if_res1578;
      };
      var if_res1585 = loop2416(f2414, rfuns2415);
    } else {
      var funs2422 = M5.alt_reverse(M0.cons(f2414, rfuns2415));
      var loop2423 = function(f2424, funs2425) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(funs2425) !== false) {
          var if_res1584 = f2424;
        } else {
          var fst2426 = M0.car(funs2425);
          if (M0.eqv_p(1, M1.norm_procedure_arity(f2424)) !== false) {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2426)) !== false) {
              var if_res1580 = function(x2427) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return f2424(fst2426(x2427));
              };
            } else {
              var if_res1580 = $rjs_core.attachProcedureArity(function() {
                for (var xs24281579 = [],
                    $__3 = 0; $__3 < arguments.length; $__3++)
                  xs24281579[$__3] = arguments[$__3];
                var xs2428 = $rjs_core.Pair.listFromArray(xs24281579);
                return f2424(M0.apply(fst2426, xs2428));
              });
            }
            var if_res1583 = if_res1580;
          } else {
            if (M0.eqv_p(1, M1.norm_procedure_arity(fst2426)) !== false) {
              var if_res1582 = function(x2429) {
                if (arguments.length !== 1) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return fst2426(x2429);
                }, f2424);
              };
            } else {
              var if_res1582 = $rjs_core.attachProcedureArity(function() {
                for (var xs24301581 = [],
                    $__4 = 0; $__4 < arguments.length; $__4++)
                  xs24301581[$__4] = arguments[$__4];
                var xs2430 = $rjs_core.Pair.listFromArray(xs24301581);
                return M0.call_with_values(function() {
                  if (arguments.length !== 0) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return M0.apply(fst2426, xs2430);
                }, f2424);
              });
            }
            var if_res1583 = if_res1582;
          }
          var if_res1584 = loop2423(if_res1583, M0.cdr(funs2425));
        }
        return if_res1584;
      };
      var if_res1585 = loop2423(M0.car(funs2422), M0.cdr(funs2422));
    }
    return if_res1585;
  };
  var simple_compose2432 = function(f2433, g2434) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var arity2435 = M1.norm_procedure_arity(g2434);
    var let_result1586 = M6.procedure_keywords(g2434);
    var required_kwds2436 = let_result1586.getAt(0);
    var allowed_kwds2437 = let_result1586.getAt(1);
    if (M0.eq_p(1, arity2435) !== false) {
      var if_res1593 = function(x2439) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2433(g2434(x2439));
      };
    } else {
      var cl1587 = function(x2440) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2433(g2434(x2440));
      };
      var cl1588 = function(x2441, y2442) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return f2433(g2434(x2441, y2442));
      };
      var cl1589 = $rjs_core.attachProcedureArity(function() {
        for (var args24431592 = [],
            $__3 = 0; $__3 < arguments.length; $__3++)
          args24431592[$__3] = arguments[$__3];
        var args2443 = $rjs_core.Pair.listFromArray(args24431592);
        return f2433(M0.apply(g2434, args2443));
      });
      var if_res1593 = $rjs_core.attachProcedureArity(function() {
        var fixed_lam1590 = {
          '1': cl1587,
          '2': cl1588
        }[arguments.length];
        if (fixed_lam1590 !== undefined) {
          return fixed_lam1590.apply(null, arguments);
        } else {
          if (true !== false) {
            var if_res1591 = cl1589.apply(null, arguments);
          } else {
            var if_res1591 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
          }
          return if_res1591;
        }
      }, [M0.make_arity_at_least(0)]);
    }
    var composed2438 = if_res1593;
    if (M0.null_p(allowed_kwds2437) !== false) {
      var if_res1595 = composed2438;
    } else {
      var if_res1595 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2444, kw_args2445) {
        for (var xs24461594 = [],
            $__4 = 2; $__4 < arguments.length; $__4++)
          xs24461594[$__4 - 2] = arguments[$__4];
        if (arguments.length < 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var xs2446 = $rjs_core.Pair.listFromArray(xs24461594);
        return f2433(M3.keyword_apply(g2434, kws2444, kw_args2445, xs2446));
      }), composed2438);
    }
    return if_res1595;
  };
  var cl1596 = function(f2447) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2447) !== false) {
      var if_res1602 = f2447;
    } else {
      var if_res1602 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2447);
    }
    return if_res1602;
  };
  var cl1597 = function(f2448, g2449) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2448) !== false) {
      var if_res1603 = M0.rvoid();
    } else {
      var if_res1603 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2448, g2449);
    }
    if_res1603;
    if (M0.procedure_p(g2449) !== false) {
      var if_res1604 = M0.rvoid();
    } else {
      var if_res1604 = M0.raise_argument_error($rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, f2448, g2449);
    }
    if_res1604;
    if (M0.procedure_arity_includes_p(f2448, 1) !== false) {
      var if_res1605 = M0.rvoid();
    } else {
      var if_res1605 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, f2448, $rjs_core.Pair.makeList());
    }
    if_res1605;
    var let_result1606 = M6.procedure_keywords(f2448);
    var req2450 = let_result1606.getAt(0);
    var _2451 = let_result1606.getAt(1);
    if (M0.null_p(req2450) !== false) {
      var if_res1607 = M0.rvoid();
    } else {
      var if_res1607 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), 0, f2448, $rjs_core.Pair.makeList());
    }
    if_res1607;
    return simple_compose2432(f2448, g2449);
  };
  var cl1598 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1599 = $rjs_core.attachProcedureArity(function(f02452) {
    for (var fs024531608 = [],
        $__3 = 1; $__3 < arguments.length; $__3++)
      fs024531608[$__3 - 1] = arguments[$__3];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02453 = $rjs_core.Pair.listFromArray(fs024531608);
    var loop2454 = function(f2455, fs2456, i2457, rfuns2458) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2455) !== false) {
        var if_res1609 = M0.rvoid();
      } else {
        var if_res1609 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure?"), i2457, f02452, fs02453);
      }
      if_res1609;
      if (M0.pair_p(fs2456) !== false) {
        if (M0.procedure_arity_includes_p(f2455, 1) !== false) {
          var if_res1610 = M0.rvoid();
        } else {
          var if_res1610 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), i2457, f02452, fs02453);
        }
        if_res1610;
        var let_result1611 = M6.procedure_keywords(f2455);
        var req2459 = let_result1611.getAt(0);
        var _2460 = let_result1611.getAt(1);
        if (M0.null_p(req2459) !== false) {
          var if_res1612 = M0.rvoid();
        } else {
          var if_res1612 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose1"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), i2457, f02452, fs02453);
        }
        if_res1612;
        var if_res1613 = loop2454(M0.car(fs2456), M0.cdr(fs2456), M0.add1(i2457), M0.cons(f2455, rfuns2458));
      } else {
        var if_res1613 = simple_compose2432(pipeline12405(M0.car(rfuns2458), M0.cdr(rfuns2458)), f2455);
      }
      return if_res1613;
    };
    return loop2454(f02452, fs02453, 0, $rjs_core.Pair.makeList());
  });
  var compose12431 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1600 = {
      '1': cl1596,
      '2': cl1597,
      '0': cl1598
    }[arguments.length];
    if (fixed_lam1600 !== undefined) {
      return fixed_lam1600.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1599.length, 1) !== false) {
        var if_res1601 = cl1599.apply(null, arguments);
      } else {
        var if_res1601 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1601;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var simple_compose2462 = function(f2463, g2464) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.eqv_p(1, M1.norm_procedure_arity(f2463)) !== false) {
      var arity2465 = M1.norm_procedure_arity(g2464);
      var let_result1614 = M6.procedure_keywords(g2464);
      var required_kwds2466 = let_result1614.getAt(0);
      var allowed_kwds2467 = let_result1614.getAt(1);
      if (M0.eq_p(1, arity2465) !== false) {
        var if_res1621 = function(x2469) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2463(g2464(x2469));
        };
      } else {
        var cl1615 = function(x2470) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2463(g2464(x2470));
        };
        var cl1616 = function(x2471, y2472) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return f2463(g2464(x2471, y2472));
        };
        var cl1617 = $rjs_core.attachProcedureArity(function() {
          for (var args24731620 = [],
              $__4 = 0; $__4 < arguments.length; $__4++)
            args24731620[$__4] = arguments[$__4];
          var args2473 = $rjs_core.Pair.listFromArray(args24731620);
          return f2463(M0.apply(g2464, args2473));
        });
        var if_res1621 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1618 = {
            '1': cl1615,
            '2': cl1616
          }[arguments.length];
          if (fixed_lam1618 !== undefined) {
            return fixed_lam1618.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1619 = cl1617.apply(null, arguments);
            } else {
              var if_res1619 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1619;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2468 = if_res1621;
      if (M0.null_p(allowed_kwds2467) !== false) {
        var if_res1623 = composed2468;
      } else {
        var if_res1623 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2474, kw_args2475) {
          for (var xs24761622 = [],
              $__5 = 2; $__5 < arguments.length; $__5++)
            xs24761622[$__5 - 2] = arguments[$__5];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2476 = $rjs_core.Pair.listFromArray(xs24761622);
          return f2463(M3.keyword_apply(g2464, kws2474, kw_args2475, xs2476));
        }), composed2468);
      }
      var if_res1634 = if_res1623;
    } else {
      var arity2477 = M1.norm_procedure_arity(g2464);
      var let_result1624 = M6.procedure_keywords(g2464);
      var required_kwds2478 = let_result1624.getAt(0);
      var allowed_kwds2479 = let_result1624.getAt(1);
      if (M0.eq_p(1, arity2477) !== false) {
        var if_res1631 = function(x2481) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2464(x2481);
          }, f2463);
        };
      } else {
        var cl1625 = function(x2482) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2464(x2482);
          }, f2463);
        };
        var cl1626 = function(x2483, y2484) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return g2464(x2483, y2484);
          }, f2463);
        };
        var cl1627 = $rjs_core.attachProcedureArity(function() {
          for (var args24851630 = [],
              $__6 = 0; $__6 < arguments.length; $__6++)
            args24851630[$__6] = arguments[$__6];
          var args2485 = $rjs_core.Pair.listFromArray(args24851630);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M0.apply(g2464, args2485);
          }, f2463);
        });
        var if_res1631 = $rjs_core.attachProcedureArity(function() {
          var fixed_lam1628 = {
            '1': cl1625,
            '2': cl1626
          }[arguments.length];
          if (fixed_lam1628 !== undefined) {
            return fixed_lam1628.apply(null, arguments);
          } else {
            if (true !== false) {
              var if_res1629 = cl1627.apply(null, arguments);
            } else {
              var if_res1629 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
            }
            return if_res1629;
          }
        }, [M0.make_arity_at_least(0)]);
      }
      var composed2480 = if_res1631;
      if (M0.null_p(allowed_kwds2479) !== false) {
        var if_res1633 = composed2480;
      } else {
        var if_res1633 = M6.make_keyword_procedure($rjs_core.attachProcedureArity(function(kws2486, kw_args2487) {
          for (var xs24881632 = [],
              $__7 = 2; $__7 < arguments.length; $__7++)
            xs24881632[$__7 - 2] = arguments[$__7];
          if (arguments.length < 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var xs2488 = $rjs_core.Pair.listFromArray(xs24881632);
          return M0.call_with_values(function() {
            if (arguments.length !== 0) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M3.keyword_apply(g2464, kws2486, kw_args2487, xs2488);
          }, f2463);
        }), composed2480);
      }
      var if_res1634 = if_res1633;
    }
    return if_res1634;
  };
  var cl1635 = function(f2489) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2489) !== false) {
      var if_res1641 = f2489;
    } else {
      var if_res1641 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2489);
    }
    return if_res1641;
  };
  var cl1636 = function(f2490, g2491) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.procedure_p(f2490) !== false) {
      var if_res1642 = M0.rvoid();
    } else {
      var if_res1642 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f2490, g2491);
    }
    if_res1642;
    if (M0.procedure_p(g2491) !== false) {
      var if_res1643 = M0.rvoid();
    } else {
      var if_res1643 = M0.raise_argument_error($rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, f2490, g2491);
    }
    if_res1643;
    var let_result1644 = M6.procedure_keywords(f2490);
    var req2492 = let_result1644.getAt(0);
    var _2493 = let_result1644.getAt(1);
    if (M0.null_p(req2492) !== false) {
      var if_res1645 = M0.rvoid();
    } else {
      var if_res1645 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), 0, f2490, $rjs_core.Pair.makeList());
    }
    if_res1645;
    return simple_compose2462(f2490, g2491);
  };
  var cl1637 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.values;
  };
  var cl1638 = $rjs_core.attachProcedureArity(function(f02494) {
    for (var fs024951646 = [],
        $__4 = 1; $__4 < arguments.length; $__4++)
      fs024951646[$__4 - 1] = arguments[$__4];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var fs02495 = $rjs_core.Pair.listFromArray(fs024951646);
    var loop2496 = function(f2497, fs2498, i2499, rfuns2500) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.procedure_p(f2497) !== false) {
        var if_res1647 = M0.rvoid();
      } else {
        var if_res1647 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure?"), i2499, f02494, fs02495);
      }
      if_res1647;
      if (M0.pair_p(fs2498) !== false) {
        var let_result1648 = M6.procedure_keywords(f2497);
        var req2501 = let_result1648.getAt(0);
        var _2502 = let_result1648.getAt(1);
        if (M0.null_p(req2501) !== false) {
          var if_res1649 = M0.rvoid();
        } else {
          var if_res1649 = M0.apply(M0.raise_argument_error, $rjs_core.Symbol.make("compose"), $rjs_core.UString.makeInternedImmutable("procedure-with-no-required-keywords?"), i2499, f02494, fs02495);
        }
        if_res1649;
        var if_res1650 = loop2496(M0.car(fs2498), M0.cdr(fs2498), M0.add1(i2499), M0.cons(f2497, rfuns2500));
      } else {
        var if_res1650 = simple_compose2462(pipeline_times_2413(M0.car(rfuns2500), M0.cdr(rfuns2500)), f2497);
      }
      return if_res1650;
    };
    return loop2496(f02494, fs02495, 0, $rjs_core.Pair.makeList());
  });
  var compose2461 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam1639 = {
      '1': cl1635,
      '2': cl1636,
      '0': cl1637
    }[arguments.length];
    if (fixed_lam1639 !== undefined) {
      return fixed_lam1639.apply(null, arguments);
    } else {
      if (M0.__gt__eq_(cl1638.length, 1) !== false) {
        var if_res1640 = cl1638.apply(null, arguments);
      } else {
        var if_res1640 = M0.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res1640;
    }
  }, [0, M0.make_arity_at_least(1)]);
  var let_result1651 = M0.values(compose12431, compose2461);
  var compose1 = let_result1651.getAt(0);
  var compose = let_result1651.getAt(1);
  var __rjs_quoted__ = {};
  __rjs_quoted__.sort7 = sort7;
  __rjs_quoted__.sort9 = sort9;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get compose1() {
      return compose1;
    },
    get compose() {
      return compose;
    },
    get build_list() {
      return build_list;
    },
    get build_string() {
      return build_string;
    },
    get build_vector() {
      return build_vector;
    },
    get filter() {
      return filter;
    },
    get assoc() {
      return assoc;
    },
    get assv() {
      return assv;
    },
    get assq() {
      return assq;
    },
    get findf() {
      return findf;
    },
    get assf() {
      return assf;
    },
    get memf() {
      return memf;
    },
    get remove_times_() {
      return remove_times_;
    },
    get remq_times_() {
      return remq_times_;
    },
    get remv_times_() {
      return remv_times_;
    },
    get remove() {
      return remove;
    },
    get remq() {
      return remq;
    },
    get remv() {
      return remv;
    },
    get foldr() {
      return foldr;
    },
    get foldl() {
      return foldl;
    }
  };
})();
var $__collects_47_racket_47_list_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/list.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_private_47_more_45_scheme_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_for_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_qq_45_and_45_or_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M6 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M7 = $__collects_47_racket_47_private_47_pre_45_base_46_rkt_46_js__;
  var M8 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var M9 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var M10 = $__runtime_47_unsafe_46_rkt_46_js__;
  var first = function(x820) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(x820) !== false) {
      var if_res471 = M2.list_p(x820);
    } else {
      var if_res471 = false;
    }
    if (if_res471 !== false) {
      var if_res472 = M2.car(x820);
    } else {
      var if_res472 = M2.raise_argument_error($rjs_core.Symbol.make("first"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), x820);
    }
    return if_res472;
  };
  var second = function(l0821) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0821) !== false) {
      var loop822 = function(l823, pos824) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l823) !== false) {
          if (M2.eq_p(pos824, 1) !== false) {
            var if_res473 = M2.car(l823);
          } else {
            var if_res473 = loop822(M2.cdr(l823), M2.sub1(pos824));
          }
          var if_res474 = if_res473;
        } else {
          var if_res474 = M2.raise_arguments_error($rjs_core.Symbol.make("second"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0821);
        }
        return if_res474;
      };
      var if_res475 = loop822(l0821, 2);
    } else {
      var if_res475 = M2.raise_argument_error($rjs_core.Symbol.make("second"), $rjs_core.UString.makeInternedImmutable("list?"), l0821);
    }
    return if_res475;
  };
  var third = function(l0825) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0825) !== false) {
      var loop826 = function(l827, pos828) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l827) !== false) {
          if (M2.eq_p(pos828, 1) !== false) {
            var if_res476 = M2.car(l827);
          } else {
            var if_res476 = loop826(M2.cdr(l827), M2.sub1(pos828));
          }
          var if_res477 = if_res476;
        } else {
          var if_res477 = M2.raise_arguments_error($rjs_core.Symbol.make("third"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0825);
        }
        return if_res477;
      };
      var if_res478 = loop826(l0825, 3);
    } else {
      var if_res478 = M2.raise_argument_error($rjs_core.Symbol.make("third"), $rjs_core.UString.makeInternedImmutable("list?"), l0825);
    }
    return if_res478;
  };
  var fourth = function(l0829) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0829) !== false) {
      var loop830 = function(l831, pos832) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l831) !== false) {
          if (M2.eq_p(pos832, 1) !== false) {
            var if_res479 = M2.car(l831);
          } else {
            var if_res479 = loop830(M2.cdr(l831), M2.sub1(pos832));
          }
          var if_res480 = if_res479;
        } else {
          var if_res480 = M2.raise_arguments_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0829);
        }
        return if_res480;
      };
      var if_res481 = loop830(l0829, 4);
    } else {
      var if_res481 = M2.raise_argument_error($rjs_core.Symbol.make("fourth"), $rjs_core.UString.makeInternedImmutable("list?"), l0829);
    }
    return if_res481;
  };
  var fifth = function(l0833) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0833) !== false) {
      var loop834 = function(l835, pos836) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l835) !== false) {
          if (M2.eq_p(pos836, 1) !== false) {
            var if_res482 = M2.car(l835);
          } else {
            var if_res482 = loop834(M2.cdr(l835), M2.sub1(pos836));
          }
          var if_res483 = if_res482;
        } else {
          var if_res483 = M2.raise_arguments_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0833);
        }
        return if_res483;
      };
      var if_res484 = loop834(l0833, 5);
    } else {
      var if_res484 = M2.raise_argument_error($rjs_core.Symbol.make("fifth"), $rjs_core.UString.makeInternedImmutable("list?"), l0833);
    }
    return if_res484;
  };
  var sixth = function(l0837) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0837) !== false) {
      var loop838 = function(l839, pos840) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l839) !== false) {
          if (M2.eq_p(pos840, 1) !== false) {
            var if_res485 = M2.car(l839);
          } else {
            var if_res485 = loop838(M2.cdr(l839), M2.sub1(pos840));
          }
          var if_res486 = if_res485;
        } else {
          var if_res486 = M2.raise_arguments_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0837);
        }
        return if_res486;
      };
      var if_res487 = loop838(l0837, 6);
    } else {
      var if_res487 = M2.raise_argument_error($rjs_core.Symbol.make("sixth"), $rjs_core.UString.makeInternedImmutable("list?"), l0837);
    }
    return if_res487;
  };
  var seventh = function(l0841) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0841) !== false) {
      var loop842 = function(l843, pos844) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l843) !== false) {
          if (M2.eq_p(pos844, 1) !== false) {
            var if_res488 = M2.car(l843);
          } else {
            var if_res488 = loop842(M2.cdr(l843), M2.sub1(pos844));
          }
          var if_res489 = if_res488;
        } else {
          var if_res489 = M2.raise_arguments_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0841);
        }
        return if_res489;
      };
      var if_res490 = loop842(l0841, 7);
    } else {
      var if_res490 = M2.raise_argument_error($rjs_core.Symbol.make("seventh"), $rjs_core.UString.makeInternedImmutable("list?"), l0841);
    }
    return if_res490;
  };
  var eighth = function(l0845) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0845) !== false) {
      var loop846 = function(l847, pos848) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l847) !== false) {
          if (M2.eq_p(pos848, 1) !== false) {
            var if_res491 = M2.car(l847);
          } else {
            var if_res491 = loop846(M2.cdr(l847), M2.sub1(pos848));
          }
          var if_res492 = if_res491;
        } else {
          var if_res492 = M2.raise_arguments_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0845);
        }
        return if_res492;
      };
      var if_res493 = loop846(l0845, 8);
    } else {
      var if_res493 = M2.raise_argument_error($rjs_core.Symbol.make("eighth"), $rjs_core.UString.makeInternedImmutable("list?"), l0845);
    }
    return if_res493;
  };
  var ninth = function(l0849) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0849) !== false) {
      var loop850 = function(l851, pos852) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l851) !== false) {
          if (M2.eq_p(pos852, 1) !== false) {
            var if_res494 = M2.car(l851);
          } else {
            var if_res494 = loop850(M2.cdr(l851), M2.sub1(pos852));
          }
          var if_res495 = if_res494;
        } else {
          var if_res495 = M2.raise_arguments_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0849);
        }
        return if_res495;
      };
      var if_res496 = loop850(l0849, 9);
    } else {
      var if_res496 = M2.raise_argument_error($rjs_core.Symbol.make("ninth"), $rjs_core.UString.makeInternedImmutable("list?"), l0849);
    }
    return if_res496;
  };
  var tenth = function(l0853) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l0853) !== false) {
      var loop854 = function(l855, pos856) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(l855) !== false) {
          if (M2.eq_p(pos856, 1) !== false) {
            var if_res497 = M2.car(l855);
          } else {
            var if_res497 = loop854(M2.cdr(l855), M2.sub1(pos856));
          }
          var if_res498 = if_res497;
        } else {
          var if_res498 = M2.raise_arguments_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.makeInternedImmutable("list contains too few elements"), $rjs_core.UString.makeInternedImmutable("list"), l0853);
        }
        return if_res498;
      };
      var if_res499 = loop854(l0853, 10);
    } else {
      var if_res499 = M2.raise_argument_error($rjs_core.Symbol.make("tenth"), $rjs_core.UString.makeInternedImmutable("list?"), l0853);
    }
    return if_res499;
  };
  var last_pair = function(l857) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l857) !== false) {
      var loop858 = function(l859, x860) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x860) !== false) {
          var if_res500 = loop858(x860, M2.cdr(x860));
        } else {
          var if_res500 = l859;
        }
        return if_res500;
      };
      var if_res501 = loop858(l857, M2.cdr(l857));
    } else {
      var if_res501 = M2.raise_argument_error($rjs_core.Symbol.make("last-pair"), $rjs_core.UString.makeInternedImmutable("pair?"), l857);
    }
    return if_res501;
  };
  var last = function(l861) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l861) !== false) {
      var if_res502 = M2.list_p(l861);
    } else {
      var if_res502 = false;
    }
    if (if_res502 !== false) {
      var loop862 = function(l863, x864) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(x864) !== false) {
          var if_res503 = loop862(x864, M2.cdr(x864));
        } else {
          var if_res503 = M2.car(l863);
        }
        return if_res503;
      };
      var if_res504 = loop862(l861, M2.cdr(l861));
    } else {
      var if_res504 = M2.raise_argument_error($rjs_core.Symbol.make("last"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), l861);
    }
    return if_res504;
  };
  var rest = function(l865) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(l865) !== false) {
      var if_res505 = M2.list_p(l865);
    } else {
      var if_res505 = false;
    }
    if (if_res505 !== false) {
      var if_res506 = M2.cdr(l865);
    } else {
      var if_res506 = M2.raise_argument_error($rjs_core.Symbol.make("rest"), $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), l865);
    }
    return if_res506;
  };
  var cons_p = function(l866) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.pair_p(l866);
  };
  var empty_p = function(l867) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.null_p(l867);
  };
  var empty = $rjs_core.Pair.makeList();
  var make_list = function(n868, x869) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n868) !== false) {
      var if_res507 = M2.rvoid();
    } else {
      var if_res507 = M2.raise_argument_error($rjs_core.Symbol.make("make-list"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 0, n868, x869);
    }
    if_res507;
    var loop870 = function(n871, r872) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n871) !== false) {
        var if_res508 = r872;
      } else {
        var if_res508 = loop870(M2.sub1(n871), M2.cons(x869, r872));
      }
      return if_res508;
    };
    return loop870(n868, $rjs_core.Pair.makeList());
  };
  var list_update = function(l873, i874, f875) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l873) !== false) {
      var if_res509 = M2.rvoid();
    } else {
      var if_res509 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l873, i874, f875);
    }
    if_res509;
    if (M2.exact_nonnegative_integer_p(i874) !== false) {
      var if_res510 = M2.rvoid();
    } else {
      var if_res510 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l873, i874, f875);
    }
    if_res510;
    if (M2.procedure_p(f875) !== false) {
      var if_res511 = M2.procedure_arity_includes_p(f875, 1);
    } else {
      var if_res511 = false;
    }
    if (if_res511 !== false) {
      var if_res512 = M2.rvoid();
    } else {
      var if_res512 = M2.raise_argument_error($rjs_core.Symbol.make("list-update"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 2, l873, i874, f875);
    }
    if_res512;
    if (M2.zero_p(i874) !== false) {
      var if_res513 = M2.cons(f875(M2.car(l873)), M2.cdr(l873));
    } else {
      var if_res513 = M2.cons(M2.car(l873), list_update(M2.cdr(l873), M2.sub1(i874), f875));
    }
    return if_res513;
  };
  var list_set = function(l876, k877, v878) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(l876) !== false) {
      var if_res514 = M2.rvoid();
    } else {
      var if_res514 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l876, k877, v878);
    }
    if_res514;
    if (M2.exact_nonnegative_integer_p(k877) !== false) {
      var if_res515 = M2.rvoid();
    } else {
      var if_res515 = M2.raise_argument_error($rjs_core.Symbol.make("list-set"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l876, k877, v878);
    }
    if_res515;
    return list_update(l876, k877, function(_879) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return v878;
    });
  };
  var drop_times_ = function(list880, n881) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.zero_p(n881) !== false) {
      var if_res517 = list880;
    } else {
      if (M2.pair_p(list880) !== false) {
        var if_res516 = drop_times_(M2.cdr(list880), M2.sub1(n881));
      } else {
        var if_res516 = false;
      }
      var if_res517 = if_res516;
    }
    return if_res517;
  };
  var too_large = function(who882, list883, n884) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var proper_p885 = M2.list_p(list883);
    var temp520 = $rjs_core.UString.makeInternedImmutable("a ~alist with at least ~a ~a");
    if (proper_p885 !== false) {
      var if_res519 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res519 = $rjs_core.UString.makeInternedImmutable("(possibly improper) ");
    }
    if (proper_p885 !== false) {
      var if_res518 = $rjs_core.UString.makeInternedImmutable("elements");
    } else {
      var if_res518 = $rjs_core.UString.makeInternedImmutable("pairs");
    }
    return M2.raise_argument_error(who882, M2.format(temp520, if_res519, n884, if_res518), list883);
  };
  var take = function(list0886, n0887) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0887) !== false) {
      var if_res521 = M2.rvoid();
    } else {
      var if_res521 = M2.raise_argument_error($rjs_core.Symbol.make("take"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list0886, n0887);
    }
    if_res521;
    var loop888 = function(list889, n890) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n890) !== false) {
        var if_res523 = $rjs_core.Pair.makeList();
      } else {
        if (M2.pair_p(list889) !== false) {
          var if_res522 = M2.cons(M2.car(list889), loop888(M2.cdr(list889), M2.sub1(n890)));
        } else {
          var if_res522 = too_large($rjs_core.Symbol.make("take"), list0886, n0887);
        }
        var if_res523 = if_res522;
      }
      return if_res523;
    };
    return loop888(list0886, n0887);
  };
  var drop = function(list891, n892) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n892) !== false) {
      var if_res524 = M2.rvoid();
    } else {
      var if_res524 = M2.raise_argument_error($rjs_core.Symbol.make("drop"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list891, n892);
    }
    if_res524;
    var or_part893 = drop_times_(list891, n892);
    if (or_part893 !== false) {
      var if_res525 = or_part893;
    } else {
      var if_res525 = too_large($rjs_core.Symbol.make("drop"), list891, n892);
    }
    return if_res525;
  };
  var split_at = function(list0894, n0895) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n0895) !== false) {
      var if_res526 = M2.rvoid();
    } else {
      var if_res526 = M2.raise_argument_error($rjs_core.Symbol.make("split-at"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list0894, n0895);
    }
    if_res526;
    var loop896 = function(list897, n898, pfx899) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.zero_p(n898) !== false) {
        var if_res528 = M2.values(M8.alt_reverse(pfx899), list897);
      } else {
        if (M2.pair_p(list897) !== false) {
          var if_res527 = loop896(M2.cdr(list897), M2.sub1(n898), M2.cons(M2.car(list897), pfx899));
        } else {
          var if_res527 = too_large($rjs_core.Symbol.make("split-at"), list0894, n0895);
        }
        var if_res528 = if_res527;
      }
      return if_res528;
    };
    return loop896(list0894, n0895, $rjs_core.Pair.makeList());
  };
  var takef = function(list900, pred901) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred901) !== false) {
      var if_res529 = M2.rvoid();
    } else {
      var if_res529 = M2.raise_argument_error($rjs_core.Symbol.make("takef"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list900, pred901);
    }
    if_res529;
    var loop902 = function(list903) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list903) !== false) {
        var x904 = M2.car(list903);
        if (pred901(x904) !== false) {
          var if_res530 = M2.cons(x904, loop902(M2.cdr(list903)));
        } else {
          var if_res530 = $rjs_core.Pair.makeList();
        }
        var if_res531 = if_res530;
      } else {
        var if_res531 = $rjs_core.Pair.makeList();
      }
      return if_res531;
    };
    return loop902(list900);
  };
  var dropf = function(list905, pred906) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred906) !== false) {
      var if_res532 = M2.rvoid();
    } else {
      var if_res532 = M2.raise_argument_error($rjs_core.Symbol.make("dropf"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list905, pred906);
    }
    if_res532;
    var loop907 = function(list908) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list908) !== false) {
        var if_res533 = pred906(M2.car(list908));
      } else {
        var if_res533 = false;
      }
      if (if_res533 !== false) {
        var if_res534 = loop907(M2.cdr(list908));
      } else {
        var if_res534 = list908;
      }
      return if_res534;
    };
    return loop907(list905);
  };
  var splitf_at = function(list909, pred910) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred910) !== false) {
      var if_res535 = M2.rvoid();
    } else {
      var if_res535 = M2.raise_argument_error($rjs_core.Symbol.make("splitf-at"), $rjs_core.UString.makeInternedImmutable("procedure?"), 1, list909, pred910);
    }
    if_res535;
    var loop911 = function(list912, pfx913) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list912) !== false) {
        var if_res536 = pred910(M2.car(list912));
      } else {
        var if_res536 = false;
      }
      if (if_res536 !== false) {
        var if_res537 = loop911(M2.cdr(list912), M2.cons(M2.car(list912), pfx913));
      } else {
        var if_res537 = M2.values(M8.alt_reverse(pfx913), list912);
      }
      return if_res537;
    };
    return loop911(list909, $rjs_core.Pair.makeList());
  };
  var take_right = function(list914, n915) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n915) !== false) {
      var if_res538 = M2.rvoid();
    } else {
      var if_res538 = M2.raise_argument_error($rjs_core.Symbol.make("take-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list914, n915);
    }
    if_res538;
    var loop916 = function(list917, lead918) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead918) !== false) {
        var if_res540 = loop916(M2.cdr(list917), M2.cdr(lead918));
      } else {
        var if_res540 = list917;
      }
      return if_res540;
    };
    var or_part919 = drop_times_(list914, n915);
    if (or_part919 !== false) {
      var if_res539 = or_part919;
    } else {
      var if_res539 = too_large($rjs_core.Symbol.make("take-right"), list914, n915);
    }
    return loop916(list914, if_res539);
  };
  var drop_right = function(list920, n921) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n921) !== false) {
      var if_res541 = M2.rvoid();
    } else {
      var if_res541 = M2.raise_argument_error($rjs_core.Symbol.make("drop-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list920, n921);
    }
    if_res541;
    var loop922 = function(list923, lead924) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead924) !== false) {
        var if_res543 = M2.cons(M2.car(list923), loop922(M2.cdr(list923), M2.cdr(lead924)));
      } else {
        var if_res543 = $rjs_core.Pair.makeList();
      }
      return if_res543;
    };
    var or_part925 = drop_times_(list920, n921);
    if (or_part925 !== false) {
      var if_res542 = or_part925;
    } else {
      var if_res542 = too_large($rjs_core.Symbol.make("drop-right"), list920, n921);
    }
    return loop922(list920, if_res542);
  };
  var split_at_right = function(list926, n927) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.exact_nonnegative_integer_p(n927) !== false) {
      var if_res544 = M2.rvoid();
    } else {
      var if_res544 = M2.raise_argument_error($rjs_core.Symbol.make("split-at-right"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, list926, n927);
    }
    if_res544;
    var loop928 = function(list929, lead930, pfx931) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lead930) !== false) {
        var if_res546 = loop928(M2.cdr(list929), M2.cdr(lead930), M2.cons(M2.car(list929), pfx931));
      } else {
        var if_res546 = M2.values(M8.alt_reverse(pfx931), list929);
      }
      return if_res546;
    };
    var or_part932 = drop_times_(list926, n927);
    if (or_part932 !== false) {
      var if_res545 = or_part932;
    } else {
      var if_res545 = too_large($rjs_core.Symbol.make("split-at-right"), list926, n927);
    }
    return loop928(list926, if_res545, $rjs_core.Pair.makeList());
  };
  var count_from_right = function(who933, list934, pred935) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred935) !== false) {
      var if_res547 = M2.rvoid();
    } else {
      var if_res547 = M2.raise_argument_error(who933, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, list934, pred935);
    }
    if_res547;
    var loop936 = function(list937, rev938, n939) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(list937) !== false) {
        var if_res550 = loop936(M2.cdr(list937), M2.cons(M2.car(list937), rev938), M2.add1(n939));
      } else {
        var loop940 = function(n941, list942) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(list942) !== false) {
            var if_res548 = pred935(M2.car(list942));
          } else {
            var if_res548 = false;
          }
          if (if_res548 !== false) {
            var if_res549 = loop940(M2.sub1(n941), M2.cdr(list942));
          } else {
            var if_res549 = n941;
          }
          return if_res549;
        };
        var if_res550 = loop940(n939, rev938);
      }
      return if_res550;
    };
    return loop936(list934, $rjs_core.Pair.makeList(), 0);
  };
  var takef_right = function(list943, pred944) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop(list943, count_from_right($rjs_core.Symbol.make("takef-right"), list943, pred944));
  };
  var dropf_right = function(list945, pred946) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take(list945, count_from_right($rjs_core.Symbol.make("dropf-right"), list945, pred946));
  };
  var splitf_at_right = function(list947, pred948) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_at(list947, count_from_right($rjs_core.Symbol.make("splitf-at-right"), list947, pred948));
  };
  var list_prefix_p5949 = function(ls3950, rs4951, same_p1952, same_p2953) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls954 = ls3950;
    var rs955 = rs4951;
    if (same_p2953 !== false) {
      var if_res551 = same_p1952;
    } else {
      var if_res551 = M2.equal_p;
    }
    var same_p956 = if_res551;
    if (M2.list_p(ls954) !== false) {
      var if_res552 = M2.rvoid();
    } else {
      var if_res552 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls954, rs955);
    }
    if_res552;
    if (M2.list_p(rs955) !== false) {
      var if_res553 = M2.rvoid();
    } else {
      var if_res553 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("list?"), 1, ls954, rs955);
    }
    if_res553;
    if (M2.procedure_p(same_p956) !== false) {
      var if_res554 = M2.procedure_arity_includes_p(same_p956, 2);
    } else {
      var if_res554 = false;
    }
    if (if_res554 !== false) {
      var if_res555 = M2.rvoid();
    } else {
      var if_res555 = M2.raise_argument_error($rjs_core.Symbol.make("list-prefix?"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, ls954, rs955, same_p956);
    }
    if_res555;
    var or_part957 = M2.null_p(ls954);
    if (or_part957 !== false) {
      var if_res558 = or_part957;
    } else {
      if (M2.pair_p(rs955) !== false) {
        if (same_p956(M2.car(ls954), M2.car(rs955)) !== false) {
          var if_res556 = list_prefix_p(M2.cdr(ls954), M2.cdr(rs955));
        } else {
          var if_res556 = false;
        }
        var if_res557 = if_res556;
      } else {
        var if_res557 = false;
      }
      var if_res558 = if_res557;
    }
    return if_res558;
  };
  var cl559 = function(ls958, rs959) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p5949(ls958, rs959, false, false);
  };
  var cl560 = function(ls960, rs961, same_p1962) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return list_prefix_p5949(ls960, rs961, same_p1962, true);
  };
  var list_prefix_p = $rjs_core.attachProcedureArity(function() {
    var fixed_lam561 = {
      '2': cl559,
      '3': cl560
    }[arguments.length];
    if (fixed_lam561 !== undefined) {
      return fixed_lam561.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var internal_split_common_prefix = function(as963, bs964, same_p965, keep_prefix_p966, name967) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(as963) !== false) {
      var if_res562 = M2.rvoid();
    } else {
      var if_res562 = M2.raise_argument_error(name967, $rjs_core.UString.makeInternedImmutable("list?"), 0, as963, bs964);
    }
    if_res562;
    if (M2.list_p(bs964) !== false) {
      var if_res563 = M2.rvoid();
    } else {
      var if_res563 = M2.raise_argument_error(name967, $rjs_core.UString.makeInternedImmutable("list?"), 1, as963, bs964);
    }
    if_res563;
    if (M2.procedure_p(same_p965) !== false) {
      var if_res564 = M2.procedure_arity_includes_p(same_p965, 2);
    } else {
      var if_res564 = false;
    }
    if (if_res564 !== false) {
      var if_res565 = M2.rvoid();
    } else {
      var if_res565 = M2.raise_argument_error(name967, $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, as963, bs964, same_p965);
    }
    if_res565;
    var loop968 = function(as969, bs970) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(as969) !== false) {
        if (M2.pair_p(bs970) !== false) {
          var if_res566 = same_p965(M2.car(as969), M2.car(bs970));
        } else {
          var if_res566 = false;
        }
        var if_res567 = if_res566;
      } else {
        var if_res567 = false;
      }
      if (if_res567 !== false) {
        var let_result568 = loop968(M2.cdr(as969), M2.cdr(bs970));
        var prefix971 = let_result568.getAt(0);
        var atail972 = let_result568.getAt(1);
        var btail973 = let_result568.getAt(2);
        if (keep_prefix_p966 !== false) {
          var if_res569 = M2.cons(M2.car(as969), prefix971);
        } else {
          var if_res569 = false;
        }
        var if_res570 = M2.values(if_res569, atail972, btail973);
      } else {
        var if_res570 = M2.values(M2.rnull, as969, bs970);
      }
      return if_res570;
    };
    return loop968(as963, bs964);
  };
  var split_common_prefix11974 = function(as9975, bs10976, same_p7977, same_p8978) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as979 = as9975;
    var bs980 = bs10976;
    if (same_p8978 !== false) {
      var if_res571 = same_p7977;
    } else {
      var if_res571 = M2.equal_p;
    }
    var same_p981 = if_res571;
    return internal_split_common_prefix(as979, bs980, same_p981, true, $rjs_core.Symbol.make("split-common-prefix"));
  };
  var cl572 = function(as982, bs983) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix11974(as982, bs983, false, false);
  };
  var cl573 = function(as984, bs985, same_p7986) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return split_common_prefix11974(as984, bs985, same_p7986, true);
  };
  var split_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam574 = {
      '2': cl572,
      '3': cl573
    }[arguments.length];
    if (fixed_lam574 !== undefined) {
      return fixed_lam574.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var take_common_prefix17987 = function(as15988, bs16989, same_p13990, same_p14991) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as992 = as15988;
    var bs993 = bs16989;
    if (same_p14991 !== false) {
      var if_res575 = same_p13990;
    } else {
      var if_res575 = M2.equal_p;
    }
    var same_p994 = if_res575;
    var let_result576 = internal_split_common_prefix(as992, bs993, same_p994, true, $rjs_core.Symbol.make("take-common-prefix"));
    var prefix995 = let_result576.getAt(0);
    var atail996 = let_result576.getAt(1);
    var btail997 = let_result576.getAt(2);
    return prefix995;
  };
  var cl577 = function(as998, bs999) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix17987(as998, bs999, false, false);
  };
  var cl578 = function(as1000, bs1001, same_p131002) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return take_common_prefix17987(as1000, bs1001, same_p131002, true);
  };
  var take_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam579 = {
      '2': cl577,
      '3': cl578
    }[arguments.length];
    if (fixed_lam579 !== undefined) {
      return fixed_lam579.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var drop_common_prefix231003 = function(as211004, bs221005, same_p191006, same_p201007) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var as1008 = as211004;
    var bs1009 = bs221005;
    if (same_p201007 !== false) {
      var if_res580 = same_p191006;
    } else {
      var if_res580 = M2.equal_p;
    }
    var same_p1010 = if_res580;
    var let_result581 = internal_split_common_prefix(as1008, bs1009, same_p1010, false, $rjs_core.Symbol.make("drop-common-prefix"));
    var prefix1011 = let_result581.getAt(0);
    var atail1012 = let_result581.getAt(1);
    var btail1013 = let_result581.getAt(2);
    return M2.values(atail1012, btail1013);
  };
  var cl582 = function(as1014, bs1015) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231003(as1014, bs1015, false, false);
  };
  var cl583 = function(as1016, bs1017, same_p191018) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return drop_common_prefix231003(as1016, bs1017, same_p191018, true);
  };
  var drop_common_prefix = $rjs_core.attachProcedureArity(function() {
    var fixed_lam584 = {
      '2': cl582,
      '3': cl583
    }[arguments.length];
    if (fixed_lam584 !== undefined) {
      return fixed_lam584.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cl585 = function(ls1019) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, ls1019);
  };
  var cl586 = function(l11020, l21021) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11020, l21021);
  };
  var cl587 = function(l11022, l21023, l31024) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11022, l21023, l31024);
  };
  var cl588 = function(l11025, l21026, l31027, l41028) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, l11025, l21026, l31027, l41028);
  };
  var cl589 = $rjs_core.attachProcedureArity(function(l1029) {
    for (var lss1030592 = [],
        $__1 = 1; $__1 < arguments.length; $__1++)
      lss1030592[$__1 - 1] = arguments[$__1];
    if (arguments.length < 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lss1030 = $rjs_core.Pair.listFromArray(lss1030592);
    return M2.apply(M7.new_apply_proc, M2.append, l1029, lss1030);
  });
  var append_times_ = $rjs_core.attachProcedureArity(function() {
    var fixed_lam590 = {
      '1': cl585,
      '2': cl586,
      '3': cl587,
      '4': cl588
    }[arguments.length];
    if (fixed_lam590 !== undefined) {
      return fixed_lam590.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl589.length, 1) !== false) {
        var if_res591 = cl589.apply(null, arguments);
      } else {
        var if_res591 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res591;
    }
  }, [M2.make_arity_at_least(1)]);
  var flatten = function(orig_sexp1031) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1032 = function(sexp1033, acc1034) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(sexp1033) !== false) {
        var if_res594 = acc1034;
      } else {
        if (M2.pair_p(sexp1033) !== false) {
          var if_res593 = loop1032(M2.car(sexp1033), loop1032(M2.cdr(sexp1033), acc1034));
        } else {
          var if_res593 = M2.cons(sexp1033, acc1034);
        }
        var if_res594 = if_res593;
      }
      return if_res594;
    };
    return loop1032(orig_sexp1031, M2.rnull);
  };
  var add_between35 = function(after_last281035, after_last321036, before_first261037, before_first301038, before_last271039, before_last311040, splice_p251041, splice_p291042, l331043, x341044) {
    if (arguments.length !== 10) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1045 = l331043;
    var x1046 = x341044;
    if (splice_p291042 !== false) {
      var if_res595 = splice_p251041;
    } else {
      var if_res595 = false;
    }
    var splice_p1047 = if_res595;
    if (before_first301038 !== false) {
      var if_res596 = before_first261037;
    } else {
      var if_res596 = $rjs_core.Pair.makeList();
    }
    var before_first1048 = if_res596;
    if (before_last311040 !== false) {
      var if_res597 = before_last271039;
    } else {
      var if_res597 = x1046;
    }
    var before_last1049 = if_res597;
    if (after_last321036 !== false) {
      var if_res598 = after_last281035;
    } else {
      var if_res598 = $rjs_core.Pair.makeList();
    }
    var after_last1050 = if_res598;
    if (M2.list_p(l1045) !== false) {
      var if_res599 = M2.rvoid();
    } else {
      var if_res599 = M2.raise_argument_error($rjs_core.Symbol.make("add-between"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1045, x1046);
    }
    if_res599;
    if (splice_p1047 !== false) {
      var check_list1051 = function(x1052, which1053) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.list_p(x1052) !== false) {
          var if_res600 = M2.rvoid();
        } else {
          var if_res600 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append($rjs_core.UString.makeInternedImmutable("list needed in splicing mode"), which1053), $rjs_core.UString.makeInternedImmutable("given"), x1052, $rjs_core.UString.makeInternedImmutable("given list..."), l1045);
        }
        return if_res600;
      };
      check_list1051(x1046, $rjs_core.UString.makeInternedImmutable(""));
      check_list1051(before_first1048, $rjs_core.UString.makeInternedImmutable(" for #:before-first"));
      check_list1051(before_last1049, $rjs_core.UString.makeInternedImmutable(" for #:before-last"));
      var if_res602 = check_list1051(after_last1050, $rjs_core.UString.makeInternedImmutable(" for #:after-last"));
    } else {
      var check_not_given1054 = function(x1055, which1056) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.eq_p($rjs_core.Pair.makeList(), x1055) !== false) {
          var if_res601 = M2.rvoid();
        } else {
          var if_res601 = M2.raise_arguments_error($rjs_core.Symbol.make("add-between"), M2.string_append(which1056, $rjs_core.UString.makeInternedImmutable(" can only be used in splicing mode")), $rjs_core.UString.makeInternedImmutable("given"), x1055, $rjs_core.UString.makeInternedImmutable("given list..."), l1045);
        }
        return if_res601;
      };
      check_not_given1054(before_first1048, $rjs_core.UString.makeInternedImmutable("#:before-first"));
      var if_res602 = check_not_given1054(after_last1050, $rjs_core.UString.makeInternedImmutable("#:after-last"));
    }
    if_res602;
    var or_part1057 = M2.null_p(l1045);
    if (or_part1057 !== false) {
      var if_res603 = or_part1057;
    } else {
      var if_res603 = M2.null_p(M2.cdr(l1045));
    }
    if (if_res603 !== false) {
      if (splice_p1047 !== false) {
        var if_res604 = M2.append(before_first1048, l1045, after_last1050);
      } else {
        var if_res604 = l1045;
      }
      var if_res609 = if_res604;
    } else {
      if (splice_p1047 !== false) {
        var x1058 = M8.alt_reverse(x1046);
        var loop1060 = function(i1061, l1062, r1063) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1062) !== false) {
            var if_res605 = loop1060(M2.car(l1062), M2.cdr(l1062), M2.cons(i1061, M2.append(x1058, r1063)));
          } else {
            var if_res605 = M2.cons(i1061, M2.append(M8.alt_reverse(before_last1049), r1063));
          }
          return if_res605;
        };
        var r1059 = loop1060(M2.cadr(l1045), M2.cddr(l1045), $rjs_core.Pair.makeList());
        var r1064 = M8.alt_reverse(M2.append(M8.alt_reverse(after_last1050), r1059));
        var r1065 = M4.__rjs_quoted__.qq_append(before_first1048, M2.list_times_(M2.car(l1045), r1064));
        var if_res608 = r1065;
      } else {
        var temp607 = M2.car(l1045);
        var loop1066 = function(i1067, l1068, r1069) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(l1068) !== false) {
            var if_res606 = loop1066(M2.car(l1068), M2.cdr(l1068), M2.cons(i1067, M2.cons(x1046, r1069)));
          } else {
            var if_res606 = M2.cons(i1067, M2.cons(before_last1049, r1069));
          }
          return if_res606;
        };
        var if_res608 = M2.cons(temp607, M8.alt_reverse(loop1066(M2.cadr(l1045), M2.cddr(l1045), $rjs_core.Pair.makeList())));
      }
      var if_res609 = if_res608;
    }
    return if_res609;
  };
  var unpack36 = function(given_kws1070, given_args1071, l331072, x341073) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.pair_p(given_kws1070) !== false) {
      var if_res610 = M2.eq_p($rjs_core.Keyword.make("after-last"), M2.car(given_kws1070));
    } else {
      var if_res610 = false;
    }
    var after_last321074 = if_res610;
    if (after_last321074 !== false) {
      var if_res611 = M2.car(given_args1071);
    } else {
      var if_res611 = M2.rvoid();
    }
    var after_last281075 = if_res611;
    if (after_last321074 !== false) {
      var if_res612 = M2.cdr(given_kws1070);
    } else {
      var if_res612 = given_kws1070;
    }
    var given_kws1076 = if_res612;
    if (after_last321074 !== false) {
      var if_res613 = M2.cdr(given_args1071);
    } else {
      var if_res613 = given_args1071;
    }
    var given_args1077 = if_res613;
    if (M2.pair_p(given_kws1076) !== false) {
      var if_res614 = M2.eq_p($rjs_core.Keyword.make("before-first"), M2.car(given_kws1076));
    } else {
      var if_res614 = false;
    }
    var before_first301078 = if_res614;
    if (before_first301078 !== false) {
      var if_res615 = M2.car(given_args1077);
    } else {
      var if_res615 = M2.rvoid();
    }
    var before_first261079 = if_res615;
    if (before_first301078 !== false) {
      var if_res616 = M2.cdr(given_kws1076);
    } else {
      var if_res616 = given_kws1076;
    }
    var given_kws1080 = if_res616;
    if (before_first301078 !== false) {
      var if_res617 = M2.cdr(given_args1077);
    } else {
      var if_res617 = given_args1077;
    }
    var given_args1081 = if_res617;
    if (M2.pair_p(given_kws1080) !== false) {
      var if_res618 = M2.eq_p($rjs_core.Keyword.make("before-last"), M2.car(given_kws1080));
    } else {
      var if_res618 = false;
    }
    var before_last311082 = if_res618;
    if (before_last311082 !== false) {
      var if_res619 = M2.car(given_args1081);
    } else {
      var if_res619 = M2.rvoid();
    }
    var before_last271083 = if_res619;
    if (before_last311082 !== false) {
      var if_res620 = M2.cdr(given_kws1080);
    } else {
      var if_res620 = given_kws1080;
    }
    var given_kws1084 = if_res620;
    if (before_last311082 !== false) {
      var if_res621 = M2.cdr(given_args1081);
    } else {
      var if_res621 = given_args1081;
    }
    var given_args1085 = if_res621;
    var splice_p291086 = M2.pair_p(given_kws1084);
    if (splice_p291086 !== false) {
      var if_res622 = M2.car(given_args1085);
    } else {
      var if_res622 = M2.rvoid();
    }
    var splice_p251087 = if_res622;
    return add_between35(after_last281075, after_last321074, before_first261079, before_first301078, before_last271083, before_last311082, splice_p251087, splice_p291086, l331072, x341073);
  };
  var cl626 = function(given_kws1098, given_args1099, l1100, x1101) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(given_kws1098, given_args1099, l1100, x1101);
  };
  var temp628 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam627 = {'4': cl626}[arguments.length];
    if (fixed_lam627 !== undefined) {
      return fixed_lam627.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp625 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("after-last"), $rjs_core.Keyword.make("before-first"), $rjs_core.Keyword.make("before-last"), $rjs_core.Keyword.make("splice?"));
  var cl623 = function(l1103, x1104) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack36(M2.rnull, M2.rnull, l1103, x1104);
  };
  var add_between1102 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam624 = {'2': cl623}[arguments.length];
    if (fixed_lam624 !== undefined) {
      return fixed_lam624.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var add_between37 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1088, given_argc1089) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__eq_(given_argc1089, 4) !== false) {
      var l11090 = given_kws1088;
      if (M2.null_p(l11090) !== false) {
        var if_res630 = l11090;
      } else {
        if (M2.eq_p(M2.car(l11090), $rjs_core.Keyword.make("after-last")) !== false) {
          var if_res629 = M2.cdr(l11090);
        } else {
          var if_res629 = l11090;
        }
        var if_res630 = if_res629;
      }
      var l11091 = if_res630;
      var l11092 = l11091;
      if (M2.null_p(l11092) !== false) {
        var if_res632 = l11092;
      } else {
        if (M2.eq_p(M2.car(l11092), $rjs_core.Keyword.make("before-first")) !== false) {
          var if_res631 = M2.cdr(l11092);
        } else {
          var if_res631 = l11092;
        }
        var if_res632 = if_res631;
      }
      var l11093 = if_res632;
      var l11094 = l11093;
      if (M2.null_p(l11094) !== false) {
        var if_res634 = l11094;
      } else {
        if (M2.eq_p(M2.car(l11094), $rjs_core.Keyword.make("before-last")) !== false) {
          var if_res633 = M2.cdr(l11094);
        } else {
          var if_res633 = l11094;
        }
        var if_res634 = if_res633;
      }
      var l11095 = if_res634;
      var l11096 = l11095;
      if (M2.null_p(l11096) !== false) {
        var if_res636 = l11096;
      } else {
        if (M2.eq_p(M2.car(l11096), $rjs_core.Keyword.make("splice?")) !== false) {
          var if_res635 = M2.cdr(l11096);
        } else {
          var if_res635 = l11096;
        }
        var if_res636 = if_res635;
      }
      var l11097 = if_res636;
      var if_res637 = M2.null_p(l11097);
    } else {
      var if_res637 = false;
    }
    return if_res637;
  }, temp628, M2.rnull, temp625, add_between1102);
  var remove_duplicates43 = function(key381105, key391106, l421107, __eq__p401108, __eq__p411109) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1110 = l421107;
    if (__eq__p411109 !== false) {
      var if_res638 = __eq__p401108;
    } else {
      var if_res638 = M2.equal_p;
    }
    var __eq__p1111 = if_res638;
    if (key391106 !== false) {
      var if_res639 = key381105;
    } else {
      var if_res639 = false;
    }
    var key1112 = if_res639;
    if (M2.list_p(l1110) !== false) {
      var if_res640 = M2.rvoid();
    } else {
      var if_res640 = M2.raise_argument_error($rjs_core.Symbol.make("remove-duplicates"), $rjs_core.UString.makeInternedImmutable("list?"), l1110);
    }
    if_res640;
    var len1113 = M2.length(l1110);
    if (M2.__lt__eq_(len1113, 1) !== false) {
      var if_res644 = true;
    } else {
      if (M2.__lt__eq_(len1113, 40) !== false) {
        var if_res643 = false;
      } else {
        if (M2.eq_p(__eq__p1111, M2.eq_p) !== false) {
          var if_res642 = M2.make_hasheq();
        } else {
          if (M2.eq_p(__eq__p1111, M2.equal_p) !== false) {
            var if_res641 = M2.make_hash();
          } else {
            var if_res641 = false;
          }
          var if_res642 = if_res641;
        }
        var if_res643 = if_res642;
      }
      var if_res644 = if_res643;
    }
    var h1114 = if_res644;
    var tmp1115 = h1114;
    if (M2.equal_p(tmp1115, true) !== false) {
      var if_res663 = l1110;
    } else {
      if (M2.equal_p(tmp1115, false) !== false) {
        var or_part1117 = key1112;
        if (or_part1117 !== false) {
          var if_res645 = or_part1117;
        } else {
          var if_res645 = function(x1118) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return x1118;
          };
        }
        var key1116 = if_res645;
        if (M2.eq_p(__eq__p1111, M2.equal_p) !== false) {
          var loop1119 = function(l1120, seen1121) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1120) !== false) {
              var if_res647 = l1120;
            } else {
              var x1122 = M2.car(l1120);
              var k1123 = key1116(x1122);
              var l1124 = M2.cdr(l1120);
              if (M0.member(k1123, seen1121) !== false) {
                var if_res646 = loop1119(l1124, seen1121);
              } else {
                var if_res646 = M2.cons(x1122, loop1119(l1124, M2.cons(k1123, seen1121)));
              }
              var if_res647 = if_res646;
            }
            return if_res647;
          };
          var if_res656 = loop1119(l1110, M2.rnull);
        } else {
          if (M2.eq_p(__eq__p1111, M2.eq_p) !== false) {
            var loop1125 = function(l1126, seen1127) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.null_p(l1126) !== false) {
                var if_res649 = l1126;
              } else {
                var x1128 = M2.car(l1126);
                var k1129 = key1116(x1128);
                var l1130 = M2.cdr(l1126);
                if (M0.memq(k1129, seen1127) !== false) {
                  var if_res648 = loop1125(l1130, seen1127);
                } else {
                  var if_res648 = M2.cons(x1128, loop1125(l1130, M2.cons(k1129, seen1127)));
                }
                var if_res649 = if_res648;
              }
              return if_res649;
            };
            var if_res655 = loop1125(l1110, M2.rnull);
          } else {
            if (M2.eq_p(__eq__p1111, M2.eqv_p) !== false) {
              var loop1131 = function(l1132, seen1133) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1132) !== false) {
                  var if_res651 = l1132;
                } else {
                  var x1134 = M2.car(l1132);
                  var k1135 = key1116(x1134);
                  var l1136 = M2.cdr(l1132);
                  if (M0.memv(k1135, seen1133) !== false) {
                    var if_res650 = loop1131(l1136, seen1133);
                  } else {
                    var if_res650 = M2.cons(x1134, loop1131(l1136, M2.cons(k1135, seen1133)));
                  }
                  var if_res651 = if_res650;
                }
                return if_res651;
              };
              var if_res654 = loop1131(l1110, M2.rnull);
            } else {
              var loop1137 = function(l1138, seen1139) {
                if (arguments.length !== 2) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.null_p(l1138) !== false) {
                  var if_res653 = l1138;
                } else {
                  var x1140 = M2.car(l1138);
                  var k1141 = key1116(x1140);
                  var l1142 = M2.cdr(l1138);
                  if ((function(x1143, seen1144) {
                    if (arguments.length !== 2) {
                      throw $rjs_core.racketContractError("arity mismatch");
                    } else {}
                    return M5.ormap(function(y1145) {
                      if (arguments.length !== 1) {
                        throw $rjs_core.racketContractError("arity mismatch");
                      } else {}
                      return __eq__p1111(x1143, y1145);
                    }, seen1144);
                  })(k1141, seen1139) !== false) {
                    var if_res652 = loop1137(l1142, seen1139);
                  } else {
                    var if_res652 = M2.cons(x1140, loop1137(l1142, M2.cons(k1141, seen1139)));
                  }
                  var if_res653 = if_res652;
                }
                return if_res653;
              };
              var if_res654 = loop1137(l1110, M2.rnull);
            }
            var if_res655 = if_res654;
          }
          var if_res656 = if_res655;
        }
        var if_res662 = if_res656;
      } else {
        if (key1112 !== false) {
          var loop1146 = function(l1147) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1147) !== false) {
              var if_res658 = l1147;
            } else {
              var x1148 = M2.car(l1147);
              var k1149 = key1112(x1148);
              var l1150 = M2.cdr(l1147);
              if (M2.hash_ref(h1114, k1149, false) !== false) {
                var if_res657 = loop1146(l1150);
              } else {
                M2.hash_set_bang_(h1114, k1149, true);
                var if_res657 = M2.cons(x1148, loop1146(l1150));
              }
              var if_res658 = if_res657;
            }
            return if_res658;
          };
          var if_res661 = loop1146(l1110);
        } else {
          var loop1151 = function(l1152) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.null_p(l1152) !== false) {
              var if_res660 = l1152;
            } else {
              var x1153 = M2.car(l1152);
              var k1154 = x1153;
              var l1155 = M2.cdr(l1152);
              if (M2.hash_ref(h1114, k1154, false) !== false) {
                var if_res659 = loop1151(l1155);
              } else {
                M2.hash_set_bang_(h1114, k1154, true);
                var if_res659 = M2.cons(x1153, loop1151(l1155));
              }
              var if_res660 = if_res659;
            }
            return if_res660;
          };
          var if_res661 = loop1151(l1110);
        }
        var if_res662 = if_res661;
      }
      var if_res663 = if_res662;
    }
    return if_res663;
  };
  var unpack44 = function(given_kws1156, given_args1157, l421158, __eq__p401159, __eq__p411160) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key391161 = M2.pair_p(given_kws1156);
    if (key391161 !== false) {
      var if_res664 = M2.car(given_args1157);
    } else {
      var if_res664 = M2.rvoid();
    }
    var key381162 = if_res664;
    return remove_duplicates43(key381162, key391161, l421158, __eq__p401159, __eq__p411160);
  };
  var cl669 = function(given_kws1167, given_args1168, l1169) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1167, given_args1168, l1169, false, false);
  };
  var cl670 = function(given_kws1170, given_args1171, l1172, __eq__p401173) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(given_kws1170, given_args1171, l1172, __eq__p401173, true);
  };
  var temp672 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam671 = {
      '3': cl669,
      '4': cl670
    }[arguments.length];
    if (fixed_lam671 !== undefined) {
      return fixed_lam671.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp668 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl665 = function(l1175) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1175, false, false);
  };
  var cl666 = function(l1176, __eq__p401177) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack44(M2.rnull, M2.rnull, l1176, __eq__p401177, true);
  };
  var remove_duplicates1174 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam667 = {
      '1': cl665,
      '2': cl666
    }[arguments.length];
    if (fixed_lam667 !== undefined) {
      return fixed_lam667.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var remove_duplicates45 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1163, given_argc1164) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1164, 3) !== false) {
      var if_res673 = M2.__lt__eq_(given_argc1164, 4);
    } else {
      var if_res673 = false;
    }
    if (if_res673 !== false) {
      var l11165 = given_kws1163;
      if (M2.null_p(l11165) !== false) {
        var if_res675 = l11165;
      } else {
        if (M2.eq_p(M2.car(l11165), $rjs_core.Keyword.make("key")) !== false) {
          var if_res674 = M2.cdr(l11165);
        } else {
          var if_res674 = l11165;
        }
        var if_res675 = if_res674;
      }
      var l11166 = if_res675;
      var if_res676 = M2.null_p(l11166);
    } else {
      var if_res676 = false;
    }
    return if_res676;
  }, temp672, M2.rnull, temp668, remove_duplicates1174);
  var check_duplicates51 = function(key461178, key471179, items501180, same_p481181, same_p491182) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var items1183 = items501180;
    if (same_p491182 !== false) {
      var if_res677 = same_p481181;
    } else {
      var if_res677 = M2.equal_p;
    }
    var same_p1184 = if_res677;
    if (key471179 !== false) {
      var if_res678 = key461178;
    } else {
      var if_res678 = M2.values;
    }
    var key1185 = if_res678;
    if (M2.list_p(items1183) !== false) {
      var if_res679 = M2.rvoid();
    } else {
      var if_res679 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("list?"), 0, items1183);
    }
    if_res679;
    if (M2.procedure_p(key1185) !== false) {
      var if_res680 = M2.procedure_arity_includes_p(key1185, 1);
    } else {
      var if_res680 = false;
    }
    if (if_res680 !== false) {
      var if_res681 = M2.rvoid();
    } else {
      var if_res681 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), key1185);
    }
    if_res681;
    if (M2.eq_p(same_p1184, M2.equal_p) !== false) {
      var if_res686 = check_duplicates_by_t(items1183, key1185, M2.make_hash());
    } else {
      if (M2.eq_p(same_p1184, M2.eq_p) !== false) {
        var if_res685 = check_duplicates_by_t(items1183, key1185, M2.make_hasheq());
      } else {
        if (M2.eq_p(same_p1184, M2.eqv_p) !== false) {
          var if_res684 = check_duplicates_by_t(items1183, key1185, M2.make_hasheqv());
        } else {
          if (M2.procedure_p(same_p1184) !== false) {
            var if_res682 = M2.procedure_arity_includes_p(same_p1184, 2);
          } else {
            var if_res682 = false;
          }
          if (if_res682 !== false) {
            var if_res683 = M2.rvoid();
          } else {
            var if_res683 = M2.raise_argument_error($rjs_core.Symbol.make("check-duplicates"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 1, items1183, same_p1184);
          }
          if_res683;
          var if_res684 = check_duplicates_by_list(items1183, key1185, same_p1184);
        }
        var if_res685 = if_res684;
      }
      var if_res686 = if_res685;
    }
    return if_res686;
  };
  var unpack52 = function(given_kws1186, given_args1187, items501188, same_p481189, same_p491190) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key471191 = M2.pair_p(given_kws1186);
    if (key471191 !== false) {
      var if_res687 = M2.car(given_args1187);
    } else {
      var if_res687 = M2.rvoid();
    }
    var key461192 = if_res687;
    return check_duplicates51(key461192, key471191, items501188, same_p481189, same_p491190);
  };
  var cl692 = function(given_kws1197, given_args1198, items1199) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1197, given_args1198, items1199, false, false);
  };
  var cl693 = function(given_kws1200, given_args1201, items1202, same_p481203) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(given_kws1200, given_args1201, items1202, same_p481203, true);
  };
  var temp695 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam694 = {
      '3': cl692,
      '4': cl693
    }[arguments.length];
    if (fixed_lam694 !== undefined) {
      return fixed_lam694.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3, 4]);
  var temp691 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("key"));
  var cl688 = function(items1205) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1205, false, false);
  };
  var cl689 = function(items1206, same_p481207) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack52(M2.rnull, M2.rnull, items1206, same_p481207, true);
  };
  var check_duplicates1204 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam690 = {
      '1': cl688,
      '2': cl689
    }[arguments.length];
    if (fixed_lam690 !== undefined) {
      return fixed_lam690.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var check_duplicates53 = M9.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws1193, given_argc1194) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.__gt__eq_(given_argc1194, 3) !== false) {
      var if_res696 = M2.__lt__eq_(given_argc1194, 4);
    } else {
      var if_res696 = false;
    }
    if (if_res696 !== false) {
      var l11195 = given_kws1193;
      if (M2.null_p(l11195) !== false) {
        var if_res698 = l11195;
      } else {
        if (M2.eq_p(M2.car(l11195), $rjs_core.Keyword.make("key")) !== false) {
          var if_res697 = M2.cdr(l11195);
        } else {
          var if_res697 = l11195;
        }
        var if_res698 = if_res697;
      }
      var l11196 = if_res698;
      var if_res699 = M2.null_p(l11196);
    } else {
      var if_res699 = false;
    }
    return if_res699;
  }, temp695, M2.rnull, temp691, check_duplicates1204);
  var check_duplicates_by_t = function(items1208, key1209, table1210) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1211 = function(items1212) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1212) !== false) {
        var key_item1213 = key1209(M2.car(items1212));
        if (M2.hash_ref(table1210, key_item1213, false) !== false) {
          var if_res700 = M2.car(items1212);
        } else {
          M2.hash_set_bang_(table1210, key_item1213, true);
          var if_res700 = loop1211(M2.cdr(items1212));
        }
        var if_res701 = if_res700;
      } else {
        var if_res701 = false;
      }
      return if_res701;
    };
    return loop1211(items1208);
  };
  var check_duplicates_by_list = function(items1214, key1215, same_p1216) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var loop1217 = function(items1218, sofar1219) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(items1218) !== false) {
        var key_item1220 = key1215(M2.car(items1218));
        var lst1221 = sofar1219;
        if (M2.list_p(lst1221) !== false) {
          var if_res702 = M2.rvoid();
        } else {
          var if_res702 = M3.__rjs_quoted__.in_list(lst1221);
        }
        if_res702;
        var for_loop1222 = function(result1223, lst1224) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.pair_p(lst1224) !== false) {
            var prev1225 = M10.unsafe_car(lst1224);
            var rest1226 = M10.unsafe_cdr(lst1224);
            if (true !== false) {
              var result1228 = result1223;
              var result1229 = same_p1216(key_item1220, prev1225);
              var result1227 = M2.values(result1229);
              if (true !== false) {
                var if_res704 = M2.not($rjs_core.attachProcedureArity(function() {
                  for (var x1230703 = [],
                      $__2 = 0; $__2 < arguments.length; $__2++)
                    x1230703[$__2] = arguments[$__2];
                  var x1230 = $rjs_core.Pair.listFromArray(x1230703);
                  return result1227;
                })(prev1225));
              } else {
                var if_res704 = false;
              }
              if (if_res704 !== false) {
                var if_res705 = M2.not(false);
              } else {
                var if_res705 = false;
              }
              if (if_res705 !== false) {
                var if_res706 = for_loop1222(result1227, rest1226);
              } else {
                var if_res706 = result1227;
              }
              var if_res707 = if_res706;
            } else {
              var if_res707 = result1223;
            }
            var if_res708 = if_res707;
          } else {
            var if_res708 = result1223;
          }
          return if_res708;
        };
        if (for_loop1222(false, lst1221) !== false) {
          var if_res709 = M2.car(items1218);
        } else {
          var if_res709 = loop1217(M2.cdr(items1218), M2.cons(key_item1220, sofar1219));
        }
        var if_res710 = if_res709;
      } else {
        var if_res710 = false;
      }
      return if_res710;
    };
    return loop1217(items1214, M2.rnull);
  };
  var check_filter_arguments = function(who1231, f1232, l1233, ls1234) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1232) !== false) {
      var if_res711 = M2.rvoid();
    } else {
      var if_res711 = M2.apply(M2.raise_argument_error, who1231, $rjs_core.UString.makeInternedImmutable("procedure?"), 0, f1232, l1233, ls1234);
    }
    if_res711;
    if (M2.procedure_arity_includes_p(f1232, M2.add1(M2.length(ls1234))) !== false) {
      var if_res712 = M2.rvoid();
    } else {
      var if_res712 = M2.raise_arguments_error(who1231, $rjs_core.UString.makeInternedImmutable("mismatch between procedure arity and argument count"), $rjs_core.UString.makeInternedImmutable("procedure"), f1232, $rjs_core.UString.makeInternedImmutable("expected arity"), M2.add1(M2.length(ls1234)));
    }
    if_res712;
    if (M2.list_p(l1233) !== false) {
      var if_res713 = M5.andmap(M2.list_p, ls1234);
    } else {
      var if_res713 = false;
    }
    if (if_res713 !== false) {
      var if_res733 = M2.rvoid();
    } else {
      var let_result714 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), M2.cons(l1233, ls1234));
      var pos__gt_vals1235 = let_result714.getAt(0);
      var pos_pre_inc1236 = let_result714.getAt(1);
      var pos_next1237 = let_result714.getAt(2);
      var init1238 = let_result714.getAt(3);
      var pos_cont_p1239 = let_result714.getAt(4);
      var val_cont_p1240 = let_result714.getAt(5);
      var all_cont_p1241 = let_result714.getAt(6);
      var start1242 = 0;
      if (M2.rvoid() !== false) {
        if (M2.exact_nonnegative_integer_p(start1242) !== false) {
          var if_res715 = M2.rvoid();
        } else {
          var if_res715 = M3.__rjs_quoted__.in_naturals(start1242);
        }
        var if_res716 = if_res715;
      } else {
        var if_res716 = false;
      }
      if_res716;
      var for_loop1243 = function(pos1244, pos1245) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (pos_cont_p1239 !== false) {
          var if_res717 = pos_cont_p1239(pos1244);
        } else {
          var if_res717 = true;
        }
        if (if_res717 !== false) {
          var if_res718 = true;
        } else {
          var if_res718 = false;
        }
        if (if_res718 !== false) {
          var x1250 = pos__gt_vals1235(pos1244);
          if (all_cont_p1241 !== false) {
            var if_res719 = function(pos1251) {
              if (arguments.length !== 1) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              return all_cont_p1241(pos1251, x1250);
            };
          } else {
            var if_res719 = false;
          }
          var let_result720 = M2.values(x1250, if_res719);
          var x1246 = let_result720.getAt(0);
          var all_cont_p_by_pos1247 = let_result720.getAt(1);
          if (pos_pre_inc1236 !== false) {
            var if_res721 = pos_pre_inc1236(pos1244);
          } else {
            var if_res721 = pos1244;
          }
          var pos1248 = if_res721;
          var i1249 = pos1245;
          if (val_cont_p1240 !== false) {
            var if_res722 = val_cont_p1240(x1246);
          } else {
            var if_res722 = true;
          }
          if (if_res722 !== false) {
            var if_res723 = true;
          } else {
            var if_res723 = false;
          }
          if (if_res723 !== false) {
            if (M2.list_p(x1246) !== false) {
              var if_res724 = M2.rvoid();
            } else {
              var if_res724 = M2.apply(M2.raise_argument_error, who1231, $rjs_core.UString.makeInternedImmutable("list?"), M2.add1(i1249), f1232, l1233, ls1234);
            }
            if_res724;
            var let_result725 = M2.values();
            var let_result726 = M2.values();
            if (all_cont_p_by_pos1247 !== false) {
              var if_res727 = all_cont_p_by_pos1247(pos1248);
            } else {
              var if_res727 = true;
            }
            if (if_res727 !== false) {
              var if_res728 = true;
            } else {
              var if_res728 = false;
            }
            if (if_res728 !== false) {
              var if_res729 = M2.not(false);
            } else {
              var if_res729 = false;
            }
            if (if_res729 !== false) {
              var if_res730 = for_loop1243(pos_next1237(pos1248), pos1245 + 1);
            } else {
              var if_res730 = M2.values();
            }
            var if_res731 = if_res730;
          } else {
            var if_res731 = M2.values();
          }
          var if_res732 = if_res731;
        } else {
          var if_res732 = M2.values();
        }
        return if_res732;
      };
      for_loop1243(init1238, start1242);
      var if_res733 = M2.rvoid();
    }
    return if_res733;
  };
  var filter_map = $rjs_core.attachProcedureArity(function(f1252, l1253) {
    for (var ls1254734 = [],
        $__2 = 2; $__2 < arguments.length; $__2++)
      ls1254734[$__2 - 2] = arguments[$__2];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1254 = $rjs_core.Pair.listFromArray(ls1254734);
    check_filter_arguments($rjs_core.Symbol.make("filter-map"), f1252, l1253, ls1254);
    if (M2.pair_p(ls1254) !== false) {
      var len1255 = M2.length(l1253);
      if (M5.andmap(function(l1256) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1255, M2.length(l1256));
      }, ls1254) !== false) {
        var loop1257 = function(l1258, ls1259) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1258) !== false) {
            var if_res736 = M2.rnull;
          } else {
            var x1260 = M2.apply(f1252, M2.car(l1258), M5.map(M2.car, ls1259));
            if (x1260 !== false) {
              var if_res735 = M2.cons(x1260, loop1257(M2.cdr(l1258), M5.map(M2.cdr, ls1259)));
            } else {
              var if_res735 = loop1257(M2.cdr(l1258), M5.map(M2.cdr, ls1259));
            }
            var if_res736 = if_res735;
          }
          return if_res736;
        };
        var if_res737 = loop1257(l1253, ls1254);
      } else {
        var if_res737 = M2.raise_arguments_error($rjs_core.Symbol.make("filter-map"), $rjs_core.UString.makeInternedImmutable("all lists must have same size"));
      }
      var if_res740 = if_res737;
    } else {
      var loop1261 = function(l1262) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1262) !== false) {
          var if_res739 = M2.rnull;
        } else {
          var x1263 = f1252(M2.car(l1262));
          if (x1263 !== false) {
            var if_res738 = M2.cons(x1263, loop1261(M2.cdr(l1262)));
          } else {
            var if_res738 = loop1261(M2.cdr(l1262));
          }
          var if_res739 = if_res738;
        }
        return if_res739;
      };
      var if_res740 = loop1261(l1253);
    }
    return if_res740;
  });
  var count = $rjs_core.attachProcedureArity(function(f1264, l1265) {
    for (var ls1266741 = [],
        $__3 = 2; $__3 < arguments.length; $__3++)
      ls1266741[$__3 - 2] = arguments[$__3];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1266 = $rjs_core.Pair.listFromArray(ls1266741);
    check_filter_arguments($rjs_core.Symbol.make("count"), f1264, l1265, ls1266);
    if (M2.pair_p(ls1266) !== false) {
      var len1267 = M2.length(l1265);
      if (M5.andmap(function(l1268) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.__eq_(len1267, M2.length(l1268));
      }, ls1266) !== false) {
        var loop1269 = function(l1270, ls1271, c1272) {
          if (arguments.length !== 3) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M2.null_p(l1270) !== false) {
            var if_res745 = c1272;
          } else {
            var temp744 = M2.cdr(l1270);
            var temp743 = M5.map(M2.cdr, ls1271);
            if (M2.apply(f1264, M2.car(l1270), M5.map(M2.car, ls1271)) !== false) {
              var if_res742 = M2.add1(c1272);
            } else {
              var if_res742 = c1272;
            }
            var if_res745 = loop1269(temp744, temp743, if_res742);
          }
          return if_res745;
        };
        var if_res746 = loop1269(l1265, ls1266, 0);
      } else {
        var if_res746 = M2.raise_arguments_error($rjs_core.Symbol.make("count"), $rjs_core.UString.makeInternedImmutable("all lists must have same size"));
      }
      var if_res750 = if_res746;
    } else {
      var loop1273 = function(l1274, c1275) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(l1274) !== false) {
          var if_res749 = c1275;
        } else {
          var temp748 = M2.cdr(l1274);
          if (f1264(M2.car(l1274)) !== false) {
            var if_res747 = M2.add1(c1275);
          } else {
            var if_res747 = c1275;
          }
          var if_res749 = loop1273(temp748, if_res747);
        }
        return if_res749;
      };
      var if_res750 = loop1273(l1265, 0);
    }
    return if_res750;
  });
  var partition = function(pred1276, l1277) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(pred1276) !== false) {
      var if_res751 = M2.procedure_arity_includes_p(pred1276, 1);
    } else {
      var if_res751 = false;
    }
    if (if_res751 !== false) {
      var if_res752 = M2.rvoid();
    } else {
      var if_res752 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, pred1276, l1277);
    }
    if_res752;
    if (M2.list_p(l1277) !== false) {
      var if_res753 = M2.rvoid();
    } else {
      var if_res753 = M2.raise_argument_error($rjs_core.Symbol.make("partition"), $rjs_core.UString.makeInternedImmutable("list?"), 1, pred1276, l1277);
    }
    if_res753;
    var loop1278 = function(l1279, i1280, o1281) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1279) !== false) {
        var if_res755 = M2.values(M8.alt_reverse(i1280), M8.alt_reverse(o1281));
      } else {
        var x1282 = M2.car(l1279);
        var l1283 = M2.cdr(l1279);
        if (pred1276(x1282) !== false) {
          var if_res754 = loop1278(l1283, M2.cons(x1282, i1280), o1281);
        } else {
          var if_res754 = loop1278(l1283, i1280, M2.cons(x1282, o1281));
        }
        var if_res755 = if_res754;
      }
      return if_res755;
    };
    return loop1278(l1277, $rjs_core.Pair.makeList(), $rjs_core.Pair.makeList());
  };
  var cl756 = function(end1285) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1286 = 0;
    var end1287 = end1285;
    var inc1288 = 1;
    if (M2.real_p(start1286) !== false) {
      if (M2.real_p(end1287) !== false) {
        var if_res760 = M2.real_p(inc1288);
      } else {
        var if_res760 = false;
      }
      var if_res761 = if_res760;
    } else {
      var if_res761 = false;
    }
    if (if_res761 !== false) {
      var if_res762 = M2.rvoid();
    } else {
      var if_res762 = M3.__rjs_quoted__.in_range(start1286, end1287, inc1288);
    }
    if_res762;
    var for_loop1289 = function(fold_var1290, pos1291) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1291, end1287) !== false) {
        var i1292 = pos1291;
        if (true !== false) {
          var fold_var1294 = fold_var1290;
          var fold_var1295 = M2.cons(i1292, fold_var1294);
          var fold_var1293 = M2.values(fold_var1295);
          if (true !== false) {
            var if_res763 = M2.not(false);
          } else {
            var if_res763 = false;
          }
          if (if_res763 !== false) {
            var if_res764 = for_loop1289(fold_var1293, pos1291 + inc1288);
          } else {
            var if_res764 = fold_var1293;
          }
          var if_res765 = if_res764;
        } else {
          var if_res765 = fold_var1290;
        }
        var if_res766 = if_res765;
      } else {
        var if_res766 = fold_var1290;
      }
      return if_res766;
    };
    return M8.alt_reverse(for_loop1289(M2.rnull, start1286));
  };
  var cl757 = function(start1296, end1297) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1298 = start1296;
    var end1299 = end1297;
    var inc1300 = 1;
    if (M2.real_p(start1298) !== false) {
      if (M2.real_p(end1299) !== false) {
        var if_res767 = M2.real_p(inc1300);
      } else {
        var if_res767 = false;
      }
      var if_res768 = if_res767;
    } else {
      var if_res768 = false;
    }
    if (if_res768 !== false) {
      var if_res769 = M2.rvoid();
    } else {
      var if_res769 = M3.__rjs_quoted__.in_range(start1298, end1299, inc1300);
    }
    if_res769;
    var for_loop1301 = function(fold_var1302, pos1303) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__lt_(pos1303, end1299) !== false) {
        var i1304 = pos1303;
        if (true !== false) {
          var fold_var1306 = fold_var1302;
          var fold_var1307 = M2.cons(i1304, fold_var1306);
          var fold_var1305 = M2.values(fold_var1307);
          if (true !== false) {
            var if_res770 = M2.not(false);
          } else {
            var if_res770 = false;
          }
          if (if_res770 !== false) {
            var if_res771 = for_loop1301(fold_var1305, pos1303 + inc1300);
          } else {
            var if_res771 = fold_var1305;
          }
          var if_res772 = if_res771;
        } else {
          var if_res772 = fold_var1302;
        }
        var if_res773 = if_res772;
      } else {
        var if_res773 = fold_var1302;
      }
      return if_res773;
    };
    return M8.alt_reverse(for_loop1301(M2.rnull, start1298));
  };
  var cl758 = function(start1308, end1309, step1310) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var start1311 = start1308;
    var end1312 = end1309;
    var inc1313 = step1310;
    if (M2.real_p(start1311) !== false) {
      if (M2.real_p(end1312) !== false) {
        var if_res774 = M2.real_p(inc1313);
      } else {
        var if_res774 = false;
      }
      var if_res775 = if_res774;
    } else {
      var if_res775 = false;
    }
    if (if_res775 !== false) {
      var if_res776 = M2.rvoid();
    } else {
      var if_res776 = M3.__rjs_quoted__.in_range(start1311, end1312, inc1313);
    }
    if_res776;
    var for_loop1314 = function(fold_var1315, pos1316) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.__gt__eq_(step1310, 0) !== false) {
        var if_res777 = M2.__lt_(pos1316, end1312);
      } else {
        var if_res777 = M2.__gt_(pos1316, end1312);
      }
      if (if_res777 !== false) {
        var i1317 = pos1316;
        if (true !== false) {
          var fold_var1319 = fold_var1315;
          var fold_var1320 = M2.cons(i1317, fold_var1319);
          var fold_var1318 = M2.values(fold_var1320);
          if (true !== false) {
            var if_res778 = M2.not(false);
          } else {
            var if_res778 = false;
          }
          if (if_res778 !== false) {
            var if_res779 = for_loop1314(fold_var1318, pos1316 + inc1313);
          } else {
            var if_res779 = fold_var1318;
          }
          var if_res780 = if_res779;
        } else {
          var if_res780 = fold_var1315;
        }
        var if_res781 = if_res780;
      } else {
        var if_res781 = fold_var1315;
      }
      return if_res781;
    };
    return M8.alt_reverse(for_loop1314(M2.rnull, start1311));
  };
  var range1284 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam759 = {
      '1': cl756,
      '2': cl757,
      '3': cl758
    }[arguments.length];
    if (fixed_lam759 !== undefined) {
      return fixed_lam759.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2, 3]);
  var range_proc = range1284;
  var cl782 = function(f1321, l1322) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1321, l1322));
  };
  var cl783 = function(f1323, l11324, l21325) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.apply(M2.append, M5.map(f1323, l11324, l21325));
  };
  var cl784 = $rjs_core.attachProcedureArity(function(f1326, l1327) {
    for (var ls1328787 = [],
        $__4 = 2; $__4 < arguments.length; $__4++)
      ls1328787[$__4 - 2] = arguments[$__4];
    if (arguments.length < 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1328 = $rjs_core.Pair.listFromArray(ls1328787);
    return M2.apply(M2.append, M2.apply(M5.map, f1326, l1327, ls1328));
  });
  var append_map = $rjs_core.attachProcedureArity(function() {
    var fixed_lam785 = {
      '2': cl782,
      '3': cl783
    }[arguments.length];
    if (fixed_lam785 !== undefined) {
      return fixed_lam785.apply(null, arguments);
    } else {
      if (M2.__gt__eq_(cl784.length, 1) !== false) {
        var if_res786 = cl784.apply(null, arguments);
      } else {
        var if_res786 = M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
      }
      return if_res786;
    }
  }, [M2.make_arity_at_least(2)]);
  var filter_not = function(f1329, list1330) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1329) !== false) {
      var if_res788 = M2.procedure_arity_includes_p(f1329, 1);
    } else {
      var if_res788 = false;
    }
    if (if_res788 !== false) {
      var if_res789 = M2.rvoid();
    } else {
      var if_res789 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.makeInternedImmutable("(any/c . -> . any/c)"), 0, f1329, list1330);
    }
    if_res789;
    if (M2.list_p(list1330) !== false) {
      var if_res790 = M2.rvoid();
    } else {
      var if_res790 = M2.raise_argument_error($rjs_core.Symbol.make("filter-not"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1329, list1330);
    }
    if_res790;
    var loop1331 = function(l1332, result1333) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(l1332) !== false) {
        var if_res793 = M8.alt_reverse(result1333);
      } else {
        var temp792 = M2.cdr(l1332);
        if (f1329(M2.car(l1332)) !== false) {
          var if_res791 = result1333;
        } else {
          var if_res791 = M2.cons(M2.car(l1332), result1333);
        }
        var if_res793 = loop1331(temp792, if_res791);
      }
      return if_res793;
    };
    return loop1331(list1330, M2.rnull);
  };
  var shuffle = function(l1334) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var a1335 = M2.make_vector(M2.length(l1334));
    var lst1336 = l1334;
    var start1337 = 0;
    if (M2.list_p(lst1336) !== false) {
      var if_res794 = M2.rvoid();
    } else {
      var if_res794 = M3.__rjs_quoted__.in_list(lst1336);
    }
    if_res794;
    if (M2.exact_nonnegative_integer_p(start1337) !== false) {
      var if_res795 = M2.rvoid();
    } else {
      var if_res795 = M3.__rjs_quoted__.in_naturals(start1337);
    }
    if_res795;
    var for_loop1338 = function(lst1339, pos1340) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1339) !== false) {
        var if_res796 = true;
      } else {
        var if_res796 = false;
      }
      if (if_res796 !== false) {
        var x1341 = M10.unsafe_car(lst1339);
        var rest1342 = M10.unsafe_cdr(lst1339);
        var i1343 = pos1340;
        if (true !== false) {
          var if_res797 = true;
        } else {
          var if_res797 = false;
        }
        if (if_res797 !== false) {
          var j1344 = M7.random(M2.add1(i1343));
          if (M2.__eq_(j1344, i1343) !== false) {
            var if_res798 = M2.rvoid();
          } else {
            var if_res798 = M2.vector_set_bang_(a1335, i1343, M2.vector_ref(a1335, j1344));
          }
          if_res798;
          M2.vector_set_bang_(a1335, j1344, x1341);
          var let_result799 = M2.values();
          var let_result800 = M2.values();
          if (true !== false) {
            if (true !== false) {
              var if_res801 = M2.not(false);
            } else {
              var if_res801 = false;
            }
            var if_res802 = if_res801;
          } else {
            var if_res802 = false;
          }
          if (if_res802 !== false) {
            var if_res803 = for_loop1338(rest1342, pos1340 + 1);
          } else {
            var if_res803 = M2.values();
          }
          var if_res804 = if_res803;
        } else {
          var if_res804 = M2.values();
        }
        var if_res805 = if_res804;
      } else {
        var if_res805 = M2.values();
      }
      return if_res805;
    };
    for_loop1338(lst1336, start1337);
    M2.rvoid();
    return M2.vector__gt_list(a1335);
  };
  var combinations571345 = function(l561346, k541347, k551348) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1349 = l561346;
    if (k551348 !== false) {
      var if_res806 = k541347;
    } else {
      var if_res806 = false;
    }
    var k1350 = if_res806;
    var let_result807 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("x")), in_combinations(l1349, k1350));
    var pos__gt_vals1351 = let_result807.getAt(0);
    var pos_pre_inc1352 = let_result807.getAt(1);
    var pos_next1353 = let_result807.getAt(2);
    var init1354 = let_result807.getAt(3);
    var pos_cont_p1355 = let_result807.getAt(4);
    var val_cont_p1356 = let_result807.getAt(5);
    var all_cont_p1357 = let_result807.getAt(6);
    M2.rvoid();
    var for_loop1358 = function(fold_var1359, pos1360) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1355 !== false) {
        var if_res808 = pos_cont_p1355(pos1360);
      } else {
        var if_res808 = true;
      }
      if (if_res808 !== false) {
        var x1364 = pos__gt_vals1351(pos1360);
        if (all_cont_p1357 !== false) {
          var if_res809 = function(pos1365) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1357(pos1365, x1364);
          };
        } else {
          var if_res809 = false;
        }
        var let_result810 = M2.values(x1364, if_res809);
        var x1361 = let_result810.getAt(0);
        var all_cont_p_by_pos1362 = let_result810.getAt(1);
        if (pos_pre_inc1352 !== false) {
          var if_res811 = pos_pre_inc1352(pos1360);
        } else {
          var if_res811 = pos1360;
        }
        var pos1363 = if_res811;
        if (val_cont_p1356 !== false) {
          var if_res812 = val_cont_p1356(x1361);
        } else {
          var if_res812 = true;
        }
        if (if_res812 !== false) {
          var fold_var1367 = fold_var1359;
          var fold_var1368 = M2.cons(x1361, fold_var1367);
          var fold_var1366 = M2.values(fold_var1368);
          if (all_cont_p_by_pos1362 !== false) {
            var if_res813 = all_cont_p_by_pos1362(pos1363);
          } else {
            var if_res813 = true;
          }
          if (if_res813 !== false) {
            var if_res814 = M2.not(false);
          } else {
            var if_res814 = false;
          }
          if (if_res814 !== false) {
            var if_res815 = for_loop1358(fold_var1366, pos_next1353(pos1363));
          } else {
            var if_res815 = fold_var1366;
          }
          var if_res816 = if_res815;
        } else {
          var if_res816 = fold_var1359;
        }
        var if_res817 = if_res816;
      } else {
        var if_res817 = fold_var1359;
      }
      return if_res817;
    };
    return M8.alt_reverse(for_loop1358(M2.rnull, init1354));
  };
  var cl818 = function(l1369) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571345(l1369, false, false);
  };
  var cl819 = function(l1370, k541371) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return combinations571345(l1370, k541371, true);
  };
  var combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam820 = {
      '1': cl818,
      '2': cl819
    }[arguments.length];
    if (fixed_lam820 !== undefined) {
      return fixed_lam820.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var in_combinations621372 = function(l611373, k591374, k601375) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var l1376 = l611373;
    if (k601375 !== false) {
      var if_res821 = k591374;
    } else {
      var if_res821 = false;
    }
    var k1377 = if_res821;
    if (M2.list_p(l1376) !== false) {
      var if_res822 = M2.rvoid();
    } else {
      var if_res822 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1376);
    }
    if_res822;
    var let_result823 = M2.values();
    if (k1377 !== false) {
      var if_res824 = M2.not(M2.exact_nonnegative_integer_p(k1377));
    } else {
      var if_res824 = false;
    }
    if (if_res824 !== false) {
      var if_res825 = M2.raise_argument_error($rjs_core.Symbol.make("in-combinations"), $rjs_core.UString.makeInternedImmutable("exact-nonnegative-integer?"), 1, l1376, k1377);
    } else {
      var if_res825 = M2.rvoid();
    }
    if_res825;
    var let_result826 = M2.values();
    var v1378 = M2.list__gt_vector(l1376);
    var N1379 = M2.vector_length(v1378);
    var N_11380 = N1379 - 1;
    var vector_ref_by_bits1381 = function(v1382, b1383) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var start1384 = N_11380;
      var end1385 = -1;
      var inc1386 = -1;
      if (M2.real_p(start1384) !== false) {
        if (M2.real_p(end1385) !== false) {
          var if_res827 = M2.real_p(inc1386);
        } else {
          var if_res827 = false;
        }
        var if_res828 = if_res827;
      } else {
        var if_res828 = false;
      }
      if (if_res828 !== false) {
        var if_res829 = M2.rvoid();
      } else {
        var if_res829 = M3.__rjs_quoted__.in_range(start1384, end1385, inc1386);
      }
      if_res829;
      var for_loop1387 = function(acc1388, pos1389) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.__gt_(pos1389, end1385) !== false) {
          var i1390 = pos1389;
          if (true !== false) {
            var acc1392 = acc1388;
            if (M2.bitwise_bit_set_p(b1383, i1390) !== false) {
              var if_res830 = M2.cons(M2.vector_ref(v1382, i1390), acc1392);
            } else {
              var if_res830 = acc1392;
            }
            var acc1393 = if_res830;
            var acc1391 = M2.values(acc1393);
            if (true !== false) {
              var if_res831 = M2.not(false);
            } else {
              var if_res831 = false;
            }
            if (if_res831 !== false) {
              var if_res832 = for_loop1387(acc1391, pos1389 + inc1386);
            } else {
              var if_res832 = acc1391;
            }
            var if_res833 = if_res832;
          } else {
            var if_res833 = acc1388;
          }
          var if_res834 = if_res833;
        } else {
          var if_res834 = acc1388;
        }
        return if_res834;
      };
      return for_loop1387($rjs_core.Pair.makeList(), start1384);
    };
    if (M2.not(k1377) !== false) {
      var if_res837 = M2.values(0, M2.expt(2, N1379) - 1, M2.add1);
    } else {
      if (M2.__lt_(N1379, k1377) !== false) {
        var if_res836 = M2.values(1, 0, M2.values);
      } else {
        var first1397 = M2.expt(2, k1377) - 1;
        if (M2.zero_p(first1397) !== false) {
          var if_res835 = M2.add1;
        } else {
          var if_res835 = function(n1399) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            var u1400 = M2.bitwise_and(n1399, M2.__(n1399));
            var v1401 = u1400 + n1399;
            return v1401 + M2.arithmetic_shift(M2.quotient(M2.bitwise_xor(v1401, n1399), u1400), -2);
          };
        }
        var gospers_hack1398 = if_res835;
        var if_res836 = M2.values(first1397, M2.arithmetic_shift(first1397, N1379 - k1377), gospers_hack1398);
      }
      var if_res837 = if_res836;
    }
    var let_result838 = if_res837;
    var first1394 = let_result838.getAt(0);
    var last1395 = let_result838.getAt(1);
    var incr1396 = let_result838.getAt(2);
    var curr_box1403 = M2.box(first1394);
    var gen_next1402 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var curr1404 = M2.unbox(curr_box1403);
      if (M2.__lt__eq_(curr1404, last1395) !== false) {
        var begin_res839 = vector_ref_by_bits1381(v1378, curr1404);
        M2.set_box_bang_(curr_box1403, incr1396(curr1404));
        var if_res840 = begin_res839;
      } else {
        var if_res840 = false;
      }
      return if_res840;
    };
    return M3.__rjs_quoted__.in_producer(gen_next1402, false);
  };
  var cl841 = function(l1405) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621372(l1405, false, false);
  };
  var cl842 = function(l1406, k591407) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return in_combinations621372(l1406, k591407, true);
  };
  var in_combinations = $rjs_core.attachProcedureArity(function() {
    var fixed_lam843 = {
      '1': cl841,
      '2': cl842
    }[arguments.length];
    if (fixed_lam843 !== undefined) {
      return fixed_lam843.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var swap_plus_flip = function(l1408, i1409, j1410) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var tmp1411 = j1410;
    if (M2.equal_p(tmp1411, 0) !== false) {
      var if_res851 = M2.list_times_(M2.cadr(l1408), M2.car(l1408), M2.cddr(l1408));
    } else {
      if (M2.equal_p(tmp1411, 1) !== false) {
        var a1412 = M2.car(l1408);
        var b1413 = M2.cadr(l1408);
        var c1414 = M2.caddr(l1408);
        var l1415 = M2.cdddr(l1408);
        var tmp1416 = i1409;
        if (M2.equal_p(tmp1416, 0) !== false) {
          var if_res844 = M2.list_times_(b1413, c1414, a1412, l1415);
        } else {
          var if_res844 = M2.list_times_(c1414, a1412, b1413, l1415);
        }
        var if_res850 = if_res844;
      } else {
        if (M2.equal_p(tmp1411, 2) !== false) {
          var a1417 = M2.car(l1408);
          var b1418 = M2.cadr(l1408);
          var c1419 = M2.caddr(l1408);
          var d1420 = M2.cadddr(l1408);
          var l1421 = M2.cddddr(l1408);
          var tmp1422 = i1409;
          if (M2.equal_p(tmp1422, 0) !== false) {
            var if_res846 = M2.list_times_(c1419, b1418, d1420, a1417, l1421);
          } else {
            if (M2.equal_p(tmp1422, 1) !== false) {
              var if_res845 = M2.list_times_(c1419, d1420, a1417, b1418, l1421);
            } else {
              var if_res845 = M2.list_times_(d1420, b1418, a1417, c1419, l1421);
            }
            var if_res846 = if_res845;
          }
          var if_res849 = if_res846;
        } else {
          var loop1423 = function(n1424, l11425, r11426) {
            if (arguments.length !== 3) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (M2.__gt_(n1424, 0) !== false) {
              var if_res848 = loop1423(M2.sub1(n1424), M2.cons(M2.car(r11426), l11425), M2.cdr(r11426));
            } else {
              var loop1427 = function(n1428, l21429, r21430) {
                if (arguments.length !== 3) {
                  throw $rjs_core.racketContractError("arity mismatch");
                } else {}
                if (M2.__gt_(n1428, 0) !== false) {
                  var if_res847 = loop1427(M2.sub1(n1428), M2.cons(M2.car(r21430), l21429), M2.cdr(r21430));
                } else {
                  var if_res847 = M4.__rjs_quoted__.qq_append(l21429, M2.list_times_(M2.car(r21430), M4.__rjs_quoted__.qq_append(l11425, M2.list_times_(M2.car(r11426), M2.cdr(r21430)))));
                }
                return if_res847;
              };
              var if_res848 = loop1427(j1410 - i1409, $rjs_core.Pair.makeList(), M2.cdr(r11426));
            }
            return if_res848;
          };
          var if_res849 = loop1423(i1409, $rjs_core.Pair.makeList(), l1408);
        }
        var if_res850 = if_res849;
      }
      var if_res851 = if_res850;
    }
    return if_res851;
  };
  var permutations = function(l1431) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1431)) !== false) {
      var if_res858 = M2.raise_argument_error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1431);
    } else {
      var or_part1432 = M2.null_p(l1431);
      if (or_part1432 !== false) {
        var if_res852 = or_part1432;
      } else {
        var if_res852 = M2.null_p(M2.cdr(l1431));
      }
      if (if_res852 !== false) {
        var if_res857 = M2.list(l1431);
      } else {
        var N1433 = M2.length(l1431) - 2;
        if (M2.__gt_(N1433, 254) !== false) {
          var if_res853 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("input list too long: ~e"), l1431);
        } else {
          var if_res853 = M2.rvoid();
        }
        if_res853;
        var let_result854 = M2.values();
        var c1434 = M2.make_bytes(M2.add1(N1433), 0);
        var loop1435 = function(i1436, acc1437) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var ci1438 = M2.bytes_ref(c1434, i1436);
          if (M2.__lt__eq_(ci1438, i1436) !== false) {
            M2.bytes_set_bang_(c1434, i1436, M2.add1(ci1438));
            var if_res856 = loop1435(0, M2.cons(swap_plus_flip(M2.car(acc1437), ci1438, i1436), acc1437));
          } else {
            if (M2.__lt_(i1436, N1433) !== false) {
              M2.bytes_set_bang_(c1434, i1436, 0);
              var if_res855 = loop1435(M2.add1(i1436), acc1437);
            } else {
              var if_res855 = acc1437;
            }
            var if_res856 = if_res855;
          }
          return if_res856;
        };
        var if_res857 = loop1435(0, M2.list(M8.alt_reverse(l1431)));
      }
      var if_res858 = if_res857;
    }
    return if_res858;
  };
  var in_permutations = function(l1439) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.not(M2.list_p(l1439)) !== false) {
      var if_res867 = M2.raise_argument_error($rjs_core.Symbol.make("in-permutations"), $rjs_core.UString.makeInternedImmutable("list?"), 0, l1439);
    } else {
      var or_part1440 = M2.null_p(l1439);
      if (or_part1440 !== false) {
        var if_res859 = or_part1440;
      } else {
        var if_res859 = M2.null_p(M2.cdr(l1439));
      }
      if (if_res859 !== false) {
        var if_res866 = M3.__rjs_quoted__.in_value(l1439);
      } else {
        var N1441 = M2.length(l1439) - 2;
        if (M2.__gt_(N1441, 254) !== false) {
          var if_res860 = M2.error($rjs_core.Symbol.make("permutations"), $rjs_core.UString.makeInternedImmutable("input list too long: ~e"), l1439);
        } else {
          var if_res860 = M2.rvoid();
        }
        if_res860;
        var let_result861 = M2.values();
        var c1442 = M2.make_bytes(M2.add1(N1441), 0);
        var i1443 = 0;
        var cur1444 = M8.alt_reverse(l1439);
        var next1445 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var r1446 = cur1444;
          var ci1447 = M2.bytes_ref(c1442, i1443);
          if (M2.__lt__eq_(ci1447, i1443) !== false) {
            M2.bytes_set_bang_(c1442, i1443, M2.add1(ci1447));
            var begin_res862 = swap_plus_flip(cur1444, ci1447, i1443);
            i1443 = 0;
            var if_res864 = begin_res862;
          } else {
            if (M2.__lt_(i1443, N1441) !== false) {
              M2.bytes_set_bang_(c1442, i1443, 0);
              i1443 = M2.add1(i1443);
              var if_res863 = next1445();
            } else {
              var if_res863 = false;
            }
            var if_res864 = if_res863;
          }
          return if_res864;
        };
        var if_res866 = M3.__rjs_quoted__.in_producer(function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var begin_res865 = cur1444;
          cur1444 = next1445();
          return begin_res865;
        }, false);
      }
      var if_res867 = if_res866;
    }
    return if_res867;
  };
  var mk_min = function(cmp1448, name1449, f1450, xs1451) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.procedure_p(f1450) !== false) {
      var if_res868 = M2.procedure_arity_includes_p(f1450, 1);
    } else {
      var if_res868 = false;
    }
    if (if_res868 !== false) {
      var if_res869 = M2.rvoid();
    } else {
      var if_res869 = M2.raise_argument_error(name1449, $rjs_core.UString.makeInternedImmutable("(any/c . -> . real?)"), 0, f1450, xs1451);
    }
    if_res869;
    if (M2.list_p(xs1451) !== false) {
      var if_res870 = M2.pair_p(xs1451);
    } else {
      var if_res870 = false;
    }
    if (if_res870 !== false) {
      var if_res871 = M2.rvoid();
    } else {
      var if_res871 = M2.raise_argument_error(name1449, $rjs_core.UString.makeInternedImmutable("(and/c list? (not/c empty?))"), 1, f1450, xs1451);
    }
    if_res871;
    var init_min_var1452 = f1450(M2.car(xs1451));
    if (M2.real_p(init_min_var1452) !== false) {
      var if_res872 = M2.rvoid();
    } else {
      var if_res872 = M2.raise_result_error(name1449, $rjs_core.UString.makeInternedImmutable("real?"), init_min_var1452);
    }
    if_res872;
    var loop1453 = function(min1454, min_var1455, xs1456) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(xs1456) !== false) {
        var if_res875 = min1454;
      } else {
        var new_min1457 = f1450(M2.car(xs1456));
        if (M2.real_p(new_min1457) !== false) {
          var if_res873 = M2.rvoid();
        } else {
          var if_res873 = M2.raise_result_error(name1449, $rjs_core.UString.makeInternedImmutable("real?"), new_min1457);
        }
        if_res873;
        if (cmp1448(new_min1457, min_var1455) !== false) {
          var if_res874 = loop1453(M2.car(xs1456), new_min1457, M2.cdr(xs1456));
        } else {
          var if_res874 = loop1453(min1454, min_var1455, M2.cdr(xs1456));
        }
        var if_res875 = if_res874;
      }
      return if_res875;
    };
    return loop1453(M2.car(xs1451), init_min_var1452, M2.cdr(xs1451));
  };
  var argmin = function(f1458, xs1459) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__lt_, $rjs_core.Symbol.make("argmin"), f1458, xs1459);
  };
  var argmax = function(f1460, xs1461) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return mk_min(M2.__gt_, $rjs_core.Symbol.make("argmax"), f1460, xs1461);
  };
  var group_by681462 = function(key661463, l671464, __eq__p641465, __eq__p651466) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var key1467 = key661463;
    var l1468 = l671464;
    if (__eq__p651466 !== false) {
      var if_res876 = __eq__p641465;
    } else {
      var if_res876 = M2.equal_p;
    }
    var __eq__p1469 = if_res876;
    if (M2.procedure_p(key1467) !== false) {
      var if_res877 = M2.procedure_arity_includes_p(key1467, 1);
    } else {
      var if_res877 = false;
    }
    if (if_res877 !== false) {
      var if_res878 = M2.rvoid();
    } else {
      var if_res878 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, key1467, l1468);
    }
    if_res878;
    var let_result879 = M2.values();
    if (M2.procedure_p(__eq__p1469) !== false) {
      var if_res880 = M2.procedure_arity_includes_p(__eq__p1469, 2);
    } else {
      var if_res880 = false;
    }
    if (if_res880 !== false) {
      var if_res881 = M2.rvoid();
    } else {
      var if_res881 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("(any/c any/c . -> . any/c)"), 2, key1467, l1468, __eq__p1469);
    }
    if_res881;
    var let_result882 = M2.values();
    if (M2.list_p(l1468) !== false) {
      var if_res883 = M2.rvoid();
    } else {
      var if_res883 = M2.raise_argument_error($rjs_core.Symbol.make("group-by"), $rjs_core.UString.makeInternedImmutable("list?"), 1, key1467, l1468);
    }
    if_res883;
    var let_result884 = M2.values();
    var alist_update1470 = function(al1471, k1472, up1473, fail1474) {
      if (arguments.length !== 4) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop1475 = function(al1476) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.null_p(al1476) !== false) {
          var if_res886 = M2.list(M2.cons(k1472, up1473($rjs_core.Pair.makeList())));
        } else {
          if (__eq__p1469(M2.car(M2.car(al1476)), k1472) !== false) {
            var if_res885 = M2.cons(M2.cons(k1472, up1473(M2.cdr(M2.car(al1476)))), M2.cdr(al1476));
          } else {
            var if_res885 = M2.cons(M2.car(al1476), loop1475(M2.cdr(al1476)));
          }
          var if_res886 = if_res885;
        }
        return if_res886;
      };
      return loop1475(al1471);
    };
    if (M2.equal_p(__eq__p1469, M2.eq_p) !== false) {
      var if_res889 = M2.values(M2.hasheq(), M1.hash_update);
    } else {
      if (M2.equal_p(__eq__p1469, M2.eqv_p) !== false) {
        var if_res888 = M2.values(M2.hasheqv(), M1.hash_update);
      } else {
        if (M2.equal_p(__eq__p1469, M2.equal_p) !== false) {
          var if_res887 = M2.values(M2.hash(), M1.hash_update);
        } else {
          var if_res887 = M2.values($rjs_core.Pair.makeList(), alist_update1470);
        }
        var if_res888 = if_res887;
      }
      var if_res889 = if_res888;
    }
    var let_result890 = if_res889;
    var base1477 = let_result890.getAt(0);
    var update1478 = let_result890.getAt(1);
    var lst1480 = l1468;
    var start1481 = 0;
    if (M2.list_p(lst1480) !== false) {
      var if_res891 = M2.rvoid();
    } else {
      var if_res891 = M3.__rjs_quoted__.in_list(lst1480);
    }
    if_res891;
    if (M2.exact_nonnegative_integer_p(start1481) !== false) {
      var if_res892 = M2.rvoid();
    } else {
      var if_res892 = M3.__rjs_quoted__.in_naturals(start1481);
    }
    if_res892;
    var for_loop1482 = function(res1483, lst1484, pos1485) {
      if (arguments.length !== 3) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1484) !== false) {
        var if_res893 = true;
      } else {
        var if_res893 = false;
      }
      if (if_res893 !== false) {
        var elt1486 = M10.unsafe_car(lst1484);
        var rest1487 = M10.unsafe_cdr(lst1484);
        var idx1488 = pos1485;
        if (true !== false) {
          var if_res894 = true;
        } else {
          var if_res894 = false;
        }
        if (if_res894 !== false) {
          var res1490 = res1483;
          var k1492 = key1467(elt1486);
          var v1493 = M2.cons(idx1488, elt1486);
          var res1491 = update1478(res1490, k1492, function(o1494) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M2.cons(v1493, o1494);
          }, $rjs_core.Pair.makeList());
          var res1489 = M2.values(res1491);
          if (true !== false) {
            if (true !== false) {
              var if_res895 = M2.not(false);
            } else {
              var if_res895 = false;
            }
            var if_res896 = if_res895;
          } else {
            var if_res896 = false;
          }
          if (if_res896 !== false) {
            var if_res897 = for_loop1482(res1489, rest1487, pos1485 + 1);
          } else {
            var if_res897 = res1489;
          }
          var if_res898 = if_res897;
        } else {
          var if_res898 = res1483;
        }
        var if_res899 = if_res898;
      } else {
        var if_res899 = res1483;
      }
      return if_res899;
    };
    var classes1479 = for_loop1482(base1477, lst1480, start1481);
    if (M2.list_p(classes1479) !== false) {
      var lst1496 = classes1479;
      if (M2.list_p(lst1496) !== false) {
        var if_res900 = M2.rvoid();
      } else {
        var if_res900 = M3.__rjs_quoted__.in_list(lst1496);
      }
      if_res900;
      var for_loop1497 = function(fold_var1498, lst1499) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1499) !== false) {
          var p1500 = M10.unsafe_car(lst1499);
          var rest1501 = M10.unsafe_cdr(lst1499);
          if (true !== false) {
            var fold_var1503 = fold_var1498;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901505 = M6.__rjs_quoted__.sort9;
            var temp861506 = M2.cdr(p1500);
            var __lt_871507 = M2.__lt_;
            var car881508 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res901 = M6.__rjs_quoted__.sort7(false, false, car881508, true, temp861506, __lt_871507);
            } else {
              var if_res901 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__315901505, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car881508), temp861506, __lt_871507);
            }
            var fold_var1504 = M2.cons(if_res901, fold_var1503);
            var fold_var1502 = M2.values(fold_var1504);
            if (true !== false) {
              var if_res902 = M2.not(false);
            } else {
              var if_res902 = false;
            }
            if (if_res902 !== false) {
              var if_res903 = for_loop1497(fold_var1502, rest1501);
            } else {
              var if_res903 = fold_var1502;
            }
            var if_res904 = if_res903;
          } else {
            var if_res904 = fold_var1498;
          }
          var if_res905 = if_res904;
        } else {
          var if_res905 = fold_var1498;
        }
        return if_res905;
      };
      var if_res913 = M8.alt_reverse(for_loop1497(M2.rnull, lst1496));
    } else {
      var ht1509 = classes1479;
      if ((function(ht1510) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.hash_p(ht1510);
      })(ht1509) !== false) {
        var if_res906 = M2.rvoid();
      } else {
        var if_res906 = M3.__rjs_quoted__.default_in_hash(ht1509);
      }
      if_res906;
      var for_loop1511 = function(fold_var1512, i1513) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (i1513 !== false) {
          var let_result907 = M2.__rjs_quoted__.hash_iterate_key_plus_value(ht1509, i1513);
          var _1514 = let_result907.getAt(0);
          var c1515 = let_result907.getAt(1);
          if (true !== false) {
            var fold_var1517 = fold_var1512;
            var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741519 = M6.__rjs_quoted__.sort9;
            var c891520 = c1515;
            var __lt_901521 = M2.__lt_;
            var car911522 = M2.car;
            if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
              var if_res908 = M6.__rjs_quoted__.sort7(false, false, car911522, true, c891520, __lt_901521);
            } else {
              var if_res908 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__316741519, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(car911522), c891520, __lt_901521);
            }
            var fold_var1518 = M2.cons(if_res908, fold_var1517);
            var fold_var1516 = M2.values(fold_var1518);
            if (true !== false) {
              var if_res909 = M2.not(false);
            } else {
              var if_res909 = false;
            }
            if (if_res909 !== false) {
              var if_res910 = for_loop1511(fold_var1516, M2.__rjs_quoted__.hash_iterate_next(ht1509, i1513));
            } else {
              var if_res910 = fold_var1516;
            }
            var if_res911 = if_res910;
          } else {
            var if_res911 = fold_var1512;
          }
          var if_res912 = if_res911;
        } else {
          var if_res912 = fold_var1512;
        }
        return if_res912;
      };
      var if_res913 = M8.alt_reverse(for_loop1511(M2.rnull, M2.__rjs_quoted__.hash_iterate_first(ht1509)));
    }
    var sorted_classes1495 = if_res913;
    var __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911524 = M6.__rjs_quoted__.sort9;
    var sorted_classes921525 = sorted_classes1495;
    var __lt_931526 = M2.__lt_;
    var caar941527 = M2.caar;
    if (M2.variable_reference_constant_p(M6.__rjs_quoted__.sort9) !== false) {
      var if_res914 = M6.__rjs_quoted__.sort7(false, false, caar941527, true, sorted_classes921525, __lt_931526);
    } else {
      var if_res914 = M2.checked_procedure_check_and_extract(M9.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot_ects_by_racket_by_list_dot_rkt__317911524, M9.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("key")), M2.list(caar941527), sorted_classes921525, __lt_931526);
    }
    var lst1523 = if_res914;
    if (M2.list_p(lst1523) !== false) {
      var if_res915 = M2.rvoid();
    } else {
      var if_res915 = M3.__rjs_quoted__.in_list(lst1523);
    }
    if_res915;
    var for_loop1528 = function(fold_var1529, lst1530) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.pair_p(lst1530) !== false) {
        var c1531 = M10.unsafe_car(lst1530);
        var rest1532 = M10.unsafe_cdr(lst1530);
        if (true !== false) {
          var fold_var1534 = fold_var1529;
          var fold_var1535 = M2.cons(M5.map(M2.cdr, c1531), fold_var1534);
          var fold_var1533 = M2.values(fold_var1535);
          if (true !== false) {
            var if_res916 = M2.not(false);
          } else {
            var if_res916 = false;
          }
          if (if_res916 !== false) {
            var if_res917 = for_loop1528(fold_var1533, rest1532);
          } else {
            var if_res917 = fold_var1533;
          }
          var if_res918 = if_res917;
        } else {
          var if_res918 = fold_var1529;
        }
        var if_res919 = if_res918;
      } else {
        var if_res919 = fold_var1529;
      }
      return if_res919;
    };
    return M8.alt_reverse(for_loop1528(M2.rnull, lst1523));
  };
  var cl920 = function(key1536, l1537) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681462(key1536, l1537, false, false);
  };
  var cl921 = function(key1538, l1539, __eq__p641540) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return group_by681462(key1538, l1539, __eq__p641540, true);
  };
  var group_by = $rjs_core.attachProcedureArity(function() {
    var fixed_lam922 = {
      '2': cl920,
      '3': cl921
    }[arguments.length];
    if (fixed_lam922 !== undefined) {
      return fixed_lam922.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var cartesian_product = $rjs_core.attachProcedureArity(function() {
    for (var ls1541923 = [],
        $__5 = 0; $__5 < arguments.length; $__5++)
      ls1541923[$__5] = arguments[$__5];
    var ls1541 = $rjs_core.Pair.listFromArray(ls1541923);
    var let_result924 = M3.__rjs_quoted__.make_sequence($rjs_core.Pair.makeList($rjs_core.Symbol.make("l")), ls1541);
    var pos__gt_vals1542 = let_result924.getAt(0);
    var pos_pre_inc1543 = let_result924.getAt(1);
    var pos_next1544 = let_result924.getAt(2);
    var init1545 = let_result924.getAt(3);
    var pos_cont_p1546 = let_result924.getAt(4);
    var val_cont_p1547 = let_result924.getAt(5);
    var all_cont_p1548 = let_result924.getAt(6);
    var start1549 = 0;
    if (M2.rvoid() !== false) {
      if (M2.exact_nonnegative_integer_p(start1549) !== false) {
        var if_res925 = M2.rvoid();
      } else {
        var if_res925 = M3.__rjs_quoted__.in_naturals(start1549);
      }
      var if_res926 = if_res925;
    } else {
      var if_res926 = false;
    }
    if_res926;
    var for_loop1550 = function(pos1551, pos1552) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (pos_cont_p1546 !== false) {
        var if_res927 = pos_cont_p1546(pos1551);
      } else {
        var if_res927 = true;
      }
      if (if_res927 !== false) {
        var if_res928 = true;
      } else {
        var if_res928 = false;
      }
      if (if_res928 !== false) {
        var l1557 = pos__gt_vals1542(pos1551);
        if (all_cont_p1548 !== false) {
          var if_res929 = function(pos1558) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return all_cont_p1548(pos1558, l1557);
          };
        } else {
          var if_res929 = false;
        }
        var let_result930 = M2.values(l1557, if_res929);
        var l1553 = let_result930.getAt(0);
        var all_cont_p_by_pos1554 = let_result930.getAt(1);
        if (pos_pre_inc1543 !== false) {
          var if_res931 = pos_pre_inc1543(pos1551);
        } else {
          var if_res931 = pos1551;
        }
        var pos1555 = if_res931;
        var i1556 = pos1552;
        if (val_cont_p1547 !== false) {
          var if_res932 = val_cont_p1547(l1553);
        } else {
          var if_res932 = true;
        }
        if (if_res932 !== false) {
          var if_res933 = true;
        } else {
          var if_res933 = false;
        }
        if (if_res933 !== false) {
          if (M2.list_p(l1553) !== false) {
            var if_res934 = M2.rvoid();
          } else {
            var if_res934 = M2.apply(M2.raise_argument_error, $rjs_core.Symbol.make("cartesian-product"), $rjs_core.UString.makeInternedImmutable("list?"), i1556, ls1541);
          }
          if_res934;
          var let_result935 = M2.values();
          var let_result936 = M2.values();
          if (all_cont_p_by_pos1554 !== false) {
            var if_res937 = all_cont_p_by_pos1554(pos1555);
          } else {
            var if_res937 = true;
          }
          if (if_res937 !== false) {
            var if_res938 = true;
          } else {
            var if_res938 = false;
          }
          if (if_res938 !== false) {
            var if_res939 = M2.not(false);
          } else {
            var if_res939 = false;
          }
          if (if_res939 !== false) {
            var if_res940 = for_loop1550(pos_next1544(pos1555), pos1552 + 1);
          } else {
            var if_res940 = M2.values();
          }
          var if_res941 = if_res940;
        } else {
          var if_res941 = M2.values();
        }
        var if_res942 = if_res941;
      } else {
        var if_res942 = M2.values();
      }
      return if_res942;
    };
    for_loop1550(init1545, start1549);
    var let_result943 = M2.values();
    M2.rvoid();
    var let_result944 = M2.values();
    var cp_21559 = function(as1560, bs1561) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var lst1562 = as1560;
      if (M2.list_p(lst1562) !== false) {
        var if_res945 = M2.rvoid();
      } else {
        var if_res945 = M3.__rjs_quoted__.in_list(lst1562);
      }
      if_res945;
      var for_loop1563 = function(fold_var1564, lst1565) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M2.pair_p(lst1565) !== false) {
          var i1566 = M10.unsafe_car(lst1565);
          var rest1567 = M10.unsafe_cdr(lst1565);
          if (true !== false) {
            var lst1569 = bs1561;
            if (M2.list_p(lst1569) !== false) {
              var if_res946 = M2.rvoid();
            } else {
              var if_res946 = M3.__rjs_quoted__.in_list(lst1569);
            }
            if_res946;
            var for_loop1570 = function(fold_var1571, lst1572) {
              if (arguments.length !== 2) {
                throw $rjs_core.racketContractError("arity mismatch");
              } else {}
              if (M2.pair_p(lst1572) !== false) {
                var j1573 = M10.unsafe_car(lst1572);
                var rest1574 = M10.unsafe_cdr(lst1572);
                if (true !== false) {
                  var fold_var1576 = fold_var1571;
                  var fold_var1577 = M2.cons(M2.cons(i1566, j1573), fold_var1576);
                  var fold_var1575 = M2.values(fold_var1577);
                  if (true !== false) {
                    var if_res947 = M2.not(false);
                  } else {
                    var if_res947 = false;
                  }
                  if (if_res947 !== false) {
                    var if_res948 = for_loop1570(fold_var1575, rest1574);
                  } else {
                    var if_res948 = fold_var1575;
                  }
                  var if_res949 = if_res948;
                } else {
                  var if_res949 = fold_var1571;
                }
                var if_res950 = if_res949;
              } else {
                var if_res950 = fold_var1571;
              }
              return if_res950;
            };
            var fold_var1568 = for_loop1570(fold_var1564, lst1569);
            if (true !== false) {
              var if_res951 = M2.not(false);
            } else {
              var if_res951 = false;
            }
            if (if_res951 !== false) {
              var if_res952 = for_loop1563(fold_var1568, rest1567);
            } else {
              var if_res952 = fold_var1568;
            }
            var if_res953 = if_res952;
          } else {
            var if_res953 = fold_var1564;
          }
          var if_res954 = if_res953;
        } else {
          var if_res954 = fold_var1564;
        }
        return if_res954;
      };
      return M8.alt_reverse(for_loop1563(M2.rnull, lst1562));
    };
    return M6.foldr(cp_21559, M2.list(M2.list()), ls1541);
  });
  var remf = function(f1578, ls1579) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1579) !== false) {
      var if_res955 = M2.rvoid();
    } else {
      var if_res955 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1578, ls1579);
    }
    if_res955;
    if (M2.procedure_p(f1578) !== false) {
      var if_res956 = M2.procedure_arity_includes_p(f1578, 1);
    } else {
      var if_res956 = false;
    }
    if (if_res956 !== false) {
      var if_res957 = M2.rvoid();
    } else {
      var if_res957 = M2.raise_argument_error($rjs_core.Symbol.make("remf"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, f1578, ls1579);
    }
    if_res957;
    if (M2.null_p(ls1579) !== false) {
      var if_res959 = $rjs_core.Pair.makeList();
    } else {
      if (f1578(M2.car(ls1579)) !== false) {
        var if_res958 = M2.cdr(ls1579);
      } else {
        var if_res958 = M2.cons(M2.car(ls1579), remf(f1578, M2.cdr(ls1579)));
      }
      var if_res959 = if_res958;
    }
    return if_res959;
  };
  var remf_times_ = function(f1580, ls1581) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1581) !== false) {
      var if_res960 = M2.rvoid();
    } else {
      var if_res960 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.makeInternedImmutable("list?"), 1, f1580, ls1581);
    }
    if_res960;
    if (M2.procedure_p(f1580) !== false) {
      var if_res961 = M2.procedure_arity_includes_p(f1580, 1);
    } else {
      var if_res961 = false;
    }
    if (if_res961 !== false) {
      var if_res962 = M2.rvoid();
    } else {
      var if_res962 = M2.raise_argument_error($rjs_core.Symbol.make("remf*"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 0, f1580, ls1581);
    }
    if_res962;
    if (M2.null_p(ls1581) !== false) {
      var if_res964 = $rjs_core.Pair.makeList();
    } else {
      if (f1580(M2.car(ls1581)) !== false) {
        var if_res963 = remf_times_(f1580, M2.cdr(ls1581));
      } else {
        var if_res963 = M2.cons(M2.car(ls1581), remf_times_(f1580, M2.cdr(ls1581)));
      }
      var if_res964 = if_res963;
    }
    return if_res964;
  };
  var index_of741582 = function(ls721583, v731584, __eq__p701585, __eq__p711586) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1587 = ls721583;
    var v1588 = v731584;
    if (__eq__p711586 !== false) {
      var if_res965 = __eq__p701585;
    } else {
      var if_res965 = M2.equal_p;
    }
    var __eq__p1589 = if_res965;
    if (M2.list_p(ls1587) !== false) {
      var if_res966 = M2.rvoid();
    } else {
      var if_res966 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1587, v1588);
    }
    if_res966;
    if (M2.procedure_p(__eq__p1589) !== false) {
      var if_res967 = M2.procedure_arity_includes_p(__eq__p1589, 2);
    } else {
      var if_res967 = false;
    }
    if (if_res967 !== false) {
      var if_res968 = M2.rvoid();
    } else {
      var if_res968 = M2.raise_argument_error($rjs_core.Symbol.make("index-of"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c any/c)"), 2, ls1587, v1588, __eq__p1589);
    }
    if_res968;
    var loop1590 = function(ls1591, i1592) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1591) !== false) {
        var if_res970 = false;
      } else {
        if (__eq__p1589(M2.car(ls1591), v1588) !== false) {
          var if_res969 = i1592;
        } else {
          var if_res969 = loop1590(M2.cdr(ls1591), M2.add1(i1592));
        }
        var if_res970 = if_res969;
      }
      return if_res970;
    };
    return loop1590(ls1587, 0);
  };
  var cl971 = function(ls1593, v1594) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741582(ls1593, v1594, false, false);
  };
  var cl972 = function(ls1595, v1596, __eq__p701597) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return index_of741582(ls1595, v1596, __eq__p701597, true);
  };
  var index_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam973 = {
      '2': cl971,
      '3': cl972
    }[arguments.length];
    if (fixed_lam973 !== undefined) {
      return fixed_lam973.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var index_where = function(ls1598, f1599) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1598) !== false) {
      var if_res974 = M2.rvoid();
    } else {
      var if_res974 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1598, f1599);
    }
    if_res974;
    if (M2.procedure_p(f1599) !== false) {
      var if_res975 = M2.procedure_arity_includes_p(f1599, 1);
    } else {
      var if_res975 = false;
    }
    if (if_res975 !== false) {
      var if_res976 = M2.rvoid();
    } else {
      var if_res976 = M2.raise_argument_error($rjs_core.Symbol.make("index-where"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 1, ls1598, f1599);
    }
    if_res976;
    var loop1600 = function(ls1601, i1602) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1601) !== false) {
        var if_res978 = false;
      } else {
        if (f1599(M2.car(ls1601)) !== false) {
          var if_res977 = i1602;
        } else {
          var if_res977 = loop1600(M2.cdr(ls1601), M2.add1(i1602));
        }
        var if_res978 = if_res977;
      }
      return if_res978;
    };
    return loop1600(ls1598, 0);
  };
  var indexes_of801603 = function(ls781604, v791605, __eq__p761606, __eq__p771607) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ls1608 = ls781604;
    var v1609 = v791605;
    if (__eq__p771607 !== false) {
      var if_res979 = __eq__p761606;
    } else {
      var if_res979 = M2.equal_p;
    }
    var __eq__p1610 = if_res979;
    if (M2.list_p(ls1608) !== false) {
      var if_res980 = M2.rvoid();
    } else {
      var if_res980 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1608, v1609);
    }
    if_res980;
    if (M2.procedure_p(__eq__p1610) !== false) {
      var if_res981 = M2.procedure_arity_includes_p(__eq__p1610, 2);
    } else {
      var if_res981 = false;
    }
    if (if_res981 !== false) {
      var if_res982 = M2.rvoid();
    } else {
      var if_res982 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-of"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c any/c)"), 2, ls1608, v1609, __eq__p1610);
    }
    if_res982;
    var loop1611 = function(ls1612, i1613) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1612) !== false) {
        var if_res984 = $rjs_core.Pair.makeList();
      } else {
        if (__eq__p1610(M2.car(ls1612), v1609) !== false) {
          var if_res983 = M2.cons(i1613, loop1611(M2.cdr(ls1612), M2.add1(i1613)));
        } else {
          var if_res983 = loop1611(M2.cdr(ls1612), M2.add1(i1613));
        }
        var if_res984 = if_res983;
      }
      return if_res984;
    };
    return loop1611(ls1608, 0);
  };
  var cl985 = function(ls1614, v1615) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801603(ls1614, v1615, false, false);
  };
  var cl986 = function(ls1616, v1617, __eq__p761618) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return indexes_of801603(ls1616, v1617, __eq__p761618, true);
  };
  var indexes_of = $rjs_core.attachProcedureArity(function() {
    var fixed_lam987 = {
      '2': cl985,
      '3': cl986
    }[arguments.length];
    if (fixed_lam987 !== undefined) {
      return fixed_lam987.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var indexes_where = function(ls1619, f1620) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M2.list_p(ls1619) !== false) {
      var if_res988 = M2.rvoid();
    } else {
      var if_res988 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.makeInternedImmutable("list?"), 0, ls1619, f1620);
    }
    if_res988;
    if (M2.procedure_p(f1620) !== false) {
      var if_res989 = M2.procedure_arity_includes_p(f1620, 1);
    } else {
      var if_res989 = false;
    }
    if (if_res989 !== false) {
      var if_res990 = M2.rvoid();
    } else {
      var if_res990 = M2.raise_argument_error($rjs_core.Symbol.make("indexes-where"), $rjs_core.UString.makeInternedImmutable("(-> any/c any/c)"), 1, ls1619, f1620);
    }
    if_res990;
    var loop1621 = function(ls1622, i1623) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.null_p(ls1622) !== false) {
        var if_res992 = $rjs_core.Pair.makeList();
      } else {
        if (f1620(M2.car(ls1622)) !== false) {
          var if_res991 = M2.cons(i1623, loop1621(M2.cdr(ls1622), M2.add1(i1623)));
        } else {
          var if_res991 = loop1621(M2.cdr(ls1622), M2.add1(i1623));
        }
        var if_res992 = if_res991;
      }
      return if_res992;
    };
    return loop1621(ls1619, 0);
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.check_duplicates53 = check_duplicates53;
  __rjs_quoted__.add_between35 = add_between35;
  __rjs_quoted__.check_duplicates51 = check_duplicates51;
  __rjs_quoted__.remove_duplicates43 = remove_duplicates43;
  __rjs_quoted__.remove_duplicates45 = remove_duplicates45;
  __rjs_quoted__.add_between37 = add_between37;
  __rjs_quoted__.range_proc = range_proc;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get remf_times_() {
      return remf_times_;
    },
    get remf() {
      return remf;
    },
    get cartesian_product() {
      return cartesian_product;
    },
    get group_by() {
      return group_by;
    },
    get argmax() {
      return argmax;
    },
    get argmin() {
      return argmin;
    },
    get in_permutations() {
      return in_permutations;
    },
    get permutations() {
      return permutations;
    },
    get in_combinations() {
      return in_combinations;
    },
    get combinations() {
      return combinations;
    },
    get shuffle() {
      return shuffle;
    },
    get filter_not() {
      return filter_not;
    },
    get append_map() {
      return append_map;
    },
    get partition() {
      return partition;
    },
    get count() {
      return count;
    },
    get filter_map() {
      return filter_map;
    },
    get flatten() {
      return flatten;
    },
    get append_times_() {
      return append_times_;
    },
    get drop_common_prefix() {
      return drop_common_prefix;
    },
    get take_common_prefix() {
      return take_common_prefix;
    },
    get split_common_prefix() {
      return split_common_prefix;
    },
    get list_prefix_p() {
      return list_prefix_p;
    },
    get splitf_at_right() {
      return splitf_at_right;
    },
    get dropf_right() {
      return dropf_right;
    },
    get takef_right() {
      return takef_right;
    },
    get split_at_right() {
      return split_at_right;
    },
    get take_right() {
      return take_right;
    },
    get drop_right() {
      return drop_right;
    },
    get splitf_at() {
      return splitf_at;
    },
    get dropf() {
      return dropf;
    },
    get takef() {
      return takef;
    },
    get split_at() {
      return split_at;
    },
    get take() {
      return take;
    },
    get drop() {
      return drop;
    },
    get indexes_where() {
      return indexes_where;
    },
    get indexes_of() {
      return indexes_of;
    },
    get index_where() {
      return index_where;
    },
    get index_of() {
      return index_of;
    },
    get list_set() {
      return list_set;
    },
    get list_update() {
      return list_update;
    },
    get make_list() {
      return make_list;
    },
    get empty_p() {
      return empty_p;
    },
    get empty() {
      return empty;
    },
    get cons_p() {
      return cons_p;
    },
    get rest() {
      return rest;
    },
    get last() {
      return last;
    },
    get last_pair() {
      return last_pair;
    },
    get tenth() {
      return tenth;
    },
    get ninth() {
      return ninth;
    },
    get eighth() {
      return eighth;
    },
    get seventh() {
      return seventh;
    },
    get sixth() {
      return sixth;
    },
    get fifth() {
      return fifth;
    },
    get fourth() {
      return fourth;
    },
    get third() {
      return third;
    },
    get second() {
      return second;
    },
    get first() {
      return first;
    }
  };
})();
var $__collects_47_waxeye_47_ast_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/ast.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var let_result62 = M0.make_struct_type($rjs_core.Symbol.make("ast"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("ast"));
  var struct_53 = let_result62.getAt(0);
  var make_54 = let_result62.getAt(1);
  var __p55 = let_result62.getAt(2);
  var __ref56 = let_result62.getAt(3);
  var __set_bang_57 = let_result62.getAt(4);
  var let_result63 = M0.values(struct_53, make_54, __p55, M0.make_struct_field_accessor(__ref56, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref56, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_accessor(__ref56, 2, $rjs_core.Symbol.make("pos")), M0.make_struct_field_mutator(__set_bang_57, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_57, 1, $rjs_core.Symbol.make("c")), M0.make_struct_field_mutator(__set_bang_57, 2, $rjs_core.Symbol.make("pos")));
  var struct_ast = let_result63.getAt(0);
  var ast1 = let_result63.getAt(1);
  var ast_p = let_result63.getAt(2);
  var ast_t = let_result63.getAt(3);
  var ast_c = let_result63.getAt(4);
  var ast_pos = let_result63.getAt(5);
  var set_ast_t_bang_ = let_result63.getAt(6);
  var set_ast_c_bang_ = let_result63.getAt(7);
  var set_ast_pos_bang_ = let_result63.getAt(8);
  var let_result64 = M0.make_struct_type($rjs_core.Symbol.make("parse-error"), false, 6, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4, 5), false, $rjs_core.Symbol.make("parse-error"));
  var struct_58 = let_result64.getAt(0);
  var make_59 = let_result64.getAt(1);
  var __p60 = let_result64.getAt(2);
  var __ref61 = let_result64.getAt(3);
  var __set_bang_62 = let_result64.getAt(4);
  var let_result65 = M0.values(struct_58, make_59, __p60, M0.make_struct_field_accessor(__ref61, 0, $rjs_core.Symbol.make("pos")), M0.make_struct_field_accessor(__ref61, 1, $rjs_core.Symbol.make("line")), M0.make_struct_field_accessor(__ref61, 2, $rjs_core.Symbol.make("col")), M0.make_struct_field_accessor(__ref61, 3, $rjs_core.Symbol.make("expected")), M0.make_struct_field_accessor(__ref61, 4, $rjs_core.Symbol.make("received")), M0.make_struct_field_accessor(__ref61, 5, $rjs_core.Symbol.make("snippet")));
  var struct_parse_error = let_result65.getAt(0);
  var parse_error2 = let_result65.getAt(1);
  var parse_error_p = let_result65.getAt(2);
  var parse_error_pos = let_result65.getAt(3);
  var parse_error_line = let_result65.getAt(4);
  var parse_error_col = let_result65.getAt(5);
  var parse_error_expected = let_result65.getAt(6);
  var parse_error_received = let_result65.getAt(7);
  var parse_error_snippet = let_result65.getAt(8);
  var ast__gt_string = function(ast63) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var indent_level64 = 0;
    var o65 = M0.open_output_string();
    var display_a66 = function(c69) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level64, 0) !== false) {
        var if_res66 = M0.display($rjs_core.UString.makeInternedImmutable("->  "), o65);
      } else {
        var if_res66 = M0.rvoid();
      }
      if_res66;
      M0.display(ast_t(c69), o65);
      indent_level64 = indent_level64 + 1;
      M2.for_each(function(a70) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.newline(o65);
        return display_iter68(a70);
      }, ast_c(c69));
      indent_level64 = indent_level64 - 1;
      return null;
    };
    var display_c67 = function(c71) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.__gt_(indent_level64, 0) !== false) {
        var if_res67 = M0.display($rjs_core.UString.makeInternedImmutable("|   "), o65);
      } else {
        var if_res67 = M0.rvoid();
      }
      if_res67;
      return M0.display(c71, o65);
    };
    var display_iter68 = function(ast72) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var or_part73 = M0.char_p(ast72);
      if (or_part73 !== false) {
        var if_res68 = or_part73;
      } else {
        var if_res68 = ast_p(ast72);
      }
      if (if_res68 !== false) {
        var loop74 = function(i75) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          if (M0.__lt_(i75, indent_level64) !== false) {
            M0.display($rjs_core.UString.makeInternedImmutable("    "), o65);
            var if_res69 = loop74(i75 + 1);
          } else {
            var if_res69 = M0.rvoid();
          }
          return if_res69;
        };
        loop74(1);
        if (M0.char_p(ast72) !== false) {
          var if_res70 = display_c67(ast72);
        } else {
          var if_res70 = display_a66(ast72);
        }
        var if_res71 = if_res70;
      } else {
        var if_res71 = M0.rvoid();
      }
      return if_res71;
    };
    display_iter68(ast63);
    return M0.get_output_string(o65);
  };
  var display_ast = function(ast76) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (ast_p(ast76) !== false) {
      var if_res73 = ast__gt_string(ast76);
    } else {
      if (parse_error_p(ast76) !== false) {
        var if_res72 = parse_error__gt_string(ast76);
      } else {
        var if_res72 = ast76;
      }
      var if_res73 = if_res72;
    }
    M0.display(if_res73);
    return M0.newline();
  };
  var ast__gt_string_sexpr = function(ast77) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var o78 = M0.open_output_string();
    var display_iter79 = function(ast80) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.display($rjs_core.UString.makeInternedImmutable("("), o78);
      M0.display(ast_t(ast80), o78);
      M2.for_each(function(a81) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        M0.display($rjs_core.UString.makeInternedImmutable(" "), o78);
        if (ast_p(a81) !== false) {
          var if_res74 = display_iter79(a81);
        } else {
          var if_res74 = M0.display(a81, o78);
        }
        return if_res74;
      }, ast_c(ast80));
      return M0.display($rjs_core.UString.makeInternedImmutable(")"), o78);
    };
    display_iter79(ast77);
    return M0.get_output_string(o78);
  };
  var parse_error__gt_string = function(error82) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var comma_separate83 = function(l84) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp585 = M2.map(M0.symbol__gt_string, l84);
      var temp686 = $rjs_core.UString.makeInternedImmutable(", ");
      if (M0.variable_reference_constant_p(M1.__rjs_quoted__.add_between37) !== false) {
        var if_res75 = M1.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp585, temp686);
      } else {
        var if_res75 = M1.__rjs_quoted__.add_between37(temp585, temp686);
      }
      return M0.apply(M0.string_append, if_res75);
    };
    var expected87 = function(nts88) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var len89 = M0.length(nts88);
      if (M0.__eq_(len89, 0) !== false) {
        var if_res76 = $rjs_core.UString.makeInternedImmutable("<end of input>");
      } else {
        var if_res76 = M0.string_append($rjs_core.UString.makeInternedImmutable("["), comma_separate83(nts88), $rjs_core.UString.makeInternedImmutable("]"));
      }
      return if_res76;
    };
    var temp81 = M0.number__gt_string(parse_error_line(error82));
    var temp80 = $rjs_core.UString.makeInternedImmutable(":");
    var temp79 = M0.number__gt_string(parse_error_col(error82));
    var temp78 = $rjs_core.UString.makeInternedImmutable(" expected: ");
    var temp790 = parse_error_expected(error82);
    if (M0.variable_reference_constant_p(M1.__rjs_quoted__.remove_duplicates45) !== false) {
      var if_res77 = M1.__rjs_quoted__.remove_duplicates43(false, false, temp790, false, false);
    } else {
      var if_res77 = M1.__rjs_quoted__.remove_duplicates45(temp790);
    }
    return M0.string_append(temp81, temp80, temp79, temp78, expected87(if_res77), $rjs_core.UString.makeInternedImmutable(" received: "), parse_error_received(error82), $rjs_core.UString.makeInternedImmutable("\n"), parse_error_snippet(error82));
  };
  var display_parse_error = function(error91) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.display(parse_error__gt_string(error91));
    return M0.newline();
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.parse_error_snippet = parse_error_snippet;
  __rjs_quoted__.struct_ast = struct_ast;
  __rjs_quoted__.parse_error_received = parse_error_received;
  __rjs_quoted__.set_ast_c_bang_ = set_ast_c_bang_;
  __rjs_quoted__.parse_error_pos = parse_error_pos;
  __rjs_quoted__.struct_parse_error = struct_parse_error;
  __rjs_quoted__.ast_pos = ast_pos;
  __rjs_quoted__.ast_t = ast_t;
  __rjs_quoted__.ast_c = ast_c;
  __rjs_quoted__.ast1 = ast1;
  __rjs_quoted__.ast_p = ast_p;
  __rjs_quoted__.parse_error_col = parse_error_col;
  __rjs_quoted__.set_ast_t_bang_ = set_ast_t_bang_;
  __rjs_quoted__.parse_error_line = parse_error_line;
  __rjs_quoted__.parse_error2 = parse_error2;
  __rjs_quoted__.parse_error_p = parse_error_p;
  __rjs_quoted__.set_ast_pos_bang_ = set_ast_pos_bang_;
  __rjs_quoted__.parse_error_expected = parse_error_expected;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_ast() {
      return struct_ast;
    },
    get ast_p() {
      return ast_p;
    },
    get ast_t() {
      return ast_t;
    },
    get ast_c() {
      return ast_c;
    },
    get ast_pos() {
      return ast_pos;
    },
    get set_ast_t_bang_() {
      return set_ast_t_bang_;
    },
    get set_ast_c_bang_() {
      return set_ast_c_bang_;
    },
    get set_ast_pos_bang_() {
      return set_ast_pos_bang_;
    },
    get struct_parse_error() {
      return struct_parse_error;
    },
    get parse_error_p() {
      return parse_error_p;
    },
    get parse_error_pos() {
      return parse_error_pos;
    },
    get parse_error_line() {
      return parse_error_line;
    },
    get parse_error_col() {
      return parse_error_col;
    },
    get parse_error_expected() {
      return parse_error_expected;
    },
    get parse_error_received() {
      return parse_error_received;
    },
    get parse_error_snippet() {
      return parse_error_snippet;
    },
    get ast__gt_string() {
      return ast__gt_string;
    },
    get display_ast() {
      return display_ast;
    },
    get ast__gt_string_sexpr() {
      return ast__gt_string_sexpr;
    },
    get parse_error__gt_string() {
      return parse_error__gt_string;
    },
    get display_parse_error() {
      return display_parse_error;
    }
  };
})();
var $__modules_47_gen_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/gen.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var __times_eof_check_times_ = true;
  var __times_expression_level_times_ = $rjs_core.Pair.makeList();
  var __times_file_header_times_ = false;
  var __times_module_name_times_ = false;
  var __times_name_prefix_times_ = false;
  var __times_start_index_times_ = 0;
  var __times_start_name_times_ = $rjs_core.UString.makeInternedImmutable("");
  var eof_check_bang_ = function(val120) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_eof_check_times_ = val120;
    return null;
  };
  var file_header_bang_ = function(val121) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_file_header_times_ = val121;
    return null;
  };
  var module_name_bang_ = function(val122) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_module_name_times_ = val122;
    return null;
  };
  var name_prefix_bang_ = function(val123) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_name_prefix_times_ = val123;
    return null;
  };
  var start_index_bang_ = function(val124) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_index_times_ = val124;
    return null;
  };
  var start_name_bang_ = function(val125) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_start_name_times_ = val125;
    return null;
  };
  var start_nt_bang_ = function(name126, grammar127) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var index_of128 = function(ls129, v130) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var loop131 = function(ls132, i133) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M0.null_p(ls132) !== false) {
          var if_res94 = false;
        } else {
          if (M0.equal_p(M0.car(ls132), v130) !== false) {
            var if_res93 = i133;
          } else {
            var if_res93 = loop131(M0.cdr(ls132), M0.add1(i133));
          }
          var if_res94 = if_res93;
        }
        return if_res94;
      };
      return loop131(ls129, 0);
    };
    __times_start_name_times_ = name126;
    if (M0.equal_p(name126, $rjs_core.UString.makeInternedImmutable("")) !== false) {
      var if_res96 = start_name_bang_(get_non_term(M0.car(get_defs(grammar127))));
    } else {
      var si134 = index_of128(M2.map(get_non_term, get_defs(grammar127)), name126);
      if (si134 !== false) {
        var if_res95 = start_index_bang_(si134);
      } else {
        var if_res95 = M0.error($rjs_core.Symbol.make("waxeye"), M0.format($rjs_core.UString.makeInternedImmutable("Can't find definition of starting non-terminal: ~a"), __times_start_name_times_));
      }
      var if_res96 = if_res95;
    }
    return if_res96;
  };
  var push_exp_level = function(level135) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_expression_level_times_ = M0.cons(level135, __times_expression_level_times_);
    return null;
  };
  var pop_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var top136 = M0.car(__times_expression_level_times_);
    __times_expression_level_times_ = M0.cdr(__times_expression_level_times_);
    return top136;
  };
  var peek_exp_level = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.car(__times_expression_level_times_);
  };
  var get_non_terms = function(grammar137) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.map(get_non_term, M1.ast_c(grammar137));
  };
  var get_non_term = function(def138) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M1.ast_c(M0.car(M1.ast_c(def138))));
  };
  var get_defs = function(grammar139) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_c(grammar139);
  };
  var get_arrow = function(def140) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M1.ast_t(M0.cadr(M1.ast_c(def140)));
  };
  var get_alternation = function(def141) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.caddr(M1.ast_c(def141));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_eof_check_times_() {
      return __times_eof_check_times_;
    },
    get __times_expression_level_times_() {
      return __times_expression_level_times_;
    },
    get __times_file_header_times_() {
      return __times_file_header_times_;
    },
    get __times_module_name_times_() {
      return __times_module_name_times_;
    },
    get __times_name_prefix_times_() {
      return __times_name_prefix_times_;
    },
    get __times_start_index_times_() {
      return __times_start_index_times_;
    },
    get __times_start_name_times_() {
      return __times_start_name_times_;
    },
    get eof_check_bang_() {
      return eof_check_bang_;
    },
    get file_header_bang_() {
      return file_header_bang_;
    },
    get module_name_bang_() {
      return module_name_bang_;
    },
    get name_prefix_bang_() {
      return name_prefix_bang_;
    },
    get start_index_bang_() {
      return start_index_bang_;
    },
    get start_name_bang_() {
      return start_name_bang_;
    },
    get start_nt_bang_() {
      return start_nt_bang_;
    },
    get push_exp_level() {
      return push_exp_level;
    },
    get pop_exp_level() {
      return pop_exp_level;
    },
    get peek_exp_level() {
      return peek_exp_level;
    },
    get get_non_terms() {
      return get_non_terms;
    },
    get get_non_term() {
      return get_non_term;
    },
    get get_defs() {
      return get_defs;
    },
    get get_arrow() {
      return get_arrow;
    },
    get get_alternation() {
      return get_alternation;
    }
  };
})();
var $__modules_47_action_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/action.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_reverse_46_rkt_46_js__;
  var collect_actions = function(grammar240) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var action_list241 = $rjs_core.Pair.makeList();
    var visit_action242 = function(exp243) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      action_list241 = M1.cons(exp243, action_list241);
      return null;
    };
    var visit_alternation244 = function(exp248) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_sequence245, M2.ast_c(exp248));
    };
    var visit_sequence245 = function(exp249) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M3.for_each(visit_unit246, M2.ast_c(exp249));
    };
    var visit_unit246 = function(exp250) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el251 = M2.ast_c(exp250);
      var el_len252 = M1.length(el251);
      return visit_exp247(M1.list_ref(el251, el_len252 - 1));
    };
    var visit_exp247 = function(exp253) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type254 = M2.ast_t(exp253);
      var tmp255 = type254;
      if (M1.equal_p(tmp255, $rjs_core.Symbol.make("action")) !== false) {
        var if_res161 = visit_action242(exp253);
      } else {
        if (M1.equal_p(tmp255, $rjs_core.Symbol.make("alternation")) !== false) {
          var if_res160 = visit_alternation244(exp253);
        } else {
          if (M1.equal_p(tmp255, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res159 = visit_sequence245(exp253);
          } else {
            if (M1.equal_p(tmp255, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res158 = visit_unit246(exp253);
            } else {
              var if_res158 = M1.rvoid();
            }
            var if_res159 = if_res158;
          }
          var if_res160 = if_res159;
        }
        var if_res161 = if_res160;
      }
      return if_res161;
    };
    var get_def_actions256 = function(def257) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation244(M1.caddr(M2.ast_c(def257)));
    };
    M3.for_each(get_def_actions256, M0.get_defs(grammar240));
    action_list241 = M4.alt_reverse(action_list241);
    return null;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get collect_actions() {
      return collect_actions;
    }
  };
})();
var $__modules_47_expand_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/expand.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_list_46_rkt_46_js__;
  var M5 = $__runtime_47_unsafe_46_rkt_46_js__;
  var expand_grammar = function(grammar171) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var lift_only_sub_exp172 = function(visitor173, exp174) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil175 = M2.ast_c(exp174);
      M3.for_each(visitor173, chil175);
      if (M1.__eq_(M1.length(chil175), 1) !== false) {
        var only176 = M1.car(chil175);
        M2.set_ast_t_bang_(exp174, M2.ast_t(only176));
        M2.set_ast_c_bang_(exp174, M2.ast_c(only176));
        var if_res105 = M2.set_ast_pos_bang_(exp174, M2.ast_pos(only176));
      } else {
        var if_res105 = M1.rvoid();
      }
      return if_res105;
    };
    var visit_alternation177 = function(exp181) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return lift_only_sub_exp172(visit_sequence178, exp181);
    };
    var visit_sequence178 = function(exp182) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M2.set_ast_c_bang_(exp182, M3.map(expand_unit, M2.ast_c(exp182)));
      return lift_only_sub_exp172(visit_exp180, exp182);
    };
    var visit_only_child179 = function(exp183) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_exp180(M1.car(M2.ast_c(exp183)));
    };
    var visit_exp180 = function(exp184) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type185 = M2.ast_t(exp184);
      var tmp186 = type185;
      if (M1.symbol_p(tmp186) !== false) {
        var if_res106 = M1.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 13], [$rjs_core.Symbol.make("identifier"), 7], [$rjs_core.Symbol.make("optional"), 11], [$rjs_core.Symbol.make("not"), 10], [$rjs_core.Symbol.make("caseLiteral"), 4], [$rjs_core.Symbol.make("closure"), 6], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 14], [$rjs_core.Symbol.make("action"), 1], [$rjs_core.Symbol.make("alternation"), 2], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 15], [$rjs_core.Symbol.make("label"), 8], [$rjs_core.Symbol.make("and"), 3], [$rjs_core.Symbol.make("literal"), 9]], false), tmp186, function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return 0;
        });
      } else {
        var if_res106 = 0;
      }
      var index187 = if_res106;
      if (M5.unsafe_fx_lt_(index187, 7) !== false) {
        if (M5.unsafe_fx_lt_(index187, 3) !== false) {
          if (M5.unsafe_fx_lt_(index187, 1) !== false) {
            var if_res108 = M1.error($rjs_core.Symbol.make("expand-grammar"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), type185);
          } else {
            if (M5.unsafe_fx_lt_(index187, 2) !== false) {
              var if_res107 = M1.rvoid();
            } else {
              var if_res107 = visit_alternation177(exp184);
            }
            var if_res108 = if_res107;
          }
          var if_res112 = if_res108;
        } else {
          if (M5.unsafe_fx_lt_(index187, 4) !== false) {
            var if_res111 = visit_only_child179(exp184);
          } else {
            if (M5.unsafe_fx_lt_(index187, 5) !== false) {
              var if_res110 = visit_case_literal(exp184);
            } else {
              if (M5.unsafe_fx_lt_(index187, 6) !== false) {
                var if_res109 = visit_char_class(exp184);
              } else {
                var if_res109 = visit_only_child179(exp184);
              }
              var if_res110 = if_res109;
            }
            var if_res111 = if_res110;
          }
          var if_res112 = if_res111;
        }
        var if_res121 = if_res112;
      } else {
        if (M5.unsafe_fx_lt_(index187, 11) !== false) {
          if (M5.unsafe_fx_lt_(index187, 8) !== false) {
            var if_res115 = M1.rvoid();
          } else {
            if (M5.unsafe_fx_lt_(index187, 9) !== false) {
              var if_res114 = M1.rvoid();
            } else {
              if (M5.unsafe_fx_lt_(index187, 10) !== false) {
                var if_res113 = visit_literal(exp184);
              } else {
                var if_res113 = visit_only_child179(exp184);
              }
              var if_res114 = if_res113;
            }
            var if_res115 = if_res114;
          }
          var if_res120 = if_res115;
        } else {
          if (M5.unsafe_fx_lt_(index187, 13) !== false) {
            if (M5.unsafe_fx_lt_(index187, 12) !== false) {
              var if_res116 = visit_only_child179(exp184);
            } else {
              var if_res116 = visit_only_child179(exp184);
            }
            var if_res119 = if_res116;
          } else {
            if (M5.unsafe_fx_lt_(index187, 14) !== false) {
              var if_res118 = visit_sequence178(exp184);
            } else {
              if (M5.unsafe_fx_lt_(index187, 15) !== false) {
                var if_res117 = visit_only_child179(exp184);
              } else {
                var if_res117 = M1.rvoid();
              }
              var if_res118 = if_res117;
            }
            var if_res119 = if_res118;
          }
          var if_res120 = if_res119;
        }
        var if_res121 = if_res120;
      }
      return if_res121;
    };
    var expand_def188 = function(def189) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation177(M1.caddr(M2.ast_c(def189)));
    };
    return M3.for_each(expand_def188, M0.get_defs(grammar171));
  };
  var expand_unit = function(exp190) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var make_prefix191 = function(v192, e193) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r194 = M1.car(M2.ast_c(v192));
      if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(42)) !== false) {
        var if_res127 = $rjs_core.Symbol.make("closure");
      } else {
        if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(43)) !== false) {
          var if_res126 = $rjs_core.Symbol.make("plus");
        } else {
          if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(63)) !== false) {
            var if_res125 = $rjs_core.Symbol.make("optional");
          } else {
            if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(58)) !== false) {
              var if_res124 = $rjs_core.Symbol.make("void");
            } else {
              if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(38)) !== false) {
                var if_res123 = $rjs_core.Symbol.make("and");
              } else {
                if (M1.equal_p(r194, $rjs_core.Char.charFromCodepoint(33)) !== false) {
                  var if_res122 = $rjs_core.Symbol.make("not");
                } else {
                  var if_res122 = M1.error($rjs_core.Symbol.make("make-prefix"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), r194);
                }
                var if_res123 = if_res122;
              }
              var if_res124 = if_res123;
            }
            var if_res125 = if_res124;
          }
          var if_res126 = if_res125;
        }
        var if_res127 = if_res126;
      }
      return M2.__rjs_quoted__.ast1(if_res127, M1.list(e193), M1.cons(0, 0));
    };
    var make_label195 = function(v196, e197) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var r198 = M1.car(M2.ast_c(v196));
      return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("label"), M1.list(e197), M1.cons(0, 0));
    };
    var expand_unit_iter199 = function(el200) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var rest201 = M1.cdr(el200);
      if (M1.null_p(rest201) !== false) {
        var if_res130 = M1.car(el200);
      } else {
        var type202 = M2.ast_t(M1.car(el200));
        var tmp203 = type202;
        if (M1.equal_p(tmp203, $rjs_core.Symbol.make("prefix")) !== false) {
          var if_res129 = make_prefix191;
        } else {
          if (M1.equal_p(tmp203, $rjs_core.Symbol.make("label")) !== false) {
            var if_res128 = make_label195;
          } else {
            var if_res128 = M1.error($rjs_core.Symbol.make("expand-unit-iter"), $rjs_core.UString.makeInternedImmutable("unknown expression type: ~s"), type202);
          }
          var if_res129 = if_res128;
        }
        var if_res130 = if_res129(M1.car(el200), expand_unit_iter199(rest201));
      }
      return if_res130;
    };
    return expand_unit_iter199(M2.ast_c(exp190));
  };
  var visit_case_literal = function(exp204) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_chil205 = function(c206) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_alphabetic_p(c206) !== false) {
        var if_res131 = M1.list(M1.char_upcase(c206), M1.char_downcase(c206));
      } else {
        var if_res131 = M1.list(c206);
      }
      return if_res131;
    };
    convert_chars_bang_(exp204);
    var letters207 = M2.ast_c(exp204);
    if (M4.memf(M1.char_alphabetic_p, letters207) !== false) {
      if (M1.null_p(M1.cdr(letters207)) !== false) {
        var c208 = M1.car(letters207);
        M2.set_ast_t_bang_(exp204, $rjs_core.Symbol.make("charClass"));
        var if_res132 = M2.set_ast_c_bang_(exp204, cc_chil205(c208));
      } else {
        M2.set_ast_t_bang_(exp204, $rjs_core.Symbol.make("sequence"));
        var if_res132 = M2.set_ast_c_bang_(exp204, M3.map(function(a209) {
          if (arguments.length !== 1) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M2.__rjs_quoted__.ast1($rjs_core.Symbol.make("charClass"), cc_chil205(a209), M1.cons(0, 0));
        }, letters207));
      }
      var if_res133 = if_res132;
    } else {
      var if_res133 = M2.set_ast_t_bang_(exp204, $rjs_core.Symbol.make("literal"));
    }
    return if_res133;
  };
  var convert_char = function(c210) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_char211 = function(c212) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var chil213 = M2.ast_c(c212);
      if (M1.__eq_(M1.length(chil213), 1) !== false) {
        var if_res137 = M1.car(chil213);
      } else {
        var s214 = M1.cadr(chil213);
        if (M1.equal_p(s214, $rjs_core.Char.charFromCodepoint(110)) !== false) {
          var if_res136 = $rjs_core.Char.charFromCodepoint(10);
        } else {
          if (M1.equal_p(s214, $rjs_core.Char.charFromCodepoint(116)) !== false) {
            var if_res135 = $rjs_core.Char.charFromCodepoint(9);
          } else {
            if (M1.equal_p(s214, $rjs_core.Char.charFromCodepoint(114)) !== false) {
              var if_res134 = $rjs_core.Char.charFromCodepoint(13);
            } else {
              var if_res134 = s214;
            }
            var if_res135 = if_res134;
          }
          var if_res136 = if_res135;
        }
        var if_res137 = if_res136;
      }
      return if_res137;
    };
    var cc_hex215 = function(c216) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.integer__gt_char(M1.string__gt_number(M1.list__gt_string(M2.ast_c(c216)), 16));
    };
    if (M1.equal_p(M2.ast_t(c210), $rjs_core.Symbol.make("hex")) !== false) {
      var if_res138 = cc_hex215(c210);
    } else {
      var if_res138 = cc_char211(c210);
    }
    return if_res138;
  };
  var convert_chars_bang_ = function(exp217) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.set_ast_c_bang_(exp217, M3.map(convert_char, M2.ast_c(exp217)));
  };
  var visit_literal = function(exp218) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return convert_chars_bang_(exp218);
  };
  var visit_char_class = function(exp219) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var cc_part220 = function(part221) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var range222 = M2.ast_c(part221);
      if (M1.__eq_(M1.length(range222), 1) !== false) {
        var if_res141 = convert_char(M1.car(range222));
      } else {
        var r1223 = convert_char(M1.car(range222));
        var r2224 = convert_char(M1.cadr(range222));
        if (M1.char_eq__p(r1223, r2224) !== false) {
          var if_res140 = r1223;
        } else {
          if (M1.char_lt__p(r1223, r2224) !== false) {
            var if_res139 = M1.cons(r1223, r2224);
          } else {
            var if_res139 = M1.cons(r2224, r1223);
          }
          var if_res140 = if_res139;
        }
        var if_res141 = if_res140;
      }
      return if_res141;
    };
    var cc_less_than_p225 = function(a226, b227) {
      if (arguments.length !== 2) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M1.char_p(a226) !== false) {
        var if_res143 = a226;
      } else {
        var if_res143 = M1.car(a226);
      }
      if (M1.char_p(b227) !== false) {
        var if_res142 = b227;
      } else {
        var if_res142 = M1.car(b227);
      }
      return M1.char_lt__p(if_res143, if_res142);
    };
    var minimise228 = function(cc229) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var next_to_p230 = function(a231, b232) {
        if (arguments.length !== 2) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.__eq_(M1.char__gt_integer(b232) - M1.char__gt_integer(a231), 1);
      };
      if (M1.null_p(cc229) !== false) {
        var if_res156 = $rjs_core.Pair.makeList();
      } else {
        var a233 = M1.car(cc229);
        var rest234 = M1.cdr(cc229);
        if (M1.null_p(rest234) !== false) {
          var if_res155 = cc229;
        } else {
          var b235 = M1.car(rest234);
          if (M1.char_p(a233) !== false) {
            if (M1.char_p(b235) !== false) {
              if (M1.char_eq__p(a233, b235) !== false) {
                var if_res145 = minimise228(M1.cons(a233, M1.cdr(rest234)));
              } else {
                if (next_to_p230(a233, b235) !== false) {
                  var if_res144 = minimise228(M1.cons(M1.cons(a233, b235), M1.cdr(rest234)));
                } else {
                  var if_res144 = M1.cons(a233, minimise228(rest234));
                }
                var if_res145 = if_res144;
              }
              var if_res147 = if_res145;
            } else {
              if (next_to_p230(a233, M1.car(b235)) !== false) {
                var if_res146 = minimise228(M1.cons(M1.cons(a233, M1.cdr(b235)), M1.cdr(rest234)));
              } else {
                var if_res146 = M1.cons(a233, minimise228(rest234));
              }
              var if_res147 = if_res146;
            }
            var if_res154 = if_res147;
          } else {
            if (M1.char_p(b235) !== false) {
              var or_part236 = M1.char_eq__p(b235, M1.car(a233));
              if (or_part236 !== false) {
                var if_res148 = or_part236;
              } else {
                var if_res148 = M1.char_lt__eq__p(b235, M1.cdr(a233));
              }
              if (if_res148 !== false) {
                var if_res150 = minimise228(M1.cons(a233, M1.cdr(rest234)));
              } else {
                if (next_to_p230(M1.cdr(a233), b235) !== false) {
                  var if_res149 = minimise228(M1.cons(M1.cons(M1.car(a233), b235), M1.cdr(rest234)));
                } else {
                  var if_res149 = M1.cons(a233, minimise228(rest234));
                }
                var if_res150 = if_res149;
              }
              var if_res153 = if_res150;
            } else {
              var or_part237 = M1.char_lt__eq__p(M1.car(b235), M1.cdr(a233));
              if (or_part237 !== false) {
                var if_res151 = or_part237;
              } else {
                var if_res151 = next_to_p230(M1.cdr(a233), M1.car(b235));
              }
              if (if_res151 !== false) {
                var if_res152 = minimise228(M1.cons(M1.cons(M1.integer__gt_char(M1.min(M1.char__gt_integer(M1.car(a233)), M1.char__gt_integer(M1.car(b235)))), M1.integer__gt_char(M1.max(M1.char__gt_integer(M1.cdr(a233)), M1.char__gt_integer(M1.cdr(b235))))), M1.cdr(rest234)));
              } else {
                var if_res152 = M1.cons(a233, minimise228(rest234));
              }
              var if_res153 = if_res152;
            }
            var if_res154 = if_res153;
          }
          var if_res155 = if_res154;
        }
        var if_res156 = if_res155;
      }
      return if_res156;
    };
    var temp1238 = M3.map(cc_part220, M2.ast_c(exp219));
    var cc_less_than_p2239 = cc_less_than_p225;
    if (M1.variable_reference_constant_p(M4.__rjs_quoted__.sort9) !== false) {
      var if_res157 = M4.__rjs_quoted__.sort7(false, false, false, false, temp1238, cc_less_than_p2239);
    } else {
      var if_res157 = M4.__rjs_quoted__.sort9(temp1238, cc_less_than_p2239);
    }
    return M2.set_ast_c_bang_(exp219, minimise228(if_res157));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get expand_grammar() {
      return expand_grammar;
    },
    get expand_unit() {
      return expand_unit;
    },
    get visit_case_literal() {
      return visit_case_literal;
    },
    get convert_char() {
      return convert_char;
    },
    get convert_chars_bang_() {
      return convert_chars_bang_;
    },
    get visit_literal() {
      return visit_literal;
    },
    get visit_char_class() {
      return visit_char_class;
    }
  };
})();
var $__modules_47_transform_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/transform.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_gen_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__modules_47_action_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M4 = $__modules_47_expand_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var transform_grammar = function(g92) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var nt_names93 = M1.make_hash();
    if (check_not_empty(g92) !== false) {
      if (M2.collect_actions(g92) !== false) {
        if (collect_nt_names(g92, nt_names93) !== false) {
          if (check_refs(g92, nt_names93) !== false) {
            var if_res82 = M4.expand_grammar(g92);
          } else {
            var if_res82 = false;
          }
          var if_res83 = if_res82;
        } else {
          var if_res83 = false;
        }
        var if_res84 = if_res83;
      } else {
        var if_res84 = false;
      }
      var if_res85 = if_res84;
    } else {
      var if_res85 = false;
    }
    return if_res85;
  };
  var check_not_empty = function(g94) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.null_p(M3.ast_c(g94)) !== false) {
      var if_res86 = M1.error($rjs_core.Symbol.make("check-not-empty"), $rjs_core.UString.makeInternedImmutable("grammar is empty"));
    } else {
      var if_res86 = M1.rvoid();
    }
    return if_res86;
  };
  var collect_nt_names = function(g95, nt_names96) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var ok97 = true;
    M5.for_each(function(a98) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name99 = M0.get_non_term(a98);
      var found100 = M1.hash_ref(nt_names96, name99, false);
      if (found100 !== false) {
        ok97 = false;
        var if_res87 = M1.error($rjs_core.Symbol.make("check-duplicate"), $rjs_core.UString.makeInternedImmutable("duplicate definition of non-terminal: ~a"), name99);
      } else {
        var if_res87 = M1.hash_set_bang_(nt_names96, name99, name99);
      }
      return if_res87;
    }, M3.ast_c(g95));
    return ok97;
  };
  var check_refs = function(grammar101, nt_names102) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var visit_nt103 = function(exp104) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var name105 = M1.list__gt_string(M3.ast_c(exp104));
      if (M1.hash_ref(nt_names102, name105, false) !== false) {
        var if_res88 = M1.rvoid();
      } else {
        var if_res88 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.makeInternedImmutable("undefined reference to non-terminal: ~a"), name105);
      }
      return if_res88;
    };
    var visit_alternation106 = function(exp110) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_sequence107, M3.ast_c(exp110));
    };
    var visit_sequence107 = function(exp111) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M5.for_each(visit_unit108, M3.ast_c(exp111));
    };
    var visit_unit108 = function(exp112) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var el113 = M3.ast_c(exp112);
      var el_len114 = M1.length(el113);
      return visit_exp109(M1.list_ref(el113, el_len114 - 1));
    };
    var visit_exp109 = function(exp115) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var type116 = M3.ast_t(exp115);
      var tmp117 = type116;
      if (M1.equal_p(tmp117, $rjs_core.Symbol.make("alternation")) !== false) {
        var if_res92 = visit_alternation106(exp115);
      } else {
        if (M1.equal_p(tmp117, $rjs_core.Symbol.make("identifier")) !== false) {
          var if_res91 = visit_nt103(exp115);
        } else {
          if (M1.equal_p(tmp117, $rjs_core.Symbol.make("sequence")) !== false) {
            var if_res90 = visit_sequence107(exp115);
          } else {
            if (M1.equal_p(tmp117, $rjs_core.Symbol.make("unit")) !== false) {
              var if_res89 = visit_unit108(exp115);
            } else {
              var if_res89 = M1.rvoid();
            }
            var if_res90 = if_res89;
          }
          var if_res91 = if_res90;
        }
        var if_res92 = if_res91;
      }
      return if_res92;
    };
    var check_nt_refs118 = function(def119) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return visit_alternation106(M1.caddr(M3.ast_c(def119)));
    };
    return M5.for_each(check_nt_refs118, M0.get_defs(grammar101));
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get transform_grammar() {
      return transform_grammar;
    },
    get check_not_empty() {
      return check_not_empty;
    },
    get collect_nt_names() {
      return collect_nt_names;
    },
    get check_refs() {
      return check_refs;
    }
  };
})();
var $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/racket/private/kw-file.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_racket_47_private_47_member_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_path_46_rkt_46_js__;
  var M4 = $__collects_47_racket_47_private_47_sort_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var exists_syms = $rjs_core.Pair.makeList($rjs_core.Symbol.make("error"), $rjs_core.Symbol.make("append"), $rjs_core.Symbol.make("update"), $rjs_core.Symbol.make("can-update"), $rjs_core.Symbol.make("replace"), $rjs_core.Symbol.make("truncate"), $rjs_core.Symbol.make("must-truncate"), $rjs_core.Symbol.make("truncate/replace"));
  var exists_desc = $rjs_core.UString.makeInternedImmutable("(or/c 'error 'append 'update 'can-update 'replace 'truncate 'must-truncate 'truncate/replace)");
  var binary_or_text_desc = $rjs_core.UString.makeInternedImmutable("(or/c 'binary 'text)");
  var open_input_file6 = function(for_module_p23103, for_module_p43104, mode13105, mode33106, path53107) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3108 = path53107;
    if (mode33106 !== false) {
      var if_res2073 = mode13105;
    } else {
      var if_res2073 = $rjs_core.Symbol.make("binary");
    }
    var mode3109 = if_res2073;
    if (for_module_p43104 !== false) {
      var if_res2074 = for_module_p23103;
    } else {
      var if_res2074 = false;
    }
    var for_module_p3110 = if_res2074;
    if (M3.path_string_p(path3108) !== false) {
      var if_res2075 = M1.rvoid();
    } else {
      var if_res2075 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3108);
    }
    if_res2075;
    if (M0.memq(mode3109, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2076 = M1.rvoid();
    } else {
      var if_res2076 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-file"), binary_or_text_desc, mode3109);
    }
    if_res2076;
    if (for_module_p3110 !== false) {
      var if_res2077 = $rjs_core.Symbol.make("module");
    } else {
      var if_res2077 = $rjs_core.Symbol.make("none");
    }
    return M1.open_input_file(path3108, mode3109, if_res2077);
  };
  var unpack7 = function(given_kws3111, given_args3112, path53113) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3111) !== false) {
      var if_res2078 = M1.eq_p($rjs_core.Keyword.make("for-module?"), M1.car(given_kws3111));
    } else {
      var if_res2078 = false;
    }
    var for_module_p43114 = if_res2078;
    if (for_module_p43114 !== false) {
      var if_res2079 = M1.car(given_args3112);
    } else {
      var if_res2079 = M1.rvoid();
    }
    var for_module_p23115 = if_res2079;
    if (for_module_p43114 !== false) {
      var if_res2080 = M1.cdr(given_kws3111);
    } else {
      var if_res2080 = given_kws3111;
    }
    var given_kws3116 = if_res2080;
    if (for_module_p43114 !== false) {
      var if_res2081 = M1.cdr(given_args3112);
    } else {
      var if_res2081 = given_args3112;
    }
    var given_args3117 = if_res2081;
    var mode33118 = M1.pair_p(given_kws3116);
    if (mode33118 !== false) {
      var if_res2082 = M1.car(given_args3117);
    } else {
      var if_res2082 = M1.rvoid();
    }
    var mode13119 = if_res2082;
    return open_input_file6(for_module_p23115, for_module_p43114, mode13119, mode33118, path53113);
  };
  var cl2086 = function(given_kws3126, given_args3127, path3128) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(given_kws3126, given_args3127, path3128);
  };
  var temp2088 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2087 = {'3': cl2086}[arguments.length];
    if (fixed_lam2087 !== undefined) {
      return fixed_lam2087.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2085 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("for-module?"), $rjs_core.Keyword.make("mode"));
  var cl2083 = function(path3130) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack7(M1.rnull, M1.rnull, path3130);
  };
  var open_input_file3129 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2084 = {'1': cl2083}[arguments.length];
    if (fixed_lam2084 !== undefined) {
      return fixed_lam2084.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_file8 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3120, given_argc3121) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3121, 3) !== false) {
      var l13122 = given_kws3120;
      if (M1.null_p(l13122) !== false) {
        var if_res2090 = l13122;
      } else {
        if (M1.eq_p(M1.car(l13122), $rjs_core.Keyword.make("for-module?")) !== false) {
          var if_res2089 = M1.cdr(l13122);
        } else {
          var if_res2089 = l13122;
        }
        var if_res2090 = if_res2089;
      }
      var l13123 = if_res2090;
      var l13124 = l13123;
      if (M1.null_p(l13124) !== false) {
        var if_res2092 = l13124;
      } else {
        if (M1.eq_p(M1.car(l13124), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2091 = M1.cdr(l13124);
        } else {
          var if_res2091 = l13124;
        }
        var if_res2092 = if_res2091;
      }
      var l13125 = if_res2092;
      var if_res2093 = M1.null_p(l13125);
    } else {
      var if_res2093 = false;
    }
    return if_res2093;
  }, temp2088, M1.rnull, temp2085, open_input_file3129);
  var open_output_file14 = function(exists103131, exists123132, mode93133, mode113134, path133135) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3136 = path133135;
    if (mode113134 !== false) {
      var if_res2094 = mode93133;
    } else {
      var if_res2094 = $rjs_core.Symbol.make("binary");
    }
    var mode3137 = if_res2094;
    if (exists123132 !== false) {
      var if_res2095 = exists103131;
    } else {
      var if_res2095 = $rjs_core.Symbol.make("error");
    }
    var exists3138 = if_res2095;
    if (M3.path_string_p(path3136) !== false) {
      var if_res2096 = M1.rvoid();
    } else {
      var if_res2096 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3136);
    }
    if_res2096;
    if (M0.memq(mode3137, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2097 = M1.rvoid();
    } else {
      var if_res2097 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), binary_or_text_desc, mode3137);
    }
    if_res2097;
    if (M0.memq(exists3138, exists_syms) !== false) {
      var if_res2098 = M1.rvoid();
    } else {
      var if_res2098 = M1.raise_argument_error($rjs_core.Symbol.make("open-output-file"), exists_desc, exists3138);
    }
    if_res2098;
    return M1.open_output_file(path3136, mode3137, exists3138);
  };
  var unpack15 = function(given_kws3139, given_args3140, path133141) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3139) !== false) {
      var if_res2099 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3139));
    } else {
      var if_res2099 = false;
    }
    var exists123142 = if_res2099;
    if (exists123142 !== false) {
      var if_res2100 = M1.car(given_args3140);
    } else {
      var if_res2100 = M1.rvoid();
    }
    var exists103143 = if_res2100;
    if (exists123142 !== false) {
      var if_res2101 = M1.cdr(given_kws3139);
    } else {
      var if_res2101 = given_kws3139;
    }
    var given_kws3144 = if_res2101;
    if (exists123142 !== false) {
      var if_res2102 = M1.cdr(given_args3140);
    } else {
      var if_res2102 = given_args3140;
    }
    var given_args3145 = if_res2102;
    var mode113146 = M1.pair_p(given_kws3144);
    if (mode113146 !== false) {
      var if_res2103 = M1.car(given_args3145);
    } else {
      var if_res2103 = M1.rvoid();
    }
    var mode93147 = if_res2103;
    return open_output_file14(exists103143, exists123142, mode93147, mode113146, path133141);
  };
  var cl2107 = function(given_kws3154, given_args3155, path3156) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(given_kws3154, given_args3155, path3156);
  };
  var temp2109 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2108 = {'3': cl2107}[arguments.length];
    if (fixed_lam2108 !== undefined) {
      return fixed_lam2108.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2106 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2104 = function(path3158) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack15(M1.rnull, M1.rnull, path3158);
  };
  var open_output_file3157 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2105 = {'1': cl2104}[arguments.length];
    if (fixed_lam2105 !== undefined) {
      return fixed_lam2105.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_output_file16 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3148, given_argc3149) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3149, 3) !== false) {
      var l13150 = given_kws3148;
      if (M1.null_p(l13150) !== false) {
        var if_res2111 = l13150;
      } else {
        if (M1.eq_p(M1.car(l13150), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2110 = M1.cdr(l13150);
        } else {
          var if_res2110 = l13150;
        }
        var if_res2111 = if_res2110;
      }
      var l13151 = if_res2111;
      var l13152 = l13151;
      if (M1.null_p(l13152) !== false) {
        var if_res2113 = l13152;
      } else {
        if (M1.eq_p(M1.car(l13152), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2112 = M1.cdr(l13152);
        } else {
          var if_res2112 = l13152;
        }
        var if_res2113 = if_res2112;
      }
      var l13153 = if_res2113;
      var if_res2114 = M1.null_p(l13153);
    } else {
      var if_res2114 = false;
    }
    return if_res2114;
  }, temp2109, M1.rnull, temp2106, open_output_file3157);
  var open_input_output_file22 = function(exists183159, exists203160, mode173161, mode193162, path213163) {
    if (arguments.length !== 5) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3164 = path213163;
    if (mode193162 !== false) {
      var if_res2115 = mode173161;
    } else {
      var if_res2115 = $rjs_core.Symbol.make("binary");
    }
    var mode3165 = if_res2115;
    if (exists203160 !== false) {
      var if_res2116 = exists183159;
    } else {
      var if_res2116 = $rjs_core.Symbol.make("error");
    }
    var exists3166 = if_res2116;
    if (M3.path_string_p(path3164) !== false) {
      var if_res2117 = M1.rvoid();
    } else {
      var if_res2117 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3164);
    }
    if_res2117;
    if (M0.memq(mode3165, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2118 = M1.rvoid();
    } else {
      var if_res2118 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), binary_or_text_desc, mode3165);
    }
    if_res2118;
    if (M0.memq(exists3166, exists_syms) !== false) {
      var if_res2119 = M1.rvoid();
    } else {
      var if_res2119 = M1.raise_argument_error($rjs_core.Symbol.make("open-input-output-file"), exists_desc, exists3166);
    }
    if_res2119;
    return M1.open_input_output_file(path3164, mode3165, exists3166);
  };
  var unpack23 = function(given_kws3167, given_args3168, path213169) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3167) !== false) {
      var if_res2120 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3167));
    } else {
      var if_res2120 = false;
    }
    var exists203170 = if_res2120;
    if (exists203170 !== false) {
      var if_res2121 = M1.car(given_args3168);
    } else {
      var if_res2121 = M1.rvoid();
    }
    var exists183171 = if_res2121;
    if (exists203170 !== false) {
      var if_res2122 = M1.cdr(given_kws3167);
    } else {
      var if_res2122 = given_kws3167;
    }
    var given_kws3172 = if_res2122;
    if (exists203170 !== false) {
      var if_res2123 = M1.cdr(given_args3168);
    } else {
      var if_res2123 = given_args3168;
    }
    var given_args3173 = if_res2123;
    var mode193174 = M1.pair_p(given_kws3172);
    if (mode193174 !== false) {
      var if_res2124 = M1.car(given_args3173);
    } else {
      var if_res2124 = M1.rvoid();
    }
    var mode173175 = if_res2124;
    return open_input_output_file22(exists183171, exists203170, mode173175, mode193174, path213169);
  };
  var cl2128 = function(given_kws3182, given_args3183, path3184) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(given_kws3182, given_args3183, path3184);
  };
  var temp2130 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2129 = {'3': cl2128}[arguments.length];
    if (fixed_lam2129 !== undefined) {
      return fixed_lam2129.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [3]);
  var temp2127 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2125 = function(path3186) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack23(M1.rnull, M1.rnull, path3186);
  };
  var open_input_output_file3185 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2126 = {'1': cl2125}[arguments.length];
    if (fixed_lam2126 !== undefined) {
      return fixed_lam2126.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1]);
  var open_input_output_file24 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3176, given_argc3177) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3177, 3) !== false) {
      var l13178 = given_kws3176;
      if (M1.null_p(l13178) !== false) {
        var if_res2132 = l13178;
      } else {
        if (M1.eq_p(M1.car(l13178), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2131 = M1.cdr(l13178);
        } else {
          var if_res2131 = l13178;
        }
        var if_res2132 = if_res2131;
      }
      var l13179 = if_res2132;
      var l13180 = l13179;
      if (M1.null_p(l13180) !== false) {
        var if_res2134 = l13180;
      } else {
        if (M1.eq_p(M1.car(l13180), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2133 = M1.cdr(l13180);
        } else {
          var if_res2133 = l13180;
        }
        var if_res2134 = if_res2133;
      }
      var l13181 = if_res2134;
      var if_res2135 = M1.null_p(l13181);
    } else {
      var if_res2135 = false;
    }
    return if_res2135;
  }, temp2130, M1.rnull, temp2127, open_input_output_file3185);
  var call_with_input_file29 = function(mode253187, mode263188, path273189, proc283190) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3191 = path273189;
    var proc3192 = proc283190;
    if (mode263188 !== false) {
      var if_res2136 = mode253187;
    } else {
      var if_res2136 = $rjs_core.Symbol.make("binary");
    }
    var mode3193 = if_res2136;
    if (M3.path_string_p(path3191) !== false) {
      var if_res2137 = M1.rvoid();
    } else {
      var if_res2137 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3191);
    }
    if_res2137;
    if (M1.procedure_p(proc3192) !== false) {
      var if_res2138 = M1.procedure_arity_includes_p(proc3192, 1);
    } else {
      var if_res2138 = false;
    }
    if (if_res2138 !== false) {
      var if_res2139 = M1.rvoid();
    } else {
      var if_res2139 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), $rjs_core.UString.makeInternedImmutable("(input-port? . -> . any)"), proc3192);
    }
    if_res2139;
    if (M0.memq(mode3193, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2140 = M1.rvoid();
    } else {
      var if_res2140 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file"), binary_or_text_desc, mode3193);
    }
    if_res2140;
    return M1.call_with_input_file(path3191, proc3192, mode3193);
  };
  var unpack30 = function(given_kws3194, given_args3195, path273196, proc283197) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode263198 = M1.pair_p(given_kws3194);
    if (mode263198 !== false) {
      var if_res2141 = M1.car(given_args3195);
    } else {
      var if_res2141 = M1.rvoid();
    }
    var mode253199 = if_res2141;
    return call_with_input_file29(mode253199, mode263198, path273196, proc283197);
  };
  var cl2145 = function(given_kws3204, given_args3205, path3206, proc3207) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(given_kws3204, given_args3205, path3206, proc3207);
  };
  var temp2147 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2146 = {'4': cl2145}[arguments.length];
    if (fixed_lam2146 !== undefined) {
      return fixed_lam2146.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2144 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2142 = function(path3209, proc3210) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack30(M1.rnull, M1.rnull, path3209, proc3210);
  };
  var call_with_input_file3208 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2143 = {'2': cl2142}[arguments.length];
    if (fixed_lam2143 !== undefined) {
      return fixed_lam2143.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file31 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3200, given_argc3201) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3201, 4) !== false) {
      var l13202 = given_kws3200;
      if (M1.null_p(l13202) !== false) {
        var if_res2149 = l13202;
      } else {
        if (M1.eq_p(M1.car(l13202), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2148 = M1.cdr(l13202);
        } else {
          var if_res2148 = l13202;
        }
        var if_res2149 = if_res2148;
      }
      var l13203 = if_res2149;
      var if_res2150 = M1.null_p(l13203);
    } else {
      var if_res2150 = false;
    }
    return if_res2150;
  }, temp2147, M1.rnull, temp2144, call_with_input_file3208);
  var call_with_output_file38 = function(exists333211, exists353212, mode323213, mode343214, path363215, proc373216) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3217 = path363215;
    var proc3218 = proc373216;
    if (mode343214 !== false) {
      var if_res2151 = mode323213;
    } else {
      var if_res2151 = $rjs_core.Symbol.make("binary");
    }
    var mode3219 = if_res2151;
    if (exists353212 !== false) {
      var if_res2152 = exists333211;
    } else {
      var if_res2152 = $rjs_core.Symbol.make("error");
    }
    var exists3220 = if_res2152;
    if (M3.path_string_p(path3217) !== false) {
      var if_res2153 = M1.rvoid();
    } else {
      var if_res2153 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3217);
    }
    if_res2153;
    if (M1.procedure_p(proc3218) !== false) {
      var if_res2154 = M1.procedure_arity_includes_p(proc3218, 1);
    } else {
      var if_res2154 = false;
    }
    if (if_res2154 !== false) {
      var if_res2155 = M1.rvoid();
    } else {
      var if_res2155 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), $rjs_core.UString.makeInternedImmutable("(output-port? . -> . any)"), proc3218);
    }
    if_res2155;
    if (M0.memq(mode3219, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2156 = M1.rvoid();
    } else {
      var if_res2156 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), binary_or_text_desc, mode3219);
    }
    if_res2156;
    if (M0.memq(exists3220, exists_syms) !== false) {
      var if_res2157 = M1.rvoid();
    } else {
      var if_res2157 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file"), exists_desc, exists3220);
    }
    if_res2157;
    return M1.call_with_output_file(path3217, proc3218, mode3219, exists3220);
  };
  var unpack39 = function(given_kws3221, given_args3222, path363223, proc373224) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3221) !== false) {
      var if_res2158 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3221));
    } else {
      var if_res2158 = false;
    }
    var exists353225 = if_res2158;
    if (exists353225 !== false) {
      var if_res2159 = M1.car(given_args3222);
    } else {
      var if_res2159 = M1.rvoid();
    }
    var exists333226 = if_res2159;
    if (exists353225 !== false) {
      var if_res2160 = M1.cdr(given_kws3221);
    } else {
      var if_res2160 = given_kws3221;
    }
    var given_kws3227 = if_res2160;
    if (exists353225 !== false) {
      var if_res2161 = M1.cdr(given_args3222);
    } else {
      var if_res2161 = given_args3222;
    }
    var given_args3228 = if_res2161;
    var mode343229 = M1.pair_p(given_kws3227);
    if (mode343229 !== false) {
      var if_res2162 = M1.car(given_args3228);
    } else {
      var if_res2162 = M1.rvoid();
    }
    var mode323230 = if_res2162;
    return call_with_output_file38(exists333226, exists353225, mode323230, mode343229, path363223, proc373224);
  };
  var cl2166 = function(given_kws3237, given_args3238, path3239, proc3240) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(given_kws3237, given_args3238, path3239, proc3240);
  };
  var temp2168 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2167 = {'4': cl2166}[arguments.length];
    if (fixed_lam2167 !== undefined) {
      return fixed_lam2167.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2165 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2163 = function(path3242, proc3243) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack39(M1.rnull, M1.rnull, path3242, proc3243);
  };
  var call_with_output_file3241 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2164 = {'2': cl2163}[arguments.length];
    if (fixed_lam2164 !== undefined) {
      return fixed_lam2164.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file40 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3231, given_argc3232) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3232, 4) !== false) {
      var l13233 = given_kws3231;
      if (M1.null_p(l13233) !== false) {
        var if_res2170 = l13233;
      } else {
        if (M1.eq_p(M1.car(l13233), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2169 = M1.cdr(l13233);
        } else {
          var if_res2169 = l13233;
        }
        var if_res2170 = if_res2169;
      }
      var l13234 = if_res2170;
      var l13235 = l13234;
      if (M1.null_p(l13235) !== false) {
        var if_res2172 = l13235;
      } else {
        if (M1.eq_p(M1.car(l13235), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2171 = M1.cdr(l13235);
        } else {
          var if_res2171 = l13235;
        }
        var if_res2172 = if_res2171;
      }
      var l13236 = if_res2172;
      var if_res2173 = M1.null_p(l13236);
    } else {
      var if_res2173 = false;
    }
    return if_res2173;
  }, temp2168, M1.rnull, temp2165, call_with_output_file3241);
  var with_input_from_file45 = function(mode413244, mode423245, path433246, proc443247) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3248 = path433246;
    var proc3249 = proc443247;
    if (mode423245 !== false) {
      var if_res2174 = mode413244;
    } else {
      var if_res2174 = $rjs_core.Symbol.make("binary");
    }
    var mode3250 = if_res2174;
    if (M3.path_string_p(path3248) !== false) {
      var if_res2175 = M1.rvoid();
    } else {
      var if_res2175 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3248);
    }
    if_res2175;
    if (M1.procedure_p(proc3249) !== false) {
      var if_res2176 = M1.procedure_arity_includes_p(proc3249, 0);
    } else {
      var if_res2176 = false;
    }
    if (if_res2176 !== false) {
      var if_res2177 = M1.rvoid();
    } else {
      var if_res2177 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), $rjs_core.UString.makeInternedImmutable("(-> any)"), proc3249);
    }
    if_res2177;
    if (M0.memq(mode3250, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2178 = M1.rvoid();
    } else {
      var if_res2178 = M1.raise_argument_error($rjs_core.Symbol.make("with-input-from-file"), binary_or_text_desc, mode3250);
    }
    if_res2178;
    return M1.with_input_from_file(path3248, proc3249, mode3250);
  };
  var unpack46 = function(given_kws3251, given_args3252, path433253, proc443254) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode423255 = M1.pair_p(given_kws3251);
    if (mode423255 !== false) {
      var if_res2179 = M1.car(given_args3252);
    } else {
      var if_res2179 = M1.rvoid();
    }
    var mode413256 = if_res2179;
    return with_input_from_file45(mode413256, mode423255, path433253, proc443254);
  };
  var cl2183 = function(given_kws3261, given_args3262, path3263, proc3264) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(given_kws3261, given_args3262, path3263, proc3264);
  };
  var temp2185 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2184 = {'4': cl2183}[arguments.length];
    if (fixed_lam2184 !== undefined) {
      return fixed_lam2184.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2182 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2180 = function(path3266, proc3267) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack46(M1.rnull, M1.rnull, path3266, proc3267);
  };
  var with_input_from_file3265 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2181 = {'2': cl2180}[arguments.length];
    if (fixed_lam2181 !== undefined) {
      return fixed_lam2181.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var with_input_from_file47 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3257, given_argc3258) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3258, 4) !== false) {
      var l13259 = given_kws3257;
      if (M1.null_p(l13259) !== false) {
        var if_res2187 = l13259;
      } else {
        if (M1.eq_p(M1.car(l13259), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2186 = M1.cdr(l13259);
        } else {
          var if_res2186 = l13259;
        }
        var if_res2187 = if_res2186;
      }
      var l13260 = if_res2187;
      var if_res2188 = M1.null_p(l13260);
    } else {
      var if_res2188 = false;
    }
    return if_res2188;
  }, temp2185, M1.rnull, temp2182, with_input_from_file3265);
  var with_output_to_file54 = function(exists493268, exists513269, mode483270, mode503271, path523272, proc533273) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3274 = path523272;
    var proc3275 = proc533273;
    if (mode503271 !== false) {
      var if_res2189 = mode483270;
    } else {
      var if_res2189 = $rjs_core.Symbol.make("binary");
    }
    var mode3276 = if_res2189;
    if (exists513269 !== false) {
      var if_res2190 = exists493268;
    } else {
      var if_res2190 = $rjs_core.Symbol.make("error");
    }
    var exists3277 = if_res2190;
    if (M3.path_string_p(path3274) !== false) {
      var if_res2191 = M1.rvoid();
    } else {
      var if_res2191 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3274);
    }
    if_res2191;
    if (M1.procedure_p(proc3275) !== false) {
      var if_res2192 = M1.procedure_arity_includes_p(proc3275, 0);
    } else {
      var if_res2192 = false;
    }
    if (if_res2192 !== false) {
      var if_res2193 = M1.rvoid();
    } else {
      var if_res2193 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), $rjs_core.UString.makeInternedImmutable("(-> any)"), proc3275);
    }
    if_res2193;
    if (M0.memq(mode3276, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2194 = M1.rvoid();
    } else {
      var if_res2194 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), binary_or_text_desc, mode3276);
    }
    if_res2194;
    if (M0.memq(exists3277, exists_syms) !== false) {
      var if_res2195 = M1.rvoid();
    } else {
      var if_res2195 = M1.raise_argument_error($rjs_core.Symbol.make("with-output-to-file"), exists_desc, exists3277);
    }
    if_res2195;
    return M1.with_output_to_file(path3274, proc3275, mode3276, exists3277);
  };
  var unpack55 = function(given_kws3278, given_args3279, path523280, proc533281) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3278) !== false) {
      var if_res2196 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3278));
    } else {
      var if_res2196 = false;
    }
    var exists513282 = if_res2196;
    if (exists513282 !== false) {
      var if_res2197 = M1.car(given_args3279);
    } else {
      var if_res2197 = M1.rvoid();
    }
    var exists493283 = if_res2197;
    if (exists513282 !== false) {
      var if_res2198 = M1.cdr(given_kws3278);
    } else {
      var if_res2198 = given_kws3278;
    }
    var given_kws3284 = if_res2198;
    if (exists513282 !== false) {
      var if_res2199 = M1.cdr(given_args3279);
    } else {
      var if_res2199 = given_args3279;
    }
    var given_args3285 = if_res2199;
    var mode503286 = M1.pair_p(given_kws3284);
    if (mode503286 !== false) {
      var if_res2200 = M1.car(given_args3285);
    } else {
      var if_res2200 = M1.rvoid();
    }
    var mode483287 = if_res2200;
    return with_output_to_file54(exists493283, exists513282, mode483287, mode503286, path523280, proc533281);
  };
  var cl2204 = function(given_kws3294, given_args3295, path3296, proc3297) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(given_kws3294, given_args3295, path3296, proc3297);
  };
  var temp2206 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2205 = {'4': cl2204}[arguments.length];
    if (fixed_lam2205 !== undefined) {
      return fixed_lam2205.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2203 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2201 = function(path3299, proc3300) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack55(M1.rnull, M1.rnull, path3299, proc3300);
  };
  var with_output_to_file3298 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2202 = {'2': cl2201}[arguments.length];
    if (fixed_lam2202 !== undefined) {
      return fixed_lam2202.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var with_output_to_file56 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3288, given_argc3289) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3289, 4) !== false) {
      var l13290 = given_kws3288;
      if (M1.null_p(l13290) !== false) {
        var if_res2208 = l13290;
      } else {
        if (M1.eq_p(M1.car(l13290), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2207 = M1.cdr(l13290);
        } else {
          var if_res2207 = l13290;
        }
        var if_res2208 = if_res2207;
      }
      var l13291 = if_res2208;
      var l13292 = l13291;
      if (M1.null_p(l13292) !== false) {
        var if_res2210 = l13292;
      } else {
        if (M1.eq_p(M1.car(l13292), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2209 = M1.cdr(l13292);
        } else {
          var if_res2209 = l13292;
        }
        var if_res2210 = if_res2209;
      }
      var l13293 = if_res2210;
      var if_res2211 = M1.null_p(l13293);
    } else {
      var if_res2211 = false;
    }
    return if_res2211;
  }, temp2206, M1.rnull, temp2203, with_output_to_file3298);
  var call_with_input_file_times_61 = function(mode573301, mode583302, path593303, proc603304) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3305 = path593303;
    var proc3306 = proc603304;
    if (mode583302 !== false) {
      var if_res2212 = mode573301;
    } else {
      var if_res2212 = $rjs_core.Symbol.make("binary");
    }
    var mode3307 = if_res2212;
    if (M3.path_string_p(path3305) !== false) {
      var if_res2213 = M1.rvoid();
    } else {
      var if_res2213 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3305);
    }
    if_res2213;
    if (M1.procedure_p(proc3306) !== false) {
      var if_res2214 = M1.procedure_arity_includes_p(proc3306, 1);
    } else {
      var if_res2214 = false;
    }
    if (if_res2214 !== false) {
      var if_res2215 = M1.rvoid();
    } else {
      var if_res2215 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), $rjs_core.UString.makeInternedImmutable("(input-port? . -> . any)"), proc3306);
    }
    if_res2215;
    if (M0.memq(mode3307, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2216 = M1.rvoid();
    } else {
      var if_res2216 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-input-file*"), binary_or_text_desc, mode3307);
    }
    if_res2216;
    var p3308 = M1.open_input_file(path3305, mode3307);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3306(p3308);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_input_port(p3308);
    });
  };
  var unpack62 = function(given_kws3309, given_args3310, path593311, proc603312) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var mode583313 = M1.pair_p(given_kws3309);
    if (mode583313 !== false) {
      var if_res2217 = M1.car(given_args3310);
    } else {
      var if_res2217 = M1.rvoid();
    }
    var mode573314 = if_res2217;
    return call_with_input_file_times_61(mode573314, mode583313, path593311, proc603312);
  };
  var cl2221 = function(given_kws3319, given_args3320, path3321, proc3322) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(given_kws3319, given_args3320, path3321, proc3322);
  };
  var temp2223 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2222 = {'4': cl2221}[arguments.length];
    if (fixed_lam2222 !== undefined) {
      return fixed_lam2222.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2220 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("mode"));
  var cl2218 = function(path3324, proc3325) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack62(M1.rnull, M1.rnull, path3324, proc3325);
  };
  var call_with_input_file_times_3323 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2219 = {'2': cl2218}[arguments.length];
    if (fixed_lam2219 !== undefined) {
      return fixed_lam2219.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_input_file_times_63 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3315, given_argc3316) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3316, 4) !== false) {
      var l13317 = given_kws3315;
      if (M1.null_p(l13317) !== false) {
        var if_res2225 = l13317;
      } else {
        if (M1.eq_p(M1.car(l13317), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2224 = M1.cdr(l13317);
        } else {
          var if_res2224 = l13317;
        }
        var if_res2225 = if_res2224;
      }
      var l13318 = if_res2225;
      var if_res2226 = M1.null_p(l13318);
    } else {
      var if_res2226 = false;
    }
    return if_res2226;
  }, temp2223, M1.rnull, temp2220, call_with_input_file_times_3323);
  var call_with_output_file_times_70 = function(exists653326, exists673327, mode643328, mode663329, path683330, proc693331) {
    if (arguments.length !== 6) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var path3332 = path683330;
    var proc3333 = proc693331;
    if (mode663329 !== false) {
      var if_res2227 = mode643328;
    } else {
      var if_res2227 = $rjs_core.Symbol.make("binary");
    }
    var mode3334 = if_res2227;
    if (exists673327 !== false) {
      var if_res2228 = exists653326;
    } else {
      var if_res2228 = $rjs_core.Symbol.make("error");
    }
    var exists3335 = if_res2228;
    if (M3.path_string_p(path3332) !== false) {
      var if_res2229 = M1.rvoid();
    } else {
      var if_res2229 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.makeInternedImmutable("path-string?"), path3332);
    }
    if_res2229;
    if (M1.procedure_p(proc3333) !== false) {
      var if_res2230 = M1.procedure_arity_includes_p(proc3333, 1);
    } else {
      var if_res2230 = false;
    }
    if (if_res2230 !== false) {
      var if_res2231 = M1.rvoid();
    } else {
      var if_res2231 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), $rjs_core.UString.makeInternedImmutable("(output-port? . -> . any)"), proc3333);
    }
    if_res2231;
    if (M0.memq(mode3334, $rjs_core.Pair.makeList($rjs_core.Symbol.make("binary"), $rjs_core.Symbol.make("text"))) !== false) {
      var if_res2232 = M1.rvoid();
    } else {
      var if_res2232 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), binary_or_text_desc, mode3334);
    }
    if_res2232;
    if (M0.memq(exists3335, exists_syms) !== false) {
      var if_res2233 = M1.rvoid();
    } else {
      var if_res2233 = M1.raise_argument_error($rjs_core.Symbol.make("call-with-output-file*"), exists_desc, exists3335);
    }
    if_res2233;
    var p3336 = M1.open_output_file(path3332, mode3334, exists3335);
    return M1.dynamic_wind(M1.rvoid, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return proc3333(p3336);
    }, function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M1.close_output_port(p3336);
    });
  };
  var unpack71 = function(given_kws3337, given_args3338, path683339, proc693340) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.pair_p(given_kws3337) !== false) {
      var if_res2234 = M1.eq_p($rjs_core.Keyword.make("exists"), M1.car(given_kws3337));
    } else {
      var if_res2234 = false;
    }
    var exists673341 = if_res2234;
    if (exists673341 !== false) {
      var if_res2235 = M1.car(given_args3338);
    } else {
      var if_res2235 = M1.rvoid();
    }
    var exists653342 = if_res2235;
    if (exists673341 !== false) {
      var if_res2236 = M1.cdr(given_kws3337);
    } else {
      var if_res2236 = given_kws3337;
    }
    var given_kws3343 = if_res2236;
    if (exists673341 !== false) {
      var if_res2237 = M1.cdr(given_args3338);
    } else {
      var if_res2237 = given_args3338;
    }
    var given_args3344 = if_res2237;
    var mode663345 = M1.pair_p(given_kws3343);
    if (mode663345 !== false) {
      var if_res2238 = M1.car(given_args3344);
    } else {
      var if_res2238 = M1.rvoid();
    }
    var mode643346 = if_res2238;
    return call_with_output_file_times_70(exists653342, exists673341, mode643346, mode663345, path683339, proc693340);
  };
  var cl2242 = function(given_kws3353, given_args3354, path3355, proc3356) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(given_kws3353, given_args3354, path3355, proc3356);
  };
  var temp2244 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2243 = {'4': cl2242}[arguments.length];
    if (fixed_lam2243 !== undefined) {
      return fixed_lam2243.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [4]);
  var temp2241 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists"), $rjs_core.Keyword.make("mode"));
  var cl2239 = function(path3358, proc3359) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack71(M1.rnull, M1.rnull, path3358, proc3359);
  };
  var call_with_output_file_times_3357 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2240 = {'2': cl2239}[arguments.length];
    if (fixed_lam2240 !== undefined) {
      return fixed_lam2240.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2]);
  var call_with_output_file_times_72 = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3347, given_argc3348) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__eq_(given_argc3348, 4) !== false) {
      var l13349 = given_kws3347;
      if (M1.null_p(l13349) !== false) {
        var if_res2246 = l13349;
      } else {
        if (M1.eq_p(M1.car(l13349), $rjs_core.Keyword.make("exists")) !== false) {
          var if_res2245 = M1.cdr(l13349);
        } else {
          var if_res2245 = l13349;
        }
        var if_res2246 = if_res2245;
      }
      var l13350 = if_res2246;
      var l13351 = l13350;
      if (M1.null_p(l13351) !== false) {
        var if_res2248 = l13351;
      } else {
        if (M1.eq_p(M1.car(l13351), $rjs_core.Keyword.make("mode")) !== false) {
          var if_res2247 = M1.cdr(l13351);
        } else {
          var if_res2247 = l13351;
        }
        var if_res2248 = if_res2247;
      }
      var l13352 = if_res2248;
      var if_res2249 = M1.null_p(l13352);
    } else {
      var if_res2249 = false;
    }
    return if_res2249;
  }, temp2244, M1.rnull, temp2241, call_with_output_file_times_3357);
  var core773360 = function(build_p733361, build_p743362, dir753363, dir763364) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (dir763364 !== false) {
      var if_res2250 = dir753363;
    } else {
      var if_res2250 = M1.current_directory();
    }
    var dir3365 = if_res2250;
    if (build_p743362 !== false) {
      var if_res2251 = build_p733361;
    } else {
      var if_res2251 = false;
    }
    var build_p3366 = if_res2251;
    if (M3.path_string_p(dir3365) !== false) {
      var if_res2252 = M1.rvoid();
    } else {
      var if_res2252 = M1.raise_argument_error($rjs_core.Symbol.make("directory-list"), $rjs_core.UString.makeInternedImmutable("path-string?"), dir3365);
    }
    if_res2252;
    var content3367 = M4.sort(M1.directory_list(dir3365), M1.path_lt__p);
    if (build_p3366 !== false) {
      var if_res2253 = M2.map(function(i3368) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M1.build_path(dir3365, i3368);
      }, content3367);
    } else {
      var if_res2253 = content3367;
    }
    return if_res2253;
  };
  var unpack783369 = function(given_kws3370, given_args3371, dir753372, dir763373) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var build_p743374 = M1.pair_p(given_kws3370);
    if (build_p743374 !== false) {
      var if_res2254 = M1.car(given_args3371);
    } else {
      var if_res2254 = M1.rvoid();
    }
    var build_p733375 = if_res2254;
    return core773360(build_p733375, build_p743374, dir753372, dir763373);
  };
  var cl2259 = function(given_kws3380, given_args3381) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783369(given_kws3380, given_args3381, false, false);
  };
  var cl2260 = function(given_kws3382, given_args3383, dir753384) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783369(given_kws3382, given_args3383, dir753384, true);
  };
  var temp2262 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2261 = {
      '2': cl2259,
      '3': cl2260
    }[arguments.length];
    if (fixed_lam2261 !== undefined) {
      return fixed_lam2261.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [2, 3]);
  var temp2258 = $rjs_core.Pair.makeList($rjs_core.Keyword.make("build?"));
  var cl2255 = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783369(M1.rnull, M1.rnull, false, false);
  };
  var cl2256 = function(dir753386) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return unpack783369(M1.rnull, M1.rnull, dir753386, true);
  };
  var directory_list3385 = $rjs_core.attachProcedureArity(function() {
    var fixed_lam2257 = {
      '0': cl2255,
      '1': cl2256
    }[arguments.length];
    if (fixed_lam2257 !== undefined) {
      return fixed_lam2257.apply(null, arguments);
    } else {
      return M1.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [0, 1]);
  var directory_list = M5.__rjs_quoted__.make_optional_keyword_procedure(function(given_kws3376, given_argc3377) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__gt__eq_(given_argc3377, 2) !== false) {
      var if_res2263 = M1.__lt__eq_(given_argc3377, 3);
    } else {
      var if_res2263 = false;
    }
    if (if_res2263 !== false) {
      var l13378 = given_kws3376;
      if (M1.null_p(l13378) !== false) {
        var if_res2265 = l13378;
      } else {
        if (M1.eq_p(M1.car(l13378), $rjs_core.Keyword.make("build?")) !== false) {
          var if_res2264 = M1.cdr(l13378);
        } else {
          var if_res2264 = l13378;
        }
        var if_res2265 = if_res2264;
      }
      var l13379 = if_res2265;
      var if_res2266 = M1.null_p(l13379);
    } else {
      var if_res2266 = false;
    }
    return if_res2266;
  }, temp2262, M1.rnull, temp2258, directory_list3385);
  var __rjs_quoted__ = {};
  __rjs_quoted__.call_with_input_file29 = call_with_input_file29;
  __rjs_quoted__.open_input_output_file22 = open_input_output_file22;
  __rjs_quoted__.call_with_input_file31 = call_with_input_file31;
  __rjs_quoted__.call_with_output_file40 = call_with_output_file40;
  __rjs_quoted__.call_with_input_file_times_61 = call_with_input_file_times_61;
  __rjs_quoted__.open_output_file14 = open_output_file14;
  __rjs_quoted__.call_with_output_file_times_72 = call_with_output_file_times_72;
  __rjs_quoted__.open_output_file16 = open_output_file16;
  __rjs_quoted__.with_output_to_file54 = with_output_to_file54;
  __rjs_quoted__.with_output_to_file56 = with_output_to_file56;
  __rjs_quoted__.with_input_from_file45 = with_input_from_file45;
  __rjs_quoted__.call_with_input_file_times_63 = call_with_input_file_times_63;
  __rjs_quoted__.open_input_file6 = open_input_file6;
  __rjs_quoted__.call_with_output_file38 = call_with_output_file38;
  __rjs_quoted__.with_input_from_file47 = with_input_from_file47;
  __rjs_quoted__.open_input_file8 = open_input_file8;
  __rjs_quoted__.open_input_output_file24 = open_input_output_file24;
  __rjs_quoted__.call_with_output_file_times_70 = call_with_output_file_times_70;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __directory_list() {
      return directory_list;
    }
  };
})();
var $__modules_47_version_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/version.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var __times_version_times_ = $rjs_core.UString.makeInternedImmutable("0.8.1");
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_version_times_() {
      return __times_version_times_;
    }
  };
})();
var $__modules_47_code_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/code.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M2 = $__collects_47_racket_47_private_47_kw_45_file_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M4 = $__modules_47_version_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_kw_46_rkt_46_js__;
  var __times_default_header_times_ = M0.list(M0.string_append($rjs_core.UString.makeInternedImmutable("Generated by the Waxeye Parser Generator - version "), M4.__times_version_times_), $rjs_core.UString.makeInternedImmutable("www.waxeye.org"));
  var __times_indent_unit_times_ = 4;
  var __times_indent_level_times_ = 0;
  var indent_unit_bang_ = function(val142) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_unit_times_ = val142;
    return null;
  };
  var dump_string = function(s143, path144) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__541145 = M2.__rjs_quoted__.call_with_output_file40;
    var path1146 = path144;
    var temp2147 = function(p149) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      return M0.display(s143, p149);
    };
    var temp3148 = $rjs_core.Symbol.make("replace");
    if (M0.variable_reference_constant_p(M2.__rjs_quoted__.call_with_output_file40) !== false) {
      var if_res97 = M2.__rjs_quoted__.call_with_output_file38(temp3148, true, false, false, path1146, temp2147);
    } else {
      var if_res97 = M0.checked_procedure_check_and_extract(M5.__rjs_quoted__.struct_keyword_procedure, __dot__dot__dot__by_src_by_waxeye_by_code_dot_rkt__541145, M5.__rjs_quoted__.keyword_procedure_extract, $rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), 4)($rjs_core.Pair.makeList($rjs_core.Keyword.make("exists")), M0.list(temp3148), path1146, temp2147);
    }
    return if_res97;
  };
  var ind = function() {
    if (arguments.length !== 0) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M1.make_list(__times_indent_level_times_, M0.make_string(__times_indent_unit_times_, $rjs_core.Char.charFromCodepoint(32))));
  };
  var indent_plus_ = function(n150) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ + n150;
    return null;
  };
  var indent_ = function(n151) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    __times_indent_level_times_ = __times_indent_level_times_ - n151;
    return null;
  };
  var bool__gt_s = function(b152) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (b152 !== false) {
      var if_res98 = $rjs_core.UString.makeInternedImmutable("true");
    } else {
      var if_res98 = $rjs_core.UString.makeInternedImmutable("false");
    }
    return if_res98;
  };
  var comment_bookend = function(top153, unit154, bot155, lines156) {
    if (arguments.length !== 4) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.string_append(ind(), top153, $rjs_core.UString.makeInternedImmutable("\n"), comment_base(unit154, lines156), ind(), bot155, $rjs_core.UString.makeInternedImmutable("\n"));
  };
  var comment_base = function(unit157, lines158) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.apply(M0.string_append, M3.map(function(a159) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.equal_p($rjs_core.UString.makeInternedImmutable(""), a159) !== false) {
        var if_res99 = M0.format($rjs_core.UString.makeInternedImmutable("~a~a\n"), ind(), unit157);
      } else {
        var if_res99 = M0.format($rjs_core.UString.makeInternedImmutable("~a~a ~a\n"), ind(), unit157, a159);
      }
      return if_res99;
    }, lines158));
  };
  var script_comment = function(lines160) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return comment_base($rjs_core.UString.makeInternedImmutable("#"), lines160);
  };
  var camel_case_lower = function(s161) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl162 = M0.string__gt_list(s161);
    if (M0.null_p(sl162) !== false) {
      var if_res100 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res100 = M0.list__gt_string(M0.cons(M0.char_downcase(M0.car(sl162)), M0.cdr(sl162)));
    }
    return if_res100;
  };
  var camel_case_upper = function(s163) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var sl164 = M0.string__gt_list(s163);
    if (M0.null_p(sl164) !== false) {
      var if_res101 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res101 = M0.list__gt_string(M0.cons(M0.char_upcase(M0.car(sl164)), M0.cdr(sl164)));
    }
    return if_res101;
  };
  var string__gt_upper = function(s165) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.list__gt_string(M3.map(M0.char_upcase, M0.string__gt_list(s165)));
  };
  var escape_for_java_char_p = function(ch166) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var or_part167 = M0.equal_p(ch166, $rjs_core.Char.charFromCodepoint(92));
    if (or_part167 !== false) {
      var if_res102 = or_part167;
    } else {
      var if_res102 = M0.equal_p(ch166, $rjs_core.Char.charFromCodepoint(39));
    }
    return if_res102;
  };
  var escape_java_string = function(s168) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var escape_java_string_iter169 = function(sl170) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M0.null_p(sl170) !== false) {
        var if_res104 = $rjs_core.Pair.makeList();
      } else {
        if (M0.equal_p(M0.car(sl170), $rjs_core.Char.charFromCodepoint(34)) !== false) {
          var if_res103 = M0.cons($rjs_core.Char.charFromCodepoint(92), M0.cons($rjs_core.Char.charFromCodepoint(34), escape_java_string_iter169(M0.cdr(sl170))));
        } else {
          var if_res103 = M0.cons(M0.car(sl170), escape_java_string_iter169(M0.cdr(sl170)));
        }
        var if_res104 = if_res103;
      }
      return if_res104;
    };
    return M0.list__gt_string(escape_java_string_iter169(M0.string__gt_list(s168)));
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.indent_ = indent_;
  __rjs_quoted__.indent_plus_ = indent_plus_;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get __times_default_header_times_() {
      return __times_default_header_times_;
    },
    get __times_indent_unit_times_() {
      return __times_indent_unit_times_;
    },
    get __times_indent_level_times_() {
      return __times_indent_level_times_;
    },
    get indent_unit_bang_() {
      return indent_unit_bang_;
    },
    get dump_string() {
      return dump_string;
    },
    get ind() {
      return ind;
    },
    get indent_plus_() {
      return indent_plus_;
    },
    get indent_() {
      return indent_;
    },
    get bool__gt_s() {
      return bool__gt_s;
    },
    get comment_bookend() {
      return comment_bookend;
    },
    get comment_base() {
      return comment_base;
    },
    get script_comment() {
      return script_comment;
    },
    get camel_case_lower() {
      return camel_case_lower;
    },
    get camel_case_upper() {
      return camel_case_upper;
    },
    get string__gt_upper() {
      return string__gt_upper;
    },
    get escape_for_java_char_p() {
      return escape_for_java_char_p;
    },
    get escape_java_string() {
      return escape_java_string;
    }
  };
})();
var $__modules_47_javascript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/javascript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__modules_47_code_46_rkt_46_js__;
  var M1 = $__modules_47_gen_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__collects_47_racket_47_list_46_rkt_46_js__;
  var M4 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M5 = $__collects_47_racket_47_private_47_map_46_rkt_46_js__;
  var M6 = $__runtime_47_unsafe_46_rkt_46_js__;
  var javascript_comment = function(lines17) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M0.comment_bookend($rjs_core.UString.makeInternedImmutable("/*"), $rjs_core.UString.makeInternedImmutable(" *"), $rjs_core.UString.makeInternedImmutable(" */"), lines17);
  };
  var gen_javascript = function(grammar18, path19) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    M0.indent_unit_bang_(4);
    if (M1.__times_name_prefix_times_ !== false) {
      var if_res7 = M2.string_append(M2.string_downcase(M1.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("_parser.js"));
    } else {
      var if_res7 = $rjs_core.UString.makeInternedImmutable("parser.js");
    }
    var file_path20 = M2.string_append(path19, if_res7);
    M0.dump_string(gen_parser(grammar18), file_path20);
    return M2.list(file_path20);
  };
  var gen_literal = function(a21) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var gen_char22 = function(t23) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp13 = $rjs_core.UString.makeInternedImmutable("'~a~a'");
      if (M0.escape_for_java_char_p(t23) !== false) {
        var if_res12 = $rjs_core.UString.makeInternedImmutable("\\");
      } else {
        var if_res12 = $rjs_core.UString.makeInternedImmutable("");
      }
      if (M2.equal_p(t23, $rjs_core.Char.charFromCodepoint(34)) !== false) {
        var if_res11 = $rjs_core.UString.makeInternedImmutable("\\\"");
      } else {
        if (M2.equal_p(t23, $rjs_core.Char.charFromCodepoint(10)) !== false) {
          var if_res10 = $rjs_core.UString.makeInternedImmutable("\\n");
        } else {
          if (M2.equal_p(t23, $rjs_core.Char.charFromCodepoint(9)) !== false) {
            var if_res9 = $rjs_core.UString.makeInternedImmutable("\\t");
          } else {
            if (M2.equal_p(t23, $rjs_core.Char.charFromCodepoint(13)) !== false) {
              var if_res8 = $rjs_core.UString.makeInternedImmutable("\\r");
            } else {
              var if_res8 = t23;
            }
            var if_res9 = if_res8;
          }
          var if_res10 = if_res9;
        }
        var if_res11 = if_res10;
      }
      return M2.format(temp13, if_res12, if_res11);
    };
    return gen_array(gen_char22, a21);
  };
  var gen_char_class = function(a24) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var gen_char_class_item25 = function(a26) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      if (M2.char_p(a26) !== false) {
        var if_res14 = M2.format($rjs_core.UString.makeInternedImmutable("0x~x"), M2.char__gt_integer(a26));
      } else {
        var if_res14 = M2.format($rjs_core.UString.makeInternedImmutable("[0x~x, 0x~x]"), M2.char__gt_integer(M2.car(a26)), M2.char__gt_integer(M2.cdr(a26)));
      }
      return if_res14;
    };
    if (M2.symbol_p(a24) !== false) {
      var if_res17 = $rjs_core.UString.makeInternedImmutable("-1");
    } else {
      if (M2.list_p(a24) !== false) {
        var if_res16 = gen_array(gen_char_class_item25, a24);
      } else {
        if (M2.char_p(a24) !== false) {
          var if_res15 = gen_char_class_item25(a24);
        } else {
          var if_res15 = a24;
        }
        var if_res16 = if_res15;
      }
      var if_res17 = if_res16;
    }
    return if_res17;
  };
  var gen_exp = function(a27) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp46 = $rjs_core.UString.makeInternedImmutable("{type:'~a', args:~a}");
    var tmp28 = M4.ast_t(a27);
    if (M2.symbol_p(tmp28) !== false) {
      var if_res32 = M2.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 10], [$rjs_core.Symbol.make("identifier"), 2], [$rjs_core.Symbol.make("optional"), 8], [$rjs_core.Symbol.make("not"), 7], [$rjs_core.Symbol.make("closure"), 11], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 3], [$rjs_core.Symbol.make("alternation"), 9], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 1], [$rjs_core.Symbol.make("and"), 6], [$rjs_core.Symbol.make("literal"), 4]], false), tmp28, function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return 0;
      });
    } else {
      var if_res32 = 0;
    }
    var index29 = if_res32;
    if (M6.unsafe_fx_lt_(index29, 6) !== false) {
      if (M6.unsafe_fx_lt_(index29, 2) !== false) {
        if (M6.unsafe_fx_lt_(index29, 1) !== false) {
          var if_res33 = M2.format($rjs_core.UString.makeInternedImmutable("unknown:~a"), M4.ast_t(a27));
        } else {
          var if_res33 = $rjs_core.UString.makeInternedImmutable("ANY");
        }
        var if_res38 = if_res33;
      } else {
        if (M6.unsafe_fx_lt_(index29, 3) !== false) {
          var if_res37 = $rjs_core.UString.makeInternedImmutable("NT");
        } else {
          if (M6.unsafe_fx_lt_(index29, 4) !== false) {
            var if_res36 = $rjs_core.UString.makeInternedImmutable("VOID");
          } else {
            if (M6.unsafe_fx_lt_(index29, 5) !== false) {
              if (M2.__lt__eq_(M2.length(M4.ast_c(a27)), 1) !== false) {
                var if_res34 = $rjs_core.UString.makeInternedImmutable("CHAR");
              } else {
                var if_res34 = $rjs_core.UString.makeInternedImmutable("SEQ");
              }
              var if_res35 = if_res34;
            } else {
              var if_res35 = $rjs_core.UString.makeInternedImmutable("CHAR_CLASS");
            }
            var if_res36 = if_res35;
          }
          var if_res37 = if_res36;
        }
        var if_res38 = if_res37;
      }
      var if_res45 = if_res38;
    } else {
      if (M6.unsafe_fx_lt_(index29, 9) !== false) {
        if (M6.unsafe_fx_lt_(index29, 7) !== false) {
          var if_res40 = $rjs_core.UString.makeInternedImmutable("AND");
        } else {
          if (M6.unsafe_fx_lt_(index29, 8) !== false) {
            var if_res39 = $rjs_core.UString.makeInternedImmutable("NOT");
          } else {
            var if_res39 = $rjs_core.UString.makeInternedImmutable("OPT");
          }
          var if_res40 = if_res39;
        }
        var if_res44 = if_res40;
      } else {
        if (M6.unsafe_fx_lt_(index29, 10) !== false) {
          var if_res43 = $rjs_core.UString.makeInternedImmutable("ALT");
        } else {
          if (M6.unsafe_fx_lt_(index29, 11) !== false) {
            var if_res42 = $rjs_core.UString.makeInternedImmutable("SEQ");
          } else {
            if (M6.unsafe_fx_lt_(index29, 12) !== false) {
              var if_res41 = $rjs_core.UString.makeInternedImmutable("STAR");
            } else {
              var if_res41 = $rjs_core.UString.makeInternedImmutable("PLUS");
            }
            var if_res42 = if_res41;
          }
          var if_res43 = if_res42;
        }
        var if_res44 = if_res43;
      }
      var if_res45 = if_res44;
    }
    var tmp30 = M4.ast_t(a27);
    if (M2.symbol_p(tmp30) !== false) {
      var if_res18 = M2.hash_ref($rjs_core.Hash.makeEq([[$rjs_core.Symbol.make("sequence"), 10], [$rjs_core.Symbol.make("identifier"), 2], [$rjs_core.Symbol.make("optional"), 8], [$rjs_core.Symbol.make("not"), 7], [$rjs_core.Symbol.make("closure"), 11], [$rjs_core.Symbol.make("charClass"), 5], [$rjs_core.Symbol.make("void"), 3], [$rjs_core.Symbol.make("alternation"), 9], [$rjs_core.Symbol.make("plus"), 12], [$rjs_core.Symbol.make("wildCard"), 1], [$rjs_core.Symbol.make("and"), 6], [$rjs_core.Symbol.make("literal"), 4]], false), tmp30, function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return 0;
      });
    } else {
      var if_res18 = 0;
    }
    var index31 = if_res18;
    if (M6.unsafe_fx_lt_(index31, 6) !== false) {
      if (M6.unsafe_fx_lt_(index31, 2) !== false) {
        if (M6.unsafe_fx_lt_(index31, 1) !== false) {
          var if_res19 = M2.format($rjs_core.UString.makeInternedImmutable("unknown:~a"), M4.ast_t(a27));
        } else {
          var if_res19 = $rjs_core.UString.makeInternedImmutable("[]");
        }
        var if_res24 = if_res19;
      } else {
        if (M6.unsafe_fx_lt_(index31, 3) !== false) {
          var if_res23 = M2.format($rjs_core.UString.makeInternedImmutable("['~a']"), M2.list__gt_string(M4.ast_c(a27)));
        } else {
          if (M6.unsafe_fx_lt_(index31, 4) !== false) {
            var if_res22 = gen_array(gen_exp, M4.ast_c(a27));
          } else {
            if (M6.unsafe_fx_lt_(index31, 5) !== false) {
              if (M2.__lt__eq_(M2.length(M4.ast_c(a27)), 1) !== false) {
                var if_res20 = gen_literal(M4.ast_c(a27));
              } else {
                var if_res20 = gen_array(gen_exp, M5.map(function(b32) {
                  if (arguments.length !== 1) {
                    throw $rjs_core.racketContractError("arity mismatch");
                  } else {}
                  return M4.__rjs_quoted__.ast1($rjs_core.Symbol.make("literal"), M2.cons(b32, $rjs_core.Pair.makeList()), $rjs_core.Pair.makeList());
                }, M4.ast_c(a27)));
              }
              var if_res21 = if_res20;
            } else {
              var if_res21 = gen_char_class(M4.ast_c(a27));
            }
            var if_res22 = if_res21;
          }
          var if_res23 = if_res22;
        }
        var if_res24 = if_res23;
      }
      var if_res31 = if_res24;
    } else {
      if (M6.unsafe_fx_lt_(index31, 9) !== false) {
        if (M6.unsafe_fx_lt_(index31, 7) !== false) {
          var if_res26 = gen_array(gen_exp, M4.ast_c(a27));
        } else {
          if (M6.unsafe_fx_lt_(index31, 8) !== false) {
            var if_res25 = gen_array(gen_exp, M4.ast_c(a27));
          } else {
            var if_res25 = gen_array(gen_exp, M4.ast_c(a27));
          }
          var if_res26 = if_res25;
        }
        var if_res30 = if_res26;
      } else {
        if (M6.unsafe_fx_lt_(index31, 10) !== false) {
          var if_res29 = gen_array(gen_exp, M4.ast_c(a27));
        } else {
          if (M6.unsafe_fx_lt_(index31, 11) !== false) {
            var if_res28 = gen_array(gen_exp, M4.ast_c(a27));
          } else {
            if (M6.unsafe_fx_lt_(index31, 12) !== false) {
              var if_res27 = gen_array(gen_exp, M4.ast_c(a27));
            } else {
              var if_res27 = gen_array(gen_exp, M4.ast_c(a27));
            }
            var if_res28 = if_res27;
          }
          var if_res29 = if_res28;
        }
        var if_res30 = if_res29;
      }
      var if_res31 = if_res30;
    }
    return M2.format(temp46, if_res45, if_res31);
  };
  var gen_def = function(a33) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp51 = $rjs_core.UString.makeInternedImmutable("'~a' : { mode : waxeye.Modes.~a, exp : ~a }");
    var temp50 = M2.list__gt_string(M4.ast_c(M2.list_ref(M4.ast_c(a33), 0)));
    var tmp34 = M4.ast_t(M2.list_ref(M4.ast_c(a33), 1));
    if (M2.equal_p(tmp34, $rjs_core.Symbol.make("voidArrow")) !== false) {
      var if_res49 = $rjs_core.UString.makeInternedImmutable("VOIDING");
    } else {
      if (M2.equal_p(tmp34, $rjs_core.Symbol.make("pruneArrow")) !== false) {
        var if_res48 = $rjs_core.UString.makeInternedImmutable("PRUNING");
      } else {
        if (M2.equal_p(tmp34, $rjs_core.Symbol.make("leftArrow")) !== false) {
          var if_res47 = $rjs_core.UString.makeInternedImmutable("NORMAL");
        } else {
          var if_res47 = M2.rvoid();
        }
        var if_res48 = if_res47;
      }
      var if_res49 = if_res48;
    }
    return M2.format(temp51, temp50, if_res49, gen_exp(M2.list_ref(M4.ast_c(a33), 2)));
  };
  var gen_defs = function(a35) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return gen_map(gen_def, M4.ast_c(a35));
  };
  var gen_map = function(fn36, data37) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp53 = $rjs_core.UString.makeInternedImmutable("{~a}");
    M0.indent_plus_(1);
    if (M2.null_p(data37) !== false) {
      var if_res52 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var if_res52 = M2.string_append(fn36(M2.car(data37)), M2.apply(M2.string_append, M5.map(function(a39) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        return M2.string_append($rjs_core.UString.makeInternedImmutable(",\n"), M0.ind(), fn36(a39));
      }, M2.cdr(data37))));
    }
    var val38 = if_res52;
    M0.indent_(1);
    return M2.format(temp53, val38);
  };
  var gen_array = function(fn40, data41) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var temp56 = $rjs_core.UString.makeInternedImmutable("[~a]");
    M0.indent_plus_(1);
    if (M2.null_p(data41) !== false) {
      var if_res55 = $rjs_core.UString.makeInternedImmutable("");
    } else {
      var temp143 = M5.map(fn40, data41);
      var temp244 = $rjs_core.UString.makeInternedImmutable(", ");
      if (M2.variable_reference_constant_p(M3.__rjs_quoted__.add_between37) !== false) {
        var if_res54 = M3.__rjs_quoted__.add_between35(false, false, false, false, false, false, false, false, temp143, temp244);
      } else {
        var if_res54 = M3.__rjs_quoted__.add_between37(temp143, temp244);
      }
      var if_res55 = M2.apply(M2.string_append, if_res54);
    }
    var val42 = if_res55;
    M0.indent_(1);
    return M2.format(temp56, val42);
  };
  var gen_parser = function(grammar45) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M1.__times_name_prefix_times_ !== false) {
      var if_res57 = M2.string_append(M0.camel_case_upper(M1.__times_name_prefix_times_), $rjs_core.UString.makeInternedImmutable("Parser"));
    } else {
      var if_res57 = $rjs_core.UString.makeInternedImmutable("Parser");
    }
    var parser_name46 = if_res57;
    var gen_parser_class47 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var temp59 = $rjs_core.UString.makeInternedImmutable("\n~avar ~a = (function() {\n~a \n~a})();\n");
      var temp58 = M0.ind();
      M0.indent_plus_(1);
      var val48 = M2.format($rjs_core.UString.makeInternedImmutable("\n~avar parser = function() { return this; };\n~aparser.prototype = new waxeye.WaxeyeParser(\n~a~a~a\n~a~a, '~a');\n~areturn parser;\n"), M0.ind(), M0.ind(), M0.ind(), M0.ind(), gen_defs(grammar45), M0.ind(), M0.ind(), M1.__times_start_name_times_, M0.ind());
      M0.indent_(1);
      return M2.format(temp59, temp58, parser_name46, val48, M0.ind());
    };
    var gen_nodejs_imports49 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val50 = M2.format($rjs_core.UString.makeInternedImmutable("\nvar waxeye = waxeye;\nif (typeof module !== 'undefined') {\n~a// require from module system\n~awaxeye = require('waxeye');\n}\n"), M0.ind(), M0.ind());
      M0.indent_(1);
      return val50;
    };
    var gen_nodejs_exports51 = function() {
      if (arguments.length !== 0) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      M0.indent_plus_(1);
      var val52 = M2.format($rjs_core.UString.makeInternedImmutable("\n// Add to module system\nif (typeof module !== 'undefined') {\n~amodule.exports.~a = ~a;\n}\n"), M0.ind(), parser_name46, parser_name46);
      M0.indent_(1);
      return val52;
    };
    var temp61 = $rjs_core.UString.makeInternedImmutable("~a~a~a~a");
    if (M1.__times_file_header_times_ !== false) {
      var if_res60 = javascript_comment(M1.__times_file_header_times_);
    } else {
      var if_res60 = javascript_comment(M0.__times_default_header_times_);
    }
    return M2.format(temp61, if_res60, gen_nodejs_imports49(), gen_parser_class47(), gen_nodejs_exports51());
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get gen_javascript_parser() {
      return gen_parser;
    },
    get gen_javascript() {
      return gen_javascript;
    }
  };
})();
var $__collects_47_waxeye_47_set_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/set.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var within_set_p = function(a1740, b1741) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M0.null_p(a1740) !== false) {
      var if_res1064 = false;
    } else {
      var aa1742 = M0.car(a1740);
      if (M0.char_p(aa1742) !== false) {
        if (M0.char_eq__p(aa1742, b1741) !== false) {
          var if_res1059 = true;
        } else {
          if (M0.char_lt__p(aa1742, b1741) !== false) {
            var if_res1058 = within_set_p(M0.cdr(a1740), b1741);
          } else {
            var if_res1058 = false;
          }
          var if_res1059 = if_res1058;
        }
        var if_res1063 = if_res1059;
      } else {
        if (M0.char_lt__eq__p(M0.car(aa1742), b1741) !== false) {
          var if_res1060 = M0.char_lt__eq__p(b1741, M0.cdr(aa1742));
        } else {
          var if_res1060 = false;
        }
        if (if_res1060 !== false) {
          var if_res1062 = true;
        } else {
          if (M0.char_lt__p(M0.cdr(aa1742), b1741) !== false) {
            var if_res1061 = within_set_p(M0.cdr(a1740), b1741);
          } else {
            var if_res1061 = false;
          }
          var if_res1062 = if_res1061;
        }
        var if_res1063 = if_res1062;
      }
      var if_res1064 = if_res1063;
    }
    return if_res1064;
  };
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get within_set_p() {
      return within_set_p;
    }
  };
})();
var $__collects_47_waxeye_47_fa_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/fa.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var let_result349 = M0.make_struct_type($rjs_core.Symbol.make("edge"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("edge"));
  var struct_646 = let_result349.getAt(0);
  var make_647 = let_result349.getAt(1);
  var __p648 = let_result349.getAt(2);
  var __ref649 = let_result349.getAt(3);
  var __set_bang_650 = let_result349.getAt(4);
  var let_result350 = M0.values(struct_646, make_647, __p648, M0.make_struct_field_accessor(__ref649, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_accessor(__ref649, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_accessor(__ref649, 2, $rjs_core.Symbol.make("v")), M0.make_struct_field_mutator(__set_bang_650, 0, $rjs_core.Symbol.make("t")), M0.make_struct_field_mutator(__set_bang_650, 1, $rjs_core.Symbol.make("s")), M0.make_struct_field_mutator(__set_bang_650, 2, $rjs_core.Symbol.make("v")));
  var struct_edge = let_result350.getAt(0);
  var edge1 = let_result350.getAt(1);
  var edge_p = let_result350.getAt(2);
  var edge_t = let_result350.getAt(3);
  var edge_s = let_result350.getAt(4);
  var edge_v = let_result350.getAt(5);
  var set_edge_t_bang_ = let_result350.getAt(6);
  var set_edge_s_bang_ = let_result350.getAt(7);
  var set_edge_v_bang_ = let_result350.getAt(8);
  var let_result351 = M0.make_struct_type($rjs_core.Symbol.make("state"), false, 2, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(), false, $rjs_core.Symbol.make("state"));
  var struct_651 = let_result351.getAt(0);
  var make_652 = let_result351.getAt(1);
  var __p653 = let_result351.getAt(2);
  var __ref654 = let_result351.getAt(3);
  var __set_bang_655 = let_result351.getAt(4);
  var let_result352 = M0.values(struct_651, make_652, __p653, M0.make_struct_field_accessor(__ref654, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_accessor(__ref654, 1, $rjs_core.Symbol.make("match")), M0.make_struct_field_mutator(__set_bang_655, 0, $rjs_core.Symbol.make("edges")), M0.make_struct_field_mutator(__set_bang_655, 1, $rjs_core.Symbol.make("match")));
  var struct_state = let_result352.getAt(0);
  var state2 = let_result352.getAt(1);
  var state_p = let_result352.getAt(2);
  var state_edges = let_result352.getAt(3);
  var state_match = let_result352.getAt(4);
  var set_state_edges_bang_ = let_result352.getAt(5);
  var set_state_match_bang_ = let_result352.getAt(6);
  var let_result353 = M0.make_struct_type($rjs_core.Symbol.make("fa"), false, 3, 0, false, M0.rnull, M0.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2), false, $rjs_core.Symbol.make("fa"));
  var struct_656 = let_result353.getAt(0);
  var make_657 = let_result353.getAt(1);
  var __p658 = let_result353.getAt(2);
  var __ref659 = let_result353.getAt(3);
  var __set_bang_660 = let_result353.getAt(4);
  var let_result354 = M0.values(struct_656, make_657, __p658, M0.make_struct_field_accessor(__ref659, 0, $rjs_core.Symbol.make("type")), M0.make_struct_field_accessor(__ref659, 1, $rjs_core.Symbol.make("states")), M0.make_struct_field_accessor(__ref659, 2, $rjs_core.Symbol.make("mode")));
  var struct_fa = let_result354.getAt(0);
  var fa3 = let_result354.getAt(1);
  var fa_p = let_result354.getAt(2);
  var fa_type = let_result354.getAt(3);
  var fa_states = let_result354.getAt(4);
  var fa_mode = let_result354.getAt(5);
  var __rjs_quoted__ = {};
  __rjs_quoted__.set_edge_v_bang_ = set_edge_v_bang_;
  __rjs_quoted__.set_edge_t_bang_ = set_edge_t_bang_;
  __rjs_quoted__.state2 = state2;
  __rjs_quoted__.set_edge_s_bang_ = set_edge_s_bang_;
  __rjs_quoted__.state_match = state_match;
  __rjs_quoted__.struct_fa = struct_fa;
  __rjs_quoted__.set_state_edges_bang_ = set_state_edges_bang_;
  __rjs_quoted__.edge_s = edge_s;
  __rjs_quoted__.fa_p = fa_p;
  __rjs_quoted__.edge_t = edge_t;
  __rjs_quoted__.set_state_match_bang_ = set_state_match_bang_;
  __rjs_quoted__.struct_state = struct_state;
  __rjs_quoted__.edge1 = edge1;
  __rjs_quoted__.edge_p = edge_p;
  __rjs_quoted__.state_p = state_p;
  __rjs_quoted__.fa_type = fa_type;
  __rjs_quoted__.fa_mode = fa_mode;
  __rjs_quoted__.state_edges = state_edges;
  __rjs_quoted__.fa_states = fa_states;
  __rjs_quoted__.edge_v = edge_v;
  __rjs_quoted__.struct_edge = struct_edge;
  __rjs_quoted__.fa3 = fa3;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get struct_edge() {
      return struct_edge;
    },
    get edge_p() {
      return edge_p;
    },
    get edge_t() {
      return edge_t;
    },
    get edge_s() {
      return edge_s;
    },
    get edge_v() {
      return edge_v;
    },
    get set_edge_t_bang_() {
      return set_edge_t_bang_;
    },
    get set_edge_s_bang_() {
      return set_edge_s_bang_;
    },
    get set_edge_v_bang_() {
      return set_edge_v_bang_;
    },
    get struct_state() {
      return struct_state;
    },
    get state_p() {
      return state_p;
    },
    get state_edges() {
      return state_edges;
    },
    get state_match() {
      return state_match;
    },
    get set_state_edges_bang_() {
      return set_state_edges_bang_;
    },
    get set_state_match_bang_() {
      return set_state_match_bang_;
    },
    get struct_fa() {
      return struct_fa;
    },
    get fa_p() {
      return fa_p;
    },
    get fa_type() {
      return fa_type;
    },
    get fa_states() {
      return fa_states;
    },
    get fa_mode() {
      return fa_mode;
    }
  };
})();
var $__collects_47_waxeye_47_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "collects/waxeye/parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__collects_47_waxeye_47_set_46_rkt_46_js__;
  var M1 = $__runtime_47_kernel_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M3 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var let_result355 = M1.make_struct_type($rjs_core.Symbol.make("cache-item"), false, 5, 0, false, M1.rnull, M1.current_inspector(), false, $rjs_core.Pair.makeList(0, 1, 2, 3, 4), false, $rjs_core.Symbol.make("cache-item"));
  var struct_661 = let_result355.getAt(0);
  var make_662 = let_result355.getAt(1);
  var __p663 = let_result355.getAt(2);
  var __ref664 = let_result355.getAt(3);
  var __set_bang_665 = let_result355.getAt(4);
  var let_result356 = M1.values(struct_661, make_662, __p663, M1.make_struct_field_accessor(__ref664, 0, $rjs_core.Symbol.make("val")), M1.make_struct_field_accessor(__ref664, 1, $rjs_core.Symbol.make("pos")), M1.make_struct_field_accessor(__ref664, 2, $rjs_core.Symbol.make("line")), M1.make_struct_field_accessor(__ref664, 3, $rjs_core.Symbol.make("col")), M1.make_struct_field_accessor(__ref664, 4, $rjs_core.Symbol.make("cr")));
  var struct_cache_item = let_result356.getAt(0);
  var cache_item1 = let_result356.getAt(1);
  var cache_item_p = let_result356.getAt(2);
  var cache_item_val = let_result356.getAt(3);
  var cache_item_pos = let_result356.getAt(4);
  var cache_item_line = let_result356.getAt(5);
  var cache_item_col = let_result356.getAt(6);
  var cache_item_cr = let_result356.getAt(7);
  var make_parser = function(start666, eof_check667, automata668) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return function(input669) {
      if (arguments.length !== 1) {
        throw $rjs_core.racketContractError("arity mismatch");
      } else {}
      var input_len670 = M1.string_length(input669);
      var input_pos671 = 0;
      var line672 = 1;
      var column673 = 0;
      var last_cr674 = false;
      var error_pos675 = 0;
      var error_line676 = 1;
      var error_col677 = 0;
      var error_expected678 = $rjs_core.Pair.makeList();
      var fa_stack679 = $rjs_core.Pair.makeList();
      var cache680 = M1.make_hash();
      var match_automaton681 = function(index689) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var key690 = M1.cons(index689, input_pos671);
        var value691 = M1.hash_ref(cache680, key690, false);
        if (value691 !== false) {
          restore_pos686(cache_item_pos(value691), cache_item_line(value691), cache_item_col(value691), cache_item_cr(value691));
          var if_res366 = cache_item_val(value691);
        } else {
          var automaton692 = M1.vector_ref(automata668, index689);
          var type693 = M3.fa_type(automaton692);
          var states694 = M3.fa_states(automaton692);
          var automaton_mode695 = M3.fa_mode(automaton692);
          fa_stack679 = M1.cons(M1.cons(automaton692, false), fa_stack679);
          var start_pos697 = input_pos671;
          var start_line698 = line672;
          var start_col699 = column673;
          var start_cr700 = last_cr674;
          var res701 = match_state682(M1.vector_ref(states694, 0));
          if (M1.equal_p(type693, $rjs_core.Symbol.make("&")) !== false) {
            restore_pos686(start_pos697, start_line698, start_col699, start_cr700);
            var if_res365 = M1.not(M1.not(res701));
          } else {
            if (M1.equal_p(type693, $rjs_core.Symbol.make("!")) !== false) {
              restore_pos686(start_pos697, start_line698, start_col699, start_cr700);
              if (res701 !== false) {
                var if_res357 = update_error688();
              } else {
                var if_res357 = true;
              }
              var if_res364 = if_res357;
            } else {
              if (res701 !== false) {
                var tmp702 = automaton_mode695;
                if (M1.equal_p(tmp702, $rjs_core.Symbol.make("voidArrow")) !== false) {
                  var if_res362 = true;
                } else {
                  if (M1.equal_p(tmp702, $rjs_core.Symbol.make("pruneArrow")) !== false) {
                    if (M1.null_p(res701) !== false) {
                      var if_res359 = true;
                    } else {
                      if (M1.null_p(M1.cdr(res701)) !== false) {
                        var if_res358 = M1.car(res701);
                      } else {
                        var if_res358 = M2.__rjs_quoted__.ast1(type693, res701, M1.cons(start_pos697, input_pos671));
                      }
                      var if_res359 = if_res358;
                    }
                    var if_res361 = if_res359;
                  } else {
                    if (M1.equal_p(tmp702, $rjs_core.Symbol.make("leftArrow")) !== false) {
                      var if_res360 = M2.__rjs_quoted__.ast1(type693, res701, M1.cons(start_pos697, input_pos671));
                    } else {
                      var if_res360 = M1.error($rjs_core.Symbol.make("waxeye"), $rjs_core.UString.makeInternedImmutable("Unknown automaton mode"));
                    }
                    var if_res361 = if_res360;
                  }
                  var if_res362 = if_res361;
                }
                var if_res363 = if_res362;
              } else {
                var if_res363 = update_error688();
              }
              var if_res364 = if_res363;
            }
            var if_res365 = if_res364;
          }
          var v696 = if_res365;
          fa_stack679 = M1.cdr(fa_stack679);
          M1.hash_set_bang_(cache680, key690, cache_item1(v696, input_pos671, line672, column673, last_cr674));
          var if_res366 = v696;
        }
        return if_res366;
      };
      var match_state682 = function(state703) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var res704 = match_edges683(M3.state_edges(state703));
        if (res704 !== false) {
          var if_res368 = res704;
        } else {
          if (M3.state_match(state703) !== false) {
            var if_res367 = $rjs_core.Pair.makeList();
          } else {
            var if_res367 = false;
          }
          var if_res368 = if_res367;
        }
        return if_res368;
      };
      var match_edges683 = function(edges705) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.null_p(edges705) !== false) {
          var if_res370 = false;
        } else {
          var res706 = match_edge684(M1.car(edges705));
          if (res706 !== false) {
            var if_res369 = res706;
          } else {
            var if_res369 = match_edges683(M1.cdr(edges705));
          }
          var if_res370 = if_res369;
        }
        return if_res370;
      };
      var match_edge684 = function(edge707) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var start_pos708 = input_pos671;
        var start_line709 = line672;
        var start_col710 = column673;
        var start_cr711 = last_cr674;
        var t712 = M3.edge_t(edge707);
        if (M1.equal_p($rjs_core.Symbol.make("wild"), t712) !== false) {
          if (M1.__lt_(input_pos671, input_len670) !== false) {
            var if_res371 = mv685();
          } else {
            var if_res371 = record_error687();
          }
          var if_res379 = if_res371;
        } else {
          if (M1.char_p(t712) !== false) {
            if (M1.__lt_(input_pos671, input_len670) !== false) {
              var if_res372 = M1.equal_p(M1.string_ref(input669, input_pos671), t712);
            } else {
              var if_res372 = false;
            }
            if (if_res372 !== false) {
              var if_res373 = mv685();
            } else {
              var if_res373 = record_error687();
            }
            var if_res378 = if_res373;
          } else {
            if (M1.pair_p(t712) !== false) {
              if (M1.__lt_(input_pos671, input_len670) !== false) {
                var if_res374 = M0.within_set_p(t712, M1.string_ref(input669, input_pos671));
              } else {
                var if_res374 = false;
              }
              if (if_res374 !== false) {
                var if_res375 = mv685();
              } else {
                var if_res375 = record_error687();
              }
              var if_res377 = if_res375;
            } else {
              if (M1.integer_p(t712) !== false) {
                var if_res376 = match_automaton681(t712);
              } else {
                var if_res376 = false;
              }
              var if_res377 = if_res376;
            }
            var if_res378 = if_res377;
          }
          var if_res379 = if_res378;
        }
        var res713 = if_res379;
        if (res713 !== false) {
          var tran_res714 = match_state682(M1.vector_ref(M3.fa_states(M1.caar(fa_stack679)), M3.edge_s(edge707)));
          if (tran_res714 !== false) {
            var or_part715 = M3.edge_v(edge707);
            if (or_part715 !== false) {
              var if_res380 = or_part715;
            } else {
              var if_res380 = M1.equal_p(res713, true);
            }
            if (if_res380 !== false) {
              var if_res381 = tran_res714;
            } else {
              var if_res381 = M1.cons(res713, tran_res714);
            }
            var if_res382 = if_res381;
          } else {
            restore_pos686(start_pos708, start_line709, start_col710, start_cr711);
            var if_res382 = false;
          }
          var if_res383 = if_res382;
        } else {
          var if_res383 = false;
        }
        return if_res383;
      };
      var mv685 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var ch716 = M1.string_ref(input669, input_pos671);
        input_pos671 = input_pos671 + 1;
        if (M1.char_eq__p(ch716, $rjs_core.Char.charFromCodepoint(13)) !== false) {
          line672 = line672 + 1;
          column673 = 0;
          last_cr674 = true;
          var if_res386 = null;
        } else {
          if (M1.char_eq__p(ch716, $rjs_core.Char.charFromCodepoint(10)) !== false) {
            if (last_cr674 !== false) {
              var if_res384 = M1.rvoid();
            } else {
              line672 = line672 + 1;
              column673 = 0;
              var if_res384 = null;
            }
            var if_res385 = if_res384;
          } else {
            column673 = column673 + 1;
            var if_res385 = null;
          }
          if_res385;
          last_cr674 = false;
          var if_res386 = null;
        }
        if_res386;
        return ch716;
      };
      var restore_pos686 = function(p717, l718, c719, cr720) {
        if (arguments.length !== 4) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        input_pos671 = p717;
        line672 = l718;
        column673 = c719;
        last_cr674 = cr720;
        return null;
      };
      var record_error687 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__lt_(error_pos675, input_pos671) !== false) {
          error_pos675 = input_pos671;
          error_line676 = line672;
          error_col677 = column673;
          error_expected678 = $rjs_core.Pair.makeList();
          var if_res387 = null;
        } else {
          var if_res387 = M1.rvoid();
        }
        if_res387;
        if (M1.__lt__eq_(error_pos675, input_pos671) !== false) {
          fa_stack679 = M1.cons(M1.cons(M1.caar(fa_stack679), true), M1.cdr(fa_stack679));
          var if_res388 = null;
        } else {
          var if_res388 = M1.rvoid();
        }
        if_res388;
        return false;
      };
      var update_error688 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.cdar(fa_stack679) !== false) {
          error_expected678 = M1.cons(M3.fa_type(M1.caar(fa_stack679)), error_expected678);
          var if_res389 = null;
        } else {
          var if_res389 = M1.rvoid();
        }
        if_res389;
        return false;
      };
      var do_eof_check721 = function(res724) {
        if (arguments.length !== 1) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (res724 !== false) {
          if (eof_check667 !== false) {
            var if_res390 = M1.__lt_(input_pos671, input_len670);
          } else {
            var if_res390 = false;
          }
          if (if_res390 !== false) {
            var if_res391 = M2.__rjs_quoted__.parse_error2(error_pos675, error_line676, error_col677, error_expected678, received722(), snippet723());
          } else {
            var if_res391 = res724;
          }
          var if_res392 = if_res391;
        } else {
          var if_res392 = M2.__rjs_quoted__.parse_error2(error_pos675, error_line676, error_col677, error_expected678, received722(), snippet723());
        }
        return if_res392;
      };
      var received722 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        if (M1.__eq_(error_pos675, input_len670) !== false) {
          var if_res393 = $rjs_core.UString.makeInternedImmutable("<end of input>");
        } else {
          var if_res393 = M1.substring(input669, error_pos675, error_pos675 + 1);
        }
        return if_res393;
      };
      var snippet723 = function() {
        if (arguments.length !== 0) {
          throw $rjs_core.racketContractError("arity mismatch");
        } else {}
        var snippet_length_max725 = 80;
        var line_finder726 = function(index_test727, index_move728) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          var loop729 = function(i730, j731) {
            if (arguments.length !== 2) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            if (index_test727(i730) !== false) {
              if (M1.__lt_(j731, snippet_length_max725) !== false) {
                var ch732 = M1.string_ref(input669, index_move728(i730));
                var or_part733 = M1.char_eq__p(ch732, $rjs_core.Char.charFromCodepoint(10));
                if (or_part733 !== false) {
                  var if_res394 = or_part733;
                } else {
                  var if_res394 = M1.char_eq__p(ch732, $rjs_core.Char.charFromCodepoint(13));
                }
                var if_res395 = M1.not(if_res394);
              } else {
                var if_res395 = false;
              }
              var if_res396 = if_res395;
            } else {
              var if_res396 = false;
            }
            if (if_res396 !== false) {
              var if_res397 = loop729(index_move728(i730), j731 + 1);
            } else {
              var if_res397 = i730;
            }
            return if_res397;
          };
          return loop729(error_pos675, 0);
        };
        var find_line_start734 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder726(function(i735) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__gt_(i735, 0);
          }, M1.sub1);
        };
        var find_line_end736 = function() {
          if (arguments.length !== 0) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return line_finder726(function(i737) {
            if (arguments.length !== 1) {
              throw $rjs_core.racketContractError("arity mismatch");
            } else {}
            return M1.__lt_(i737, input_len670 - 1);
          }, M1.add1);
        };
        var build_snippet738 = function(start739, end740) {
          if (arguments.length !== 2) {
            throw $rjs_core.racketContractError("arity mismatch");
          } else {}
          return M1.string_append(M1.substring(input669, start739, M1.min(end740, input_len670)), $rjs_core.UString.makeInternedImmutable("\n"), M1.make_string(error_pos675 - start739, $rjs_core.Char.charFromCodepoint(32)), $rjs_core.UString.makeInternedImmutable("^"));
        };
        var line_start741 = find_line_start734();
        var line_end742 = find_line_end736();
        if (M1.__lt_(line_end742 - line_start741, snippet_length_max725) !== false) {
          var if_res398 = build_snippet738(line_start741, line_end742 + 1);
        } else {
          var s_len743 = error_pos675 - line_start741;
          var e_len744 = (line_end742 + 1) - error_pos675;
          var half_max745 = snippet_length_max725 / 2;
          var s746 = M1.min(s_len743, half_max745);
          var e747 = M1.min(e_len744, half_max745);
          var ss748 = s746 + (half_max745 - e747);
          var ee749 = e747 + (half_max745 - s746);
          var if_res398 = build_snippet738(error_pos675 - ss748, error_pos675 + ee749);
        }
        return if_res398;
      };
      return do_eof_check721(match_automaton681(start666));
    };
  };
  var __rjs_quoted__ = {};
  __rjs_quoted__.cache_item_p = cache_item_p;
  __rjs_quoted__.cache_item_cr = cache_item_cr;
  __rjs_quoted__.cache_item_pos = cache_item_pos;
  __rjs_quoted__.cache_item_val = cache_item_val;
  __rjs_quoted__.cache_item1 = cache_item1;
  __rjs_quoted__.struct_cache_item = struct_cache_item;
  __rjs_quoted__.cache_item_col = cache_item_col;
  __rjs_quoted__.cache_item_line = cache_item_line;
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get make_parser() {
      return make_parser;
    }
  };
})();
var $__modules_47_grammar_45_parser_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/grammar-parser.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__runtime_47_kernel_46_rkt_46_js__;
  var M1 = $__collects_47_waxeye_47_parser_46_rkt_46_js__;
  var M2 = $__collects_47_waxeye_47_fa_46_rkt_46_js__;
  var automata = M0.vector(M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("grammar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(1, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("definition"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 2, false), M2.__rjs_quoted__.edge1(18, 2, false), M2.__rjs_quoted__.edge1(19, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alternation"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(20, 2, false)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(3, 1, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sequence"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(4, 1, false)), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("unit"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(5, 0, false), M2.__rjs_quoted__.edge1(6, 0, false), M2.__rjs_quoted__.edge1(8, 1, false), M2.__rjs_quoted__.edge1(21, 3, false), M2.__rjs_quoted__.edge1(7, 2, false), M2.__rjs_quoted__.edge1(9, 2, false), M2.__rjs_quoted__.edge1(10, 2, false), M2.__rjs_quoted__.edge1(12, 2, false), M2.__rjs_quoted__.edge1(16, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(28, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(2, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(22, 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("prefix"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(33), $rjs_core.Char.charFromCodepoint(38), M0.cons($rjs_core.Char.charFromCodepoint(42), $rjs_core.Char.charFromCodepoint(43)), $rjs_core.Char.charFromCodepoint(58), $rjs_core.Char.charFromCodepoint(63)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("label"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("action"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(64), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 3, true), M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(23, 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(62), 7, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(8, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 8, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("identifier"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(90)), $rjs_core.Char.charFromCodepoint(95), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(122))), 1, false), M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("literal"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(30, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(29, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("caseLiteral"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(32, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(31, 4, false), M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 5, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(11, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 6, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("lChar"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(34, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34), $rjs_core.Char.charFromCodepoint(39), $rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(33, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("charClass"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(91), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(35, 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(13, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("range"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 1, false), M2.__rjs_quoted__.edge1(15, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(14, 3, false), M2.__rjs_quoted__.edge1(15, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("char"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false), M2.__rjs_quoted__.edge1(38, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(45), M0.cons($rjs_core.Char.charFromCodepoint(92), $rjs_core.Char.charFromCodepoint(93)), $rjs_core.Char.charFromCodepoint(110), $rjs_core.Char.charFromCodepoint(114), $rjs_core.Char.charFromCodepoint(116)), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(37, 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(36, 5, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("hex"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(117), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(123), 3, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 5, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 6, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 7, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 8, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list(M0.cons($rjs_core.Char.charFromCodepoint(48), $rjs_core.Char.charFromCodepoint(57)), M0.cons($rjs_core.Char.charFromCodepoint(65), $rjs_core.Char.charFromCodepoint(70)), M0.cons($rjs_core.Char.charFromCodepoint(97), $rjs_core.Char.charFromCodepoint(102))), 9, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(125), 10, true)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("wildCard"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(46), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("leftArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(45), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("pruneArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(61), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("voidArrow"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(60), 1, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(58), 2, true)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("leftArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("alt"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(124), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("open"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(40), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("close"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(41), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("comma"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(44), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(27, 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("sComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(35), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(40, 2, false), M2.__rjs_quoted__.edge1(26, 3, false), M2.__rjs_quoted__.edge1(39, 3, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("mComment"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(25, 2, false), M2.__rjs_quoted__.edge1(41, 3, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 4, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 5, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("endOfLine"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 1, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false), M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(13), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(10), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("ws"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(9), $rjs_core.Char.charFromCodepoint(32)), 0, false), M2.__rjs_quoted__.edge1(26, 0, false), M2.__rjs_quoted__.edge1(24, 0, false), M2.__rjs_quoted__.edge1(25, 0, false)), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(17, 1, false), M2.__rjs_quoted__.edge1(18, 1, false), M2.__rjs_quoted__.edge1(19, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(39)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(M0.list($rjs_core.Char.charFromCodepoint(34)), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(93), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(92), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Symbol.make("wild"), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1(26, 1, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")), M2.__rjs_quoted__.fa3($rjs_core.Symbol.make("!"), M0.vector(M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(42), 1, false)), false), M2.__rjs_quoted__.state2(M0.list(M2.__rjs_quoted__.edge1($rjs_core.Char.charFromCodepoint(47), 2, false)), false), M2.__rjs_quoted__.state2(M0.list(), true)), $rjs_core.Symbol.make("voidArrow")));
  var grammar_parser = M1.make_parser(0, true, automata);
  var __rjs_quoted__ = {};
  ;
  return {
    get __rjs_quoted__() {
      return __rjs_quoted__;
    },
    get grammar_parser() {
      return grammar_parser;
    }
  };
})();
var $__modules_47_racketscript_46_rkt_46_js__ = (function() {
  "use strict";
  var __moduleName = "modules/racketscript.rkt.js";
  var $rjs_core = $__runtime_47_core_46_js__;
  var M0 = $__links_47_racketscript_45_compiler_47_racketscript_47_interop_46_rkt_46_js__;
  var M1 = $__modules_47_gen_46_rkt_46_js__;
  var M2 = $__runtime_47_kernel_46_rkt_46_js__;
  var M3 = $__links_47_racketscript_45_compiler_47_racketscript_47_private_47_interop_46_rkt_46_js__;
  var M4 = $__modules_47_transform_46_rkt_46_js__;
  var M5 = $__collects_47_waxeye_47_ast_46_rkt_46_js__;
  var M6 = $__modules_47_javascript_46_rkt_46_js__;
  var M7 = $__modules_47_grammar_45_parser_46_rkt_46_js__;
  var syntax_error_message = function(error1) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return M2.string_append($rjs_core.UString.makeInternedImmutable("syntax error in grammar: "), M5.parse_error__gt_string(error1));
  };
  var transform_and_set_start42 = function(grammar_or_error33, start_name14, start_name25) {
    if (arguments.length !== 3) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    var grammar_or_error6 = grammar_or_error33;
    if (start_name25 !== false) {
      var if_res1 = start_name14;
    } else {
      var if_res1 = $rjs_core.UString.makeInternedImmutable("");
    }
    var start_name7 = if_res1;
    if (M5.ast_p(grammar_or_error6) !== false) {
      var grammar8 = grammar_or_error6;
      M4.transform_grammar(grammar8);
      M1.start_nt_bang_(start_name7, grammar8);
      var if_res2 = grammar8;
    } else {
      var if_res2 = grammar_or_error6;
    }
    return if_res2;
  };
  var cl3 = function(grammar_or_error9) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error9, false, false);
  };
  var cl4 = function(grammar_or_error10, start_name111) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return transform_and_set_start42(grammar_or_error10, start_name111, true);
  };
  var transform_and_set_start = $rjs_core.attachProcedureArity(function() {
    var fixed_lam5 = {
      '1': cl3,
      '2': cl4
    }[arguments.length];
    if (fixed_lam5 !== undefined) {
      return fixed_lam5.apply(null, arguments);
    } else {
      return M2.error($rjs_core.UString.makeInternedImmutable("case-lambda: invalid case"));
    }
  }, [1, 2]);
  var js_result = function(grammar_or_error12, fn13) {
    if (arguments.length !== 2) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    if (M5.ast_p(grammar_or_error12) !== false) {
      var if_res6 = [M0.js_string(fn13(grammar_or_error12)), null];
    } else {
      var if_res6 = [null, M0.js_string(syntax_error_message(grammar_or_error12))];
    }
    return if_res6;
  };
  var grammar_to_ast_string = function(grammar_src14) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(M7.grammar_parser(M0.racket_string(grammar_src14)), M5.ast__gt_string);
  };
  var grammar_to_transformed_ast_string = function(grammar_src15) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M7.grammar_parser(M0.racket_string(grammar_src15))), M5.ast__gt_string);
  };
  var generate_parser = function(grammar_src16) {
    if (arguments.length !== 1) {
      throw $rjs_core.racketContractError("arity mismatch");
    } else {}
    return js_result(transform_and_set_start(M7.grammar_parser(M0.racket_string(grammar_src16))), M6.gen_javascript_parser);
  };
  window.waxeyeCompiler = {
    'grammarToAstString': grammar_to_ast_string,
    'grammarToTransformedAstString': grammar_to_transformed_ast_string,
    'generateParser': generate_parser
  };
  var __rjs_quoted__ = {};
  ;
  return {get __rjs_quoted__() {
      return __rjs_quoted__;
    }};
})();
